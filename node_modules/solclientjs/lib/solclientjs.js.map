{"version":3,"file":"solclient.js","mappings":";4BAEAA,EAAOC,QAAU,EAAjB,sBCFA,MAAM,OAAEC,GAAW,EAAQ,OACrB,KAAEC,GAAS,EAAQ,OACnB,QAAEC,GAAY,EAAQ,OACtB,IAAEC,GAAQ,EAAQ,OAClB,KAAEC,GAAS,EAAQ,MAEzBN,EAAOC,QAAQC,OAASA,EACxBF,EAAOC,QAAQE,KAAOA,EACtBH,EAAOC,QAAQG,QAAUA,EACzBJ,EAAOC,QAAQI,IAAMA,EACrBL,EAAOC,QAAQK,KAAOA,YCAtB,MAAMC,EAAU,oEACVC,EAAU,EACb,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAC7B,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,IAAK,GAAI,GAAI,EAAG,IAAK,GAAI,GAG5B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACtB,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GACzB,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAC5B,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAG5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAG5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAE/B,MAAMC,UAAoBC,OAI1B,MAAMC,EAAgB,CAOpB,aAAAC,CAAcC,GACZ,IAAIC,EAAS,GACTC,EAAI,EACR,EAAG,CACD,MAAMC,EAAOH,EAAMI,WAAWF,KACxBG,EAAOL,EAAMI,WAAWF,KACxBI,EAAON,EAAMI,WAAWF,KAExBK,EAAOJ,GAAQ,EACfK,GAAgB,EAAPL,IAAa,EAAME,GAAQ,EAC1C,IAAII,GAAgB,GAAPJ,IAAc,EAAMC,GAAQ,EACrCI,EAAc,GAAPJ,EAEPK,MAAMN,GACRI,EAAOC,EAAO,GACLC,MAAML,KACfI,EAAO,IAGTT,GAAUP,EAAQkB,OAAOL,GACzBN,GAAUP,EAAQkB,OAAOJ,GACzBP,GAAUP,EAAQkB,OAAOH,GACzBR,GAAUP,EAAQkB,OAAOF,EAC3B,OAASR,EAAIF,EAAMa,QAEnB,OAAOZ,CACT,EAQA,aAAAa,CAAcd,GACZ,IAAIC,EAAS,GACTC,EAAI,EAER,EAAG,CACD,KAAOP,EAAQK,EAAMI,WAAWF,IAAM,IACpCA,IAEF,MAAMK,EAAOZ,EAAQK,EAAMI,WAAWF,MAChCM,EAAOb,EAAQK,EAAMI,WAAWF,MAChCO,EAAOd,EAAQK,EAAMI,WAAWF,MAChCQ,EAAOf,EAAQK,EAAMI,WAAWF,MAEtC,GAAIK,EAAO,GAAKC,EAAO,GAAKC,EAAO,GAAKC,EAAO,EAG7C,MAAM,IAAId,EAAY,4BAGxB,MAAMO,EAAQI,GAAQ,EAAMC,GAAQ,EAC9BH,GAAgB,GAAPG,IAAc,EAAMC,GAAQ,EACrCH,GAAgB,EAAPG,IAAa,EAAKC,EAEjCT,GAAUc,OAAOC,aAAab,GAEjB,KAATM,IACFR,GAAUc,OAAOC,aAAaX,IAEnB,KAATK,IACFT,GAAUc,OAAOC,aAAaV,GAElC,OAASJ,EAAIF,EAAMa,OAAS,GAE5B,OAAOZ,CACT,GAGIgB,EAA2B,oBAAXC,OAChBC,EAA8B,oBAAXC,OACnBC,EAA0B,oBAATC,KACjBC,EAAiBJ,IAAcE,GAAWJ,GAC5C,CACAlB,cAAeyB,GAAOJ,OAAOK,KAAKD,EAAK,UAAUE,SAAS,UAC1DZ,cAAeU,GAAOJ,OAAOK,KAAKD,EAAK,UAAUE,SAAS,WAE1D,CAAC,EAGCC,EAAmC,oBAAXT,OAC1B,CACAnB,cAAemB,OAAa,KAAIU,GAAKV,OAAa,KAAEU,GAAK,KACzDd,cAAeI,OAAa,KAAIW,GAAKX,OAAa,KAAEW,GAAK,MAEzD,CAAC,EAGCxC,EAAS,CACbyC,OAASH,EAAc5B,eACdwB,EAAcxB,eACdD,EAAcC,cACvBgC,OAASJ,EAAcb,eACdS,EAAcT,eACdhB,EAAcgB,eAGzB3B,EAAOC,QAAQC,OAASA,YCjKxB,MAAMC,EAAO,CACX0C,IAAG,CAACC,EAAKC,EAAOC,IACNF,IAAQC,GAAW,GAAQC,GAAW,EAGhD,GAAAC,CAAIC,EAAQJ,EAAKC,EAAOC,GACtB,MAAMG,GAAW,GAAKH,GAAW,EAGjC,OADaE,IAAWC,GAAWJ,IADfD,EAAMK,IAAYJ,CAGxC,GAGF/C,EAAOC,QAAQE,KAAOA,kBCbtB,MAAMG,EAAO,EAAQ,OAEf,aAAE8C,EAAY,eAAEC,GAAmB,EAAQ,MAG3CC,EAAa,cAabC,EAAiB3B,OAAOC,aAAa,EAAG,GACxC2B,EAAmB5B,OAAOC,aAAa,EAAG,EAAG,GAC7C4B,EAAkB7B,OAAOC,aAAa,EAAG,EAAG,EAAG,GAE/C6B,EAA0B,KAC1BC,EAAqB,SAErBC,EAA6B,MAiBnC,SAASC,EAAmBC,GAC1B,MAAMC,EAAaD,EAAKpC,OAClBsC,EAAW,IAAIC,YAAYF,GAC3BG,EAAa,IAAIC,WAAWH,EAAU,EAAGD,GAC/C,IAAK,IAAIhD,EAAI,EAAGA,EAAIgD,EAAYhD,IAC9BmD,EAAWnD,GAAK+C,EAAK7C,WAAWF,GAElC,OAAOmD,CACT,CAmDA,SAASE,EAAWC,GAMlB,GAAc,IAAVA,EAAa,OAAOZ,EACxB,GAAIY,EAAQ,EAAG,CACb,GAAIA,EAAQ,IACV,OAAOb,EAAmB5B,OAAOC,aAAawC,GAEhD,GAAIA,EAAQ,MACV,OAAOd,EAAiB3B,OAAOC,aAAawC,GAAS,GAAKzC,OAAOC,aAAqB,IAARwC,EAElF,CAEA,OACIzC,OAAOC,aAAcwC,GAAS,GAAM,KACpCzC,OAAOC,aAAcwC,GAAS,GAAM,KACpCzC,OAAOC,aAAcwC,GAAS,EAAK,KACnCzC,OAAOC,aAAqB,IAARwC,EAE1B,CAmGA,SAASC,EAAYR,GAGnB,OACKA,EAAK7C,WAAW,GAAK0C,GACrBG,EAAK7C,WAAW,IAAM,KACtB6C,EAAK7C,WAAW,IAAM,GACtB6C,EAAK7C,WAAW,EAEvB,CAyCA,MAAMb,EAAU,CACdmE,oBArNF,SAA6BC,GAC3B,IAAKA,EAAI,MAAO,GAChB,MAAMC,EAAMD,EAAGE,WACTC,EAAK,IAAIR,WAAWK,GAC1B,GAAIC,EAAMb,EACR,OAAOhC,OAAOC,aAAa+C,MAAM,KAAMD,GAGzC,IAAIE,EAAI,EACJC,EAAI,GACR,KAAOD,EAAIJ,GAETK,GAAKlD,OAAOC,aAAa+C,MAAM,KAAMD,EAAGI,SAASF,EAAGA,EAAIjB,IACxDiB,GAAKjB,EAEP,OAAOkB,CACT,EAsMEE,oBApMF,SAA6B3C,GAC3B,OAAOwB,EAAmBxB,GAAK4C,MACjC,EAoMEC,mBAxPF,SAA4BpB,EAAMqB,OAASC,GACzC,MAAMrB,EAAaD,EAAKY,WAClBW,EAAiB,IAAIlB,WAAWb,EAAWhB,KAAKwB,IACtD,IAAIwB,EAAS,GACb,IAAK,IAAIvE,EAAI,EAAGA,EAAIgD,EAAYhD,IAC3BoE,GAAmC,QAAzBA,EAAOI,cAClBD,GAAWD,EAAetE,GAAIwB,SAAS,IAAIiD,SAAS,EAAG,KAEvDF,GAAU1D,OAAOC,aAAiC,IAApBwD,EAAetE,IAGjD,OAAOuE,CACT,EA6OEzB,qBAEA4B,sBAnOF,SAA+B3B,GAE7B,OAAW,MAARA,EACM,IAAIK,WAENA,WAAW7B,KAAKgB,EAAWhB,KAAKwB,EAAM,OAC/C,EA+NE4B,UAvMF,SAAmBC,GACjB,OAAO/D,OAAOC,aAAoB,IAAP8D,EAC7B,EAsMEC,UAzFF,SAAmB9B,GACjB,OAA4B,IAArBA,EAAK7C,WAAW,EACzB,EAyFE4E,WAtMF,SAAoBC,GAClB,OACIlE,OAAOC,aAAciE,GAAS,EAAK,KACnClE,OAAOC,aAAqB,IAARiE,EAE1B,EAkMEC,WAxFF,SAAoBjC,GAClB,OACKA,EAAK7C,WAAW,IAAM,GACtB6C,EAAK7C,WAAW,EAEvB,EAqFE+E,WAlMF,SAAoBC,GAClB,OACIrE,OAAOC,aAAcoE,GAAS,GAAM,KACpCrE,OAAOC,aAAcoE,GAAS,EAAK,KACnCrE,OAAOC,aAAqB,IAARoE,EAE1B,EA6LEC,WApFF,SAAoBpC,GAClB,OACKA,EAAK7C,WAAW,IAAM,KACtB6C,EAAK7C,WAAW,IAAM,GACtB6C,EAAK7C,WAAW,EAEvB,EAgFEmD,aACA+B,WA/EF,SAAoBrC,GAElB,OACKA,EAAK7C,WAAW,IAAM,KACtB6C,EAAK7C,WAAW,IAAM,KACtB6C,EAAK7C,WAAW,IAAM,GACtB6C,EAAK7C,WAAW,EAEvB,EAwEEqD,cAEA8B,WAzKF,SAAoBC,GAClB,GAAqB,iBAAVA,EACT,OAAOjC,EAAWiC,EAAMC,MAAQlC,EAAWiC,EAAME,KAOnD,GAAIF,GAAS,EAAG,CACd,GAAIA,EAAQ,IACV,OAAO5C,EAAkBD,EAAmB5B,OAAOC,aAAawE,GAElE,GAAIA,EAAQ,MACV,OAAO5C,EAAkBF,EACvB3B,OAAOC,aAAawE,GAAS,GAAKzE,OAAOC,aAAqB,IAARwE,GAE1D,GAAIA,EAAQ,WACV,OAAO5C,GAAmB7B,OAAOC,aAAcwE,GAAS,GAAM,KAC5DzE,OAAOC,aAAcwE,GAAS,GAAM,KACpCzE,OAAOC,aAAcwE,GAAS,EAAK,KACnCzE,OAAOC,aAAqB,IAARwE,GAE1B,CACA,OAAOzE,OAAOC,aAAcwE,GAAS,GAAM,KACrCzE,OAAOC,aAAcwE,GAAS,GAAM,KACpCzE,OAAOC,aAAcwE,GAAS,GAAM,KACpCzE,OAAOC,aAAcwE,GAAS,GAAM,KACpCzE,OAAOC,aAAcwE,GAAS,GAAM,KACpCzE,OAAOC,aAAcwE,GAAS,GAAM,KACpCzE,OAAOC,aAAcwE,GAAS,EAAK,KACnCzE,OAAOC,aAAqB,IAARwE,EAC5B,EA0IEG,YA9DF,SAAqB1C,GACnB,OAAOxD,EAAKmG,SAASnC,EAAYR,EAAK4C,OAAO,EAAG,IAC3BpC,EAAYR,EAAK4C,OAAO,EAAG,KAC3B,EACvB,EA4DEC,eA1IF,SAAwBC,GACtB,MAAMnC,EAAMmC,EAAUlF,OACtB,GAAI+C,EAAMf,EACR,OAAO9B,OAAOC,aAAa+C,MAAM,KAAMgC,GAGzC,IAAI/B,EAAI,EACJC,EAAI,GAER,KAAOD,EAAIJ,GAETK,GAAKlD,OAAOC,aAAa+C,MAAM,KAAMgC,EAAUC,MAAMhC,EAAGA,EAAInB,IAC5DmB,GAAKnB,EAGP,OAAOoB,CACT,EA2HEgC,eAzHF,SAAwBzE,GACtB,MAAMiD,EAAS,GACf,IAAIvE,EACJ,IAAKA,EAAI,EAAGA,EAAIsB,EAAIX,OAAQX,IAC1BuE,EAAOvE,GAAKsB,EAAIpB,WAAWF,GAE7B,OAAOuE,CACT,EAoHEyB,cAlHF,SAAuB1E,GAIrB,OAAO2E,MAAMC,UAAUC,IAAIC,KAAK9E,EAAI+E,MAAM,KAH1C,SAAeC,GACb,OAAOA,EAAEpG,WAAW,GAAGsB,SAAS,GAClC,GAEF,EA+GE+E,WA/DF,SAAoBC,GAClB,OAAOC,SAASC,mBAAmBF,GACrC,EA8DEG,WA5DF,SAAoBC,GAClB,OAAOC,mBAAmBC,OAAOF,GACnC,EA2DEG,iBAzDF,SAA0BC,GACxB,GAAIzE,EAAW0E,SAASD,GACtB,OAAOA,EAET,GAAqB,iBAAVA,EACT,OAAOzE,EAAWhB,KAAKyF,EAAO,UAEhC,GAAIA,aAAiB9D,YACnB,OAAOX,EAAWhB,KAAKyF,GAGzB,GAAIA,EAAM9C,kBAAkBhB,aACE,iBAArB8D,EAAMrD,YACe,iBAArBqD,EAAME,WACb,OAAyB,IAArBF,EAAME,YAAoBF,EAAMrD,aAAeqD,EAAM9C,OAAOP,WAEvDpB,EAAWhB,KAAKyF,EAAM9C,QAExB3B,EAAWhB,KAAKyF,EAAM9C,OAAQ8C,EAAME,WAAYF,EAAMrD,YAE/D,MAAM,IAAIrB,EAAe,oCACvBD,EAAa8E,uBACb,gGACJ,GAqCAlI,EAAOC,QAAQG,QAAUA,YCnTzB,SAAS+H,EAASC,GAChB,GAAiB,iBAANA,EACT,MAAO,GAET,MAAMC,EAAID,EAAE7F,SAAS,IACrB,OAAQ8F,EAAE3G,OAAS,EAAK,IAAI2G,IAAMA,CACpC,CAmBA,MAAMhI,EAAM,CACViI,gBAjBF,SAAyBC,GACvB,MAAmB,iBAARA,EACF,KAAKJ,EAASI,KAGJ,iBAARA,GAAoBvB,MAAMwB,QAAQD,GACpCA,EAAIrB,IAAIiB,GAAUM,OAGR,iBAARF,EACFvB,MAAMC,UAAUC,IAAIC,KAAKoB,GAAK,CAACG,EAAG3H,IAAMoH,EAASI,EAAItH,WAAWF,MAAK0H,KAAK,IAG5E,IACT,GAMAzI,EAAOC,QAAQI,IAAMA,kBC7BrBL,EAAOC,QAAQK,KAAO,EAAtB,sBCOA,MAAMF,EAAU,EAAQ,MAClBuI,EAAQ,EAAQ,KAChBC,EAAc,EAAQ,MACtBlI,EAAQ,EAAQ,MAChBmI,EAAQ,EAAQ,MAChBC,EAAU,EAAQ,MAClBC,EAAM,EAAQ,MACdC,EAAM,EAAQ,MACdC,EAAU,EAAQ,MAClBC,EAAiB,EAAQ,MACzBC,EAAY,EAAQ,MACpBC,EAAM,EAAQ,KACdC,EAAU,EAAQ,MAClBC,EAAM,EAAQ,MACdC,EAAkB,EAAQ,MAC1BC,EAAU,EAAQ,MAClBC,EAAY,EAAQ,MACpBC,EAAO,EAAQ,KACfC,EAAW,EAAQ,KAEzB3J,EAAOC,QAAU,CACfG,UACAuI,QACAC,cACAlI,QACAmI,QACAC,UACAC,MACAC,MACAC,UACAC,iBACAC,YACAC,MACAC,UACAC,MACAC,kBACAC,UACAC,YACAC,OACAC,4BC3BF,MAAMC,EAAa,EAAQ,OAGrB,iBACJC,EAAgB,yBAChBC,EAAwB,2BACxBC,GACEH,GAEE,KACJtJ,GACE,EAAQ,OACN,YACJsI,EAAW,gBACXoB,EAAe,MACfC,GACE,EAAQ,OACN,aACJ7G,EAAY,oBACZ8G,EAAmB,eACnB7G,EAAc,aACd8G,EAAY,iBACZC,GACE,EAAQ,OACN,aACJC,GACE,EAAQ,OACN,eACJC,EAAc,QACdC,EAAO,SACPC,GACE,EAAQ,OACN,QACJvB,EAAO,mBACPwB,EAAkB,wBAClBC,EAAuB,gBACvBC,EAAe,eACfC,EAAc,YACdC,EAAW,mBACXC,EAAkB,0BAClBC,GACE,EAAQ,OACN,gBACJC,EAAe,+BACfC,EAA8B,yBAC9BC,EAAwB,0BACxBC,EAAyB,aACzBC,EAAY,sBACZC,EAAqB,uBACrBC,GACE,EAAQ,MACN,oBACJC,EAAmB,6BACnBC,GACE,EAAQ,OACN,gCACJC,EAA+B,2BAC/BC,GACE,EAAQ,OACN,QACJC,EAAO,aACPC,EAAY,mBACZC,GACE,EAAQ,OACN,wBACJC,EAAuB,gBACvBC,EAAe,gBACfC,EAAe,qBACfC,EAAoB,iBACpBC,EAAgB,gBAChBC,EAAe,UACfC,GACE,EAAQ,OACN,SACJC,EAAQ,aACRC,EAAY,gBACZC,EAAe,mBACfC,EAAkB,yBAClBC,EAAwB,qBACxBC,IACE,EAAQ,MACN,qBACJC,GAAoB,eACpBC,GAAc,gBACdC,GAAe,uBACfC,GAAsB,QACtBzD,GAAO,aACP0D,GAAY,mBACZC,GAAkB,iBAClBC,GAAgB,kBAChBC,GAAiB,aACjBC,GAAY,aACZC,IACE,EAAQ,OACN,YACJC,GAAW,oBACXC,GAAmB,mBACnBC,GAAkB,gBAClBC,GAAe,mBACfC,GAAkB,aAClBC,GAAY,uBACZC,IACE,EAAQ,OACN,SACJC,IACE,EAAQ,OACN,eACJC,GAAc,kBACdC,IACE,EAAQ,OACN,QACJC,IACE,EAAQ,KAYNC,GAAS,CACblC,0BACAa,wBACAhB,UACA0B,eACAC,uBACAC,sBACAC,mBACAC,sBACAC,gBACAC,0BACAf,kBACAtC,iBACA1B,cACAoB,kBACA5G,eACAmH,UACAC,WACAlK,OACA2I,UACAwB,qBACAO,kBACAC,iCACAC,2BACAC,4BACAT,0BACAC,kBACAC,iBACAa,kCACAC,6BACAmB,mBACAhC,cACAC,qBACAgC,0BACA5C,sBACA7G,iBACA0I,kBACAX,eACAC,wBACAC,yBACAU,kBACAC,uBACAC,mBACAC,kBACAC,YACAb,sBAMAC,+BACAT,4BACAZ,eACAC,mBACAiC,WACAC,eACAC,kBACAC,qBACAC,2BACAC,wBACArD,WACA0D,gBACAC,sBACAC,oBACAC,qBACAC,gBACAtD,mBACAC,2BACAC,6BACAqD,gBACAQ,YACA3D,QACA2B,eACAC,qBACAgC,kBACAC,qBACAC,WAEA1D,eAEA4D,UAzFgB,EAAQ,OA4F1BC,OAAOC,OAAOnO,EAAOC,QAAS+N,mBCnO9B,MAAM,MAAErF,GAAU,EAAQ,MAE1B3I,EAAOC,QAAQ0I,MAAQA,kBCCvB,MAAMyF,EAAgB,MACpB,MAAMC,EAAM,GACZ,IAAK,IAAIhH,EAAI,EAAGA,EAAI,MAAOA,EACzBgH,EAAIhH,GAAMA,EAAI,IAAMA,EAAI,IAAO,IAAMzF,OAAOC,aAAawF,GAE3D,OAAOgH,CACR,EANqB,GAmFtB,MAAM1F,EAAQ,CACZ2F,gBAxEF,SAAyBxK,EAAMyK,EAAYC,GACzC,MAAM,aAAEC,EAAY,YAAEC,GAAgB,EAAQ,MACxC,QAAEC,EAAO,QAAEC,EAAO,SAAEC,GAAaH,EAEvC,GAAIC,EAAQ7K,GACV,OAAO,KAGT,MAAMhD,EAAS,IAAI2N,EACbK,EAAQ,IAAIL,EACZM,EAAO,IAAIN,EACjB,IAAIO,EAAY,EAGhB,IAAK,IAAIjO,EAAI,EAAGkO,EAAUnL,EAAKpC,OAAQX,EAAIkO,IAAWlO,EAAG,CACvD,MAAMmO,EAAQpL,EAAK7C,WAAWF,GAE9BgO,EAAKI,OAAOP,EAAQM,EAAM3M,SAAS,IAAK,EAAG,KAAM,KACjDuM,EAAMK,OAAOf,EAAcc,IArBX,KAsBhBF,IAEkB,IAAdA,GACFD,EAAKI,OA1BI,OA6BO,KAAdH,GAAoBjO,IAAM+C,EAAKpC,OAAS,IACtC8M,EAAc,GAChB1N,EAAOqO,OAAON,EAAS,GAAIL,EAAa,MAG1C1N,EAAOqO,OAAON,EAASE,EAAKxM,WAlBZ,GAkBqC,MAEjDgM,GACFzN,EAAOqO,OAAOL,GAGhBhO,EAAOqO,OAAO,MACdJ,EAAKK,QACLN,EAAMM,QACNJ,EAAY,EAEhB,CAEA,OAAOlO,EAAOyB,UAChB,EA6BE8M,eA3BF,SAAwBvL,GACtB,MAAQwL,OAASC,QAAQ,sBAAEC,KAA8B,EAAQ,OAC3D,SAAEC,EAAQ,UAAEC,GAAc,EAAQ,MAExC,GAAa,OAAT5L,EAEF,YADA4L,EAAU,oCAGZ,IAAIC,EAAM,EAEV,IADAF,EAAS,4CAA4C3L,EAAKpC,UACnDiO,EAAM7L,EAAKpC,QAAQ,CACxB,MAAMkO,EAAcJ,EAAsB1L,EAAM6L,GAC1CE,EAAMD,EAAcA,EAAYE,UAAY,KAClD,IAAMF,IAAeC,EAInB,OAFAJ,EAAS,mDACTA,EAAS,aAAaE,aAAe7L,EAAKpC,UAI5C+N,EAAS,UAAUE,eAAiBE,EAAIE,yBAAyBF,EAAIG,iBACrEL,GAAOE,EAAIG,aACb,CACF,GAOAhQ,EAAOC,QAAQ0I,MAAQA,kBC3FvB,MAAM,YAAEC,GAAgB,EAAQ,OAC1B,uBAAEqH,GAA2B,EAAQ,OACrC,gBAAEjG,GAAoB,EAAQ,OAC9B,gBAAEkG,GAAoB,EAAQ,MAC9B,UAAEC,GAAc,EAAQ,MACxB,MAAEC,GAAU,EAAQ,OACpB,iBAAEvG,GAAqB,EAAQ,OAC/B,MAAEI,GAAU,EAAQ,MAa1BJ,EAAiBwG,uBAAyBxG,EAAiByG,eAAeC,IACxEJ,EAAUK,SAAS,YAAaD,GACzBtG,EAAMwG,eAAeF,MAG9B1G,EAAiB6G,YAAc7G,EAAiByG,eAAcC,GAAa,IAAItG,EAAMsG,KAarF1G,EAAiB8G,8BAAgC9G,EAAiByG,eAAeM,IAC/ET,EAAUK,SAAS,YAAaI,GACzBR,EAAMS,oBAAoBD,MAGnC5Q,EAAOC,QAAQ2I,YAAcA,EAC7B5I,EAAOC,QAAQgQ,uBAAyBA,EACxCjQ,EAAOC,QAAQ+J,gBAAkBA,EACjChK,EAAOC,QAAQiQ,gBAAkBA,EACjClQ,EAAOC,QAAQmQ,MAAQA,EACvBpQ,EAAOC,QAAQgK,MAAQA,kBChDvB,MAAM,gBAAED,GAAoB,EAAQ,OAC9B,gBAAEkG,GAAoB,EAAQ,MAC9B,MAAEE,GAAU,EAAQ,OACpB,MAAEnG,GAAU,EAAQ,MAEpB6G,EAAe,YACfC,EAAmBD,EAAapP,OAChCsP,EAAyB,aAE/B,SAASC,EAA0BC,EAAkBC,OAAoB/L,GACvE,GAAyB,OAArB8L,GAAyD,IAA5BA,EAAiBxP,OAChD,OAAO,KAGT,MAAM0P,EAAO,CACXC,KAAOH,EACPI,MAAOH,GAAqBjB,EAAgBqB,YAAYL,IAE1D,GAA4B,MAAxBA,EAAiB,GAAY,CAC/B,GAAIA,EAAiBM,WAAWV,GAAe,CAC7C,MAAMW,EAASV,EAIf,OAHAK,EAAKC,KAAOH,EAAiBxK,OAAO+K,GACpCL,EAAKM,KAAO1H,EAAgB2H,MAC5BP,EAAKK,OAASA,EACP,IAAIrB,EAAMgB,EACnB,CAAO,GAAIF,EAAiBM,WAAWR,GAIrC,OAHAI,EAAKC,KAAOH,EACZE,EAAKM,KAAO1H,EAAgB4H,gBAC5BR,EAAKK,OAAS,EACP,IAAIrB,EAAMgB,EAErB,CACA,OAAO,IAAInH,EAAMmH,EACnB,CAWA,MAAMnB,EAAyB,CAC7B4B,2BAVF,SAAoCV,GAClC,OAA0B,OAAtBA,GAA2D,IAA7BA,EAAkBzP,OAC3C,KAIFuP,EADkBf,EAAgB4B,YAAYX,GACFA,EACrD,EAIEF,6BAGFjR,EAAOC,QAAQgQ,uBAAyBA,kBCjDxC,MAAM,KAAE8B,GAAS,EAAQ,MASnB/H,EAAkB,CAItBgI,MAAiB,QAIjBL,MAAiB,QAIjBC,gBAAiB,mBAGnB5R,EAAOC,QAAQ+J,gBAAkB+H,EAAKE,IAAIjI,GAI1ChK,EAAOC,QAAQ+J,gBAAgBkI,cAAc,CAC3C,MAAmBlI,EAAgBgI,MACnC,MAAmBhI,EAAgB2H,MACnC,gBAAmB3H,EAAgB4H,iCC/BrC,MAAMO,EAAsB,EAAQ,OAC9B,QAAE/R,GAAY,EAAQ,OACtB,gBAAE4J,GAAoB,EAAQ,OAC9B,UAAE0F,GAAc,EAAQ,OACxB,iBAAE0C,GAAqB,EAAQ,OAC/B,KAAEC,EAAI,YAAE3D,GAAgB,EAAQ,MAEhC,WAAEpH,EAAU,WAAEI,GAAetH,GAC7B,eAAEkS,GAAmBH,GAErB,YAAEI,EAAW,mBAAEC,GAAuB9D,GACtC,aAAEtL,EAAY,eAAEC,GAAmB,EAAQ,MAE3CoP,EAA+B,CACnC,CAACzI,EAAgB2H,OAAkB,YACnC,CAAC3H,EAAgB4H,iBAAkB,cAgBrC,SAASc,EAAahB,GACpB,OAAOe,EAA6Bf,IAAS,EAC/C,CAEA,SAASiB,EAAqBjB,EAAMkB,GAClC,OAAO,IAAIvP,EAAe,WAAWqO,MAASkB,IAAYxP,EAAayP,qBACzE,CASA,SAASC,EAAepB,EAAMJ,EAAOD,EACb0B,EAAmBJ,EAAqBK,KAAK,KAAMtB,IACzE,IAAIuB,EAWJ,MAAMC,EAAa7B,EAAK3P,OACxB,GAAIwR,EAAa,EAEf,OADAD,EAAQF,EAAiB,uCAClB,CAAEE,SAIX,MAAME,EAAc7B,EAAM5P,OAC1B,GAAIyR,EAAc,IAGhB,OAFAF,EAAQF,EAAiB,qDACAI,EAAc,aAAa9B,MAC7C,CAAE4B,SAGX,IAAIG,GAAe,EACiB,MAAhC/B,EAAK5P,OAAOyR,EAAa,KAC3BE,GAAe,GAGjB,IAAK,IAAIrS,EAAI,EAAGA,EAAImS,IAAcnS,EAChC,OAAQsQ,EAAK5P,OAAOV,IAClB,IAAK,IACH,GAAU,IAANA,GAAWA,IAAOmS,EAAa,GAA6B,MAAvB7B,EAAK5P,OAAOV,EAAI,GAEvD,OADAkS,EAAQF,EAAiB,sBAAsB1B,MAAStQ,MACjD,CAAEkS,SAEX,MAEF,IAAK,IACH,GAAKlS,EAAKmS,EAAa,GAA+B,MAAvB7B,EAAK5P,OAAOV,EAAI,GAG7C,OADAkS,EAAQF,EAAiB,2BAA2B1B,MAAStQ,MACtD,CAAEkS,SAGXG,GAAe,EAQrB,MAAO,CAAEA,eACX,CAEA,SAAS7B,EAAYD,GACnB,OAAOgB,EAAevK,MAAMsL,gBACxB,GAAG/L,EAAWgK,OACd,GAAGA,KACT,CAeA,SAAS3O,EAAO+O,EAAML,GACpB,MAAMiC,EAASZ,EAAahB,GACtBD,EAAS6B,EAAO5R,OAChB6R,EAAcD,EAASjC,EAE7B,MAAO,CAAEC,MADKC,EAAYgC,GACV9B,SAAQ8B,cAC1B,CA4CA,MAAMrD,EAAkB,CACtBwC,eACAc,oBA9JF,SAA6B9B,EAAM+B,EAAMpC,GACvC,MAAMqC,EAAKrC,GAAQgB,EAAKsB,eACxB,OAAQjC,GACN,KAAK1H,EAAgBgI,MACnB,MAAO,aAAayB,KAAQC,IAC9B,KAAK1J,EAAgB4H,gBACnB,MAAO,aAAa6B,KAAQC,IAC9B,QACEhE,EAAU,mCAAoC1F,EAAgB4J,SAASlC,IAG7E,EAoJEI,YAlEF,SAAqBR,GACnB,OAAOkB,EAAmBF,EAAevK,MAAMsL,gBAC3C3L,EAAW4J,GACXA,EACN,EA+DE3O,SACA4O,cACAuB,iBACAP,cACAsB,kBAxCF,SAA2BnC,EAAML,EAAM0B,EAAmBJ,EAAqBK,KAAK,KAAMtB,IACxF,MAAM,MAAEJ,EAAK,OAAEG,GAAW9O,EAAO+O,EAAML,IAC/B4B,MAAOa,EAAU,aAAEV,GAAiBN,EAAepB,EAAMJ,EAAOD,EAAM0B,GAC9E,IAAIE,EAAQa,EACRC,EAAmB,CAAC,EAiBxB,GAhBAA,EAAiBX,aAAeA,EAI3BH,GACH/E,OAAO8F,KAAKvB,GAA8BwB,MAAMC,IAC9C,MAAMZ,EAASb,EAA6ByB,GAC5C,QAAK7C,EAAKG,WAAW8B,KAIrBL,EAAQF,EAAiB,oBAAoBO,yBAA8BjC,OACpE,EAAI,KAIV4B,EAAO,CAEV,MAAQA,MAAOkB,EAAYC,QAASC,GAClCjC,EAAiBkC,cAAcjD,EAAMK,GACvCuB,EAAQkB,EACRJ,EAAmBM,CACrB,CAEA,MAAO,CAAE/C,QAAOG,SAAQwB,QAAOG,eAAcW,mBAC/C,GAaA/T,EAAOC,QAAQiQ,gBAAkBA,wCCzLjC,MAAM,gBAAElG,GAAoB,EAAQ,OAC9B,gBAAEkG,GAAoB,EAAQ,KAmBpC,MAAMtH,EAYJ,WAAA2L,CAAYnD,EAAMM,EAAO1H,EAAgBgI,OACvC,GAAoB,iBAATZ,EACToD,KAAKC,MAAQrD,EAAKC,KAClBmD,KAAKE,MAAQtD,EAAKM,KAClB8C,KAAKG,OAASvD,EAAKE,MACnBkD,KAAKI,QAAUxD,EAAKK,OAChBL,EAAKyD,aACPL,KAAKM,cAAe,EACpBN,KAAKO,cAAgB3D,EAAKgC,aAC1BoB,KAAKQ,kBAAoB5D,EAAK2C,kBAAoB,CAAC,IAEnDS,KAAKM,cAAe,EACpBN,KAAKQ,kBAAoB,CAAC,OAEvB,CACLR,KAAKC,MAAQrD,EACboD,KAAKE,MAAQhD,EAKb,MAAMpM,EAAS4K,EAAgBvN,OAAO+O,EAAMN,GAC5CoD,KAAKG,OAASrP,EAAOgM,MACrBkD,KAAKI,QAAUtP,EAAOmM,OACtB+C,KAAKM,cAAe,EACpBN,KAAKQ,kBAAoB,CAAC,CAC5B,CACF,CAKA,OAAAC,GACE,OAAOT,KAAKC,KACd,CAMA,QAAIpD,GACF,OAAOmD,KAAKS,SACd,CAKA,OAAAC,GACE,OAAOV,KAAKE,KACd,CAMA,QAAIhD,GACF,OAAO8C,KAAKU,SACd,CAOA,QAAAC,GACE,OAAOX,KAAKG,MACd,CACA,SAAIrD,GACF,OAAOkD,KAAKW,UACd,CAEA,SAAAC,GACE,OAAOZ,KAAKI,OACd,CACA,UAAInD,GACF,OAAO+C,KAAKY,WACd,CASA,QAAAC,GACE,GAAIb,KAAKM,aAAc,CACrB,GAAIN,KAAKc,OAAQ,MAAMd,KAAKc,OAC5B,MACF,CAEA,MAAM,MAAErC,EAAK,aAAEG,GACblD,EAAgB4C,eAAe0B,KAAK9C,KAAM8C,KAAKlD,MAAOkD,KAAKnD,MAE7D,GADAmD,KAAKM,cAAe,EAChB7B,EAEF,MADAuB,KAAKc,OAASrC,EACRA,EAERuB,KAAKO,cAAgB3B,CACvB,CAUA,YAAAA,GAEE,OADAoB,KAAKa,WACEb,KAAKO,aACd,CAMA,mBAAAQ,GACE,OAAOf,KAAKQ,mBAAqB,CAAC,CACpC,CAKA,QAAAzS,GACE,OAAOiT,EAAahB,KACtB,CAOA,MAAAiB,CAAOC,GACL,OAAMA,aAAiB9M,GAGf4L,KAAKjS,WAAWoT,YAAcD,EAAMnT,WAAWoT,SACzD,EAGF3V,EAAOC,QAAQ2I,YAAcA,kBC9K7B,MAAMgN,EAAqB,EAAQ,MAC7B,OAAEC,GAAW,EAAQ,OACrB,YAAEjN,GAAgB,EAAQ,OAC1B,gBAAEoB,GAAoB,EAAQ,MAcpC,MAAMoG,UAAcxH,EAMlB,WAAA2L,CAAYnD,GACVyE,EAAOzE,EAAKC,KAAM,2BAClBwE,EAAOzE,EAAKM,OAAS1H,EAAgB2H,OAC3BP,EAAKM,OAAS1H,EAAgB4H,gBAAiB,8BACzDiE,EAAOzE,EAAKE,MAAO,4BACnBuE,OAAuBzQ,IAAhBgM,EAAKK,OAAsB,6BAClCqE,MAAM1E,EACR,CAEA,SAAAgE,GACE,OAAOZ,KAAKI,OACd,CACA,UAAInD,GACF,OAAO+C,KAAKY,WACd,CAEA,CAAC,4CACC,MAAO,UAAUZ,KAAKS,YACxB,CAQA,0BAAOpE,CAAoBD,GACzB,MAAMmF,EAAWH,EAAmB1F,gBAAgB2D,kBAClD7J,EAAgB2H,MAAOf,GACzB,GAAImF,EAAS9C,MACX,MAAM8C,EAAS9C,MAEjB,OAAO,IAAI7C,EAAM,CACfiB,KAAkBT,EAClBc,KAAkB1H,EAAgB2H,MAClCkD,aAAkB,EAClBvD,MAAkByE,EAASzE,MAC3BG,OAAkBsE,EAAStE,OAC3B2B,aAAkB2C,EAAS3C,aAE3BW,iBAAkBgC,EAAShC,kBAE/B,EAIF/T,EAAOC,QAAQmQ,MAAQA,wCCrEvB,MAAM,gBAAEpG,GAAoB,EAAQ,OAC9B,aAAE5G,EAAY,eAAEC,GAAmB,EAAQ,MAkIjD,MAAM2S,EAAsC,CAC1C,CAAChM,EAAgBgI,OAAQ,CACvBiE,QAAS,CAlHb,SAAmCvE,EAAML,EAAMC,EAAOG,EAAQnM,GAC5D,MAAM4Q,EAAkB,aAExB,IAAIC,EAAQ1E,EAYZ,OAVIJ,EAAK3P,OAASyU,EAHUD,KAGsB5Q,EAAO8Q,YACnD/E,EAAKG,WAAW0E,EAAiBC,IACnCA,GALwBD,GAMxB5Q,EAAO8Q,YAAa,GAKtB9Q,EAAO8Q,YAAa,EAEf,CAAEnD,MAXLA,UAWYkD,QAAO7Q,SACzB,EAiBA,SAAgCoM,EAAML,EAAMC,EAAOG,EACnBnM,EAAQyN,GACtC,MAAMsD,EAAe,UAIrB,IACIpD,EAEAqD,EAHAH,EAAQ1E,EAER8E,GAAc,EAiClB,OA/BIlF,EAAK3P,OAASyU,EAPOE,IAOsB/Q,EAAOkR,SAMhDnF,EAAKG,WAAW6E,EAAc5E,IAC1BJ,EAAK3P,QAAUyU,EAdAE,GAc6BI,GAClDN,GAfqBE,EAiBrBE,EAAaJ,EACbA,EAAQ9E,EAAKqF,QAjBO,IAiBkBH,GAClCJ,EAAQ,GACVG,EAAajF,EAAKsF,UAAUJ,EAAYJ,GACxCA,GAnBsBS,EAoBtBtR,EAAOkR,SAAU,EACjBlR,EAAOgR,WAAaA,EACpBhR,EAAOuR,mBAAqBV,IAG5BlD,EAAQF,EAAiB,2BAA2B1B,MAASkF,MAC7DjR,EAAOkR,SAAU,IAQrBlR,EAAOkR,SAAU,EAEZ,CAAEvD,QAAOkD,QAAO7Q,SACzB,GAwCIwR,MAAS,SAAkBpF,EAAML,EAAMC,EAAO8C,EAASrB,GACrD,MAAM,MAAEE,EAAK,OAAE3N,GA1BrB,SAAiCyR,EAAQrF,EAAML,EAAMC,EAAO8C,EAASrB,GACnE,MAAMiE,EAAcD,EAAOrV,QAAU,EACrC,IACIuR,EADAxB,EAAS,EAETnM,EAAS8O,GAAW,CAAC,EACzB,IAAK,IAAIrT,EAAI,EAAGA,EAAIiW,IAAejW,EAAG,CACpC,MAAQkS,MAAOa,EAAYqC,MAAOc,EAAa3R,OAAQ4R,GACrDH,EAAOhW,GAAG2Q,EAAML,EAAMC,EAAOG,EAAQnM,EAAQyN,GAI/C,GAHAtB,EAASwF,EACT3R,EAAS4R,EACTjE,EAAQa,EACJb,EAAO,KACb,CACA,MAAO,CAAEA,QAAO3N,SAClB,CAaQ6R,CAAwB3C,KAAKyB,QAASvE,EAAML,EAAMC,EAAO8C,EAASrB,GACpE,MAAO,CAAEE,QAAO3N,SAClB,IAIJ,SAASqN,EAAqBjB,EAAMkB,GAClC,OAAO,IAAIvP,EAAe,WAAWqO,MAASkB,IAAYxP,EAAayP,qBACzE,CAUA,MAAMT,EAMJ,WAAAmC,CAAYlD,GACVmD,KAAKC,MAAQpD,EAEbmD,KAAK4C,UAAW,EAChB5C,KAAK6C,aAAc,EACnB7C,KAAK8C,qBAAuB,EAC5B9C,KAAK+C,YAAc,IACrB,CAKA,OAAAtC,GACE,OAAOT,KAAKC,KACd,CAMA,QAAIpD,GACF,OAAOmD,KAAKS,SACd,CASA,WAAIuB,GACF,OAAOhC,KAAK4C,QACd,CACA,WAAIZ,CAAQzO,GACVyM,KAAK4C,SAAWrP,CAClB,CASA,cAAIqO,GACF,OAAO5B,KAAK6C,WACd,CACA,cAAIjB,CAAWrO,GACbyM,KAAK6C,YAActP,CACrB,CAQA,sBAAI8O,GACF,OAAOrC,KAAK8C,oBAAsB,EAAI,EAAI9C,KAAK8C,mBACjD,CACA,sBAAIT,CAAmB9O,GACrByM,KAAK8C,oBAAsBvP,EAAQ,GAAK,EAAuBA,CACjE,CAQA,cAAIuO,GACF,OAAO9B,KAAKgC,QAAUhC,KAAK+C,YAAc,IAC3C,CACA,cAAIjB,CAAWvO,GACTyM,KAAKgC,UACPhC,KAAK+C,YAAcxP,EAEvB,CAKA,QAAAxF,GACE,OAAOiT,EAAahB,KACtB,CASA,oBAAOF,CAAcjD,EAAMK,EAAO1H,EAAgBgI,OAChD,IAAIoC,EAAU,IAAIhC,EAAiBf,GAC/B4B,EAAQ,KACZ,MAAMuE,EAASxB,EAAoCtE,GACnD,GAAI8F,EAAQ,CACV,MAAQvE,MAAOkB,EAAY7O,OAAQ+O,GACnCmD,EAAOV,MAAMpF,EAAML,EAAM,KAAM+C,EAASzB,EAAqBK,KAAK,KAAMtB,IACxE0C,EAAUC,EACVpB,EAAQkB,CACV,CACA,MAAO,CAAElB,QAAOmB,UAClB,EAEFpU,EAAOC,QAAQmS,iBAAmBA,kBC3QlC,MAAMwD,EAAqB,EAAQ,MAC7B,YAAEhN,GAAgB,EAAQ,OAC1B,gBAAEoB,GAAoB,EAAQ,MAapC,MAAMC,UAAcrB,EAKlB,WAAA2L,CAAYnD,GACU,iBAATA,EACT0E,MAAM,CACJpE,KAAkB1H,EAAgBgI,MAClCX,KAAkBD,EAAKC,KACvBC,MAAkBF,EAAKE,MACvBG,OAAkBL,EAAKK,OACvBoD,YAAkBzD,EAAKyD,YACvBzB,aAAkBhC,EAAKgC,aACvBW,iBAAkB3C,EAAK2C,mBAIzB+B,MAAM1E,EAAMpH,EAAgBgI,MAEhC,CAEA,CAAC,4CACC,MAAO,UAAUwC,KAAKS,YACxB,CAQA,qBAAOxE,CAAeF,GACpB,MAAMwF,EAAWH,EAAmB1F,gBAAgB2D,kBAClD7J,EAAgBgI,MAAOzB,GACzB,GAAIwF,EAAS9C,MACX,MAAM8C,EAAS9C,MAEjB,OAAO,IAAIhJ,EAAM,CACfoH,KAAkBd,EAClBsE,aAAkB,EAClBvD,MAAkByE,EAASzE,MAC3BG,OAAkBsE,EAAStE,OAC3B2B,aAAkB2C,EAAS3C,aAC3BW,iBAAkBgC,EAAShC,kBAE/B,EAGF/T,EAAOC,QAAQgK,MAAQA,YChEvB,SAASwN,EAAOC,GAEZ,MAAM,IAAIhX,MAAM,uDAIpB,CAGE+W,EAAOE,OAAS,IAAMF,IAwCxBzX,EAAOC,QAAUwX,kBCjDjB,MAAM,2BAAEG,GAA+B,EAAQ,OACzC,aAAExU,GAAiB,EAAQ,OAC3B,oBAAE8G,GAAwB,EAAQ,OAClC,eAAE7G,GAAmB,EAAQ,OAC7B,aAAE8G,GAAiB,EAAQ,OAC3B,iBAAEC,GAAqB,EAAQ,OAC/B,YAAEyN,GAAgB,EAAQ,MAEhC7X,EAAOC,QAAQ2X,2BAA6BA,EAC5C5X,EAAOC,QAAQmD,aAAeA,EAC9BpD,EAAOC,QAAQiK,oBAAsBA,EACrClK,EAAOC,QAAQoD,eAAiBA,EAChCrD,EAAOC,QAAQkK,aAAeA,EAC9BnK,EAAOC,QAAQmK,iBAAmBA,EAClCpK,EAAOC,QAAQ4X,YAAcA,kBCd7B,MAAM,aAAEzU,GAAiB,EAAQ,OAC3B,QAAE0U,GAAY,EAAQ,MAItBC,EAAK3U,EAEL4U,EAAeF,EACnB,IAAKA,EACH,0BAA2BC,EAAGE,oBAC9B,wBAAyBF,EAAGG,kBAC5B,qBAAsBH,EAAGI,mBACzB,iCAAkCJ,EAAGK,sBACrC,mBAAoBL,EAAGG,kBACvB,kBAAmBH,EAAGM,gBACtB,mBAAoBN,EAAGO,iBACvB,8BAA+BP,EAAGQ,6BAClC,8DAA+DR,EAAGS,iCAClE,yBAA0BT,EAAGU,uBAC7B,2BAA4BV,EAAGW,qBAC/B,oBAAqBX,EAAGlF,qBACxB,uCAAwCkF,EAAGY,6BAC3C,kBAAmBZ,EAAGa,gBACtB,kCAAmCb,EAAGc,eAExC,IAAKf,EACH,GAAIC,EAAGc,eAET,IAAKf,EACH,mCAAoCC,EAAGe,iCACvC,gDAAiDf,EAAGgB,8CACpD,6BAA8BhB,EAAGiB,2BACjC,8BAA+BjB,EAAGkB,4BAClC,8BAA+BlB,EAAGmB,4BAClC,iCAAkCnB,EAAGoB,wBACrC,YAAapB,EAAGqB,kBAChB,0BAA2BrB,EAAGsB,wBAC9B,qBAAsBtB,EAAGuB,mBACzB,yBAA0BvB,EAAGwB,uBAC7B,0BAA2BxB,EAAGyB,wBAC9B,0BAA2BzB,EAAG0B,wBAC9B,8BAA+B1B,EAAG2B,4BAClC,0BAA2B3B,EAAGc,cAC9B,wDAAyDd,EAAG4B,0CAC5D,+CAAgD5B,EAAG4B,0CACnD,wCAAyC5B,EAAG6B,kCAE9C,IAAK9B,EACH,GAAIC,EAAGc,eAET,IAAKf,EACH,8BAA+BC,EAAG8B,4BAClC,0BAA2B9B,EAAG+B,wBAC9B,yBAA0B/B,EAAGwB,uBAC7B,sBAAuBxB,EAAGgC,eAC1B,mBAAoBhC,EAAGiC,iBACvB,gCAAiCjC,EAAGkC,0BACpC,mBAAoBlC,EAAGmC,iBACvB,+BAAgCnC,EAAGmC,iBACnC,6BAA8BnC,EAAGoC,4BAEnC,IAAKrC,EACH,eAAgBC,EAAGqC,eAIjBC,EAAavC,EACjB,SAAUE,EACV,IAAKF,EACH,gBAAiBC,EAAGuC,cACpB,0BAA2BvC,EAAGwC,wBAC9B,8BAA+BxC,EAAGQ,6BAClC,iBAAkBR,EAAGwC,wBACrB,6BAA8BxC,EAAGyC,2BACjC,sCAAuCzC,EAAG0C,iBAC1C,mBAAoB1C,EAAG2C,iBACvB,qBAAsB3C,EAAG4C,sCACzB,6CAA8C5C,EAAG6C,2CACjD,kBAAmB7C,EAAG8C,gBACtB,qBAAsB9C,EAAG+C,mBACzB,oBAAqB/C,EAAGgD,kBACxB,0BAA2BhD,EAAGiD,uCAEhC,IAAKlD,EACH,yBAA0BC,EAAGkD,uBAC7B,sEAAuElD,EAAGmD,kDAC1E,6DAA8DnD,EAAGmD,kDACjE,yDAA0DnD,EAAGoD,kDAC7D,wDAAyDpD,EAAGqD,iDAE5D,0CAA2CrD,EAAGsD,+BAC9C,0CAA2CtD,EAAGuD,qCAC9C,gEAAiEvD,EAAGwD,2DACpE,8BAA+BxD,EAAGyD,4BAClC,+BAAgCzD,EAAG0D,6BACnC,mCAAoC1D,EAAG2D,mCACvC,8CAA+C3D,EAAG4D,yCAClD,+CAAgD5D,EAAG6D,2CAErD,IAAK9D,EACH,kCAAmCC,EAAG8D,wBACtC,oBAAqB9D,EAAG8D,wBACxB,kDAAmD9D,EAAG+D,mBACtD,0CAA2C/D,EAAG+D,mBAC9C,iCAAkC/D,EAAGgE,sBACrC,8CAA+ChE,EAAGiE,4CAClD,wBAAyBjE,EAAGkE,sBAC5B,iBAAkBlE,EAAGmE,eACrB,cAAenE,EAAG8D,wBAClB,iCAAkC9D,EAAGoE,4BACrC,gBAAiBpE,EAAGqE,mBACpB,kBAAmBrE,EAAGsE,gBACtB,mBAAoBtE,EAAGuE,iBACvB,6BAA8BvE,EAAGwE,2BACjC,iBAAkBxE,EAAGyE,eACrB,8CAA+CzE,EAAG0E,wBAClD,sCAAuC1E,EAAG0E,wBAC1C,sBAAuB1E,EAAG2E,oBAC1B,+BAAgC3E,EAAG0D,6BACnC,0BAA2B1D,EAAG4E,wBAC9B,uDAAwD5E,EAAG6E,qDAC3D,gBAAiB7E,EAAG8E,cACpB,kCAAmC9E,EAAG+E,gCACtC,mCAAoC/E,EAAG2D,mCACvC,8BAA+B3D,EAAGgF,8BAItC,SAASC,EAAuBC,EAAMC,EAAeC,GACnD,GAAsB,MAAlBD,EAEF,OAAO,EAET,MAAME,EAAUH,EAAKC,IAAkB,CAAC,EAClCG,GAAaF,GAAW,IAAI5X,cAC5B+X,EAAWpP,OAAO8F,KAAKoJ,GAC1BG,MAAKC,GAAUA,IAAWH,GAAaA,EAAU3G,QAAQ8G,IAAW,IAEvE,OAAIF,EACKF,EAAQE,GAGbF,EAAQ,IACHA,EAAQ,IAKbH,EAAa,OACRD,EAAuBC,EAAa,OAAGC,EAAeC,QAD/D,CAMF,CAEA,SAASM,EAAkBR,EAAMC,EAAeC,GAC9C,MAAM7X,EAAS0X,EAAuBC,EAAMC,EAAeC,GAC3D,YAAe/X,IAAXE,EACKyS,EAAG2F,cAELpY,CACT,CAQA,MAAMsS,EAA6B,CAQjC+F,gBAAe,CAACT,EAAeC,IACtBM,EAAkBzF,EAAckF,EAAeC,GAGxDS,kBAAiB,CAACV,EAAeC,IACxBM,EAAkBpD,EAAY6C,EAAeC,IAIxDnd,EAAOC,QAAQ2X,2BAA6BA,kBC3L5C,MAAM,KAAE7F,GAAS,EAAQ,MA8yBzB/R,EAAOC,QAAQmD,aAAe2O,EAAKE,IA7xBd,CAOnByL,cAA+C,WAI/CG,SAA+C,EAQ/CC,sBAA+C,EAM/CC,0BAA+C,EAK/CC,kBAA+C,EAI/CC,QAA+C,EAU/C5E,wBAA+C,EAQ/CS,wBAA+C,EAW/Cb,4BAA+C,EAQ/CC,4BAA+C,EAW/CF,2BAA+C,EAO/Cf,oBAA+C,GAQ/CgC,0BAA+C,GAS/CC,iBAA+C,GAS/CrB,cAA+C,GAY/CM,wBAA+C,GAY/CC,kBAA+C,GAS/CK,wBAA+C,GAS/CH,mBAA+C,GAO/CpR,uBAA+C,GAK/CgW,mBAA+C,GAI/CC,uBAA+C,GAO/CC,eAA+C,GAS/CC,mBAA+C,GAQ/C/F,iBAA+C,GAK/CgG,eAA+C,GAK/CC,oBAA+C,GAO/CC,mBAA+C,GAa/CC,cAA+C,GAkB/C5L,qBAA+C,GAS/CqF,kBAA+C,GAO/CU,gBAA+C,GAY/CL,6BAA+C,GAS/CE,uBAA+C,GAQ/CC,qBAA+C,GAK/CgG,yBAA+C,GAQ/CtG,sBAA+C,GAQ/CI,iCAA+C,GAK/CmG,uBAA+C,GAa/CC,iBAA+C,GAO/CC,kBAA+C,GAI/CC,iBAA+C,GAI/CC,kBAA+C,GAQ/C5G,mBAA+C,GAQ/CQ,6BAA+C,GAK/CqG,2BAA+C,GAK/CC,wBAA+C,GAQ/C1F,uBAA+C,GAW/CT,iCAA+C,GAQ/CC,8CAA+C,GAU/CgB,eAA+C,IAc/CgB,kBAA+C,IAO/CT,cAA+C,IAQ/CK,sCAA+C,IAQ/CyB,mBAA+C,IAQ/CD,4BAA+C,IAQ/CJ,sBAA+C,IAQ/CD,mBAA+C,IAK/CoD,kBAA+C,IAO/CrE,gBAA+C,IAQ/Cb,iBAA+C,IAO/CkC,eAA+C,IAS/CL,wBAA+C,IAQ/CG,4CAA+C,IAU/CzB,wBAA+C,IAW/CU,uBAA+C,IAQ/CP,iBAA+C,IAQ/CP,2BAA+C,IAQ/CK,2BAA+C,IAQ/CyB,sBAA+C,IAK/CkD,+BAA+C,IAI/CC,6BAA+C,IAS/C1F,4BAAmD,IAQnDF,wBAAmD,IAOnDiB,iBAAmD,IAQnDO,sCAAmD,IAKnDqE,eAAmD,IAQnDhH,gBAAmD,IAOnD+B,aAAmD,IAQnDP,4BAAmD,IAOnDiB,mBAAmD,IAKnDwE,0BAAmD,IAInDC,mCAAmD,IAInDC,iBAAmD,IAInDC,qBAAmD,IAInDpD,gBAAmD,IAInDnB,kDAAmD,IAInDC,kDAAmD,IAInDC,iDAAmD,IAKnDC,+BAAmD,IAInDG,4BAAmD,IAInDc,iBAAmD,IAKnDC,2BAAmD,IAInDO,gCAAmD,IAKnDL,wBAAmD,IAInDC,oBAAmD,IAInDjB,6BAAmD,IAKnDkB,wBAAmD,IAMnDC,qDAA8D,IAI9DC,cAA8D,IAI9DL,eAA8D,IAI9DkD,6BAA8D,IAK9DC,mCAA8D,IAK9D/F,iCAA8D,IAI9DD,0CAA8D,IAI9D+B,mCAA8D,IAM9DkE,0BAA8D,IAK9DtE,qCAA8D,IAK9DK,yCAA8D,IAK9DC,0CAA8D,IAK9DL,2DAA8D,IAU9DwB,4BAA8D,IAQ9DnC,2CAA8D,sBC3yBhE,MAAM,YAAE/C,GAAgB,EAAQ,MAWhC,MAAM3N,UAA4B2N,EAMhC,WAAAtD,CAAYsL,GACV/J,MAAM,sBAAuB+J,GAAW,GAAI3V,EAC9C,EAUFlK,EAAOC,QAAQiK,oBAAsBA,kBC7BrC,MAAM,YAAE2N,GAAgB,EAAQ,MAUhC,MAAMxU,UAAuBwU,EAQ3B,WAAAtD,CAAYsL,EAASC,EAASC,GAQ5BjK,MAAM,iBAAkB+J,EAASxc,GAMjCmR,KAAKsL,QAAUA,EAMftL,KAAKuL,OAASA,CAChB,EAIF/f,EAAOC,QAAQoD,eAAiBA,wCC3ChC,MAAM,aAAED,GAAiB,EAAQ,OAC3B,eAAEC,GAAmB,EAAQ,OAC7B,iBAAE+G,GAAqB,EAAQ,MAG/B4V,EAAkB,CACtB,CAAC5V,EAAiB6V,iBAAkB7c,EAAa0a,sBACjD,CAAC1T,EAAiB8V,iBAAkB9c,EAAa6a,SAanD,MAAM9T,UAAqB9G,EAazB,WAAAkR,CAAYsL,EAASM,EAAWC,EAAgBL,GAC9CjK,MAAM+J,EAASG,EAAgBG,GAAYJ,GAQ3CvL,KAAKnD,KAAO,eACZmD,KAAK6L,WAAaF,EAClB3L,KAAK8L,gBAAkBF,CACzB,CAOA,oBAAIG,GACF,OAAO/L,KAAKgM,iBACd,CAOA,gBAAIC,GACF,OAAO3K,MAAMgK,OACf,CAEA,CAAC,4CACC,MAAMY,EAAW5K,MAAM,0CAAuBA,MAAM,4CAAyB,CAAC,EAC9E,OAAO5H,OAAOC,OAAOuS,EAAU,CAC7B,iBAAoBtW,EAAiBwJ,SAASY,KAAK+L,kBACnD,QAAoB/L,KAAKmM,QACzB,eAAoBnM,KAAK4L,gBAE7B,CAEA,QAAA7d,GACE,OAAOiT,EAAahB,KACtB,EAIFxU,EAAOC,QAAQkK,aAAeA,kBChF9B,MAAM,KAAE4H,GAAS,EAAQ,MA2BzB/R,EAAOC,QAAQmK,iBAAmB2H,EAAKE,IAXd,CAIvBgO,gBAAiB,EAIjBC,gBAAiB,cCfnB,MAAMrI,UAAoBnX,MACxB,WAAA6T,CAAY7C,EAAMmO,EAAStL,GACzBuB,MAAM+J,GAAW,IAMjBrL,KAAKqL,QAAUA,EAMfrL,KAAKnD,KAAOK,EAIRhR,MAAMkgB,kBACRlgB,MAAMkgB,kBAAkBpM,KAAMD,GAE9BC,KAAKqM,OAAQ,IAAIngB,OAAQmgB,KAE7B,EAIF7gB,EAAOC,QAAQ4X,YAAcA,kBCpC7B,MAAM,gBAAEiJ,GAAoB,EAAQ,OAC9B,OAAEjL,GAAW,EAAQ,OACrB,QAAEkL,GAAY,EAAQ,OACtB,KAAEhP,GAAS,EAAQ,OACnB,SAAEiP,GAAa,EAAQ,MACvB,KAAEC,GAAS,EAAQ,OACnB,QAAEnJ,GAAY,EAAQ,OACtB,MAAEoJ,GAAU,EAAQ,MACpB,SAAEC,GAAa,EAAQ,OACvB,cAAEC,GAAkB,EAAQ,MAElCphB,EAAOC,QAAQ4V,OAASA,EACxB7V,EAAOC,QAAQ6gB,gBAAkBA,EACjC9gB,EAAOC,QAAQ8gB,QAAUA,EACzB/gB,EAAOC,QAAQ8R,KAAOA,EACtB/R,EAAOC,QAAQ+gB,SAAWA,EAC1BhhB,EAAOC,QAAQghB,KAAOA,EACtBjhB,EAAOC,QAAQoK,aAAe2W,EAAS3W,aACvCrK,EAAOC,QAAQ6X,QAAUA,EACzB9X,EAAOC,QAAQihB,MAAQA,EACvBlhB,EAAOC,QAAQohB,MAAQH,EAAMG,MAC7BrhB,EAAOC,QAAQkhB,SAAWA,EAC1BnhB,EAAOC,QAAQqhB,QAAUH,EAASG,QAClCthB,EAAOC,QAAQmhB,cAAgBA,YCrB/B,SAASG,EAAkB7e,EAAGD,GAC5B,MAAM+e,EAAO5f,OAAOc,GACd+e,EAAO7f,OAAOa,GACpB,OAAO+e,EAAOC,EAAO,EAAKD,EAAOC,GAAQ,EAAI,CAC/C,CAgCAzhB,EAAOC,QAAU,CACf6gB,gBAAiB,CACfS,oBACAG,cAjCJ,SAAuBC,EAAOC,EAASC,EAAaN,GAClD,MAAMjc,EAAS,IAAIqc,GACnB,OAAOnN,KAAKsN,qBAAqBxc,EAAQsc,EAASC,EACpD,EA+BIC,qBA7BJ,SAA8BH,EAAOC,EAASC,EAAaN,GACzD,IAAIpL,EAAQ,EACR4L,EAAM,EACNC,EAAML,EAAMjgB,OAEhB,GAAIsgB,EAAM,EAER,GAAIH,EAAWD,EAASD,EAAMK,EAAM,IAAM,EACxC7L,EAAQ6L,OAIR,IADA7L,EAAS4L,EAAMC,GAAQ,EAChBA,EAAMD,GACPF,EAAWD,EAASD,EAAMxL,IAAU,EACtC6L,EAAM7L,EAEN4L,EAAM5L,EAAQ,EAEhBA,EAAS4L,EAAMC,GAAQ,EAI7BL,EAAMM,OAAO9L,EAAO,EAAGyL,EACzB,cCpCA,IAAI/L,EAkCFA,EAAS,OAGX7V,EAAOC,QAAQ4V,OAASA,YCXxB7V,EAAOC,QAAQ8gB,QAvBf,MACE,WAAAxM,IAAe2N,GACb1N,KAAK2N,QAAU,IAAIC,IACnB5N,KAAK6N,QAAU,IAAID,IACnBF,EAAMI,SAASC,IACb/N,KAAKgO,UAAUD,EAAE,GAAIA,EAAE,GAAG,GAE9B,CASA,SAAAC,CAAUC,EAAK1a,GACbyM,KAAK2N,QAAQlf,IAAIwf,EAAK1a,GACtByM,KAAK6N,QAAQpf,IAAI8E,EAAO0a,EAC1B,aCtBF,SAASC,EAASC,EAAU3O,EAAMjM,GAChC,MAAM6a,EAAU5O,EAAK6O,QAAOhe,GAAK8d,EAAS9d,KAAOkD,IACjD,OAAO6a,EAAQlhB,OAASkhB,EAAQ,GAAK,IACvC,CAeA,MAAM7Q,EAQJ,WAAAwC,CAAYuO,GACV5U,OAAO6U,iBAAiBvO,KAAM,CAC5BwO,WAAY,CACVjb,MAAc,KACdkb,YAAc,EACdC,UAAc,EACdC,cAAc,KAGlB3O,KAAKtC,cAAc4Q,EACrB,CAiBA,aAAA5Q,CAAc4Q,EAAQM,GAAQ,GAC5B5O,KAAKwO,WAAa9U,OAAOC,OAAO,CAAC,EAAG2U,GACpC5U,OAAO8F,KAAKQ,MAAM8N,SAASG,IACzB,MAAMY,EAAanV,OAAOoV,yBAAyB9O,KAAMiO,QAChCrd,IAArBie,EAAWtb,OACbmG,OAAOqV,eAAe/O,KAAMiO,EAAK,CAC/BQ,YAAc,EACdC,UAAc,EACdC,cAAc,EACdpb,MAAcsb,EAAWtb,OAE7B,IAEFmG,OAAO8F,KAAK8O,GAAQR,SAASG,IAC3BvU,OAAOqV,eAAe/O,KAAMiO,EAAK,CAC/BQ,YAAc,EACdC,UAAeE,EACfD,cAAeC,EACfrb,MAAc+a,EAAOL,IACrB,GAEN,CAoBA,QAAA7O,CAAS4P,EAAWC,EAAY,SAAUC,EAAe,aACvD,GAAIF,QAA+C,OAAOC,EAC1D,MAAMpS,EAAOqR,EAASlO,KAAKwO,WACL9U,OAAO8F,KAAKQ,KAAKwO,YAAc,CAAC,GAChCQ,IACNE,EAChB,OAAOrS,IAASmS,EAAYnS,EAAO,GAAGA,MAASmS,IACjD,CASA,MAAAG,CAAOH,GACL,OAAOd,EAASlO,KAAKwO,WAAY9U,OAAO8F,KAAKQ,KAAKwO,YAAc,CAAC,GAAIQ,EACvE,CAQA,SAAII,GACF,OAAO1V,OAAO8F,KAAKQ,KAAKwO,YAAc,CAAC,EACzC,CAQA,UAAIF,GACF,OA9HgBH,EA8HEnO,KAAKwO,WA9HGhP,EA8HS9F,OAAO8F,KAAKQ,KAAKwO,YAAc,CAAC,GA7H9Dhc,MAAM1E,KAAK,IAAIuhB,IAAI7P,EAAK9M,KAAIrC,GAAK8d,EAAS9d,OADnD,IAAoB8d,EAAU3O,CA+H5B,CAQA,UAAI8P,GACF,OAAO,CACT,CAUA,aAAOH,CAAOhB,EAAU5a,GACtB,OAAO4a,EAASgB,OAAO5b,EACzB,CAQA,aAAO+a,CAAOH,GACZ,OAAOA,EAASG,QAClB,CAUA,UAAO,CAAIA,GACT,OAAO,IAAI/Q,EAAK+Q,EAClB,CAUA,gBAAOiB,CAAUC,GACf,MAAM9c,EAAM,CAAC,EAIb,OAHA8c,EAAQ1B,SAASja,IACfnB,EAAImB,GAAKA,CAAC,IAEL0J,EAAKE,IAAI/K,EAClB,CAWA,gBAAO+c,CAAUjQ,GACf,MAAM9M,EAAM,CAAC,EAIb,OAHA8M,EAAKsO,SAAQ,CAACG,EAAKtM,KACjBjP,EAAIub,GAAOtM,CAAK,IAEXpE,EAAKE,IAAI/K,EAClB,EAGFlH,EAAOC,QAAQ8R,KAAOA,WCvMtB,MAAMiP,EAYJ,WAAAzM,CAAY2P,EAAKC,EAAQ,EAAGC,EAAMF,EAAIxiB,QAMpC8S,KAAK6P,KAAOH,EAMZ1P,KAAK8P,OAASH,EAKd3P,KAAK+P,KAAOH,CACd,CAMA,KAAAI,GACE,OAAOhQ,KAAK6P,KAAK7P,KAAK8P,OACxB,CAMA,IAAAG,GACE,QAASjQ,KAAK8P,MAChB,CAMA,GAAAF,GACE,OAAO5P,KAAK8P,QAAU9P,KAAK+P,IAC7B,CAaA,mBAAOla,CAAa6Z,EAAKC,EAAQ,EAAGC,EAAMF,EAAIxiB,QAC5C,OAAO,IAAIsf,EAASkD,EAAKC,EAAOC,EAClC,EAKFpkB,EAAOC,QAAQ+gB,SAAWA,YCvF1B,MAAM0D,EAA2B,CAC/BzB,YAAY,GAGd,SAAS0B,EAAiBhN,EAAQ8K,EAAK1a,EAAO6c,EAAU,MACtD1W,OAAOqV,eACC5L,EACA8K,EACAvU,OAAOC,OAAO,CAAEpG,SAAS2c,EAA0BE,GAC7D,CAGA,SAASC,EAAalN,EAAQ8K,EAAKqC,GAiBjC,OAhBA5W,OAAOqV,eACL5L,EACA8K,EACAvU,OAAOC,OAAO,CACZgV,cAAc,EACdtgB,IAAc,KAGZ,MAAMyC,EAASwf,EAAOnN,EAAQ8K,GAE9B,OADAkC,EAAiBhN,EAAQ8K,EAAKnd,GACvBA,CAAM,EAEfrC,IAAM8E,IACJ4c,EAAiBhN,EAAQ8K,EAAK1a,EAAM,GAErC2c,IACE/M,CACT,CAaA,MAAMsJ,EAAO,CACX8D,eAZF,SAAwBpN,EAAQpP,GAI9B,OAHA2F,OAAO8F,KAAKzL,GAAK+Z,SAASzd,IACxBggB,EAAalN,EAAQ9S,EAAG0D,EAAI1D,GAAG,IAE1B0D,CACT,EAQEsc,eACAG,UAPF,SAAmBF,GACjB,OAAOD,EAAa,CAAC,EAAG,QAASC,EACnC,GAQA9kB,EAAOC,QAAQghB,KAAOA,YC/CtBjhB,EAAOC,QAAQ6X,QAAU,YAAoBmN,GAC3C,MAAM3f,EAAS,CAAC,EAChB,IAAK,IAAIvE,EAAI,EAAGA,EAAIkkB,EAAcvjB,OAAQX,GAAK,EAC7CuE,EAAO2f,EAAclkB,IAAMkkB,EAAclkB,EAAI,GAE/C,OAAOuE,CACT,WCRA,MAAM4b,EAAQ,CAOdA,MAAc,SAAevJ,EAAQuN,GACnC,MAAMC,EAAcxN,EAAO1Q,UACrBme,EAAWF,EAAIje,UAKrB,OAJAiH,OAAOmX,oBAAoBD,GAAU9C,SAASjR,IAC/B,gBAATA,GACJnD,OAAOqV,eAAe4B,EAAa9T,EAAMnD,OAAOoV,yBAAyB8B,EAAU/T,GAAM,IAEpFsG,CACT,GAEA3X,EAAOC,QAAQihB,MAAQA,kBCjBvB,MAAM,KAAED,GAAS,EAAQ,OAEnB,aAAE4D,GAAiB5D,EA6BzB,MAAME,EACJ,WAAA5M,CAAYqQ,EAASU,GAEnBpX,OAAO8F,KAAK4Q,GAAStC,SAASiD,IAE5BA,EAAYne,MAAM,KAAKF,KAAIrC,GAAKA,EAAE2gB,SAAQlD,SAASG,IAEjD,MAAMgD,EAAUb,EAAQW,GAClBG,EAA0B,iBAAZD,EAAuBA,EAAQre,MAAM,KAAOqe,EAC1DE,GAAW3e,MAAMwB,QAAQkd,GAAQA,EAAO,CAACA,IAAOE,OAAOnD,GAE7DoC,EAAarQ,KAAMiO,GAAK,IAtChC,SAAsBoD,EAAcC,EAAWH,GAC7C,OAAOA,EAAQI,QAAO,CAACT,EAAQvd,IACR,iBAAVA,EACFud,EAAOvd,GAETA,GACN+d,EACL,CA+BsCE,CAAaV,EAAQ9Q,KAAMmR,IAAS,GAClE,GAEN,CAEA,cAAOrE,CAAQsD,EAASU,GACtB,OAAO,IAAInE,EAASyD,EAASU,EAC/B,EAIFtlB,EAAOC,QAAQkhB,SAAWA,YC/C1B,SAAS8E,EAAaC,EAAMC,GAI1B,OAHAA,EAAK7D,SAAS8D,IACZF,EAAKhB,IAAIkB,EAAK,IAETF,CACT,CA8BAlmB,EAAOC,QAAU,CACfmhB,cAAe,CACbiF,kBAbJ,SAA2BH,EAAMC,GAI/B,OAHAA,EAAK7D,SAAS8D,IACZF,EAAKI,OAAOF,EAAK,IAEZF,CACT,EASIK,oBA3BJ,SAA6BL,EAAMC,GAMjC,OALAD,EAAK5D,SAAS8D,IACPD,EAAKK,IAAIJ,IACZF,EAAKI,OAAOF,EACd,IAEKF,CACT,EAqBID,eACAQ,WA5CJ,SAAoBxjB,EAAKyjB,GACvB,OAAO1f,MAAM1E,KAAKokB,GAAQC,OAAMP,GAAQnjB,EAAIujB,IAAIJ,IAClD,EA2CIQ,WAVJ,SAAoBV,EAAMC,GACxB,OAAO,IAAItC,IAAI7c,MAAM1E,KAAK4jB,GAAMrD,QAAOuD,IAASD,EAAKK,IAAIJ,KAC3D,EASIS,aAtBJ,SAAsBX,EAAMC,GAC1B,OAAO,IAAItC,IAAI7c,MAAM1E,KAAK4jB,GAAMrD,QAAOuD,GAAQD,EAAKK,IAAIJ,KAC1D,EAqBIU,MApCJ,SAAeZ,EAAMC,GACnB,OAAOF,EAAa,IAAIpC,IAAIqC,GAAOC,EACrC,oBCfA,MAAM,aAAEY,GAAiB,EAAQ,OAC3B,MAAEC,GAAU,EAAQ,MAE1BhnB,EAAOC,QAAU,CACf8mB,eACAC,yBCLF,MAAMC,EAAmB,sBACnB,WAAEC,GAAe,EAAQ,MACzB,aAAE9jB,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,SAAEoM,GAAa,EAAQ,OAEvB,QAAE0X,EAAO,SAAEC,GAAaF,EACxBG,EAAsB,CAAC,QAAS,cAAe,kBAC/CC,EAAmB,CAAC,cAAe,kBAWzC,MAAMC,EAAmB,CACvB,MAAAC,GAAU,EACV,IAAAC,GACE,MAAM,IAAI/mB,MAAM,mBAClB,GAiPFV,EAAOC,QAAQ8mB,aA9Of,cAA2BE,EAmCzB,WAAA1S,CAAYqQ,GACV9O,QACA,MAAM,OAAE4R,EAAM,MAAEC,EAAK,OAAEC,EAAM,gBAAEC,GAAoBjD,GAAW,CAAC,EAC/DpQ,KAAKqT,gBAAkBA,GAAmB,CAACxW,GAAQA,GAInD,MAAMyW,EAAWtT,KAAKuT,KAAK/U,KAAKwB,MAChCA,KAAKwT,qBAAqBN,EAAQI,GAIlCtT,KAAKyT,sBAAsBL,GAC3BpT,KAAK0T,uBAEL1T,KAAK2T,4BAlET,SAAqBR,GACnB,GAAqB,mBAAVA,EAAsB,OAAO9iB,GAAKuiB,EAASC,EAAqBxiB,IAAM8iB,EAAM9iB,GACvF,IAAKmC,MAAMwB,QAAQmf,GAAQ,OAAO,KAClC,MAAMS,EAAU,IAAIvE,IAAIsD,EAAQQ,IAChCN,EAAoB/E,SAAQ+F,GAAMD,EAAQlD,IAAImD,KAC9C,MAAMC,EAAYthB,MAAM1E,KAAK8lB,GAC7B,OAAOvjB,GAAKuiB,EAASkB,EAAWzjB,EAClC,CA2DuC0jB,CAAYZ,GAC/CnT,KAAKgU,OAASb,CAChB,CAEA,oBAAAK,CAAqBN,EAAQI,GAC3B,GAAKJ,EAAL,CAGA,GAAIN,EAASE,EAAkBI,GAC7B,MAAM,IAAIrkB,EACR,gDAAgDikB,EAAiB7e,KAAK,mBACtErF,EAAagb,gBAIjB5J,KAAKiU,mBAAqB,IAAIC,IAASZ,EAASJ,KAAWgB,GAG3DlU,KAAKmU,WAAanU,KAAKiU,mBACvBjU,KAAKoU,iBAAmBlB,EAExBlT,KAAKqU,GAAK,CAACC,EAAWC,KACpBvU,KAAKwU,qBAAqBF,GAC1B,MAAMG,EAAMnT,MAAM+S,GAAGC,EAAWC,GAEhC,OADAvU,KAAK0U,eAAeJ,GAAW,EAAMC,GAC9BE,CAAG,EAGZzU,KAAK2U,YAAc,CAACL,EAAWC,IAAavU,KAAKqU,GAAGC,EAAWC,GAE/DvU,KAAK4U,KAAO,CAACN,EAAWC,KACtBvU,KAAKwU,qBAAqBF,GAC1B,MAAMG,EAAMnT,MAAMsT,KAAKN,EAAWC,GAElC,OADAvU,KAAK0U,eAAeJ,GAAW,GACxBG,CAAG,EAGZzU,KAAK6U,gBAAkB,CAACP,EAAWC,KACjCvU,KAAKwU,qBAAqBF,GAC1B,MAAMG,EAAMnT,MAAMuT,gBAAgBP,EAAWC,GAE7C,OADAvU,KAAK0U,eAAeJ,GAAW,EAAMC,GAC9BE,CAAG,EAGZzU,KAAK8U,oBAAsB,CAACR,EAAWC,KACrCvU,KAAKwU,qBAAqBF,GAC1B,MAAMG,EAAMnT,MAAMwT,oBAAoBR,EAAWC,GAEjD,OADAvU,KAAK0U,eAAeJ,GAAW,GACxBG,CAAG,EAGZzU,KAAK+U,mBAAsBT,IACzB,MAAMG,EAAMnT,MAAMyT,mBAAmBT,GAIrC,OAHKA,IAActU,KAAKoU,uBAAoCxjB,IAAd0jB,IAC5CtU,KAAKmU,WAAanU,KAAKiU,oBAElBQ,CAAG,EAGZzU,KAAKgV,eAAiB,CAACV,EAAWC,KAChC,MAAME,EAAMnT,MAAM0T,eAAeV,EAAWC,GAI5C,OAHKD,IAActU,KAAKoU,kBAAwD,IAAlCpU,KAAKiV,cAAcX,KAC/DtU,KAAKmU,WAAanU,KAAKiU,oBAElBQ,CAAG,EAGZzU,KAAKkV,oBAAsB,IAAMlV,KAAKiV,cAAcjV,KAAKoU,kBAEzDpU,KAAKmV,yBAA4BC,IAC/BpV,KAAKqV,uBAAyBD,CAAW,CAjExB,CAmErB,CAEA,cAAAV,CAAeJ,EAAWgB,EAAYf,GAChCD,IAActU,KAAKoU,mBAInBkB,GAA8C,IAA/BtV,KAAKkV,sBACtBlV,KAAKmU,WAAaI,EAElBvU,KAAKmU,WAAanU,KAAKiU,mBAGW,IAA/BjU,KAAKkV,4BAAiEtkB,IAAhCoP,KAAKqV,wBAC9CrV,KAAKqV,yBAET,CAEA,oBAAAb,CAAqBe,GACdvV,KAAK2T,8BAEN4B,SACFvV,KAAKwV,cACD,IAAI3mB,EAAe,+CAA+C0mB,IAC9C3mB,EAAa8E,yBAElCsM,KAAK2T,4BAA4B4B,IACpCvV,KAAKwV,cACH,IAAI3mB,EAAe,iCAAiC0mB,YAAgBvV,KAAKgU,SACrDplB,EAAa8E,yBAEvC,CAEA,oBAAAggB,GACM,CAUN,CAEA,qBAAAD,CAAsBL,GACpB,GAAIA,EAGF,YADApT,KAAKwV,cAAiBC,IAAU,MAAMA,CAAG,GAQ3C,MAAMC,EAAW1V,KAAKuT,KAAK/U,KAAKwB,MAEhCA,KAAKwV,cAAgB,SAAuBC,GAE1C,MADAzV,KAAK2V,gBAAiB,EAChBF,CACR,EAEAzV,KAAKuT,KAAO,CAAC1W,KAASqX,KACpB,IACEwB,EAAS7Y,KAASqX,EACpB,CAAE,MAAO0B,GACP,GAAI5V,KAAK2V,eAEP,MADA3V,KAAK2V,oBAAiB/kB,EAChBglB,EAGR,MAAMH,EAAMzV,KAAK6V,iBAAiBD,EAAI/Y,KAASqX,GAC/C,IACEjZ,EAAS,iBAAiBwa,EAAIK,KAAKP,MAAMQ,0DACzCL,EAAS,QAASD,EACpB,CAAE,MAAOO,GACP/a,EAAS,wCAAyC+a,EAAS,wBAAyBJ,EACtF,CACF,EAEJ,CAEA,YAAIK,GACF,OAAOjW,KAAKmU,YAAenU,KAAKmU,aAAenU,KAAKiU,kBACtD,CAEA,gBAAA4B,CAAiBD,EAAI/Y,KAASqX,GAC5B,MAAM6B,EAAgB/V,KAAKqT,gBAAgBxW,GAC3C,OAAOnD,OAAOC,OAAO,IAAI9K,EACvB,yCAAyCknB,KACzCnnB,EAAaic,eACb,aAAa,CAAChO,KAASqX,MAAS0B,KAC/B,CACDvJ,MAAOuJ,EAAGvJ,MACVyJ,KAAO,CACLP,MAAO,CAAE1Y,OAAMkZ,gBAAe7B,QAC9BzV,MAAOmX,IAGb,CAEA,cAAAM,GACElW,KAAKiU,mBAAqBlB,EAAiBC,OAG3ChT,KAAK+U,qBACL/U,KAAKuT,KAAOR,EAAiBC,OAE7BhT,KAAK2U,YAAY,iBAAkB5B,EAAiBE,MACpDjT,KAAK2U,YAAY,cAAe5B,EAAiBE,KACnD,aChQF,MAAMT,EAKJ,WAAAzS,CAAYoW,GACVnW,KAAKmW,OAAS,KACZnW,KAAKmW,OAAS,OACdA,GAAQ,CAEZ,CASA,kBAAOC,CAAYC,EAAUC,KAAepC,GAC1C,MAAMqC,EAAWC,YAAYF,EAAYD,KAAanC,GACtD,OAAO,IAAI1B,GAAM,IAAMiE,cAAcF,IACvC,CASA,iBAAOG,CAAWC,EAASC,KAAa1C,GACtC,MAAMqC,EAAWM,WAAWD,EAAUD,KAAYzC,GAClD,OAAO,IAAI1B,GAAM,IAAMsE,aAAaP,IACtC,EAGF/qB,EAAOC,QAAQ+mB,MAAQA,kBCxCvB,MAAM,eAAEuE,EAAc,yBAAEzhB,GAA6B,EAAQ,MACvD,eAAEwI,GAAmB,EAAQ,OAC7B,iBAAEzI,GAAqB,EAAQ,OAC/B,2BAAEE,GAA+B,EAAQ,KAE/C/J,EAAOC,QAAQsrB,eAAiBA,EAChCvrB,EAAOC,QAAQqS,eAAiBA,EAChCtS,EAAOC,QAAQ6J,yBAA2BA,EAC1C9J,EAAOC,QAAQ8J,2BAA6BA,EAC5C/J,EAAOC,QAAQ4J,iBAAmBA,kBCTlC,MAAM,eAAExG,GAAmB,EAAQ,MAEnC,IAAImoB,EAAU,KAEd,MAAMlZ,EAAiB,CACrB,SAAIvK,GACF,GAAgB,OAAZyjB,EACF,MAAM,IAAInoB,EAAe,sEAE3B,OAAOmoB,CACT,EACA,SAAIzjB,CAAMA,GAERyjB,EAAUzjB,CACZ,GAGF/H,EAAOC,QAAQqS,eAAiBA,uCC4BhC,MAAMiZ,EAQJ,8BAAIE,GAAiD,CAarD,gBAAIC,GAAmC,CAavC,mBAAIrY,GAAsC,CAgB1C,qBAAIsY,GAAwC,CAE5C,CAAC,4CACC,MAAO,CACL,2BAA8BnX,KAAKiX,2BACnC,aAA8BjX,KAAKkX,aACnC,gBAA8BlX,KAAKnB,gBACnC,kBAA8BmB,KAAKmX,kBAEvC,CAEA,QAAAppB,GACE,OAAOiT,EAAahB,KACtB,EA2EF,MAAMoX,EAAiB,IA7DvB,cAA8BL,EAmB5B,8BAAIE,GAA+B,OAAO,CAAyB,CAoBnE,gBAAIC,GAAiB,OAAO,CAA4B,CAUxD,mBAAIrY,GAAoB,OAAO,CAAO,CAUtC,qBAAIsY,GAAsB,OAAO,CAAM,GAsFzC,MAAME,EAAc,IAvEpB,cAA+BN,EAuB7B,8BAAIE,GACF,OAAO,CACT,CAmBA,gBAAIC,GACF,OAAO,CACT,CAUA,mBAAIrY,GACF,OAAO,CACT,CAUA,qBAAIsY,GAAsB,OAAO,CAAM,GAwFzC,MAAMG,EAAkB,IAxExB,cAAgCP,EAuB9B,8BAAIE,GACF,OAAO,CACT,CAmBA,gBAAIC,GACF,OAAO,CACT,CAUA,mBAAIrY,GACF,OAAO,CACT,CAUA,qBAAIsY,GAAsB,OAAO,CAAO,GAepC7hB,EAA2B,CAC/BiiB,QAAUH,EACVI,KAAUH,EACVI,SAAUH,EACVI,SAAUN,EA8BVO,SAAUP,EAkCVQ,UAAWP,EA8BXQ,YAAaP,EAEb,CAAC,4CACC,MAAO,CACL,SAAetX,KAAK2X,SACpB,UAAe3X,KAAK4X,UACpB,YAAe5X,KAAK6X,YAExB,EAEA,QAAA9pB,GACE,OAAOiT,EAAahB,KACtB,GAGFxU,EAAOC,QAAQsrB,eAAiBA,EAChCvrB,EAAOC,QAAQ6J,yBAA2BA,uCC7d1C,MAAM,cAAEwiB,GAAkB,EAAQ,MAC5B,MAAEC,GAAU,EAAQ,KAE1B,SAASC,IAGP,MAAM,SAAEhiB,GAAa,EAAQ,MAC7B,OAAOA,EAASiiB,IAClB,CAQA,MAAM1iB,UAAmCuiB,EAWvC,WAAA/X,CAAYqQ,GACV9O,MAAM,CACJ4W,SAAUF,IACVG,OAAU,MACT/H,EACL,CAWA,WAAIgI,GACF,OAAOpY,KAAKqY,QACd,CACA,WAAID,CAAQA,GACVpY,KAAKqY,SAAWD,CAClB,CAOA,YAAIF,GACF,OAAOH,EAAMO,OAAOtY,KAAKuY,WAAavY,KAAKuY,UAAYP,GACzD,CACA,YAAIE,CAAS5pB,GACX0R,KAAKuY,UAAYjqB,CACnB,CAQA,UAAI6pB,GACF,OAAOnY,KAAKwY,SAAW,IACzB,CACA,UAAIL,CAAO7pB,GACT0R,KAAKwY,QAAUlqB,CACjB,CAEA,CAAC,4CAGC,MAAM,SAAE0H,GAAa,EAAQ,MAC7B,MAAO,CACL,SAAYA,EAASoJ,SAASY,KAAKuY,WACnC,QAAYvY,KAAKqY,SAErB,CAEA,QAAAtqB,GACE,OAAOiT,EAAahB,KACtB,EAGFxU,EAAOC,QAAQ8J,2BAA6BA,kBC1F5C,MAAM,aACJ3G,EAAY,eACZC,GACE,EAAQ,OACN,eAAEkoB,EAAc,yBAAEzhB,GAA6B,EAAQ,MACvD,UAAEqG,GAAc,EAAQ,MACxB,eAAEmC,GAAmB,EAAQ,OAC7B,2BAAEvI,GAA+B,EAAQ,KAEzCkjB,EAAe,CACnBC,gBAAiB,EACjBC,aAAiB,IAwCbtjB,EAAmB,CAOvB,cAAAujB,CAAeC,GACbJ,EAAaE,aAAaG,KAAKD,EACjC,EAOA/c,cAAc+c,GACL,YAA0B3E,GAC/B,GAAqC,IAAjCuE,EAAaC,gBACf,MAAM,IAAI7pB,EAAe,mCAAoCD,EAAa4a,mBAE5E,OAAOqP,KAAQ3E,EACjB,EAoBF,IAAA6E,CAAKC,GACH,GAAIP,EAAaC,gBAAkB,EACjC,OAAO1Y,KAGT,MAAMiZ,EAAQ,IAAI1jB,EAA2ByjB,GACvCZ,EAAUY,GAAgBA,EAAaZ,SAAW9iB,EAAyBqiB,SASjF,GARAhc,EAAUud,aAAa,uBAAwBd,EAASrB,GACxDjZ,EAAevK,MAAQ6kB,EAEvBK,EAAaE,aAAa7K,SAASqL,IACjCA,EAAYxmB,KAAKqN,KAAMiZ,EAAOR,EAAa,MAE3CA,EAAaC,gBAEX,MAACM,EAAwD,CAG3D,MAAM,UAAEI,GAAc,EAAQ,KAEhC,CACA,OAAOpZ,IACT,EAKA,KAAAqZ,GACEZ,EAAaC,gBAAkB,CACjC,EAQAY,oBAAmB,IACVb,EAAaC,gBAWtB,YAAIa,GACF,OAAOjkB,CACT,GAGF9J,EAAOC,QAAQ4J,iBAAmBA,kBCnJlC,MAAM,KAAEmkB,GAAS,EAAQ,OACnB,cAAEC,GAAkB,EAAQ,OAC5B,qBAAEC,GAAyB,EAAQ,MAEzCluB,EAAOC,QAAQ+tB,KAAOA,EACtBhuB,EAAOC,QAAQguB,cAAgBA,EAC/BjuB,EAAOC,QAAQiuB,qBAAuBA,kBCNtC,MAAM,KAAEnc,GAAS,EAAQ,MAczB/R,EAAOC,QAAQguB,cAAgBlc,EAAKE,IAZd,CACpBkc,QAAiB,wBACjBC,WAAiB,2BACjBC,MAAiB,sBACjBC,KAAiB,qBACjBC,QAAiB,wBACjBC,UAAiB,0BACjBC,YAAiB,4BACjBC,eAAiB,+BACjBC,gBAAiB,kDCXnB,MAAM,aACJvrB,EAAY,oBACZ8G,EAAmB,eACnB7G,GACE,EAAQ,OACN,aAAE0jB,GAAiB,EAAQ,OAC3B,cAAEkH,GAAkB,EAAQ,OAC5B,aAAEW,GAAiB,EAAQ,OAC3B,qBAAEV,GAAyB,EAAQ,OACnC,MAAEW,GAAU,EAAQ,MAGpBC,EAAa,CACjBb,EAAcM,QACdN,EAAcO,UACdP,EAAcS,eACdT,EAAcQ,aAehB,MAAMT,UAAajH,EAUjB,WAAAxS,CAAYwa,EAAgBC,EAAyBC,GACnD,MAAMC,EAAqBhhB,OAAOC,OAAO,CAAC,EAAG8gB,GAC7CC,EAAmBvH,OAASuH,EAAmBvH,OAAS,IAAI/B,OAC1DsI,EAAqBpL,QAEvBhN,MAAMoZ,GACN,MAAMC,EAAmBH,EAAwBxa,MAC3C4a,EAAO5a,KACbA,KAAKmY,OAAS,IAAIiC,GAAa,IAAIlG,IACjC,CAAC,YAAYyG,EAAiBE,gBAAiB,SAASD,EAAKE,gBAAiB5G,KAChFlU,KAAK+a,IAAM/a,KAAKmY,OAAO6C,KAAKhb,KAAK+a,IAAK/a,MAGtCA,KAAKib,YAAa,EAElBjb,KAAKkb,WAAY,EACjBlb,KAAKmb,mBAAoB,EACzBnb,KAAKob,YAAcb,EACnBva,KAAKqb,kBAAoBV,EACzB3a,KAAKsb,OAAS,IAAIjB,EAAMM,GACxB3a,KAAKub,qBAAuB,IAAIhJ,EAAamI,EAC/C,CAGA,KAAAc,CAAMte,KAASgX,GACblU,KAAKub,qBAAqBhI,KAAKrW,KAASgX,GACxClU,KAAKuT,KAAKrW,KAASgX,EACrB,CACA,GAAAuH,CAAIve,EAAMqX,GACRvU,KAAKub,qBAAqBlH,GAAGnX,EAAMqX,EACrC,CACA,KAAAmH,CAAMxe,EAAMqX,GACVvU,KAAKub,qBAAqB3G,KAAK1X,EAAMqX,EACvC,CACA,eAAAoH,CAAgBze,EAAMqX,GACpBvU,KAAKub,qBAAqBvG,eAAe9X,EAAMqX,EACjD,CASA,UAAAqH,GACE,MAAM,UAAEC,GAAc7b,KAAKmY,OAE3BnY,KAAK8b,gBAAgBrC,EAAcQ,aACnCja,KAAKsb,OAAOS,YACd,CAOA,OAAAC,GACE,MAAM,UAAE5C,GAAcpZ,KAAKmY,OAE3BnY,KAAKic,kBAAmB,EACxBjc,KAAK8b,gBAAgBrC,EAAcE,QACrC,CAKA,OAAAuC,GACE,MAAM,UAAEL,EAAS,UAAEzC,GAAcpZ,KAAKmY,OAGtC,GAAInY,KAAKkb,WAAalb,KAAKib,WAEzB,OAIFjb,KAAK8b,gBAAgBrC,EAAcM,SAEnC/Z,KAAKib,YAAa,EAElB,MAAMkB,EAAY,KAChBnc,KAAKkb,WAAY,EACjBlb,KAAKob,YAAc,KACnBpb,KAAKmb,mBAAoB,EACzBnb,KAAKwb,MAAMxb,KAAKoc,oBAChBpc,KAAKkW,iBACLlW,KAAKub,qBAAqBrF,gBACL,EAEvB,GAAIlW,KAAKqc,KAAKC,aAAc,CAG1B,MAAMC,EAA0B,KAC9Bvc,KAAKqc,KAAKG,eACVL,GAAW,EAGbtF,YAAW,IAAM0F,KAA2B,EAC9C,MAEEJ,GAEJ,CAKA,UAAAM,GACEzc,KAAK8b,gBAAgBrC,EAAcG,YACnC,MAAM,UAAER,GAAcpZ,KAAKmY,OAE3BnY,KAAKic,kBAAmB,CAC1B,CAWA,kBAAAS,GACE1c,KAAK8b,gBAAgBrC,EAAcG,WACrC,CAUA,gBAAAwC,GACE,MAAM,IAAI1mB,EAAoB,kBAChC,CAOA,aAAAinB,GAEE,OADA3c,KAAK8b,gBAAgBrC,EAAcS,gBAC5Bla,KAAKob,YAAYwB,OAC1B,CAQA,OAAAC,CAAQC,GAEN,OADA9c,KAAK8b,gBAAgBrC,EAAcO,WAC5Bha,KAAKsb,OAAOuB,QAAQC,EAC7B,CAMA,gCAAAC,CAAiC1R,GAC/B,MAAM,IAAI3V,EAAoB,6EAA8E2V,EAC9G,CAOA,OAAA2R,CAAQF,EAAUvpB,GAChByM,KAAKsb,OAAO0B,QAAQF,EAAUvpB,EAChC,CAMA,eAAA0pB,CAAgB1H,GACdvV,KAAKqc,KAAKa,aAAa3H,EACzB,CAMA,CAAC,4CACC,MAAO,CACL,OAAUvV,KAAK8a,UAEnB,CAKA,QAAA/sB,GACE,OAAOiS,KAAK,2CACd,CAOA,UAAImd,GACF,OAAQnd,KAAKod,QACf,CAOA,YAAIA,GACF,OAAOpd,KAAKkb,SACd,CAEA,aAAIJ,GACF,OAAO9a,KAAKqd,QAAU,OACxB,CAOA,UAAIA,GACF,OAAO,IAAI3nB,EAAoB,sCACjC,CAMA,WAAI4nB,GACF,OAAOtd,KAAKud,QACd,CAEA,oBAAItB,GACF,OAAOjc,KAAKmb,iBACd,CACA,oBAAIc,CAAiB1oB,GACnByM,KAAKmb,kBAAoB5nB,CAC3B,CAQA,eAAAuoB,CAAgB0B,GACd,MAAM,UAAE3B,GAAc7b,KAAKmY,OAE3B,GADgCsB,EAAcra,SAASoe,GACnDxd,KAAKkb,UACP,MAAM,IAAIrsB,EAAe,8DACAD,EAAa4a,mBAKxC,GAAI8Q,EAAW7a,MAAKge,GAAKA,IAAMD,IAAY,OAAO,EAElD,GAAIA,IAAc/D,EAAcG,YAAc5Z,KAAK0d,kBACjD,MAAM,IAAI7uB,EACR,kEACAD,EAAa4a,kBAKnB,CAEA,eAAAkU,GACE,MAAM,IAAIhoB,EAAoB,uCAChC,EAIFlK,EAAOC,QAAQ+tB,KAAOA,kBCpUtB,MAAM,KAAEjc,GAAS,EAAQ,MAMzB/R,EAAOC,QAAQiuB,qBAAuBnc,EAAKE,IAJd,CAC3BkgB,aAAc,qDCChB,MAAM,SAAEC,GAAa,EAAQ,OACvB,MAAEC,GAAU,EAAQ,OACpB,aAAEC,GAAiB,EAAQ,MAEjCtyB,EAAOC,QAAQmyB,SAAWA,EAC1BpyB,EAAOC,QAAQoyB,MAAQA,EACvBryB,EAAOC,QAAQqyB,aAAeA,kBCV9B,MAAMC,EAAW,EAAQ,OACnB,UAAEC,GAAc,EAAQ,MAwD9BxyB,EAAOC,QAAQwyB,WA3Cf,cAAyBD,EAavB,WAAAje,CAAYnD,GAGV,IAAIshB,EAFJ5c,MAAM,CAAEzE,KAAMD,EAAKuhB,iBAGnBne,KAAKoe,KAAOpe,KAAKoe,MAAQ,CAAC,EAI1Bpe,KAAKoe,KAAKC,WAAa,IAAIN,EAASF,MAAM,CACxChhB,KAAe,GAAGD,EAAK0hB,MAAM7d,8BAA8B7D,EAAKuhB,iBAChEI,cAAe3hB,EAAK0hB,MAAME,cACzBC,SAAQ,IAAM7hB,EAAK0hB,MAAMI,aAAaR,KAIzCA,EAAa,IAAIH,EAASF,MAAM,CAC9BhhB,KAAe,GAAGD,EAAK0hB,MAAM7d,8BAA8B7D,EAAKuhB,iBAChEI,cAAe3hB,EAAK0hB,QACnBG,QAAQ7hB,EAAKic,KAClB,CAMA,YAAA8F,GACE,OAAO3e,KAAKoe,KAAKC,UACnB,mBCtDF,MAAM,UAAEL,GAAc,EAAQ,MAK9BxyB,EAAOC,QAAQmyB,SAHf,cAAuBI,oBCFvB,MAAMD,EAAW,EAAQ,OACnB,UAAEC,GAAc,EAAQ,MAkD9BxyB,EAAOC,QAAQmzB,UAtCf,cAAwBZ,EAatB,WAAAje,CAAYnD,GAGV,IAAIyhB,EAFJ/c,MAAM,CAAEzE,KAAMD,EAAKiiB,gBAMnB7e,KAAKoe,KAAKF,WAAa,IAAIH,EAASF,MAAM,CACxChhB,KAAe,GAAGD,EAAK0hB,MAAM7d,6BAA6B7D,EAAKiiB,gBAC/DN,cAAe3hB,EAAK0hB,QACnBG,SAAQ,IAAM7hB,EAAK0hB,MAAMI,aAAaL,KAIzCA,EAAa,IAAIN,EAASF,MAAM,CAC9BhhB,KAAe,GAAGD,EAAK0hB,MAAM7d,6BAA6B7D,EAAKiiB,gBAC/DN,cAAe3hB,EAAK0hB,MAAME,cACzBC,QAAQ7hB,EAAKic,KAClB,CAEA,YAAA8F,GACE,OAAO3e,KAAKoe,KAAKF,UACnB,mBChDF,MAAM,eAAErvB,GAAmB,EAAQ,MAyDnCrD,EAAOC,QAAQuyB,UAlDf,MAQE,WAAAje,CAAYnD,GACV,IAAKA,EACH,MAAM,IAAI/N,EAAe,oBAE3B,IAAK+N,EAAKC,KACR,MAAM,IAAIhO,EAAe,6BAE3BmR,KAAKoe,KAAO,CACVvhB,KAAMD,EAAKC,KAEf,CAKA,QAAA9O,GACE,IAAI+wB,EAAkB9e,KAAK+e,qBAI3B,OAHID,EAAgB5xB,OAAS,IAC3B4xB,EAAkB,KAAKA,KAElB,IAAI9e,KAAKD,YAAYlD,SAASmD,KAAKS,YAAYqe,IACxD,CAQA,kBAAAC,GACE,MAAO,EACT,CAKA,OAAAte,GACE,OAAOT,KAAKoe,KAAKvhB,IACnB,mBCrDF,MAAMkhB,EAAW,EAAQ,OACnB,UAAEC,GAAc,EAAQ,OACxB,SAAExR,GAAa,EAAQ,OACvB,UAAEqP,GAAc,EAAQ,OAExB,aAAEhmB,GAAiB2W,EAyBzB,MAAMwS,UAAqBhB,EAOzB,WAAAje,CAAYnD,GACV0E,MAAM1E,GACNoD,KAAKoe,KAAOpe,KAAKoe,MAAQ,CAAC,EAC1Bpe,KAAKoe,KAAKa,WAAa,EACzB,CAMA,eAAAC,GACE,OAAOlf,KAAKoe,KAAKe,aAAa,EAChC,CASA,OAAAV,CAAQ5F,GAKN,OAJI7Y,KAAKoe,KAAKgB,iBACZpf,KAAK+a,IAAI,aAAa/a,wBAAwBA,KAAKoe,KAAKgB,wBAAwBvG,KAElF7Y,KAAKoe,KAAKgB,gBAAkBvG,EAAKra,KAAKwB,MAC/BA,IACT,CA8BA,YAAA0e,CAAaJ,EAAOe,GAClB,OAAO,IAAIL,EAAaM,eAAe,CACrCC,OAAWvf,KACXwf,UAAWlB,EACXe,UAEJ,CAQA,SAAAlD,CAAUkD,GACR,OAAO,IAAIL,EAAaM,eAAe,CACrCC,OAAWvf,KACXwf,UAAWxf,KAAKkf,kBAAkBO,gBAClCJ,UAEJ,CAkBA,eAAAK,GACE,OAAO1f,KAAKoe,KAAKe,YACnB,CAOA,GAAApE,IAAO7G,GACKlU,KAAKoe,KAAKa,UACtB,CAUA,SAAAU,CAAUpK,GACR,IAAIzkB,EAEJ,GAAIkP,KAAKoe,KAAKgB,gBAAiB,CAG7B,GAFApf,KAAK+a,IAAI,gBAAgB/a,QACzBlP,EAASkP,KAAKoe,KAAKgB,gBAAgB7J,GAC/BzkB,EAAO8uB,SACT,MAAM,IAAI1zB,MAAM,wBAAwB8T,sCAE1C,OAAOlP,CACT,CAEA,KAAMkP,gBAAiB+d,EAAc,OACnC,MAAM,IAAI7xB,MAAM,gCAAgC8T,QASlD,OAAOA,KAAK0e,aAAa1e,KAC3B,CAYA,qBAAA6f,CAAsB/uB,EAAQgvB,GAC5B,IAAIC,EAAa/f,KAEjB,IAAKlP,EAAO0uB,UACV,OAAOxf,KAGT,MAAMggB,EAAgBhgB,KAAKigB,qBAAqBnvB,GAGhD,KAAOivB,IAAeC,EAAchQ,SAClC+P,EAAWG,SACXH,EAAaA,EAAWvB,YAa1B,IATI1tB,EAAOuuB,QACTvuB,EAAOuuB,OAAOU,EAAYD,GAG5BC,EAAWhF,IAAI,yBAAyBjqB,EAAO0uB,wBAAwBO,KAKlEC,EAAc/P,QAAS+P,EAAcpQ,MAAOoQ,EAAc/P,OAC7D8P,EAAaC,EAAchQ,QAC3B+P,EAAWI,UAIb,MAAMC,EAAcL,EAAWJ,UAAUG,GACzC,OAAIM,EAAYZ,YAAcO,EACrBA,EAAWF,sBAAsBO,EAAaN,GAEhDC,CACT,CAeA,oBAAAE,CAAqBI,GACnB,MAAMlB,EAAenf,KAAKoe,KAAKe,aACzBmB,EAAmBD,EAAeb,UAAUE,kBAClD,IAAInzB,EAGJ,GAAI4yB,EAAa,KAAOmB,EAAiB,GACvC,MAAM,IAAIp0B,MAAM,+BAA+B8T,WAAWmf,EAAa,YAAYkB,EAAeb,gBAAgBc,EAAiB,OAKrI,GAAItgB,OAASqgB,EAAeb,UAC1BjzB,EAAI4yB,EAAajyB,OACbmzB,EAAeT,YAGfrzB,MAEC,CACL,IAAKA,EAAI,EAAGA,EAAI4yB,EAAajyB,QACvBiyB,EAAa5yB,KAAO+zB,EAAiB/zB,KADJA,GAOlCA,IAAM4yB,EAAajyB,QAAYX,IAAM+zB,EAAiBpzB,QAGrDmzB,EAAeT,YACfrzB,CAGR,CAKA,OAAOsJ,EAAayqB,EAAkB/zB,EAAI,EAC5C,CAEA,aAAAg0B,CAAcC,GACZxgB,KAAKoe,KAAKa,WAAauB,CACzB,EASFxB,EAAaM,eAAiB,MAsB5B,WAAAvf,CAAYnD,GACV,KAAKA,GAASA,EAAK2iB,QAAY3iB,EAAK2iB,kBAAkBP,GACpD,MAAM,IAAI9yB,MAAM,gDAGlB,IAAK0Q,EAAK2iB,OAAOL,kBAAkBuB,YACjC,MAAM,IAAIv0B,MAAM,sEAElB,GAAI0Q,EAAK4iB,UAAW,CAClB,KAAM5iB,EAAK4iB,qBAAqBzB,EAASF,OACvC,MAAM,IAAI3xB,MAAM,oCAElB,GAAI0Q,EAAKyiB,QAAoC,mBAAjBziB,EAAW,OACrC,MAAM,IAAI1Q,MAAM,6BAElB8T,KAAKwf,UAAY5iB,EAAK4iB,UACtBxf,KAAKqf,OAASziB,EAAKyiB,OACnBrf,KAAK4f,SAAWhjB,EAAKgjB,QACvB,CACF,GAGFp0B,EAAOC,QAAQuzB,aAAeA,kBChV9B,MAAM,UAAE9jB,GAAc,EAAQ,OACxB,MAAE2iB,GAAU,EAAQ,OACpB,aAAEmB,GAAiB,EAAQ,MAgTjCxzB,EAAOC,QAAQqyB,aApSf,cAA2BkB,EAOzB,WAAAjf,CAAYnD,GACV,GAAIA,EAAK2hB,cACP,MAAM,IAAIryB,MAAM,2CAA2C0Q,EAAK2hB,iBAElEjd,MAAM1E,GACNoD,KAAKoe,KAAKe,aAAe,CAACnf,MAC1BA,KAAKoe,KAAKsC,WAAa,GACvB1gB,KAAKoe,KAAKuC,WAAa,IAAI9C,EAAM,CAAEhhB,KAAM,aAAc0hB,cAAeve,OACtEA,KAAKoe,KAAKwC,wBAA0B,CAACC,EAAIC,KACvC5lB,EAAU,yBAAyB8E,yBAAyB6gB,MAAOC,EAAIzU,SAChErM,KAAKmc,YAEhB,CAQA,OAAA4E,CAAQlI,GACN,MAAM,KAAEuF,GAASpe,MACX,WAAE0gB,GAAetC,EAGvB,GADAsC,EAAW5H,KAAKD,GACZuF,EAAK4C,iBACP,OAAO,EAIT,IAFA5C,EAAK4C,kBAAmB,EAEjBN,EAAWxzB,QAAQ,CACZwzB,EAAWnyB,QACnB6B,MAAM4P,KACZ,CAIA,OAFAoe,EAAK4C,kBAAmB,EACxBhhB,KAAKihB,sBACE,CACT,CAQA,KAAAtR,GACE,GAAI3P,KAAKkhB,kBACP,MAAM,IAAIh1B,MAAM,gBAAgB8T,KAAKS,qCAGvCT,KAAK+gB,SAAQ,KACX,MAAMjwB,EAASkP,KAAK2f,YAKpB,QAAyB/uB,IAArBE,EAAO0uB,UACT,MAAM,IAAItzB,MAAM,yDAAyD8T,QAG3E,GAAIlP,EAAO0uB,YAAcxf,KACvB,MAAM,IAAI9T,MAAM,gDAAgD8T,2BAGlE,MAAMsgB,EAAmBxvB,EAAO0uB,UAAUE,kBAC1C,GAAIY,EAAiB,KAAOtgB,KAC1B,MAAM,IAAI9T,MAAM,8BAA8B4E,EAAO0uB,yDACHxf,8BACtBsgB,EAAiB,OAG/CtgB,KAAKoe,KAAK+C,aAAenhB,KAAK6f,sBAAsB/uB,EAAO,GAE/D,CAMA,SAAA2vB,GACE,OAAOzgB,KAAKoe,KAAK4C,gBACnB,CAMA,YAAA9D,CAAakE,GACX,MAAM,KAAEhD,GAASpe,KACZA,KAAK+gB,SAAQ,KAEhB,IAAIjwB,EACJ,GAFAkP,KAAK+a,IAAI,oBAAoBqG,KAEzBhD,EAAK+C,aACP,IACErwB,EAASstB,EAAK+C,aAAaE,YAAYD,GACvChD,EAAK+C,aAAe/C,EAAK+C,aAAatB,sBAAsB/uB,EAAQswB,EACtE,CAAE,MAAON,GACP9gB,KAAK+a,IAAI,oBAAoB+F,iBAC7BhwB,EAASstB,EAAKwC,wBAAwBjuB,KAAKyrB,EAAK+C,aACLC,EACAN,GAC3C1C,EAAK+C,aAAe/C,EAAK+C,aAAatB,sBAAsB/uB,EAAQswB,EACtE,CACF,KAGAphB,KAAK+a,IAAI,mBAAmBqG,IAEhC,CASA,YAAA5E,GACE,MAAM8E,EAAWthB,KAAKkhB,kBACtB,GAAKI,EAAL,CAGA,GAAIthB,KAAKoe,KAAK4C,iBACZ,MAAM,IAAI90B,MAAM,yJAIlB8T,KAAK+gB,SAAQ,KACX,MAAMjwB,EAASwwB,EAASnF,YACxBnc,KAAKoe,KAAK+C,aAAeG,EAASzB,sBAAsB/uB,EAAO,GARjE,CAUF,CAkBA,kBAAAywB,CAAmBC,GACjB,IAAKxhB,KAAKoe,KAAK4C,iBACb,MAAM,IAAI90B,MAAM,+DAElB,IAAKs1B,GAA8C,mBAApBA,EAK7B,MAAM,IAAIt1B,MAAM,4CAA4Cs1B,MAE9DxhB,KAAKoe,KAAKoD,gBAAkBA,EAAgBhjB,KAAKwB,KACnD,CAOA,kBAAAihB,GACE,MAAM5B,EAASrf,KAAKoe,KAAKoD,gBACrBnC,IACFrf,KAAKoe,KAAKoD,qBAAkB5wB,EAC5BoP,KAAK+a,IAAI,6BACTsE,EAAOjvB,MAAM4P,MAEjB,CAUA,eAAAkhB,GACE,OAAOlhB,KAAKoe,KAAK+C,YACnB,CAgBA,cAAAM,CAAe5kB,GACb,MAAM6kB,EAAe1hB,KAAKoe,KAAK+C,aAAazB,kBAG5C,IAAK,IAAInzB,EAAI,EAAGA,EAAIm1B,EAAax0B,SAAUX,EACzC,GAAIm1B,EAAan1B,GAAGkU,YAAc5D,EAChC,OAAO6kB,EAAan1B,EAI1B,CAOA,aAAAo1B,CAAc9kB,GACZ,YAAqCjM,IAA9BoP,KAAKyhB,eAAe5kB,EAC7B,CAUA,sBAAA+kB,CAAuBtxB,GACrB,GAAiB,mBAANA,EACT,MAAM,IAAIpE,MAAM,MAAM8T,0DAA0D1P,KAGlF,OADA0P,KAAKoe,KAAKyD,qBAAuBvxB,EAAEkO,KAAKwB,MACjCA,IACT,CAyBA,yBAAA8hB,CAA0BxxB,GACxB,GAAiB,mBAANA,EACT,MAAM,IAAIpE,MAAM,MAAM8T,6DAA6D1P,KAGrF,OADA0P,KAAKoe,KAAKwC,wBAA0BtwB,EAC7B0P,IACT,CAUA,aAAAyf,GACE,OAAOzf,KAAKoe,KAAKuC,UACnB,mBC/SF,MAAM,WAAE1C,GAAe,EAAQ,OACzB,UAAEW,GAAc,EAAQ,OACxB,aAAEI,GAAiB,EAAQ,MAqWjCxzB,EAAOC,QAAQoyB,MA9Vf,cAAoBmB,EAYlB,WAAAjf,CAAYnD,EAAMmlB,EAAa,MAC7BzgB,MAAM1E,GAEN,MAAM2hB,EAAgB3hB,EAAK2hB,cAC3B7kB,OAAOC,OAAOqG,KAAKoe,KAAM,CACvBG,gBACAyD,UAAsB,CAAC,EACvBC,YAAsB,CAAC,EACvBC,WAAsB,CAAC,EACvB/C,aAAsB,IAAIZ,EAAcmB,kBAAmB1f,MAC3D6hB,qBAAsB/B,GACpBvB,EAAc8C,YACV9C,EAAc8C,YAAYvB,GAC1BvB,EAAcH,KAAKyD,qBAAqB/B,KAG5CvB,IAAeve,KAAK+a,IAAMwD,EAAcxD,IAAIvc,KAAKwB,OAGrDtG,OAAO8F,KAAKuiB,GAAc,CAAC,GAAGjU,SAASzd,IACrC,MAAM8xB,EAAYJ,EAAW1xB,GAC7B2P,KAAK3P,GAA0B,mBAAd8xB,EAA2BA,EAAU3jB,KAAKwB,MAAQmiB,CAAS,IAG9EniB,KAAKugB,cAAc,IAAI6B,OAAOpiB,KAAKoe,KAAKe,aAAajyB,QACvD,CAYA,QAAAm1B,CAAS/N,EAAWuE,GAClB,IAAKvE,EAAW,MAAM,IAAIpoB,MAAM,8BAChC,IAAK2sB,EAAM,MAAM,IAAI3sB,MAAM,qCAAqCooB,KAQhE,OANAtU,KAAK+a,IAAI,sBAAsB/a,kBAAkBsU,KAE7CtU,KAAKoe,KAAK4D,UAAU1N,IACtBtU,KAAK+a,IAAI,sBAAsB/a,KAAKoe,KAAK4D,UAAU1N,WAAmBuE,KAExE7Y,KAAKoe,KAAK4D,UAAU1N,GAAauE,EAAKra,KAAKwB,MACpCA,IACT,CAUA,UAAAsiB,CAAWnE,EAAgBtF,GACzB,IAAKsF,EAAgB,MAAM,IAAIjyB,MAAM,uCACrC,IAAK2sB,EAAM,MAAM,IAAI3sB,MAAM,wCAAwCiyB,KAInE,OAFAne,KAAK+a,IAAI,qBAAqBoD,QAAqBne,QAE/CA,KAAKoe,KAAK6D,YAAY9D,IACxBne,KAAK+a,IAAI,cAAcoD,uBAAoCne,QACpDA,OAGTA,KAAKoe,KAAK6D,YAAY9D,GAAkB,IAAIF,EAAW,CACrDK,MAAOte,KACPme,iBACAtF,SAGK7Y,KACT,CAUA,SAAAuiB,CAAU1D,EAAehG,GACvB,IAAKgG,EAAe,MAAM,IAAI3yB,MAAM,sCACpC,IAAK2sB,EAAM,MAAM,IAAI3sB,MAAM,uCAAuC2yB,KAIlE,OAFA7e,KAAK+a,IAAI,oBAAoB8D,QAAoB7e,QAE7CA,KAAKoe,KAAK8D,WAAWrD,IACvB7e,KAAK+a,IAAI,aAAa8D,wBAAoC7e,QACnDA,OAGTA,KAAKoe,KAAK8D,WAAWrD,GAAiB,IAAID,EAAU,CAClDN,MAAOte,KACP6e,gBACAhG,SAGK7Y,KACT,CASA,sBAAAwiB,CAAuBrE,GACrB,YAA8CvtB,IAA1CoP,KAAKoe,KAAK6D,YAAY9D,IACxBne,KAAK+a,IAAI,GAAG/a,oBAAoBme,qBACzBne,MAGFA,KAAKoe,KAAK6D,YAAY9D,GAAgBQ,cAC/C,CASA,qBAAA8D,CAAsB5D,GACpB,YAA4CjuB,IAAxCoP,KAAKoe,KAAK8D,WAAWrD,IACvB7e,KAAK+a,IAAI,GAAG/a,mBAAmB6e,qBACxB7e,MAGFA,KAAKoe,KAAK8D,WAAWrD,GAAeF,cAC7C,CAUA,KAAA+D,CAAM7J,GAKJ,OAJI7Y,KAAKoe,KAAKuE,cACZ3iB,KAAK+a,IAAI,4BAA4B/a,KAAKoe,KAAKuE,qBAAqB9J,KAEtE7Y,KAAKoe,KAAKuE,aAAe9J,EAAKra,KAAKwB,MAC5BA,IACT,CAUA,IAAA4iB,CAAK/J,GAKH,OAJI7Y,KAAKoe,KAAKyE,aACZ7iB,KAAK+a,IAAI,2BAA2B/a,KAAKoe,KAAKyE,oBAAoBhK,KAEpE7Y,KAAKoe,KAAKyE,YAAchK,EAAKra,KAAKwB,MAC3BA,IACT,CAaA,oBAAA8iB,CAAqBxE,EAAOe,GAC1B,OAAO,IAAIL,EAAaM,eAAe,CACrCC,OAAWvf,KACXwf,UAAWlB,EACXe,SACAO,UAAW,GAEf,CAaA,sBAAAmD,CAAuBzE,EAAOH,EAAgBkB,GAC5C,OAAO,IAAIL,EAAaM,eAAe,CACrCC,OAAWvf,KACXwf,UAAWlB,EAAMkE,uBAAuBrE,GACxCkB,UAEJ,CAaA,qBAAA2D,CAAsB1E,EAAOO,EAAeQ,GAC1C,OAAO,IAAIL,EAAaM,eAAe,CACrCC,OAAWvf,KACXwf,UAAWlB,EAAMmE,sBAAsB5D,GACvCQ,UAEJ,CAUA,cAAA4D,GACE,OAAO,IAAIjE,EAAaM,eAAe,CACrCC,OAAQvf,MAEZ,CAYA,kBAAAkjB,CAAmB7D,GACjB,OAAO,IAAIL,EAAaM,eAAe,CACrCC,OAAWvf,KACXwf,UAAWxf,KAAKkf,kBAAkBgC,kBAClC7B,UAEJ,CAQA,SAAAlD,CAAUkD,GACR,OAAO,IAAIL,EAAaM,eAAe,CACrCC,OAAWvf,KACXwf,UAAWxf,KAAKkf,kBAAkBO,gBAClCJ,UAEJ,CASA,SAAAb,GACE,OAAOxe,KAAKoe,KAAKG,aACnB,CAOA,OAAA4B,GACEngB,KAAK+a,IAAI,aAAa/a,QAClBA,KAAKoe,KAAKuE,cACZ3iB,KAAKoe,KAAKuE,cAEd,CAOA,MAAAzC,GACElgB,KAAK+a,IAAI,YAAY/a,QACjBA,KAAKoe,KAAKyE,aACZ7iB,KAAKoe,KAAKyE,aAEd,CAQA,WAAAxB,CAAYvB,GACV9f,KAAK+a,IAAI,YAAY+E,KACrB,MAAMuC,EAAWriB,KAAKoe,KAAK4D,UAAUlC,EAAErf,WACvC,GAAI4hB,EAAU,CACZ,MAAMvxB,EAASuxB,EAASvC,GAMxB,GAHKhvB,GACHkP,KAAK+a,IAAI,gCAAgC+E,QAAQ9f,QAE/ClP,EAAO0uB,UAET,OADAxf,KAAK+a,IAAI,YAAY+E,KACdhvB,EAETkP,KAAK+a,IAAI,cAAc+E,QAAQ9f,OACjC,MACEA,KAAK+a,IAAI,gBAAgB+E,QAAQ9f,QAGnC,OAAOA,KAAKoe,KAAKyD,qBAAqB/B,EACxC,mBCpWF,MAAM,eAAEhqB,GAAmB,EAAQ,OAC7B,cAAEqtB,GAAkB,EAAQ,MAC5B,QAAEptB,GAAY,EAAQ,OACtB,SAAEC,GAAa,EAAQ,OAEvB,UAAE2F,GAAc,EAAQ,MACxB,iBAAEtG,GAAqB,EAAQ,OAE/B,aACJ+tB,EAAY,WACZC,GACE1nB,GAEE,QACJ2nB,EAAO,YACPC,EAAW,QACXC,EAAO,YACPC,GACEN,EAEEO,EAAY,CAAC,EAgDnB,SAASC,EAAe7S,EAAQ3N,GAC9BzJ,OAAO8F,KAAKkkB,GAAW5V,SAASzd,IAC9B8S,EAAO,OAAO9S,EAAEuzB,iBAAmB9S,EAAOzgB,EAAE,GAEhD,CAlDEqJ,OAAOC,OAAO+pB,EAAW,CACvB,KAAAG,IAAS3P,GACP,MAAMkK,EAAOkF,IACTlF,GAAQA,EAAKyF,OAASN,KAAiBvtB,EAAS8tB,OAClD1F,EAAKyF,MAAMzzB,MAAM,KAAM,CAAC,mBAAoB8jB,GAEhD,EAEA,KAAA6P,IAAS7P,GACP,MAAMkK,EAAOkF,IACTlF,GAAQA,EAAK2F,OAASR,KAAiBvtB,EAASguB,OAClD5F,EAAK2F,MAAM3zB,MAAM,KAAM,CAAC,mBAAoB8jB,GAEhD,EAEA,IAAA4B,IAAQ5B,GACN,MAAMkK,EAAOkF,IACTlF,GAAQA,EAAKtI,MAAQyN,KAAiBvtB,EAASiiB,MACjDmG,EAAKtI,KAAK1lB,MAAM,KAAM,CAAC,mBAAoB8jB,GAE/C,EAEA,IAAA+P,IAAQ/P,GACN,MAAMkK,EAAOkF,IACTlF,GAAQA,EAAK6F,MAAQV,KAAiBvtB,EAASkuB,MACjD9F,EAAK6F,KAAK7zB,MAAM,KAAM,CAAC,mBAAoB8jB,GAE/C,EAEA,KAAAzV,IAASyV,GACP,MAAMkK,EAAOkF,IACTlF,GAAQA,EAAK3f,OAAS8kB,KAAiBvtB,EAASmuB,OAClD/F,EAAK3f,MAAMrO,MAAM,KAAM,CAAC,mBAAoB8jB,GAEhD,EAEA,KAAAkQ,IAASlQ,GACP,MAAMkK,EAAOkF,IACTlF,GAAQA,EAAKgG,OACfhG,EAAKgG,MAAMh0B,MAAM,KAAM,CAAC,mBAAoB8jB,GAEhD,IAkDJ7e,EAAiBkuB,YAAc,IAAMA,IASrCluB,EAAiBouB,YAAeY,IAC9BjB,EAAa,WAAYiB,EAAUruB,GACnCytB,EAAYY,EAAS,EAGvBhvB,EAAiBujB,gBAAgBK,IAC/BwK,EAAYxK,EAAMf,UAElB,MAAMC,EAASc,EAAMd,QAAUmL,KAAa,IAAIxtB,EAEhD4D,OAAO8F,KAAK,IAAIzJ,GAAW+X,SAAQG,GAAOoV,EAAW,UAAUpV,IAAOkK,EAAOlK,MAE7EuV,EAAQrL,EAAO,IAGjBwL,EAAeD,EAAWl4B,EAAOC,SACjCD,EAAOC,QAAQsK,QAAUA,EACzBvK,EAAOC,QAAQuK,SAAWA,EAC1BxK,EAAOC,QAAQ64B,QAAUnB,EACzB33B,EAAOC,QAAQqK,eAAiBA,EAChCqtB,EAAcK,QAAQ,IAAI1tB,GAC1BtK,EAAOC,QAAQ2uB,aArEf,MACE,WAAAra,CAAYwkB,GACVvkB,KAAKwkB,WACsB,mBAAdD,EAAiCA,EACnB,iBAAdA,EAA+B,YAAoBrQ,GAAQ,MAAO,CAACqQ,KAAcrQ,EAAO,EAC9FqQ,GAAkB,YAAwBrQ,GAAQ,MAAO,IAAIA,EAAO,EAG3E,MAAM0G,EAAO5a,KACbtG,OAAO8F,KAAKkkB,GAAW5V,SAASG,IAC9BjO,KAAKiO,GAAO,YAAoBiG,GAC9B,OAAOwP,EAAUzV,GAAK7d,MAAM,KAAMwqB,EAAK4J,cAActQ,GACvD,CAAC,IAEHyP,EAAe3jB,KAAMA,KACvB,CAEA,aAAIukB,GACF,OAAOvkB,KAAKwkB,UACd,CACA,aAAID,CAAU1L,GACZ7Y,KAAKwkB,WAAa3L,CACpB,CAEA,IAAAmC,CAAKyJ,EAAiBC,GACpB,MAAM9J,EAAO5a,KACb,OAAO,YAA8BkU,GACnC,OAAOuQ,EAAgBr0B,MAAMs0B,EAAY9J,EAAK4J,cAActQ,GAC9D,CACF,mBCvGF,MAAM,QAAEne,GAAY,EAAQ,MAEtB4uB,EAAO,KAAe,EAE5B,SAASC,EAAkBC,GACzB,MAAMC,EAAO,IAAIC,KACXC,EAAkB,IAAI5C,OAAO,EAAIyC,EAAS33B,QAChD,IAAI+3B,EAAK73B,OAAO03B,EAAKI,eACjBC,EAAK/3B,OAAO03B,EAAKM,WAAa,GAC9BC,EAAKj4B,OAAO03B,EAAKQ,WACjBC,EAAKn4B,OAAO03B,EAAKU,YACjBC,EAAKr4B,OAAO03B,EAAKY,cACjBC,EAAKv4B,OAAO03B,EAAKc,cACjBC,EAAKz4B,OAAO03B,EAAKgB,mBAWrB,OATAb,EAAK,IAAI7C,OAAO,EAAI6C,EAAG/3B,QAAU+3B,EACjCE,EAAKA,EAAGj4B,OAAS,EAAI,IAAIi4B,IAAOA,EAChCE,EAAKA,EAAGn4B,OAAS,EAAI,IAAIm4B,IAAOA,EAChCE,EAAKA,EAAGr4B,OAAS,EAAI,IAAIq4B,IAAOA,EAChCE,EAAKA,EAAGv4B,OAAS,EAAI,IAAIu4B,IAAOA,EAChCE,EAAKA,EAAGz4B,OAAS,EAAI,IAAIy4B,IAAOA,EAChCE,EAAKA,EAAG34B,OAAS,EAAI,IAAI24B,IAAOA,EAChCA,EAAKA,EAAG34B,OAAS,EAAI,IAAI24B,IAAOA,EAEzB,CAAC,GAAGZ,KAAME,KAAME,KAAME,KAAME,KAAME,KAAME,IAAM,GAAGhB,IAAWG,IACrE,CA+JAx5B,EAAOC,QAAQqK,eAnJf,cAA6BC,EAM3B,WAAAgK,CAAYgmB,GAWV,IAAIC,EAASrB,EAYTsB,EAAStB,EAYTuB,EAAQvB,EAYRwB,EAAQxB,EAaR7jB,EAAS6jB,EAYTyB,EAASzB,EAEb,MAAM0B,EAAUN,IACI,oBAAXx4B,OACmB+4B,OACG/4B,QAC3B84B,QAGAA,IAAYA,EAAQtL,KAAOsL,EAAQpC,QASjCoC,EAAQtL,UAAuBnqB,IAAhBy1B,EAAQtL,KACzBiL,EAASO,SAAS9zB,UAAU+L,KAAK7L,KAAK0zB,EAAQtL,IAAKsL,GACnDJ,EAASM,SAAS9zB,UAAU+L,KAAK7L,KAAK0zB,EAAQtL,IAAKsL,IAC1CA,EAAQtC,OAAkC,mBAAlBsC,EAAQtC,QACzCiC,EAASO,SAAS9zB,UAAU+L,KAAK7L,KAAK0zB,EAAQtC,MAAOsC,GACrDJ,EAASM,SAAS9zB,UAAU+L,KAAK7L,KAAK0zB,EAAQtC,MAAOsC,IAMrDH,EADEG,EAAQvQ,WAAyBllB,IAAjBy1B,EAAQvQ,KAClByQ,SAAS9zB,UAAU+L,KAAK7L,KAAK0zB,EAAQvQ,KAAMuQ,GAE3CE,SAAS9zB,UAAU+L,KAAK7L,KAAK0zB,EAAQtL,IAAKsL,GAMlDF,EADEE,EAAQpC,WAAyBrzB,IAAjBy1B,EAAQpC,KAClBsC,SAAS9zB,UAAU+L,KAAK7L,KAAK0zB,EAAQpC,KAAMoC,GAE3CE,SAAS9zB,UAAU+L,KAAK7L,KAAK0zB,EAAQtL,IAAKsL,GAQhDA,EAAQ5nB,YAA2B7N,IAAlBy1B,EAAQ5nB,OAC3BqC,EAASylB,SAAS9zB,UAAU+L,KAAK7L,KAAK0zB,EAAQ5nB,MAAO4nB,GACrDD,EAASG,SAAS9zB,UAAU+L,KAAK7L,KAAK0zB,EAAQ5nB,MAAO4nB,KAErDvlB,EAASylB,SAAS9zB,UAAU+L,KAAK7L,KAAK0zB,EAAQtL,IAAKsL,GACnDD,EAASG,SAAS9zB,UAAU+L,KAAK7L,KAAK0zB,EAAQtL,IAAKsL,KAMvD/kB,OAAM,IAAI4S,KAAW8R,KAAUpB,EAAkB,YAAa1Q,EAAK,IAC7D,IAAIA,KAAW+R,KAAUrB,EAAkB,YAAa1Q,EAAK,IAC7D,IAAIA,KAAWgS,KAAStB,EAAkB,WAAY1Q,EAAK,IAC3D,IAAIA,KAAWiS,KAASvB,EAAkB,WAAY1Q,EAAK,IAC3D,IAAIA,KAAWpT,KAAU8jB,EAAkB,YAAa1Q,EAAK,IAC7D,IAAIA,KAAWkS,KAAUxB,EAAkB,YAAa1Q,EAAK,GACrE,kBCnLF,MAAM,SAAEle,GAAa,EAAQ,MAEvBsoB,EAAQ,CACZF,KAAO,KACPoI,MAAOxwB,EAASiiB,MAGZwO,EAAa,CACnBA,QAAqB,WACnB,OAAOnI,EAAMF,IACf,EAEAqI,QAAqB,SAAiBrI,GACpCE,EAAMF,KAAOA,CACf,EAEAqI,YAAyB,WACvB,OAAOnI,EAAMkI,KACf,EAEAC,YAAyB,SAAqBD,GAC5ClI,EAAMkI,MAAQA,CAChB,GAEAh7B,EAAOC,QAAQ03B,cAAgBsD,YC6B/Bj7B,EAAOC,QAAQsK,QA9Bf,MAWE,WAAAgK,CAAY8jB,EAAOE,EAAOjO,EAAMmO,EAAMxlB,EAAO2lB,GAC3C1qB,OAAOC,OAAOqG,KAAM,CAClB6jB,QACAE,QACAjO,OACAmO,OACAxlB,QACA2lB,SAEJ,CAEA,KAAAP,GAAS,CACT,KAAAE,GAAS,CACT,IAAAjO,GAAQ,CACR,IAAAmO,GAAQ,CACR,KAAAxlB,GAAS,CACT,KAAA2lB,GAAS,mBClDX,MAAM,KAAE7mB,GAAS,EAAQ,MA4CzB/R,EAAOC,QAAQuK,SAAWuH,EAAKE,IApCd,CAKfipB,MAAO,EAKPvC,MAAO,EAMPD,KAAO,EAMPjM,KAAO,EAMP+L,MAAO,EAKPF,MAAO,mBCzCT,MAAM,cAAE6C,GAAkB,EAAQ,OAC5B,iBAAEC,GAAqB,EAAQ,MAC/B,sBAAEC,GAA0B,EAAQ,OACpC,gBAAErwB,GAAoB,EAAQ,OAC9B,+BAAEC,GAAmC,EAAQ,OAC7C,qBAAEqwB,GAAyB,EAAQ,OACnC,yBAAEpwB,GAA6B,EAAQ,OACvC,0BAAEC,GAA8B,EAAQ,OACxC,aAAEC,GAAiB,EAAQ,OAC3B,sBAAEC,GAA0B,EAAQ,OACpC,uBAAEC,GAA2B,EAAQ,MAE3CtL,EAAOC,QAAQk7B,cAAgBA,EAC/Bn7B,EAAOC,QAAQm7B,iBAAmBA,EAClCp7B,EAAOC,QAAQo7B,sBAAwBA,EACvCr7B,EAAOC,QAAQ+K,gBAAkBA,EACjChL,EAAOC,QAAQq7B,qBAAuBA,EACtCt7B,EAAOC,QAAQgL,+BAAiCA,EAChDjL,EAAOC,QAAQiL,yBAA2BA,EAC1ClL,EAAOC,QAAQkL,0BAA4BA,EAC3CnL,EAAOC,QAAQmL,aAAeA,EAC9BpL,EAAOC,QAAQoL,sBAAwBA,EACvCrL,EAAOC,QAAQqL,uBAAyBA,kBCtBxC,MAAM,KAAEyG,EAAI,OAAE8D,GAAW,EAAQ,OAC3B,eAAEjL,GAAmB,EAAQ,OAC7B,UAAEgjB,EAAS,UAAEle,GAAc,EAAQ,MAKnC6rB,EAAsBxpB,EAAKE,IAAI,CACnCupB,QAAgB,UAChBC,eAAgB,iBAChBC,WAAgB,eAalB,MAAMC,EACJ,WAAApnB,CAAYb,EAAIof,EAAO8I,GACjBloB,GACFc,KAAKqnB,QAAS,EACdrnB,KAAKd,GAAKA,EACVc,KAAKiO,IAAM/O,EAAGnR,WACdiS,KAAKse,MAAQA,GAASyI,EAAoBC,QAC1ChnB,KAAKonB,kBAAoBA,GAAqBhxB,EAAekxB,UAE7DtnB,KAAKqnB,QAAS,CAElB,CAEA,GAAA54B,CAAIyQ,EAAIof,EAAO8I,OAAoBx2B,GACjCoP,KAAKqnB,QAAS,EACdrnB,KAAKd,GAAKA,EACVc,KAAKiO,IAAM/O,EAAGnR,WACdiS,KAAKse,MAAQA,GAASyI,EAAoBC,QAC1ChnB,KAAKonB,uBAA2Cx2B,IAAtBw2B,EAAmCA,EAAoB,IACnF,CAEA,KAAAxsB,GACEoF,KAAKqnB,QAAS,EACdrnB,KAAKd,GAAK,KACVc,KAAKiO,IAAM,KACXjO,KAAKse,MAAQ,KACbte,KAAKonB,kBAAoB,IAC3B,EA4MF1tB,OAAOC,OAAOnO,EAAOC,QAAS,CAC5Bs7B,sBACAI,iBACAI,yBAzMF,MAUE,WAAAxnB,CAAYynB,GAEVnmB,EAAOmmB,GAAQ,GACfxnB,KAAKynB,MAAQD,EACbxnB,KAAK0nB,aAAe,EAIpB1nB,KAAK2nB,QAAUn1B,MAAMg1B,GAAMI,KAAK,MAAMl1B,KAAI,IAAM,IAAIy0B,IAIpDnnB,KAAK8P,OAAS,IAAIlC,GACpB,CAEA,KAAAyL,GACErZ,KAAK0nB,aAAe,EACpB1nB,KAAK2nB,QAAQ7Z,SAAS+Z,IAAUA,EAAIR,QAAS,CAAK,IAClDrnB,KAAK8P,OAAOlV,OACd,CAQA,MAAAktB,CAAO5oB,EAAI6oB,GACT1mB,EAAO0mB,GACP1mB,EAAOnC,GAEP,MAAMsoB,EAAOxnB,KAAKynB,MACZh3B,EAASuP,KAAK2nB,QACdhmB,EAAQ3B,KAAK8P,OACbkY,EAAchoB,KAAK0nB,aAOzBrmB,GAAQ5Q,EAAOu3B,GAAaX,OAAQ,2DAGpC,MAAMY,EAAYx3B,EAAOu3B,GACzBC,EAAUx5B,IAAIyQ,EAAI6nB,EAAoBC,SAClCrlB,EAAMqQ,IAAIiW,EAAUha,MACtB/S,EAAU,iBAAiByG,EAAMtT,IAAI45B,EAAUha,qBAAqB+Z,KAEtErmB,EAAMlT,IAAIw5B,EAAUha,IAAK+Z,GAEzB,MACME,EAAWz3B,GADMu3B,EAAc,GAAKR,GAE1C,IAAI12B,EACJ,IACEA,EAASi3B,EAAoBG,EAASb,OAASa,EAAW,KAC5D,CAAE,QAKAloB,KAAK0nB,cAAgBM,EAAc,GAAKR,EAEpCU,EAASb,SACX1lB,EAAMmQ,OAAOoW,EAASja,KACtBia,EAASttB,QAEb,CAGA,OADAyG,GAAQ5Q,EAAOuP,KAAK0nB,cAAcL,OAAQ,0DACnCv2B,CACT,CASA,UAAI5D,GACF,OAAO8S,KAAK8P,OAAO0X,IACrB,CAiBA,KAAAW,GACE,GAAoB,IAAhBnoB,KAAK9S,OAAc,OAAO,KAE9B,MAAMuD,EAASuP,KAAK2nB,QACdK,EAAchoB,KAAK0nB,aACnBF,EAAOxnB,KAAKynB,MACZW,GAAcJ,EAAc,GAAKR,EAIvC,GAAI/2B,EAAO23B,GAAYf,OAAQ,OAAO52B,EAAO23B,GAO7C,IAAK,IAAIC,EAAWD,EAAYE,EAAYF,EAAaZ,EAAO,EAC3Da,GAAYC,IACVD,EAAU,CACf,MACMjb,EAAU3c,EADE43B,EAAWb,GAE7B,GAAIpa,EAAQia,OACV,OAAOja,CAEX,CAIA,OADA/L,EAA4B,IAArBrB,KAAK8P,OAAO0X,KAAY,2CACxB,IACT,CAQA,OAAA1Z,CAAQya,GACN,GAAoB,IAAhBvoB,KAAK9S,OAAc,OAEvB,MAAMuD,EAASuP,KAAK2nB,QACdH,EAAOxnB,KAAKynB,MAClB,IAAI9lB,EAAQ,EAEZ,IAAK,IAAI0mB,EAAWroB,KAAK0nB,aAAe,EAAGY,EAAYtoB,KAAK0nB,aAAeF,EACtEa,GAAYC,IACVD,EAAU,CACf,MACMjb,EAAU3c,EADE43B,EAAWb,GAEzBpa,EAAQia,QACVkB,EAASnb,EAASzL,IAAS3B,KAE/B,CAEAqB,EAAOM,EAAQ,EAAG,iCACpB,CAQA,cAAA6mB,CAAetpB,EAAIof,EAAO8I,OAAoBx2B,GAC5C,MAAMqd,EAAM/O,EAAGnR,WAAYsT,EAAOrB,KAAK8P,OAAOkC,IAAI/D,GAAM,qBACxD,MAEMwa,EAFSzoB,KAAK2nB,QACA3nB,KAAK8P,OAAOzhB,IAAI4f,IACE5M,EAAOonB,EAAU,wBACvDA,EAASnK,MAAQA,EAEO1tB,MAArBw2B,EACDqB,EAASrB,kBAAoBA,EACrB9I,IAAUyI,EAAoBE,iBAEtCwB,EAASrB,kBAAoBhxB,EAAekxB,SAEhD,CAMA,GAAAtV,CAAI9S,GACF,MAAM+O,EAAM/O,EAAGnR,WACf,OAAOiS,KAAK8P,OAAOkC,IAAI/D,EACzB,qBC3PF,MAAM,OAAE5M,GAAW,EAAQ,OACrB,gBAAE7K,GAAoB,EAAQ,OAC9B,yBAAEE,GAA6B,EAAQ,MAqF7ClL,EAAOC,QAAQk7B,cAnFf,MAWE,WAAA5mB,GACEC,KAAK0oB,UAAY,IAAIrZ,IACrBrP,KAAK2oB,mBAAqB,IAAItZ,IAE9BrP,KAAK4oB,WAAa,CAAC,CACrB,CAEA,GAAAlY,CAAImY,GAEF,GADAxnB,EAAOwnB,aAAgBryB,EAAiB,2BACpCwJ,KAAK0oB,UAAU1W,IAAI6W,GACrB,OAAOA,EAGT,MAAMC,EAAS,KAIb9oB,KAAK4oB,WAAWC,EAAKxL,QAAUwL,CAAI,EAE/BE,EAAe,KACnB,MAAM1L,EAASwL,EAAKxL,OACpBrd,KAAK0oB,UAAU5W,OAAO+W,GACtB7oB,KAAK2oB,mBAAmB7W,OAAO+W,GACd7oB,KAAK4oB,WAAWvL,KAGhBwL,UACR7oB,KAAK4oB,WAAWvL,EACzB,EAYI2L,EAAW,KACfhpB,KAAK2oB,mBAAmB7W,OAAO+W,EAAK,EAWtC,OARAA,EAAKpN,IAAI/kB,EAAyBuyB,GAAIH,GACtCD,EAAKpN,IAAI/kB,EAAyBwyB,aAVV,KACtBJ,IACA9oB,KAAK0oB,UAAUhY,IAAImY,GACnB7oB,KAAK2oB,mBAAmB7W,OAAO+W,EAAK,IAQtCA,EAAKpN,IAAI/kB,EAAyByyB,SAAUJ,GAC5CF,EAAKpN,IAAI/kB,EAAyB0yB,cAhBT,KACvBL,IACA/oB,KAAK2oB,mBAAmBjY,IAAImY,EAAK,IAenCA,EAAKpN,IAAI/kB,EAAyB2yB,KAAML,GACxCH,EAAKpN,IAAI/kB,EAAyB4yB,WAAYN,GAE9ChpB,KAAK0oB,UAAUhY,IAAImY,GACZA,CACT,CAEA,SAAIU,GACF,OAAO/2B,MAAM1E,KAAKkS,KAAK0oB,UACzB,CACA,qBAAIc,GACF,OAAOh3B,MAAM1E,KAAKkS,KAAK2oB,mBACzB,CAEA,WAAAc,CAAYpM,GACV,OAAOrd,KAAK4oB,WAAWvL,EACzB,CAEA,UAAAqM,GACE1pB,KAAK0oB,UAAU5a,SAAQ+a,GAAQA,EAAK3M,WACtC,mBChFF,MAAM,KAAE3e,GAAS,EAAQ,MAiCzB/R,EAAOC,QAAQo7B,sBAAwBtpB,EAAKE,IA1Bd,CAC5BksB,WAA4B,aAC5BC,iBAA4B,mBAC5BC,aAA4B,eAC5BC,mBAA4B,qBAC5BC,YAA4B,cAC5BC,QAA4B,UAC5BC,gBAA4B,kBAC5BC,WAA4B,aAC5BC,UAA4B,YAC5BC,aAA4B,eAC5BC,IAA4B,MAC5BC,YAA4B,cAC5BC,aAA4B,eAC5BC,eAA4B,iBAC5BC,eAA4B,iBAC5BC,SAA4B,WAC5BC,gBAA4B,kBAC5B5Q,QAA4B,UAC5B6Q,2BAA4B,6BAC5BC,2BAA4B,6BAC5BC,cAA4B,gBAC5BC,cAA4B,gBAC5BC,eAA4B,kCC9B9B,MAAM,SAAEpN,GAAa,EAAQ,MAkB7BpyB,EAAOC,QAAQm7B,iBAPf,cAA+BhJ,EAC7B,WAAA7d,CAAYnD,EAAMquB,GAChB3pB,MAAM1E,GACNoD,KAAKirB,QAAUA,CACjB,mBClBF,MAAMC,EAAS,EAAQ,OACjB,eAAE/D,EAAc,yBACdI,EAAwB,oBACxBR,GAAwB,EAAQ,OAClC,OAAE1lB,GAAW,EAAQ,OACrB,eAAEjJ,GAAmB,EAAQ,OAC7B,iBAAEwuB,GAAqB,EAAQ,MAC/B,sBAAEC,GAA0B,EAAQ,OACpC,mBAAEsE,GAAuB,EAAQ,OACjC,uBAAE1vB,EAAsB,gBACtBjG,EAAe,MACfoG,EAAK,MACLnG,GAAU,EAAQ,OACpB,2BAAE2N,EAA0B,aAC1BxU,EAAY,eACZC,GAAmB,EAAQ,OAC7B,aAAEurB,GAAiB,EAAQ,OAC3B,KAAEtuB,GAAS,EAAQ,OACnB,+BAAE2K,GAAmC,EAAQ,OAC7C,yBAAEC,GAA6B,EAAQ,OACvC,kBAAE00B,GAAsB,EAAQ,OAChC,qBAAE1R,GAAyB,EAAQ,OACnC,gBAAEniB,EAAe,gBACfC,EAAe,iBACfE,EAAgB,gBAChBC,EAAe,UACfC,GAAc,EAAQ,OACxB,eAAExB,EAAc,aAAEi1B,GAAiB,EAAQ,OAC3C,MAAExN,EAAK,aAAEC,GAAiB,EAAQ,OAClC,MAAEzD,EAAK,SACLjhB,GAAa,EAAQ,OACvB,MAAEoZ,GAAU,EAAQ,OACpB,cAAE8Y,EAAa,mBACbC,GAAuB,EAAQ,MAIjCC,EAAe,IAAIrE,EAAer7B,EAAK2/B,MAAO1E,EAAoBG,WAAY9wB,EAAekxB,UAkoDnG97B,EAAOC,QAAQigC,YA/nDf,cAA0B5N,EACxB,WAAA/d,EAAY,KAAElD,EAAI,SAAE8uB,EAAQ,iBAAEhR,EAAgB,WAAEiR,GAAe,CAAC,GAC9DtqB,MAAM,CAAEzE,SAER,MAAMgvB,EAAM7rB,KAQNmY,EAASnY,KAAKmY,OAAS,IAAIiC,GAPf,YAAsBlG,GACtC,MAAO,CACL,YAAYyG,EAAiBE,gBAC7B,yBAAyB8Q,EAAS7Q,gBAC/B5G,EAEP,KAEM,UACJ2H,EAAS,UACTzC,EAAS,SACT0S,EAAQ,SACR7wB,EAAQ,UACRC,GACEid,EACJnY,KAAK+a,IAAM5C,EAAO6C,KAAKhb,KAAK+a,IAAK/a,MAEjC,MAAM+rB,EAAUH,EAAWI,kBAAoBv1B,EAA+Bw1B,KAE9EjsB,KAAKksB,UAAYP,EACjB3rB,KAAKqb,kBAAoBV,EAGzB3a,KAAKmsB,2BAA6BP,EAAWQ,0BAC7CpsB,KAAKqsB,sBAAwBT,EAAWU,qBACxCtsB,KAAKusB,0BAA4BX,EAAWY,WAC5CxsB,KAAKysB,oBAAsBb,EAAWY,WACtCxsB,KAAK0sB,mBAAqBX,EAE1B/rB,KAAK2sB,iBAAmB,IAAIvB,EAAkB,CAAEwB,QAASjB,EAAUI,UAAS5T,WAE5EnY,KAAKsb,OAAS,IAAIjB,EAElBra,KAAK6sB,8BACL7sB,KAAK8sB,6BAGL9sB,KAAKsc,cAAe,EAEpBtc,KAAK+sB,qBAAuBnB,EAAWoB,oBAEvChtB,KAAKitB,uBAAyB,KAO9B,MAAMC,EAAsB,OACtBC,EAA0B,WAC1BC,EAAyB,cAE/B,IAAIC,EAAmB,GACvB,SAASC,EAA2BC,GAOlC,MAAMC,EAAkB,CAAC,EACzBH,EAAiBvf,SAAQ,CAACuR,EAAQ9yB,EAAGmjB,KACnC,SAAS+d,EAAaC,EAAiBC,GACrC,QAAyC/8B,IAArC48B,EAAgBE,GAClB,OAEF,MAAME,EAAgBJ,EAAgBE,GAGtCF,EAAgBE,QAAmB98B,EACnC8e,EAAIke,GAAiB,KACrBle,EAAInjB,GAAK,IACX,CACA,KAAKA,EAAIghC,IAAiBlO,EAI1B,OAAQA,EAAOniB,MACb,KAAKgwB,EACH,OAAQ7N,EAAO/vB,MACb,KAAKoH,EAAyBuyB,GAC9B,KAAKvyB,EAAyBm3B,OAC9B,KAAKn3B,EAAyBwyB,YAC5BsE,EAAgBnO,EAAO/vB,MAAQ/C,EAC/B,MAEF,KAAKmK,EAAyB2yB,KAC9B,KAAK3yB,EAAyB4yB,WAE5BmE,EAAa/2B,EAAyBuyB,GAAI5J,EAAO/vB,MACjD,MAEF,KAAKoH,EAAyBo3B,SAC5BL,EAAa/2B,EAAyBm3B,OAAQxO,EAAO/vB,MACrD,MAEF,QACE4L,EAAU,0CAA0CmkB,EAAO/vB,QAG/D,MAEF,KAAK69B,EACHK,EAAgBnO,EAAOniB,MAAQ3Q,EAC/B,MAEF,KAAK6gC,EACHK,EAAaN,EAAyB9N,EAAOniB,MAKjD,GAEJ,CAEA,SAAS6wB,IACP,IACIxhC,EADAyhC,EAAsB,EAO1B,IAAKzhC,EAAI,EAAGA,EAAI8gC,EAAiBngC,SAAUX,EAAG,CACxCyhC,EAAsBX,EAAiBngC,SACzCogC,EAA2B/gC,GAC3ByhC,EAAsBX,EAAiBngC,QAEzC,MAAMmyB,EAASgO,EAAiB9gC,GAEhC,GAAK8yB,EAGL,OAAQA,EAAOniB,MACb,KAAKgwB,OACkBt8B,IAAjByuB,EAAO5gB,MACTktB,EAASnQ,MAAM6D,EAAO/vB,KAAM+vB,EAAO5gB,OAEnCktB,EAASnQ,MAAM6D,EAAO/vB,MAExB,MAEF,KAAK89B,EAIH,MAEF,KAAKD,EACHntB,KAAKiuB,0BACL,MAEF,QACE/yB,EAAU,qCAAqCmkB,EAAOniB,QAG5D,CACAmwB,EAAmB,EACrB,CAEA,SAASa,EAAmBhxB,EAAM5N,EAAMmP,GACtC,IAAI0vB,EAEFA,OADWv9B,IAATtB,EACS,CAAE4N,OAAM5N,OAAMmP,SAEd,CAAEvB,QAEfmwB,EAAiBvU,KAAKqV,GACed,EAAiBngC,OACtB,IAA5BmgC,EAAiBngC,QACnB2+B,EAAItK,mBAAmBwM,EAE3B,CA8BA,SAASK,EAAe3vB,GACtB4C,EAAO5C,aAAiB5P,GACxB88B,EAASnQ,MAAM9kB,EAAyB23B,qBAAsB5vB,EAChE,CAoBA,SAAS6vB,EAAoCC,GAC3C,IAAI9vB,EAAQ,KAEZ,MAAM+vB,EAAqBD,EAC3B,GAAIC,GAAsBA,EAAmBthC,OAAS,EAAG,CAGvD,GADuBshC,EAAmB/uB,MAAKge,GAAKA,IAAMrnB,EAAeq4B,QAAUr4B,EAAes4B,aAC5E7C,EAAIxQ,kBAAkBsT,UAAUv2B,EAAew2B,mBAAoB,CACvF,MAAMC,EAA2B,sDAC/BL,EAAmB97B,KAAI+qB,GAAKrnB,EAAe+Y,OAAOsO,KAAIxpB,KAAK,UAG7DgH,EAAS4zB,GAETpwB,EAAQ,IAAI5P,EAAeggC,EAA0BjgC,EAAa4a,kBACpE,CACF,CACA,OAAO/K,CACT,CAeA,SAASqwB,EAA6BxN,GACpC,IAAI7iB,EAAQ,KAYZ,YAXiC7N,IAA7Bi7B,EAAIkB,sBACLlB,EAAIxQ,kBAAkBsT,UAAUv2B,EAAe22B,gBAGvCnD,EAAWoD,0BACpBvwB,EArDJ,SAAoCwwB,GAClC,IAAIxwB,EAAQ,KACZ,GAAIwwB,EAAa,CACf,MAAMrvB,EAAUqvB,EAAYluB,sBACxBnB,IAAYA,EAAQoC,SAAWpC,EAAQgC,cACtCiqB,EAAIxQ,kBAAkBsT,UAAUv2B,EAAe82B,wBAClDzwB,EAAQ,IAAI5P,EAAe,qCACAD,EAAauc,oCAE5C,CACA,OAAO1M,CACT,CA0CY0wB,CAA2BvD,EAAWoD,2BAEvCpD,EAAW2C,6BAClB9vB,EAAQ6vB,EAAoC1C,EAAW2C,6BANvD9vB,EAAQ,IAAI5P,EAAe,+BACrBD,EAAaqc,sBAQjBxM,EAKK6iB,EAAS5C,aAAamN,EAAIuD,SAAS,IACpChB,EAAe3vB,KAGnBmtB,EAAWyD,iBACbzD,EAAW0D,iBACX1D,EAAW0D,gBAAgBC,QACpBjO,EAAS5C,aAAamN,EAAI2D,YAE5BlO,EAAS5C,aAAamN,EAAI4D,SACnC,CAUA,SAASC,EAAqCpO,EAAUqO,GAAqB,GAC3E,IAAIlxB,EAAQ,KAKZ,OAJImtB,EAAW2C,6BACb9vB,EAAQ6vB,EAAoC1C,EAAW2C,6BAGrD9vB,EAKK6iB,EAAS5C,aAAamN,EAAIuD,SAAS,IACpChB,EAAe3vB,KAGnBkxB,EACKrO,EAASwB,qBAAqB+I,EAAI+D,aAAaC,WAEjDvO,EAAS5C,aAAamN,EAAI+D,aAAaC,UAChD,CAxHA7vB,KAAK8vB,gBArBkB,CAACva,EAAO9W,MACxBmtB,EAAWmE,yBACTxa,IAAU7e,EAAyBo3B,UACnCvY,IAAU7e,EAAyBm3B,SAK1CK,EAAmBhB,EAAqB3X,EAAO9W,EAAM,EAcvDuB,KAAKgwB,sBAZwB,KAC3B9B,EAAmBf,EAAwB,EAY7CntB,KAAKiwB,qBAVuB,KAI1BjwB,KAAKkwB,yBACLhC,EAAmBd,EAAuB,EA+I5CptB,KAAK4hB,wBAAuB,SAA0BrM,GACpD,OAAQA,EAAM9U,WACZ,KAAKomB,EAAsB+D,2BAGzB,OAFAkB,EAAS,gGACTD,EAAIgB,8BACG7sB,KACT,KAAK6mB,EAAsBuD,aAEzB,OADA0B,EAAS,kEACF9rB,KAAKmwB,oBAAoBz5B,EAAyB4yB,WAAY/T,EAAM0V,SAC7E,KAAKpE,EAAsB9M,QAEzB,OADA8R,EAAIuE,WACGvE,EAAI3K,kBAAkB/E,YAC/B,KAAK0K,EAAsBiE,cAGzB,OA9BN,SAA8BuF,GAI5B,MAAMC,EAAiB3V,EAAiB4V,oBAClCllB,EAAU6f,EAAOsF,kBAAkBC,wBAAwBJ,EAAIhT,OAAQiT,GAC7E3V,EAAiB+V,YAAYrlB,GAC7BsP,EAAiBgW,eACfL,GACA,IAAMtwB,KAAK4wB,qBAAqBP,IAChCzE,EAAWiF,sBACX,KACA,KACJ,CAgBMD,CAAqBrb,EAAM0V,SACpBjrB,KACT,QAEE,OAD4BuV,EAAM9U,UAAsBT,KAAKkhB,kBAAkBzgB,UACxET,KAEb,IAEAA,KAAKye,SAAQ,WACX,OAAOze,KAAK0e,aAAamN,EAAIuD,SAAU0B,IACrChF,EAAS,YAAYgF,EAAQ5R,kBAAkBze,YAAY,GAE/D,IAkBAT,KAAKovB,QAAU,IAAIvR,EAAM,CACvBhhB,KAAesuB,EAAmB4F,QAClCxS,cAAesN,GACd,CACD,iBAAAmF,GACErF,EAASnQ,MAAM9kB,EAAyBu6B,YAC1C,IAEC5O,SAASwE,EAAsBqD,YAAY,WAC1C,OAAOlqB,KAAK0e,aAAa1e,KAC3B,IACCqiB,SAASwE,EAAsBgD,cAAc,WAC5C,OAAO7pB,KAAK0e,aAAa1e,KAC3B,IACCqiB,SAASwE,EAAsBiD,oBAAoB,WAClD,OAAO9pB,KAAK0e,aAAa1e,KAC3B,IACCqiB,SAASwE,EAAsBsD,WAAW,WACzC,OAAOnqB,KAAK0e,aAAamN,EAAIuD,QAAQ8B,eACvC,IACC7O,SAASwE,EAAsB8C,YAAY,WAC1C,OAAIkC,EAAIxQ,kBAAkBsT,UAAUv2B,EAAe+4B,4BAC1CnxB,KAAK0e,aAAamN,EAAIuD,QAAQgC,gBAEvCn2B,EAAS,sEACA4wB,EAAIxQ,kBAAkBR,gBAExB7a,KAAKkjB,oBAAmB,IAAMljB,KAAKgxB,sBAC5C,IACC3O,SAASwE,EAAsB+C,kBAAkB,WAEhD,OAAO5pB,KAAKkjB,oBAAmB,IAAMljB,KAAKgxB,qBAC5C,IACCpO,MAAK,KACJiJ,EAAIwF,iBAAmBzF,EAAW0F,eAAe,IAQrDtxB,KAAKovB,QAAQ8B,eAAiB,IAAIrT,EAAM,CACtChhB,KAAesuB,EAAmBoG,yBAClChT,cAAeve,KAAKovB,SACnB,CACD,eAAAoC,GACE7F,EAASnQ,MAAM9B,EAAqBiE,aACtC,IAEC+E,OAAM,WACL1iB,KAAKwxB,iBACP,IACCnP,SAASwE,EAAsBgD,cAAc,WAC5C,OAAO7pB,KAAKkjB,oBACd,IACCb,SAASwE,EAAsBiD,oBAAoB,WAClD,OAAO9pB,KAAKkjB,oBACd,IACCb,SAASwE,EAAsB8C,YAAY,WAC1C,OAAOmF,EAA6B9uB,KACtC,IAOFA,KAAKovB,QAAQgC,cAAgB,IAAIvT,EAAM,CACrChhB,KAAesuB,EAAmBsG,uBAClClT,cAAeve,KAAKovB,UAEnB/M,SAASwE,EAAsBsD,WAAW,WACzC,OAAO2E,EAA6B9uB,KACtC,IAGFA,KAAK0xB,mBAAqB,CACxB,eAAAC,GACE,MAAMrB,EAAiB3V,EAAiB4V,oBAClCqB,EAAgB/F,EAAIgG,eAE1BhG,EAAIiG,kBACJ,MAAMC,EAAWlG,EAAImG,UACfC,EAAepG,EAAIqG,cAEnB7mB,EAAU6f,EAAOsF,kBAAkB2B,uBACvCvG,EAAW0D,gBACX1D,EAAWwG,gBACXL,EACAE,EACA3B,EACA1E,EAAWY,WACXZ,EAAWyG,QACXzG,EAAWmE,wBACX6B,EAAcU,UACdV,EAAcW,aACd3G,EAAW4G,QACX3G,EAAIkB,qBACJpB,EAAS8G,gBACT9G,EAAS+G,iBACR9G,EAAW2C,4BAA8B3C,EAAW2C,2BAA2BrhC,OAAS,GAC3FytB,EAAiB+V,YAAYrlB,GAC7BsP,EAAiBgW,eAAeL,EACAtwB,KAAK2yB,kBAAkBn0B,KAAKwB,MAC5B4rB,EAAWiF,sBACX,KACA7wB,KAAK4yB,mBAAmBp0B,KAAKwB,OAE3D4rB,EAAW0D,gBACX1D,EAAWwG,gBAIXxG,EAAWY,WACXZ,EAAWyG,QACXzG,EAAWmE,wBACX6B,EAAcU,UACdV,EAAcW,aACd3G,EAAW4G,QACX3G,EAAIkB,qBACJpB,EAAS8G,gBACT9G,EAAS+G,iBACT9G,EAAW2C,0BACf,EACA,sBAAAsE,GAEE7yB,KAAK8yB,iBAAiB3c,QACxB,EACA,iBAAAwc,GACE7G,EAAS,gBACTD,EAAI3O,aAAa,IAAI0J,EAAiB,CAAE/pB,KAAMgqB,EAAsB0D,eACtE,EACA,kBAAAwI,CAAmB1C,GAIjB,IAAI2C,EAAwB3C,EAAI4C,sBACJriC,MAAzBoiC,GAA+D,MAAzBA,IACvCA,OAAwBpiC,EACxBi7B,EAAIqH,0BAGN,MAAMC,EAAQ,CACZC,eAAsB/C,EAAIgD,oBAC1BhW,OAAsBgT,EAAIiD,YAC1BC,YAZ0BC,EAYgBnD,EAAIoD,qBAZR7iC,IAAN4iC,EAAkBj8B,EAAgBm8B,UAAYF,GAa9EG,mBAAsBtD,EAAIuD,wBAC1BC,mBAAsBxD,EAAIyD,wBAC1BC,qBAAsB1D,EAAI2D,0BAC1BC,YAAsB5D,EAAI6D,iBAC1BC,WAAsB9D,EAAI+D,gBAC1BC,qBAAsBhE,EAAIiE,0BAC1BC,gBAAsBlE,EAAImE,0BAC1BC,kBAAsBpE,EAAIqE,+BAC1BC,WAAsBtE,EAAIuE,gBAC1BC,mBAAsBxE,EAAIyE,wBAC1BrC,gBAAsBpC,EAAI0E,qBAC1BC,gBAAsB3E,EAAI4E,qBAC1BC,MAAsB7E,EAAI8E,WAC1BC,WAAsB/E,EAAIgF,gBAC1BC,cAAsBjF,EAAIkF,mBAC1B7C,iBAAsBM,GA5BIQ,MAiD5B,GAjBA95B,OAAOC,OAAOgyB,EAAU,CACtB4H,WAAsBJ,EAAMI,WAC5BiC,qBAAsBrC,EAAMoB,gBAC5BE,kBAAsBtB,EAAMsB,kBAC5BE,WAAsBxB,EAAMwB,WAC5BV,YAAsBd,EAAMc,YAC5B5W,OAAsB8V,EAAM9V,OAC5BoY,YAAsBtC,EAAMU,mBAC5BQ,qBAAsBlB,EAAMkB,qBAC5B5B,gBAAsBU,EAAMV,gBAC5BuC,gBAAsB7B,EAAM6B,gBAC5BtC,iBAAsBM,IAEpBnH,EAAIxQ,kBAAkBsT,UAAUv2B,EAAes9B,qBACjD/J,EAAS8G,gBAAkBU,EAAMV,iBAG/BU,EAAMQ,oBAAsBR,EAAMQ,mBAAmBzmC,OAAQ,CAC/DimC,EAAMpB,SAAWt2B,EAAuB4B,2BACtC81B,EAAMQ,oBACiC9H,EAAImG,UAA2BmB,EAAMpB,SAC9ElG,EAAImG,UAAYmB,EAAMpB,SACtB,MAAM4D,EAAqB9J,EAAIK,UAAU9Q,YACzCua,EAAmBrG,gBAAkB,IAAI93B,EAAgB,CACvDqF,KAASs2B,EAAMpB,SAASl1B,KACxBK,KAASy4B,EAAmBrG,gBAAgBpyB,KAC5CqyB,QAASoG,EAAmBrG,gBAAgBC,SAEhD,CAEA,MAAMoG,EAAqB9J,EAAIK,UAAU9Q,YACzCua,EAAmBvD,gBAAkB,IAAIz6B,EAAgB,CACvDs8B,YAAsBd,EAAMc,YAC5BwB,YAAsBtC,EAAMY,qBAC5B6B,QAAsBzC,EAAM+B,MAC5BW,eAAsB1C,EAAMiC,WAC5Bb,gBAAsBpB,EAAMoB,gBAC5BuB,qBAAsB3C,EAAMmC,cAC5B/B,WAAsBJ,EAAMI,aAEzBoC,EAAmBvD,gBAAgBqD,cACtCE,EAAmBvD,gBAAgBqD,YAAc/9B,EAAiBq+B,MAIpEr8B,OAAOC,OAAOkyB,EAAK,CACjBmK,QAAmB7C,EAAMgB,WACzB8B,kBAAmB9C,EAAM0B,qBAGvB/oC,EAAK2/B,MAAMyK,GAAGrK,EAAIgG,eAAeS,WACnCzG,EAAIgG,eAAeS,UAAYa,EAAMC,gBAAkBtnC,EAAK2/B,MAEXI,EAAIgG,cAIzD,EACA,kBAAAe,CAAmBvC,GAEjB,GAAIA,EAAI8F,UAAYjL,EAAOkL,yBAAyBC,KAElD,OADAvK,EAAS,6CAA6CZ,EAAOkL,yBAAyBh3B,SAASixB,EAAI8F,YAC5FtK,EAAI3O,aACT,IAAI0J,EACF,CAAE/pB,KAAMgqB,EAAsBkD,aAC9B,IAAIl7B,EAAe,6BACAq8B,EAAOkL,yBAAyBh3B,SAASixB,EAAI8F,WAC7CvnC,EAAa0nC,oBAGtC,MAAMC,EAASlG,EAAI/0B,UACbk7B,EAAeD,EAAOE,YAE5B,GAAqB,OAAjBD,EAKF,OAHAx2B,KAAKksB,UAAUlP,QAAQ5jB,EAASs9B,qCAEtB12B,KAAKqb,kBAAkBR,aAInC,GAAqB,MAAjB2b,EAAsB,CACxB,MAAMG,EAAcJ,EAAOK,WACrB3qB,EAAe7I,EAA2BgG,kBAAkBotB,EACAG,GAGlE,OAFA7K,EAAS,sBAAuB0K,EAAcG,EAAa/nC,EAAawQ,SAAS6M,IAE1E4f,EAAI3O,aAAa,IAAI0J,EACxB,CAAE/pB,KAAMgqB,EAAsBkD,aAC9B,IAAIl7B,EAAe8nC,EAAa1qB,EAAc,CAAEuqB,kBACtD,CAEA,MAAMK,EAAY,CAAEh6B,KAAMgqB,EAAsBiE,eAChD,OAAOe,EAAI3O,aAAa,IAAI0J,EAAiBiQ,EAAWxG,GAC1D,GAEFrwB,KAAKyvB,SAAW,IAAI5R,EAAM,CACxBhhB,KAAesuB,EAAmB2L,UAClCvY,cAAesN,GACd7rB,KAAK0xB,oBACLhP,OAAM,WACLmJ,EAAIwF,mBACJrxB,KAAK2xB,kBACL3xB,KAAK8yB,iBAAmBtgB,EAAMkE,WAAWkV,EAAWiF,sBACX7wB,KAAK2yB,kBAChD,IACCtQ,SAASwE,EAAsBgD,cAAc,WAC5C,OAAO7pB,KAAK0e,aAAamN,EAAIuD,QAAQ8B,eACvC,IACC7O,SAASwE,EAAsBiD,oBAAoB,WAClD,OAAO9pB,KAAK0e,aAAamN,EAAIuD,QAAQ8B,gBACZ,IAAMrF,EAAIiE,gBAAgBp5B,EAAyB2yB,OAC9E,IACChH,SAASwE,EAAsBqD,YAAY,WAC1C,OAAOlqB,KAAK0e,aAAamN,EAAIkL,WAC/B,IACC1U,SAASwE,EAAsB0D,cAAc,WAE5C,OADiDsB,EAAIwF,iBACjDxF,EAAIwF,iBAAmB,EAClBrxB,KAAK8iB,qBAAqB+I,EAAI4D,UAEhCzvB,KAAK0e,aAAamN,EAAIuD,QAAQgC,eACZ,IAAMhD,EACH,IAAIv/B,EAAe,6BACAD,EAAa6a,WAC9D,IACC4Y,SAASwE,EAAsBkD,aAAa,SAAsB3I,GAEjE,OAAOphB,KAAK0e,aAAamN,EAAIuD,QAAQgC,eAAe,IAAMhD,EAAehN,EAAI6J,UAC/E,IACC5I,SAASwE,EAAsBiE,eAAe,SAAwBvV,GAGrE,OAFAvV,KAAK+yB,mBAAmBxd,EAAM0V,SAEvBjrB,KAAK0e,aAAamN,EAAImL,OAC/B,IACC3U,SAASwE,EAAsBmD,SAAS,WACvC,OAAOhqB,KAAK0e,aAAamN,EAAImL,OAC/B,IACCpU,MAAK,WACJ5iB,KAAK6yB,wBACP,IACF7yB,KAAK4vB,aAAe,IAAI/R,EAAM,CAC5BhhB,KAAesuB,EAAmB/B,aAClC7K,cAAesN,IAEdnJ,OAAM,WAEqC1iB,KAAKitB,uBACNpB,EAAIoB,uBAC7CtB,EAASnQ,MAAM9kB,EAAyB0yB,aAAcyC,EAAIoB,wBAC1DpB,EAAIwF,iBAAmBzF,EAAW0F,gBAClCzF,EAAIoL,kBAAoBrL,EAAWqL,iBACrC,IACCxY,SACC,WACE,OAAOiR,EAAqC1vB,MAAM,EAEpD,IACDqiB,SAASwE,EAAsBiD,oBAAoB,WAClD,OAAO9pB,KAAK0e,aAAamN,EAAI+D,aAAasH,gBAC5C,IACC7U,SAASwE,EAAsBgD,cAAc,WAC5C,OAAO7pB,KAAK0e,aAAamN,EAAI+D,aAAasH,gBAC5C,IACFl3B,KAAK4vB,aAAasH,gBAAkB,IAAIrZ,EAAM,CAC5ChhB,KAAesuB,EAAmBgM,8BAClC5Y,cAAeve,KAAK4vB,eAEnBvN,SAASwE,EAAsB8C,YAAY,WAE1C,OADAkC,EAAIwF,iBAAmBzF,EAAW0F,gBAC3B5B,EAAqC1vB,MAAM,EAEpD,IACFA,KAAK4vB,aAAaC,UAAY,IAAIhS,EAAM,CACtChhB,KAAesuB,EAAmBiM,uBAClC7Y,cAAeve,KAAK4vB,cACnB5vB,KAAK0xB,oBACLhP,OAAM,WACLmJ,EAAIwF,mBACJrxB,KAAK2xB,kBACL3xB,KAAK8yB,iBAAmBtgB,EAAMkE,WAAWkV,EAAWiF,sBACX7wB,KAAK2yB,kBAChD,IACCtQ,SAASwE,EAAsBqD,YAAY,WAG1C,OAAOlqB,KAAK0e,aAAamN,EAAIkL,WAC/B,IACC1U,SAASwE,EAAsB0D,cAAc,WAE5C,OADkEsB,EAAIwF,iBAClExF,EAAIwF,iBAAmB,EAClB3B,EAAqC1vB,MAAM,GAK7CA,KAAK0e,aAAamN,EAAIuD,QAAQgC,eACZ,IAAMhD,EACH,IAAIv/B,EAAe,+BACAD,EAAa6a,WAC9D,IACC4Y,SAASwE,EAAsBkD,aAAa,SAAsB3I,GAGjE,GAAIyK,EAAIoL,kBAAoB,IAAgC,IAA3BpL,EAAIoL,mBACnC,GAAI7V,GAAOA,EAAI6J,SAAW7J,EAAI6J,QAAQ3f,UAChC8V,EAAI6J,QAAQ3f,UAAY1c,EAAa8Y,gBACvC0Z,EAAI6J,QAAQ3f,UAAY1c,EAAayY,yBACrC+Z,EAAI6J,QAAQ3f,UAAY1c,EAAa2W,gBAErC,OADqCsmB,EAAIoL,kBAA8B7V,EAAI6J,QAAQ3f,QAC5EtL,KAAK0e,aAAamN,EAAI+D,aAAayH,kBAMHxL,EAAIoL,kBAEjD,OAAOj3B,KAAK0e,aAAamN,EAAIuD,QAAQgC,eAAe,KAAMkG,OA5iBpC74B,EA4iBqD2iB,EAAI6J,QA3iBjF5pB,EAAO5C,aAAiB5P,QACxB88B,EAASnQ,MAAM9kB,EAAyB4yB,WAAY7qB,GAFtD,IAA0BA,CA4iBiE,GACzF,IACC4jB,SAASwE,EAAsBiE,eAAe,SAAwBvV,GAGrE,OAFAvV,KAAK+yB,mBAAmBxd,EAAM0V,SAEvBjrB,KAAK0e,aAAamN,EAAImL,QACJ,IAAMnL,EAAIiE,gBAAgBp5B,EAAyBwyB,cAC9E,IACC7G,SAASwE,EAAsBmD,SAAS,WACvC,OAAOhqB,KAAK0e,aAAamN,EAAImL,QACJ,IAAMnL,EAAIiE,gBAAgBp5B,EAAyBwyB,cAE9E,IACCtG,MAAK,WACJ5iB,KAAK6yB,wBACP,IACF7yB,KAAK4vB,aAAayH,YAAc,IAAIxZ,EAAM,CACxChhB,KAAesuB,EAAmBoM,yBAClChZ,cAAeve,KAAK4vB,cACnB,CACD,8BAAA4H,GAEE3L,EAAI3O,aAAa,IAAI0J,EAAiB,CACpC/pB,KAAMgqB,EAAsBgE,6BAChC,EACA,4BAAA4M,GACEz3B,KAAK03B,uBAAuBvhB,QAC9B,IAECuM,OAAM,WACHmJ,EAAIoL,kBAAoB,KACxBpL,EAAIoL,kBAE0BrL,EAAW+L,yBAAqD9L,EAAIoL,kBACtGj3B,KAAK03B,uBAAyBllB,EAAMkE,WAAWkV,EAAW+L,yBACX33B,KAAKw3B,+BACtD,IAAG5U,MAAK,WACN5iB,KAAKy3B,8BACP,IAAGpV,SAASwE,EAAsBgE,4BAA4B,WAE5D,OADAgB,EAAIwF,iBAAmBzF,EAAW0F,gBAC3B5B,EAAqC1vB,MAAM,EAEpD,IAEA,MAAM43B,EAAY53B,KAAKg3B,OAAS,IAAInZ,EAAM,CACxChhB,KAAesuB,EAAmBnB,QAClCzL,cAAesN,IAEdpN,SACC,WACE,OAAOze,KAAK0e,aAA6B,IAAhBmN,EAAImK,QACzB4B,EAAUC,aACVD,EAAUE,KAChB,IAEDpV,OAAM,KACLmJ,EAAIkB,0BAAuBn8B,EAGtBi7B,EAAIoB,uBAKPpB,EAAIoB,uBAAyB,KAH7BpB,EAAIiE,gBAAgBp5B,EAAyBuyB,GAI/C,IAED5G,SAASwE,EAAsBgD,cAAc,WAC5C,OAAO7pB,KAAK0e,aAAamN,EAAIuD,QAAQ8B,eACvC,IACC7O,SAASwE,EAAsBiD,oBAAoB,WAClD,OAAO9pB,KAAK0e,aAAamN,EAAIuD,QAAQ8B,gBACZ,IAAMrF,EAAIiE,gBAAgBp5B,EAAyB2yB,OAC9E,IACChH,SAASwE,EAAsBqD,YAAY,WAE1C,OAAOlqB,KAAK0e,aAAamN,EAAIkL,WAC/B,IACC1U,SAASwE,EAAsBuD,cAAc7U,GAE5CsW,EAAIkM,0BACFnM,EACAl1B,EAAyB4yB,WACzB/T,EAAM0V,WAGZ2M,EAAUE,KAAO,IAAIja,EAAM,CACzBhhB,KAAesuB,EAAmB6M,aAClCzZ,cAAeqZ,IAEdlV,OAAM,KACLmJ,EAAIiE,gBAAgBp5B,EAAyBm3B,QAC7ChC,EAAIoM,WAAU,GACdpM,EAAImE,uBAAuB,IAE5BpN,MAAK,KACJiJ,EAAIiE,gBAAgBp5B,EAAyBo3B,UAC7CjC,EAAIoE,sBAAsB,IAI3B5N,SAASwE,EAAsBiD,oBAAoB,WAElD,OADA+B,EAAIoM,WAAU,GACPj4B,KAAKijB,gBACd,IAEF2U,EAAUC,aAAe,IAAIha,EAAM,CACjChhB,KAAesuB,EAAmB+M,sBAClC3Z,cAAeqZ,IAEdvV,SAASwE,EAAsBoD,iBAAiB,WAC/C,OAAOjqB,KAAK0e,aAAakZ,EAAUE,KACrC,IAEF93B,KAAK+2B,WAAa,IAAIlZ,EAAM,CAC1BhhB,KAAesuB,EAAmBgN,YAClC5Z,cAAesN,GACd,CAED,iBAAAuM,GAIEvM,EAAIwM,iBACJ,IACE,MAAM/H,EAAiB3V,EAAiB4V,oBAClCllB,EAAU6f,EAAOsF,kBAAkBC,wBAAwB9E,EAAStO,OACTiT,GACjE3V,EAAiB+V,YAAYrlB,GAC7BsP,EAAiBgW,eACfL,GACA,IAAMtwB,KAAKs4B,uBACX1M,EAAWiF,sBACX,MACA0H,GAAYv4B,KAAKw4B,qBAAqBD,KACxCzM,EAAS,8CACA,CACEzO,OAAQsO,EAAStO,OACjBiT,kBAEb,CAAE,MAAOxQ,GACPgM,EAAS,uEAAuEhM,KAC1DnF,EAAiB8d,sBACvC5M,EAAI3O,aAAa,IAAI0J,EAAiB,CAAE/pB,KAAMgqB,EAAsBuD,eACtE,CACF,EAEAkO,oBAAmB,KACjBxM,EAAS,kBACFD,EAAI3O,aACT,IAAI0J,EAAiB,CAAE/pB,KAAMgqB,EAAsB4D,mBAIvD,oBAAA+N,CAAqBnI,GACfA,EAAI8F,UAAYjL,EAAOkL,yBAAyBsC,QAClD5M,EAAS,6CAA6CZ,EAAOkL,yBAAyBh3B,SAASixB,EAAI8F,YAErG,MAAMK,EAAenG,EAAI/0B,UAAUm7B,YAC7BE,EAActG,EAAI/0B,UAAUs7B,WAC5B3qB,EAAe7I,EAA2BgG,kBAAkBotB,EACAG,GAGlE,OAFAhL,EAAS8G,gBAAkBpC,EAAI0E,qBAC/BjJ,EAAS,wBAAyB0K,EAAcG,EAAa/nC,EAAawQ,SAAS6M,IAC5E4f,EAAI3O,aAAa,IAAI0J,EAC1B,CAAE/pB,KAAMgqB,EAAsBuD,cAC9B,IAAIv7B,EAAe8nC,EAAa1qB,EAAcuqB,IAClD,IAGC9T,OAAM,WACL1iB,KAAKo4B,mBACP,IACC/V,SAASwE,EAAsB4D,gBAAgB,WAC9C,OAAOzqB,KAAK8iB,qBAAqB+I,EAAIkL,WACvC,IAGC1U,SAASwE,EAAsBuD,cACtB,IAAMyB,EAAIsE,oBAAoBz5B,EAAyB2yB,QAGnErpB,KAAKwvB,WAAa,IAAI3R,EAAM,CAC1BhhB,KAAesuB,EAAmBwN,YAClCpa,cAAesN,GACd,CACD,iBAAA+M,GACE,MAAMtI,EAAiB3V,EAAiB4V,oBAClCllB,EAAU6f,EAAOsF,kBAAkBqI,UACvCjN,EAAW0D,gBACX1D,EAAWwG,gBACX9B,GACF3V,EAAiB+V,YAAYrlB,GAC7BsP,EAAiBgW,eACfL,EACAtwB,KAAK84B,oBAAoBt6B,KAAKwB,MAC9B4rB,EAAWiF,sBACX,KACA7wB,KAAK+4B,qBAAqBv6B,KAAKwB,MACnC,EACA,mBAAA84B,GACEhN,EAAS,kBACTD,EAAI3O,aAAa,IAAI0J,EAAiB,CAAE/pB,KAAMgqB,EAAsB2D,iBACtE,EACA,oBAAAuO,CAAqB1I,GAInB,GAAIA,EAAI8F,UAAYjL,EAAOkL,yBAAyB4C,OAElD,OADAlN,EAAS,+CAA+CZ,EAAOkL,yBAAyBh3B,SAASixB,EAAI8F,YAC9FtK,EAAI3O,aACT,IAAI0J,EACF,CAAE/pB,KAAMgqB,EAAsBkE,eAC9B,IAAIl8B,EAAe,+BACAq8B,EAAOkL,yBAAyBh3B,SAASixB,EAAI8F,WAC7CvnC,EAAa0nC,oBAGtC,MAAMC,EAASlG,EAAI/0B,UACbk7B,EAAeD,EAAOE,YAE5B,GAAqB,MAAjBD,EAAsB,CACxB,MAAMG,EAAcJ,EAAOK,WACrB3qB,EAAe7I,EAA2BgG,kBAAkBotB,EACAG,GAGlE,GAFA7K,EAAS,0BAA2B0K,EAAcG,EAAa/nC,EAAawQ,SAAS6M,IAEjFA,IAAiBrd,EAAamX,wBAAyB,CAEzD,MAAM8wB,EAAY,CAAEh6B,KAAMgqB,EAAsBmE,gBAChD,OAAOa,EAAI3O,aAAa,IAAI0J,EAAiBiQ,EAAWxG,GAC1D,CAEA,OAAOxE,EAAI3O,aAAa,IAAI0J,EACxB,CAAE/pB,KAAMgqB,EAAsBkE,eAC9B,IAAIl8B,EAAe8nC,EAAa1qB,EAAc,CAAEuqB,kBACtD,CAEA,MAAMK,EAAY,CAAEh6B,KAAMgqB,EAAsBmE,gBAChD,OAAOa,EAAI3O,aAAa,IAAI0J,EAAiBiQ,EAAWxG,GAC1D,IAGC3N,OAAM,WAEL1iB,KAAK44B,mBACP,IACCvW,SAASwE,EAAsB2D,gBAAgB,WAE9C,OAAOxqB,KAAK8iB,qBAAqB+I,EAAI4D,SACvC,IACCpN,SAASwE,EAAsBmE,gBAAgB,WAC9C,OAAOhrB,KAAK8iB,qBAAqB+I,EAAI4D,SACvC,IACCpN,SAASwE,EAAsBkE,eAAe,SAAwB3J,GAErE,OAAOphB,KAAK0e,aAAamN,EAAIuD,QAAQgC,eAAe,IAAMhD,EAAehN,EAAI6J,UAC/E,GACJ,CAQA,aAAAgO,CAAc5tB,GACZ,MAAM,UAAEwQ,EAAS,UAAEzC,GAAcpZ,KAAKmY,OAChC+gB,EAAY7tB,EAAQ8tB,yBACpBC,EAAQF,EAAUnrC,WAClB49B,EAAW3rB,KAAKksB,UAEtB,IAAKlsB,KAAKq5B,aAIR,OADA1N,EAAS3O,QAAQ5jB,EAASkgC,kCACnB,EAGJ3N,EAAS8I,mBACZppB,EAAQkuB,kBAAkB,GAiB5B,MAAMC,EAAcnuB,EAAQouB,sBAC5B,GAAIpO,EAAaqO,aAAaxD,GAAGsD,GAE/BnuB,EAAQsuB,oBAAoBhO,EAASqJ,sBAChC,QAAiCpkC,IAA7B+6B,EAASqJ,iBACZ3J,EAAaqO,aAAaxD,GAAGvK,EAASqJ,sBAOLpkC,IAA7B+6B,EAASqJ,kBACd3J,EAAaqO,aAAaxD,GAAGvK,EAASqJ,kBACrC3J,EAAaqO,aAAaxD,GAAGsD,IAGnCnuB,EAAQsuB,oBAAoBtO,EAAaqO,kBAZqB,CAEtC/N,EAASqJ,gBAAgBjnC,WAC9ByrC,EAAYzrC,WAG/B49B,EAASqJ,gBAAkBwE,CAC7B,CAQA,MAAM5H,EAAgB5xB,KAAK6xB,eACrB+H,EAAYhI,EAAciI,WAAWX,EACA7tB,EAAQyuB,kCAC7CC,EAAuBnI,EAAcoI,YAAch6B,KAAKi6B,eAC9D,OAAQL,GACN,KAAKrO,EAAmB2O,GACtB,MACF,KAAK3O,EAAmB4O,UAMtB,GALAxO,EAAS3O,QAAQ5jB,EAASghC,sBAKrBp6B,KAAKq6B,iBAAiBroB,IAAIknB,IAC1Bl5B,KAAKs6B,YAAYtoB,IAAIonB,GAKfW,EACT/5B,KAAKi4B,UAAU8B,GAOf/5B,KAAKu6B,4BAb2B,CAEhC,MAAMC,EAAe,IAAI5sB,IACzB4sB,EAAa/rC,IAAI2H,EAAekxB,SAAU,CAAC,CAAC4R,EAAWA,KACvDl5B,KAAKy6B,SAASD,EAChB,CAUA,OAAO,EACT,KAAKjP,EAAmBmP,aAEtB,OADA/O,EAAS3O,QAAQ5jB,EAASuhC,0BACnB,EACT,QAEE,OADAt5B,GAAO,EAAO,iCAAkCu4B,IACzC,EAGX,OAAO55B,KAAKq6B,iBAAiBvS,OAAOoR,GAAYhR,IAC9C,IAAI0S,GAAyB,EAC7B,GAAI1S,EACF,OAAQA,EAAS5J,OACf,KAAKyI,EAAoBC,QACvBhnB,KAAKs6B,YAAY5pB,IAAIwX,EAASja,KAC9B,MACF,KAAK8Y,EAAoBE,eACvB2T,GAAyB,EACzB,MACF,KAAK7T,EAAoBG,WAEvB,MACF,QACE7lB,GAAO,EACA,kCACA0lB,EAAoB3nB,SAAS8oB,EAAS5J,QAiBnD,OAbAte,KAAKsc,cAAe,EACpBtc,KAAK2sB,iBAAiB7T,KAAKzN,GAC3BrL,KAAKsc,cAAe,EAEhByd,GAAwBa,EAI1B56B,KAAKi4B,UAAU8B,GAEf/5B,KAAKu6B,yBAGA,CAAI,GAEf,CAEA,cAAAM,CAAeC,EAAWC,GAAc,GAGtC/6B,KAAKg7B,kBAAkBF,EAAW1kC,EAAekxB,SAAUyT,EAC7D,CAEA,iBAAAC,CAAkBF,EAAWG,EAAiB7kC,EAAekxB,SAAUyT,GAAc,GACnF,MAAM,UAAElf,GAAc7b,KAAKmY,OAErBihB,EAAQ0B,EAAU/sC,WAGxB,OAAOktC,GACL,KAAK7kC,EAAeq4B,OAGlBzuB,KAAKksB,UAAUlP,QAAQ5jB,EAAS8hC,kBAChC,MAIF,KAAK9kC,EAAes4B,SAGlB1uB,KAAKksB,UAAUlP,QAAQ5jB,EAAS+hC,oBAChC,MAEF,KAAK/kC,EAAekxB,SAKdyT,GACF/6B,KAAKksB,UAAUlP,QAAQ5jB,EAASgiC,oBAGlCp7B,KAAKksB,UAAUlP,QAAQ5jB,EAASiiC,UAKpC,GAAIr7B,KAAKs6B,YAAYxoB,OAAOsnB,GAAQ,CAGlC,MAAMkC,EAAe,IAAI1tB,IAGzB,OAFA0tB,EAAa7sC,IAAIwsC,EAAgB,CAAC,CAACH,EAAWA,UAC9C96B,KAAKy6B,SAASa,EAEhB,CAIAt7B,KAAKq6B,iBAAiB7R,eAAesS,EAAW/T,EAAoBE,eAAgBgU,GAEjFA,IAAmB7kC,EAAekxB,SACnCtnB,KAAKi4B,WAAU,GAEfj4B,KAAKu6B,uBAET,CAEA,cAAAgB,GAEE,OADAv7B,KAAK8xB,kBACE9xB,KAAKw7B,YACd,CAEA,cAAAC,GACE,OAAKz7B,KAAKkhB,oBAERlhB,KAAKyhB,eAAe0J,EAAmB4F,UACvC/wB,KAAKyhB,eAAe0J,EAAmBuQ,2BAE3C,CAEA,wBAAAC,GACE37B,KAAK47B,eAAgB,EACrB57B,KAAK67B,oBACP,CAEA,uBAAA5N,GACEjuB,KAAKq5B,cAAe,EACpBr5B,KAAK67B,oBACP,CAEA,kBAAAA,GACM77B,KAAK47B,eAAiB57B,KAAKq5B,cAC7Br5B,KAAK+a,IAAI,kCAAkC/a,KAAKq5B,sBAAsBr5B,KAAK47B,kBAC3E57B,KAAK2sB,iBAAiBhd,QACtB3P,KAAKysB,oBAAsBzsB,KAAKusB,0BAChCvsB,KAAKi4B,WAAU,IAEfj4B,KAAK+a,IAAI,sCAAsC/a,KAAKq5B,sBAAsBr5B,KAAK47B,iBAEnF,CAEA,mBAAAzL,CAAoB7b,EAAW7V,GAC7B,MAAMktB,EAAW3rB,KAAKksB,WAChB,UAAErQ,GAAc7b,KAAKmY,OAM3B,OAJ2CwT,EAAS1P,iBAEpDjc,KAAKkzB,yBAEElzB,KAAK0e,aAAa1e,KAAKovB,QAAQgC,eAAe,IACnDpxB,KAAK8vB,gBAAgBxb,EAAW7V,IACpC,CAEA,yBAAAs5B,CAA0BnM,EAAYtX,EAAW7V,GAC/C,MAAMktB,EAAW3rB,KAAKksB,WAChB,UAAErQ,GAAc7b,KAAKmY,OAc3B,GAVI1Z,GAASA,aAAiB5P,GAAkB4P,EAAM6M,SAChD7M,EAAM6M,UAAY1c,EAAaoZ,iBAEjChI,KAAK6xB,eAAexY,QACpBrZ,KAAKq6B,iBAAiBhhB,SAI1BrZ,KAAKkzB,yBAEDvH,EAAS8G,iBACXzyB,KAAKqb,kBAAkBsT,UAAUv2B,EAAe22B,gBAAiB,CACLpD,EAAS8G,gBACrE,MAAMqJ,EAAY5Q,EAAOsF,kBAAkBuL,aAAapQ,EAASqQ,QACTrQ,EAAS8G,gBACTzyB,KAAK6xB,eAAeS,WAC5EtyB,KAAKqb,kBAAkBqV,YAAYoL,EACrC,CACA,QAAsC,IAAlClQ,EAAWqL,mBAA4BrL,EAAWqL,kBAAoB,IACpEx4B,GAASA,aAAiB5P,GAAkB4P,EAAM6M,UAChD7M,EAAM6M,UAAY1c,EAAaoZ,gBACjCvJ,EAAM6M,UAAY1c,EAAa2W,iBAE/BvF,KAAKitB,uBAAyBxuB,EAEvBuB,KAAK0e,aAAa1e,KAAK4vB,eAI7B5vB,KAAK0e,aAAa1e,KAAKovB,QAAQgC,eAAe,IACnDpxB,KAAK8vB,gBAAgBxb,EAAW7V,IACpC,CAEA,uBAAAw9B,GACEj8B,KAAK47B,eAAgB,EACrB57B,KAAK+a,IAAI,2BAA2B/a,KAAKq5B,sBAAsBr5B,KAAK47B,kBACpE57B,KAAK2sB,iBAAiBuP,MACxB,CAEA,sBAAAhM,GACElwB,KAAKq5B,cAAe,EACpBr5B,KAAK+a,IAAI,0BAA0B/a,KAAKq5B,sBAAsBr5B,KAAK47B,kBACnE57B,KAAKi4B,WAAU,EACjB,CAEA,uBAAAkE,GACOn8B,KAAKo8B,qBAEVtlB,aAAa9W,KAAKo8B,oBAClBp8B,KAAKo8B,mBAAqB,KAC5B,CAEA,QAAAhM,GACEpwB,KAAKm8B,0BACLn8B,KAAKq4B,iBACLr4B,KAAKw7B,kBAAe5qC,EACpBoP,KAAKq8B,SAAW,KAChBr8B,KAAK2sB,iBAAmB,KACxB3sB,KAAK6xB,eAAiB,KACtB7xB,KAAKksB,UAAY,KACjBlsB,KAAKqb,kBAAoB,IAC3B,CAEA,cAAAgd,GACEr4B,KAAKgyB,eAAYphC,EACjBoP,KAAKkyB,mBAAgBthC,CACvB,CAEA,eAAAkhC,GACE,GAAI9xB,KAAKgyB,UAIP,OAGF,MAAMrX,EAAmB3a,KAAKqb,kBACxBuQ,EAAa5rB,KAAKksB,UAAU9Q,aAC5B,gBAAEkU,GAAoB1D,EAE5B,IAAIqD,EACA8C,EACAE,EACA3C,EAAgBpyB,OAAStF,EAAUuF,OAGrC8xB,EAActU,EAAiB2hB,gCAAgChN,GAI/DyC,EAAW,IAAIn2B,EAAM,CACnBiB,KAAQoyB,EAAYpyB,KACpBK,KAAQ1H,EAAgB2H,MACxBF,OAAQ,EACRH,MAAQmyB,EAAYnyB,MAAM5K,OAAO+8B,EAAYhyB,UAG/Cg1B,OAAerhC,IAGfmhC,EAAWzC,EAAgBzyB,KACvB8d,EAAiB2hB,gCAAgChN,GACjD,IAAI75B,EAAM,CAAEoH,KAAM,MAAOI,OAAQ,EAAGH,MAAO,OAC/Cm1B,EAAerG,EAAWoD,2BACxBrU,EAAiB4hB,2BAA2B/mC,EAAgBgI,OAC9DyxB,EAAcgD,GAKhBv4B,OAAOC,OAAOqG,KAAM,CAClBw7B,aAAevM,EACf+C,UAAeD,EACfG,cAAeD,IAIjBrG,EAAW0D,gBAAkB,IAAI93B,EAAgB,CAC/CqF,KAASk1B,EAASl1B,KAClBK,KAASoyB,EAAgBpyB,KACzBqyB,QAASD,EAAgBC,SAE7B,CAEA,0BAAAzC,GACEpzB,OAAOC,OAAOqG,KAAM,CAClBi2B,kBAAmB,EACnBD,aAAmBplC,EACnByoC,cAAmB,EACnBuC,eAAmB,GAEvB,CAEA,sBAAA1I,GACE,MAAM,UAAErX,GAAc7b,KAAKmY,OAG3BnY,KAAKksB,UAAUwG,sBAAmB9hC,CACpC,CAEA,2BAAAi8B,GACE,MAAM,UAAEhR,GAAc7b,KAAKmY,OAG3BnY,KAAK6xB,eAAiB,IAAIvG,EAG1BtrB,KAAKq6B,iBAAmB,IAAI9S,EAl5CP,KAm5CrBvnB,KAAKs6B,YAAc,IAAIjrB,IAGvBrP,KAAKksB,UAAUuG,qBAAkB7hC,EAGjCoP,KAAKksB,UAAUwG,sBAAmB9hC,CACpC,CASA,QAAA6pC,CAAS+B,GACP,MAAMC,EAAevR,EAAOsF,kBAAkBkM,OAC5C18B,KAAKksB,UAAU7O,OACfrd,KAAK6xB,eAAeU,aACpBvyB,KAAKwsB,WACLgQ,GACFx8B,KAAKqb,kBAAkBqV,YAAY+L,EACrC,CAkBA,eAAAE,CAAgBC,EAAkB/B,EAAiB,MAEjD,MAAMgC,EAAeD,EAAiBC,aAChCC,EAAYF,EAAiBE,UAG7BC,EAAqB3mC,EAAekY,OAEpC0uB,EAAqBH,EAAa3vC,OACxC,GAAI2tC,GAAkBA,EAAevc,QAAUyI,EAAoBC,QAAS,CAE1E,GACyB,IAAvBgW,GACEA,EAAqB,GACpBH,EAAaG,EAAqB,GAAG5V,oBAAsByT,EAAezT,kBAG7E,YADAyV,EAAa/jB,KAAK+hB,GAIf,GACDmC,EAAqB,GACpBH,EAAaG,EAAqB,GAAG5V,oBAAsByT,EAAezT,kBAC7E,CAMA,OAJA0V,EADqBD,EAAaG,EAAqB,GAAG5V,mBAClCtO,KAAK+jB,GAE7BD,EAAiBC,aAAe,QAChCD,EAAiBC,aAAa/jB,KAAK+hB,EAErC,CACF,CAGA,GAAImC,EAAoB,CAEtBF,EADqBD,EAAaG,EAAqB,GAAG5V,mBAClCtO,KAAK+jB,EAC/B,CAOA,IAAII,EAAiB,EACrB,IAAI,IAAI1wC,EAAI,EAAGA,EAAIwwC,EAAmB7vC,OAAQX,IAC5C0wC,GAAiBH,EAAUC,EAAmBxwC,IAAIW,OAGpD,GAAuB,OAAnB2tC,GAA4BoC,IAAkB/R,EAAOsF,kBAAkB0M,sBAAwB,CAEjG,MAAMC,EAAa,IAAIvvB,IACvB,IAAIwvB,GAAmB,EAEvB,IAAI,IAAI7wC,EAAI,EAAGA,EAAIwwC,EAAmB7vC,OAAQX,IAEzCuwC,EAAUC,EAAmBxwC,IAAIW,OAAS,IAC3CiwC,EAAW1uC,IAAIsuC,EAAmBxwC,GAAIuwC,EAAUC,EAAmBxwC,IAAImG,KACrE2qC,GAAS,CAACA,EAAM,GAAGn+B,GAAIm+B,EAAMA,EAAMnwC,OAAS,GAAGgS,OAGjDk+B,GAAmB,GAIvB,GAAIA,GAAoBR,EAAiBU,kBAAmB,CAE1D,MAAM,UAAEzhB,GAAc7b,KAAKmY,OAE3BnY,KAAKy6B,SAAS0C,GAGd,MAAMI,EAAmBJ,EAAW9uC,IAAI+H,EAAeq4B,QACjD+O,EAAqBL,EAAW9uC,IAAI+H,EAAes4B,UAKrC1uB,KAAK6xB,eAAeU,aACP4K,EAAWnrB,IAAI5b,EAAekxB,WACzD6V,EAAW9uC,IAAI+H,EAAekxB,UAAU50B,KAAI+qC,GAAK,IAAIA,EAAE,OAAOA,EAAE,QAEtCN,EAAWnrB,IAAI5b,EAAeq4B,UACpD8O,EAAiB,GAAG,GAAOA,EAAiB,GAAG,IAEvBJ,EAAWnrB,IAAI5b,EAAes4B,YACtD8O,EAAmB,GAAG,GAAOA,EAAmB,GAAG,IAI7Dx9B,KAAK6xB,eAAe6L,WACpBd,EAAiBU,mBAAoB,CACvC,CAGA,IAAI,IAAI/wC,EAAI,EAAGA,EAAIwwC,EAAmB7vC,OAAQX,IAC5CuwC,EAAUC,EAAmBxwC,IAAIuhB,SAAS6vB,IACxCA,EAAS7vB,SAAS+Z,IAChB,GAAIA,EAAIvJ,QAAUyI,EAAoBG,WACpC,IACElnB,KAAKq6B,iBAAiB7R,eAAeX,EAAI3oB,GACJ6nB,EAAoBG,WAC3D,CAAE,MAAOpH,GACP,MAAM,UAAE5kB,GAAc8E,KAAKmY,OAC3Bjd,EAAU,eAAe2sB,EAAI3oB,sBAAsB4gB,IACrD,CACF,GACA,IAKN8c,EAAiBE,UAAY,GAC7B,IAAI,IAAIvwC,EAAI,EAAGA,EAAIwwC,EAAmB7vC,OAAQX,IAC5CqwC,EAAiBE,UAAUC,EAAmBxwC,IAAM,EAExD,CAEAqwC,EAAiBC,aAAe,EAClC,CAQA,SAAA5E,CAAUqF,GAAoB,GAC5Bt9B,KAAKm8B,0BAEL,MAAMK,EAAkBx8B,KAAKq6B,iBACvBzI,EAAgB5xB,KAAK6xB,eAErBkL,EAAqB3mC,EAAekY,OAGpCsuB,EAAmB,CACvBU,kBAAmBA,GAAsB1L,EAAcoI,YAAc,EACrE8C,UAAmB,GACnBD,aAAmB,IAIrB,IAAI,IAAItwC,EAAI,EAAGA,EAAIwwC,EAAmB7vC,OAAQX,IAC5CqwC,EAAiBE,UAAUC,EAAmBxwC,IAAM,GAOtD,MAAM47B,EAAQnoB,KAAKq6B,iBAAiBlS,QACN,IAA1BnoB,KAAKs6B,YAAY9S,MAAcW,GAASA,EAAM7J,QAAUyI,EAAoBC,SAE9EhnB,KAAK28B,gBAAgBC,EAAkBpR,GAKzCgR,EAAgB1uB,SAAQ+Z,GAAO7nB,KAAK28B,gBAAgBC,EAAkB/U,KAEtE7nB,KAAK28B,gBAAgBC,GAIrBv7B,GAA8C,IAAvCu7B,EAAiBU,mBACxBj8B,EAAgD,IAAzCu7B,EAAiBC,aAAa3vC,QACrC,IAAI,IAAIX,EAAI,EAAGA,EAAIwwC,EAAmB7vC,OAAQX,IAC5C8U,EAAoE,IAA7Du7B,EAAiBE,UAAUC,EAAmBxwC,IAAIW,OAE7D,CAEA,qBAAAqtC,GACMv6B,KAAKo8B,oBACLp8B,KAAKksB,UAAU9O,WACnBpd,KAAKo8B,mBAAqBvlB,YACxB,IAAM7W,KAAKi4B,WAAU,IACrBj4B,KAAKmsB,4BAET,CAEA,iBAAIyR,GACF,OAAOC,KAAKtwB,IAAIvN,KAAKysB,oBACLzsB,KAAKi2B,mBAAqB6H,OAAOC,kBACnD,CAEA,cAAIvR,GACF,OAAOxsB,KAAK49B,cAAgB59B,KAAK2sB,iBAAiBz/B,MACpD,CAEA,kBAAI+sC,GACF,OAAOj6B,KAAKwsB,WAAaxsB,KAAKqsB,sBAAwB,GACxD,CAEA,qBAAI2R,GACF,OAAOh+B,KAAK0sB,kBACd,mBCnqDF,MAAM,KAAEnvB,GAAS,EAAQ,MAmBzB/R,EAAOC,QAAQ0/B,mBAAqB5tB,EAAKE,IAjBd,CACzBszB,QAA+B,UAC/BQ,yBAA+B,2BAC/BE,uBAA+B,yBAC/BwM,kBAA+B,oBAC/BnH,UAA+B,YAC/B9M,QAA+B,UAC/BgO,aAA+B,eAC/BE,sBAA+B,wBAC/BC,YAA+B,cAC/B/O,aAA+B,eAC/BgO,uBAA+B,yBAC/BD,8BAA+B,gCAC/BI,yBAA+B,2BAC/BoB,YAA+B,gCChBjC,MAAM,KAAEp7B,GAAS,EAAQ,MAmCzB/R,EAAOC,QAAQgL,+BAAiC8G,EAAKE,IAdd,CAMrCwuB,KAAQ,OAKRiS,OAAQ,2BChCV,MAAM,KAAE3gC,GAAS,EAAQ,MA+HzB/R,EAAOC,QAAQiL,yBAA2B6G,EAAKE,IA5Gd,CAK/BwrB,GAAsB,8BAOtBI,KAAsB,gCAMtBwE,OAAsB,kCAMtBC,SAAsB,oCAQtBxE,WAAsB,qCAWtBF,aAAsB,wCAMtBF,YAAsB,uCAQtBmF,qBAAsB,8CAQtB4C,YAAsB,sCAMtB9H,SAAsB,oCAmBtBgV,QAAsB,mCAOtBC,gBAAsB,8BAOtBC,mBAAsB,yEC3HxB,MAAM,aAAEzvC,GAAiB,EAAQ,MAcjC,MAAMk4B,EAWJ,WAAA/mB,CACEu+B,EACAnyB,EACAqqB,OAAe5lC,EACfqb,EAAe,EACfL,OAAiBhb,EACjB2a,OAAS3a,GACToP,KAAKu+B,0BAA4BD,EACjCt+B,KAAKw+B,SAAWryB,EAChBnM,KAAKy+B,cAAgBjI,EACrBx2B,KAAK0+B,cAAgBzyB,EACrBjM,KAAK8L,gBAAkBF,EACvB5L,KAAK2+B,QAAUpzB,CACjB,CASA,4BAAI+yB,GACF,OAAOt+B,KAAKu+B,yBACd,CASA,QAAI1hC,GACF,OAAOmD,KAAKu+B,yBACd,CAMA,WAAIpyB,GACF,OAAOnM,KAAKw+B,QACd,CAMA,gBAAIhI,GACF,OAAOx2B,KAAKy+B,aACd,CAOA,gBAAIxyB,GACF,OAAOjM,KAAK0+B,aACd,CAOA,WAAIpzB,GACF,OAAOtL,KAAK0+B,aACd,CAUA,kBAAI9yB,GACF,OAAO5L,KAAK8L,eACd,CAQA,UAAIP,GACF,OAAOvL,KAAK2+B,OACd,CAKA,UAAIpzB,CAAOhY,GACTyM,KAAK2+B,QAAUprC,CACjB,CAQA,oBAAIwY,GAEJ,CAEA,CAAC,4CACC,MAAO,CACL,yBAA4B/L,KAAKs+B,yBACjC,QAA4Bt+B,KAAKmM,QACjC,aAA4BnM,KAAKw2B,aACjC,aAA4B5nC,EAAawQ,SAASY,KAAKiM,cACvD,eAA4BjM,KAAK4L,eAAiB5L,KAAK4L,eAAe7d,WAAa,KACnF,OAA4BiS,KAAKuL,OAASvL,KAAKuL,OAAS,KAE5D,CAEA,QAAAxd,GACE,OAAOiT,EAAahB,KACtB,EAGFxU,EAAOC,QAAQq7B,qBAAuBA,kBCvJtC,MAAM,wBACJxvB,EAAuB,gBACvBE,EAAe,yBACfonC,EAAwB,gBACxBjnC,EAAe,yBACfknC,EAAwB,UACxBjnC,GACE,EAAQ,OACN,wBAAEknC,GAA4B,EAAQ,MACtC,MAAE/mB,GAAU,EAAQ,MACpB,+BAAEthB,GAAmC,EAAQ,OAC7C,eAAE5H,EAAc,aAAED,GAAiB,EAAQ,OAC3C,oBAAEmI,GAAwB,EAAQ,OAElC,iBACJgoC,EAAgB,WAChBC,EAAU,YACVC,EAAW,YACXC,EAAW,UACXC,EAAS,SACTC,EAAQ,sBACRC,GACEP,EAEJ,SAASQ,EAA6BC,EAAUpxB,GAC9C,GAAIA,EAASmhB,gBAAgB5uB,YAAc9I,EAAU4nC,gBACnD,GAAIrxB,EAASmhB,gBAAgBmQ,cAAgBtxB,EAASkhB,kBAC/ClhB,EAAS6gB,0BACZ,MAAM,IAAIngC,EAAe,2HAEDD,EAAa8a,yBAGpC,GAAIyE,EAAS6gB,0BAElB,MAAM,IAAIngC,EAAe,uHAECD,EAAa8a,mBAE3C,CAEA,MAAMg2B,EAAqC,CACzC,QAAA7+B,CAAS/B,EAAQqP,EAAUwxB,GACzB,GAAIjmC,OAAOjH,UAAUmtC,eAAejtC,KAAKgtC,EAAe,uCACpDjmC,OAAOjH,UAAUmtC,eAAejtC,KAAKgtC,EAAe,6BACtD,MAAM,IAAI9wC,EAAe,GAAGiQ,wGACFlQ,EAAa8a,oBAGzC,GAAIhQ,OAAOjH,UAAUmtC,eAAejtC,KAAKgtC,EAAe,4CACpDjmC,OAAOjH,UAAUmtC,eAAejtC,KAAKgtC,EAAe,wBACtD,MAAM,IAAI9wC,EAAe,GAAGiQ,wGACxBlQ,EAAa8a,oBAInB,MAAM+T,EAAIshB,EAAiBvgC,KAAK,KAAMM,EAAQqP,GAC9C,KAAMA,EAASmhB,2BAA2Bh4B,GACpC6W,EAASmhB,2BAA2B93B,GACxC,MAAM,IAAI3I,EAAe,GAAGiQ,yFAEFlQ,EAAa+a,wBAIzC,GAFAi1B,EAAyB/9B,SAASsN,EAASmhB,iBAEvCnhB,EAASikB,gBAAiB,CAC5B,GAAIjkB,EAASmhB,gBAAgBC,UAAYphB,EAASkhB,gBAChD,MAAM,IAAIxgC,EAAe,GAAGiQ,6HAE1BlQ,EAAa8a,oBAIjB,GAFA+T,EAAE,kBAAmB,CAACwhB,EAAatnC,EAAiB,oBACpDknC,EAAyBh+B,SAASsN,EAASikB,kBACtCjkB,EAASmhB,gBAAgBC,SAC5BxX,EAAM8nB,UAAU1xB,EAASikB,gBAAgBmB,YACzC,MAAM,IAAI1kC,EAAe,GAAGiQ,2FAEHlQ,EAAa8a,mBAE1C,CAIA,GAAIyE,EAASmhB,gBAAgBpyB,OAAStF,EAAU4nC,gBAE9C,GAAIrxB,EAASmhB,gBAAgBC,UAC1BphB,EAASkhB,kBACTlhB,EAAS6gB,0BACV,MAAM,IAAIngC,EAAe,GAAGiQ,8GAE1BlQ,EAAa8a,yBAEZ,GAAIyE,EAAS6gB,0BAClB,MAAM,IAAIngC,EAAe,GAAGiQ,iGAE1BlQ,EAAa8a,oBAgBjB,GAbA+T,EAAE,wBAAyB,CAAC0hB,GAAY,CAACC,EAAU,GAAItB,OAAOgC,YAC9DriB,EAAE,kBAAmB,CAAC0hB,GAAY,CAACC,EAAU,EAAGtB,OAAOgC,YACvDriB,EAAE,4BAA6B,CAAC6hB,GAA+B,CAACD,IAEhE5hB,EAAE,kBAAmB,CAACyhB,EAAazoC,EAAgC,mCACnEgnB,EAAE,qCAAsC,CAAC0hB,GAAY,CAACC,EAAU,GAAI,OACpE3hB,EAAE,0CAA2C,CAAC0hB,GAAY,CAACC,EAAU,EAAG,KAExE3hB,EAAE,0BAA2B,CAACuhB,IAC9BvhB,EAAE,UAAW,CAACuhB,IACdvhB,EAAE,aAAc,CAAC0hB,GAAY,CAACC,EAAU,EAAG,MAC3C3hB,EAAE,2BAA4B,CAAC0hB,GAAY,CAACC,EAAU,GAAItB,OAAOgC,YAE7D3xB,EAAS4hB,yBACX5hB,EAASmhB,gBAAgBpyB,OAAStF,EAAUuF,MAC5C,MAAM,IAAItO,EACR,GAAGiQ,gFAEHlQ,EAAa8a,oBAGjB,GAAIyE,EAAS6e,uBACT7e,EAAS6e,+BAA+Bj2B,GAC1C,MAAM,IAAIlI,EAAe,GAAGiQ,+EAE1BlQ,EAAa+a,uBAEnB,GAGFne,EAAOC,QAAQi0C,mCAAqCA,kBChIpD,MAAMK,EAAW,EAAQ,OACnB,cAAEjoB,GAAkB,EAAQ,MAC5B,MAAEC,GAAU,EAAQ,MACpB,+BAAEthB,GAAmC,EAAQ,OAC7C,MAAEhB,GAAU,EAAQ,MAEpBuqC,EAAW,CACf1Q,qBAAyC1+B,EACzCwhC,qBAAyCxhC,EACzCigC,sBAAyC,IACzCS,gBAAyC,EACzCtC,+BAAyCp+B,EAEzCo7B,gBAAyCv1B,EAA+Bw1B,KACxEsC,2BAAyC,GACzC0R,mCAAyC,IACzCC,wCAAyC,GACzCnQ,yBAAyC,EACzCsC,SAAyC,EACzC7F,WAAyC,IACzC2T,UAAyC,EACzCnT,yBAAyCp8B,EACzCqmC,mBAA0C,EAC1CU,yBAAyC,IACzCtI,iBAAyC,GA2c3C7jC,EAAOC,QAAQkL,0BAlcf,cAAwCmhB,EACtC,WAAA/X,CAAYqQ,GACV9O,MAAM0+B,EAAU5vB,EAClB,CAaA,mBAAIkf,GACF,OAAOvX,EAAM8nB,UAAU7/B,KAAKogC,kBACxBpgC,KAAKogC,iBACLJ,EAAS1Q,eACf,CACA,mBAAIA,CAAgB/7B,GACdA,aAAiBwsC,EAASzoC,wBAC5B0I,KAAKogC,iBAAmB7sC,EAExByM,KAAKogC,iBADI7sC,EACeA,EAAMsJ,KAC1B,IAAIkjC,EAASvoC,gBAAgBjE,GAC7B,IAAIwsC,EAASzoC,wBAAwB/D,GAEjBA,CAE5B,CAeA,mBAAI6+B,GACF,OAAOra,EAAM8nB,UAAU7/B,KAAKqgC,kBACxBrgC,KAAKqgC,iBACLL,EAAS5N,eACf,CACA,mBAAIA,CAAgB7+B,GAEhByM,KAAKqgC,iBADH9sC,EACsB,IAAIwsC,EAASpoC,gBAAgBpE,GAE7BA,CAE5B,CASA,yBAAIs9B,GACF,OAAO9Y,EAAM8nB,UAAU7/B,KAAKsgC,qBACxBtgC,KAAKsgC,oBACLN,EAASnP,qBACf,CACA,yBAAIA,CAAsBt9B,GACxByM,KAAKsgC,oBAAsB/sC,CAC7B,CASA,mBAAI+9B,GACF,OAAOvZ,EAAM8nB,UAAU7/B,KAAKqxB,kBACxBrxB,KAAKqxB,iBACL2O,EAAS1O,eACf,CACA,mBAAIA,CAAgBhjC,GAClB0R,KAAKqxB,iBAAmB/iC,CAC1B,CAmBA,6BAAI0gC,GACF,OAAOhvB,KAAKugC,0BACd,CACA,6BAAIvR,CAA0B1gC,GAG1B0R,KAAKugC,2BADY,iBAARjyC,EACyBmH,EAAMwG,eAAe3N,GAErBA,CAEtC,CAmCA,mBAAI09B,GACF,OAAOjU,EAAM8nB,UAAU7/B,KAAKwgC,kBACxBxgC,KAAKwgC,iBACLR,EAAShU,eACf,CACA,mBAAIA,CAAgBz4B,GAClByM,KAAKwgC,iBAAmBjtC,CAC1B,CAkCA,8BAAIg7B,GACF,OAAOxW,EAAM8nB,UAAU7/B,KAAKygC,8BACvB1oB,EAAM5K,MAAMnN,KAAKygC,6BAClBzgC,KAAKygC,4BACLT,EAASzR,0BACf,CACA,8BAAIA,CAA2Bh7B,GAC7ByM,KAAKygC,4BAA8BltC,CACrC,CAYA,6BAAI64B,GACF,OAAOrU,EAAM8nB,UAAU7/B,KAAK0gC,qCACxB1gC,KAAK0gC,oCACLV,EAASC,kCACf,CACA,6BAAI7T,CAA0B99B,GAC5B0R,KAAK0gC,oCAAsCpyC,CAC7C,CAeA,wBAAIg+B,GACF,OAAOvU,EAAM8nB,UAAU7/B,KAAK2gC,0CACxB3gC,KAAK2gC,yCACLX,EAASE,uCACf,CACA,wBAAI5T,CAAqB/4B,GACvByM,KAAK2gC,yCAA2CptC,CAClD,CAWA,sCAAI0sC,GACF,OAAOloB,EAAM8nB,UAAU7/B,KAAK0gC,qCACxB1gC,KAAK0gC,oCACLV,EAASC,kCACf,CACA,sCAAIA,CAAmC3xC,GACrC0R,KAAK0gC,oCAAsCpyC,CAC7C,CAcA,2CAAI4xC,GACF,OAAOnoB,EAAM8nB,UAAU7/B,KAAK2gC,0CACxB3gC,KAAK2gC,yCACLX,EAASE,uCACf,CACA,2CAAIA,CAAwC3sC,GAC1CyM,KAAK2gC,yCAA2CptC,CAClD,CAUA,2BAAIw8B,GACF,OAAOhY,EAAM8nB,UAAU7/B,KAAK4gC,0BACxB5gC,KAAK4gC,yBACLZ,EAASjQ,uBACf,CACA,2BAAIA,CAAwB8Q,GAC1B7gC,KAAK4gC,yBAA2BC,CAClC,CASA,WAAIxO,GACF,OAAOta,EAAM8nB,UAAU7/B,KAAK8gC,UACxB9gC,KAAK8gC,SACLd,EAAS3N,OACf,CACA,WAAIA,CAAQwO,GACV7gC,KAAK8gC,SAAWD,CAClB,CAUA,cAAIrU,GACF,OAAOzU,EAAM8nB,UAAU7/B,KAAK+gC,aACxB/gC,KAAK+gC,YACPf,EAASxT,UACb,CACA,cAAIA,CAAWl+B,GACb0R,KAAK+gC,YAAczyC,CACrB,CASA,WAAIkkC,GACF,OAAOza,EAAM8nB,UAAU7/B,KAAKmgC,UACxBngC,KAAKmgC,SACPH,EAASG,QACb,CACA,WAAI3N,CAAQqO,GACV7gC,KAAKmgC,SAAWU,CAClB,CAqBA,uBAAI7T,GACF,OAAOjV,EAAM8nB,UAAU7/B,KAAK+sB,sBACxB/sB,KAAK+sB,qBACLiT,EAAShT,mBACf,CACA,uBAAIA,CAAoB6T,GACtB7gC,KAAK+sB,qBAAuB8T,CAC9B,CAyBA,qBAAI5J,GACF,OAAOlf,EAAM8nB,UAAU7/B,KAAKghC,oBACxBhhC,KAAKghC,mBACLhB,EAAS/I,iBACf,CACA,qBAAIA,CAAkB4J,GACpB7gC,KAAKghC,mBAAqBH,CAC5B,CAWA,4BAAIlJ,GACF,OAAO5f,EAAM8nB,UAAU7/B,KAAKihC,2BACxBjhC,KAAKihC,0BACLjB,EAASrI,wBACf,CACA,4BAAIA,CAAyBkJ,GAC3B7gC,KAAKihC,0BAA4BJ,CACnC,CAaA,mBAAIxR,GACF,OAAOtX,EAAM8nB,UAAU7/B,KAAKkhC,kBACxBlhC,KAAKkhC,iBACLlB,EAAS3Q,eACf,CAEA,mBAAIA,CAAgBwR,GAClB7gC,KAAKkhC,iBAAmBL,CAC1B,yCCheF,MAAM3V,EAAS,EAAQ,OACjB,eAAE9yB,GAAmB,EAAQ,OAC7B,YAAEszB,GAAgB,EAAQ,OAC1B,iBAAE9E,GAAqB,EAAQ,MAC/B,sBAAEC,GAA0B,EAAQ,OACpC,2BAAEzjB,EAA0B,aAChCxU,EAAY,eACZC,GAAmB,EAAQ,OACvB,KAAE2qB,EAAI,cAAEC,GAAkB,EAAQ,OAClC,qBAAEqN,GAAyB,EAAQ,OACnC,eAAE1wB,GAAmB,EAAQ,OAC7B,yBAAEM,GAA6B,EAAQ,OACvC,0BAAEC,GAA8B,EAAQ,OACxC,mCAAE+oC,GAAuC,EAAQ,OACjD,MAAE9jC,EAAK,MAAEnG,GAAU,EAAQ,OAC3B,gBAAE8B,EAAe,iBAAEG,EAAgB,qBAAED,GAAyB,EAAQ,MAG5E,SAAS4b,EAAgBiB,GACvB,MAAO,4BAA4B5d,EAAyB0I,SAASkV,IACvE,CAEA,IAAI6sB,EAAe,EAyCnB,MAAM3qC,UAAwBgjB,EAC5B,WAAAzZ,EAAY,WAAE6rB,EAAU,wBAAEpR,GAA4B,CAAC,GACrD,MAAM4mB,EAAkB,IAAIzqC,EAA0Bi1B,GACtD8T,EAAmC7+B,SAASugC,EAAgB5O,QAC1D,yBAA2B,4BACe4O,EAAiBxV,GAC7DtqB,MAAM8/B,EAAiB5mB,EAAyB,CAC9CtH,OAAQxc,EAAyBynC,QACjChrB,MAAQzc,EAAyB4X,OACjC+E,oBAGF,MAAMguB,EAAiBrhC,KAAKmY,OAAOoM,UACnCvkB,KAAKmY,OAAOoM,UAAY,IAAIrQ,IAASmtB,EAAe,wBAAyBntB,GAE7ElU,KAAKg2B,aAAUplC,EACfoP,KAAKqc,KAAOrc,KAAKshC,WACjBthC,KAAKyyB,qBAAkB7hC,EACvBoP,KAAK0yB,sBAAmB9hC,EAExBoP,KAAKyb,IAAI/kB,EAAyBm3B,QAAQ,IAAM7tB,KAAKuhC,eAAc,KACnEvhC,KAAKyb,IAAI/kB,EAAyBo3B,UAAU,IAAM9tB,KAAKuhC,eAAc,KACrEvhC,KAAKyb,IAAI/kB,EAAyB4yB,WAAYtpB,KAAKwhC,oBAAoBhjC,KAAKwB,OAC5EA,KAAKyb,IAAI/kB,EAAyBuyB,GAAIjpB,KAAKyhC,UAAUjjC,KAAKwB,OAC1DA,KAAKqc,KAAK1M,OACZ,CAEA,QAAA2xB,GACE,MAAM1V,EAAa5rB,KAAKob,YAClBve,EAAO,IApER,eAAeskC,KAqEpB,OAAO,IAAIzV,EAAY,CACrB7uB,OACA8uB,SAAkB3rB,KAClB2a,iBAAkB3a,KAAKqb,kBACvBuQ,cAEJ,CAkBA,KAAAjc,GACE3P,KAAK8b,gBAAgBrC,EAAcI,OACnC7Z,KAAKqc,KAAKsf,0BACZ,CAaA,IAAAO,GACEl8B,KAAK8b,gBAAgBrC,EAAcK,MACnC9Z,KAAKqc,KAAK4f,yBACZ,CAcA,OAAAjgB,GACE,GACQ,OADHhc,KAAKqb,kBAAkBqmB,cAActpC,EAAe+4B,8BAEnDnxB,KAAKqb,kBAAkBsT,UAAUv2B,EAAe+4B,4BACpD,MAAM,IAAItiC,EAAe,sDACjBD,EAAa4a,kBAAmB,MAE1ClI,MAAM0a,UACNhc,KAAKid,gBAAgB,IAAI2J,EAAiB,CAAE/pB,KAAMgqB,EAAsBsD,YAC1E,CAcA,UAAA1N,GACEnb,MAAMmb,aACNzc,KAAKid,gBAAgB,IAAI2J,EAAiB,CAAE/pB,KAAMgqB,EAAsBqD,aAC1E,CAsBA,cAAAqR,GACE,MAAMtM,EAAcjvB,KAAKqc,KAAKkf,iBAC9B,OAAItM,aAAuBrzB,EAClB,IAAIA,EAAMqzB,GAEZ,IAAIx5B,EAAMw5B,EACnB,CAMA,kBAAAvS,GACEpb,MAAMob,qBACN1c,KAAKid,gBAAgB,IAAI2J,EAAiB,CAAE/pB,KAAMgqB,EAAsBiD,qBAC1E,CAEA,eAAAhO,CAAgB0B,GAEd,GADAlc,MAAMwa,gBAAgB0B,GACdA,IACD/D,EAAcU,gBACjB,GAAIna,KAAK0d,kBACP,MAAM,IAAI7uB,EAAe,gDACAD,EAAa4a,kBAK9C,CASA,cAAAqxB,CAAeC,EAAWC,GAAc,GACtC,MAAM,UAAElf,GAAc7b,KAAKmY,OAE3BnY,KAAKqc,KAAKwe,eAAeC,EAAWC,EACtC,CAOA,iBAAAC,CAAkBF,EAAW1T,GAC3B,MAAM,UAAEvL,GAAc7b,KAAKmY,OAGa/hB,EAAe+Y,OAAOiY,GAC9DpnB,KAAKqc,KAAK2e,kBAAkBF,EAAW1T,EACzC,CAEA,gBAAAhL,GACE,OAAO1lB,EAAyByyB,QAClC,CAMA,iBAAAwY,CAAkBt2B,GAChB,MAAM,UAAEwQ,GAAc7b,KAAKmY,OAE3B9M,EAAQu2B,mBAAmB5hC,MAC3BA,KAAKqc,KAAK4c,cAAc5tB,EAC1B,CAOA,gCAAA0R,CAAiC1R,GAC/B,MAAM,SAAEygB,EAAQ,UAAE1S,EAAS,UAAEyC,GAAc7b,KAAKmY,OAChD2T,EAAS,yCACT,MAAMqK,EAAU9qB,EAAQ8qB,SAClB,yBAAEC,GAA6BlL,EACrC,OAAQiL,GACN,KAAKC,EAAyBsC,OAAQ,CACpC,MAAMlC,EAAenrB,EAAQ/P,UAAUm7B,YACjCE,EAActrB,EAAQ/P,UAAUs7B,WAChC3qB,EAAe7I,EAA2BgG,kBAAkBotB,EACAG,GACNtrB,EAAQ0pB,0BAC/BnkC,IAAjCya,EAAQ0pB,uBACV/0B,KAAKyyB,gBAAkBpnB,EAAQ0pB,sBAEjC/0B,KAAKid,gBAAgB,IAAI2J,EAAiB,CACxC/pB,KAAMgqB,EAAsBuD,cAE5B,IAAIv7B,EAAe8nC,EAAa1qB,EAAcuqB,IAElD,CACE,MACF,KAAKJ,EAAyByL,iBAC5B7hC,KAAKid,gBAAgB,IAAI2J,EAAiB,CACxC/pB,KAAMgqB,EAAsBoD,iBAC3B,CACD6X,OAAQz2B,EAAQ+oB,mBAElB,MACF,QAEYgC,EAAyBh3B,SAAS+2B,GAElD,CAeA,aAAAxZ,GACE,OAAOrb,MAAMqb,eACf,CAQA,YAAAolB,GACE/hC,KAAKid,gBAAgB,IAAI2J,EAAiB,CACxC/pB,KAAMgqB,EAAsB+D,6BAEhC,CASA,cAAI2I,GACF,OAAOvzB,KAAKgiC,WACd,CAKA,cAAIzO,CAAWhgC,GACbyM,KAAKgiC,YAAczuC,CACrB,CAQA,UAAIuuC,GACF,OAAO9hC,KAAKg2B,OACd,CAKA,UAAI8L,CAAOvuC,GACLA,IAAUyM,KAAKg2B,SACjBh2B,KAAKwb,MAAMjoB,EAAQmD,EAAyBm3B,OAASn3B,EAAyBo3B,UAEhF9tB,KAAKg2B,QAAUziC,CACjB,CASA,wBAAIiiC,GACF,OAAOx1B,KAAKiiC,qBACd,CAKA,wBAAIzM,CAAqBjiC,GACvByM,KAAKiiC,sBAAwB1uC,CAC/B,CAUA,eAAI0gC,GACF,OAAOj0B,KAAKkiC,YACd,CAKA,eAAIjO,CAAY1gC,GACdyM,KAAKkiC,aAAe3uC,CACtB,CAQA,UAAI8pB,GACF,OAAOrd,KAAKg8B,OACd,CAKA,UAAI3e,CAAO9pB,GACTyM,KAAKg8B,QAAUzoC,CACjB,CASA,eAAIkiC,GACF,OAAOz1B,KAAKmiC,cAAgB,CAC9B,CAKA,eAAI1M,CAAYliC,GACdyM,KAAKmiC,aAAe5uC,CACtB,CAEA,aAAAguC,CAAca,GACZ,MAAM,UAAEhpB,GAAcpZ,KAAKmY,OACCnY,KAAKg8B,QACjCh8B,KAAKg2B,QAAUoM,CACjB,CAEA,mBAAAZ,CAAoB/iC,GAClB,MAAM,SAAEqtB,GAAa9rB,KAAKmY,OAC1B2T,EAAS,GAAG9rB,sBAAsBvB,YACpC,CAEA,WAAA4jC,GACE,MAAM,SAAEvW,GAAa9rB,KAAKmY,OAC1B2T,EAAS,iBACT9rB,KAAKid,gBAAgB,IAAI2J,EAAiB,CAAE/pB,KAAMgqB,EAAsB9M,UAC1E,CAEA,SAAA0nB,GACE,MAAM,SAAE3V,GAAa9rB,KAAKmY,OAC1B2T,EAAS,wBAAwB9rB,KAAKg8B,UACxC,CAEA,CAAC,4CACC,OAAOtiC,OAAOC,OAAO2H,MAAM,4CAAwB,CACjD,YAAwBtB,KAAKw7B,aAC7B,WAAwBjkC,EAAgB6H,SAASY,KAAKuzB,YACtD,YAAwB77B,EAAiB0H,SAASY,KAAKy1B,aACvD,YAAwBz1B,KAAKi0B,YAC7B,OAAwBj0B,KAAKq0B,qBAAuBr0B,KAAK8hC,OAAS,yBAClE,qBAAwB9hC,KAAKq0B,qBAC7B,qBAAwB58B,EAAqB2H,SAASY,KAAKw1B,sBAC3D,cAAwBx1B,KAAKqc,KAAKuhB,eAEtC,CAEA,QAAA7vC,GACE,OAAOiT,EAAahB,KACtB,CAEA,eAAA0d,GACE,OAAO1d,KAAKqc,KAAKof,gBACnB,CA4CA,eAAA6G,CAAgBC,EAAO32B,EAAgB42B,GAyBrCxiC,KAAKqb,kBAAkBonB,wBACrBF,EACAviC,KAAKqc,KAAKkf,kBACV,EACAv7B,MA5Be,CAAC0iC,EAASC,EAASC,EAAUC,KAC5C,GAAIH,EAAS,CACX,MAAMntB,EAAQ,IAAIuR,EAChBpwB,EAAyB0nC,gBACzByE,EACAD,EACAD,EACA/2B,EACA,UAAU22B,EAAM9hC,aAElBT,KAAKwb,MAAM9kB,EAAyB0nC,gBAAiB7oB,EACvD,KAAO,CACL,MAAM9W,EAAQ,IAAIqoB,EAChBpwB,EAAyB2nC,mBACzBwE,EACAD,EACAD,EACA/2B,EACA,UAAU22B,EAAM9hC,aAElBT,KAAKwb,MAAM9kB,EAAyB2nC,mBAAoB5/B,EAC1D,IASA+jC,EACJ,CA0CA,kBAAAM,CAAmBP,EAAO32B,EAAgB42B,GAyBxCxiC,KAAKqb,kBAAkBonB,wBACrBF,EACAviC,KAAKqc,KAAKkf,kBACV,EACAv7B,MA5Be,CAAC0iC,EAASC,EAASC,EAAUC,KAC5C,GAAIH,EAAS,CACX,MAAMntB,EAAQ,IAAIuR,EAChBpwB,EAAyB0nC,gBACzByE,EACAD,EACAD,EACA/2B,EACA,UAAU22B,EAAM9hC,aAElBT,KAAKwb,MAAM9kB,EAAyB0nC,gBAAiB7oB,EACvD,KAAO,CACL,MAAM9W,EAAQ,IAAIqoB,EAChBpwB,EAAyB2nC,mBACzBwE,EACAD,EACAD,EACA/2B,EACA,UAAU22B,EAAM9hC,aAElBT,KAAKwb,MAAM9kB,EAAyB2nC,mBAAoB5/B,EAC1D,IASA+jC,EACJ,EAGFh3C,EAAOC,QAAQ+K,gBAAkBA,kBCloBjC,MAAM,yBAAEE,GAA6B,EAAQ,MAE7C,SAAS2c,EAAgBmgB,GACvB,MAAO,4BAA4B98B,EAAyB0I,SAASo0B,IACvE,CAgHAhoC,EAAOC,QAAU,CAAE2/B,kBA9GnB,MACE,WAAArrB,EAAY,QAAE6sB,EAAO,QAAEb,EAAO,OAAE5T,GAAW,CAAC,GAC1Cze,OAAOC,OAAOqG,KAAM,CAClB4sB,UACAmW,MAAU,GACVC,UAAU,EACV3vB,kBACA8E,WAEFnY,KAAKijC,aAAelX,EAAU/rB,KAAKkjC,oBAAsBljC,KAAKmjC,iBAC9DnjC,KAAK4sB,QAAQzX,yBAAyBnV,KAAKojC,wBAAwB5kC,KAAKwB,OAIxEA,KAAKqjC,oBAAqB,CAC5B,CAEA,KAAA1zB,GACE3P,KAAKgjC,UAAW,EAChBhjC,KAAKsjC,QACP,CAEA,IAAApH,GACEl8B,KAAKgjC,UAAW,CAClB,CAEA,UAAI91C,GACF,OAAO8S,KAAK+iC,MAAM71C,MACpB,CAEA,IAAA4rB,CAAKzN,GACH,MAAM,UAAEwQ,GAAc7b,KAAKmY,OAC3BnY,KAAK+iC,MAAMjqB,KAAKzN,GAEZrL,KAAKgjC,SACPhjC,KAAKsjC,SAEmCj4B,EAAQ8tB,wBAEpD,CAEA,uBAAAiK,GACE,MAAM,UAAEhqB,GAAcpZ,KAAKmY,OACtBnY,KAAKqjC,qBACgDrjC,KAAK+iC,MAAM71C,OACpB8S,KAAKgjC,SACpDhjC,KAAKqjC,oBAAqB,GAE5BrjC,KAAKsjC,QACP,CAEA,MAAAA,GACE,MAAM,UAAElqB,GAAcpZ,KAAKmY,OAG3B,KAAOnY,KAAK+iC,MAAM71C,QAAU8S,KAAKgjC,UAAahjC,KAAK4sB,QAAQ1X,sBAAwB,GACjFlV,KAAKijC,aAAajjC,KAAK+iC,MAAMx0C,SAG3ByR,KAAK+iC,MAAM71C,QAAU8S,KAAKgjC,UACc,IAAvChjC,KAAK4sB,QAAQ1X,uBAAgClV,KAAKqjC,qBAErDrjC,KAAKqjC,oBAAqB,EAE9B,CAEA,mBAAAH,CAAoB73B,GAClB,MAAM,SAAEpQ,GAAa+E,KAAKmY,OAE1B,IAAIorB,EAAS,KAKb,GAFAA,EAASvjC,KAAKmjC,iBAAiB93B,GAE3Bk4B,EACFtoC,EAAS,mDAAmDoQ,EAAQ8tB,wEACVoK,OACrD,CAEL,GAAIl4B,EAAQm4B,eAGV,YAFAvoC,EAAS,iEACAoQ,EAAQ8tB,yDAGnB9tB,EAAQo4B,kBACV,CACF,CAEA,gBAAAN,CAAiB93B,GACf,MAAM,SAAEpQ,GAAa+E,KAAKmY,OAC1B,IAAIorB,EAEuB,IAAvBvjC,KAAKiV,eACPha,EAAS,oCAAoCoQ,EAAQ8tB,4BAIvD,IACEn5B,KAAK4sB,QAAQzY,WAAW9I,EAC1B,CAAE,MAAOuK,GAEP2tB,EAASvjC,KAAK4sB,QAAQ/W,iBAAiBD,EAAIlf,EAAyBynC,QAAS9yB,GAE7ErL,KAAK4sB,QAAQrZ,KAAK,QAASgwB,EAC7B,CACA,OAAOA,CACT,oBChHF,MAAM,KAAEhmC,GAAS,EAAQ,MA8EzB/R,EAAOC,QAAQoL,sBAAwB0G,EAAKE,IA3Dd,CAK5BwrB,GAAsB,2BAOtBI,KAAsB,6BAQtBC,WAAsB,kCAQtB+E,qBAAsB,2CAQtB4C,YAAsB,mCAMtB9H,SAAsB,iCActBgV,QAAsB,kDC3ExB,MAAM4B,EAAW,EAAQ,OACnB,cAAEjoB,GAAkB,EAAQ,MAC5B,MAAEC,GAAU,EAAQ,KAEpBioB,EAAW,CACf1Q,qBAAyC1+B,EACzCigC,sBAAyC,IACzCS,gBAAyC,EACzC9E,WAAyC,IACzCyT,mCAAyC,IACzCC,wCAAyC,IA4H3C10C,EAAOC,QAAQqL,uBAnHf,cAAqCghB,EACnC,WAAA/X,CAAYqQ,GACV9O,MAAM0+B,EAAU5vB,EAClB,CAQA,mBAAIkf,GACF,OAAOvX,EAAM8nB,UAAU7/B,KAAKogC,kBACxBpgC,KAAKogC,iBACLJ,EAAS1Q,eACf,CACA,mBAAIA,CAAgB/7B,GAEhByM,KAAKogC,iBADH7sC,EACsB,IAAIwsC,EAASvoC,gBAAgBjE,GAE7BA,CAE5B,CASA,yBAAIs9B,GACF,OAAO9Y,EAAM8nB,UAAU7/B,KAAKsgC,qBACxBtgC,KAAKsgC,oBACLN,EAASnP,qBACf,CACA,yBAAIA,CAAsBt9B,GACxByM,KAAKsgC,oBAAsB/sC,CAC7B,CASA,mBAAI+9B,GACF,OAAOvZ,EAAM8nB,UAAU7/B,KAAKqxB,kBACxBrxB,KAAKqxB,iBACL2O,EAAS1O,eACf,CACA,mBAAIA,CAAgBhjC,GAClB0R,KAAKqxB,iBAAmB/iC,CAC1B,CAWA,cAAIk+B,GACF,OAAOzU,EAAM8nB,UAAU7/B,KAAK+gC,aACxB/gC,KAAK+gC,YACPf,EAASxT,UACb,CACA,cAAIA,CAAWl+B,GACb0R,KAAK+gC,YAAczyC,CACrB,CAWA,sCAAI2xC,GACF,OAAOloB,EAAM8nB,UAAU7/B,KAAK0gC,qCACxB1gC,KAAK0gC,oCACLV,EAASC,kCACf,CACA,sCAAIA,CAAmC3xC,GACrC0R,KAAK0gC,oCAAsCpyC,CAC7C,CAcA,2CAAI4xC,GACF,OAAOnoB,EAAM8nB,UAAU7/B,KAAK2gC,0CACxB3gC,KAAK2gC,yCACLX,EAASE,uCACf,CACA,2CAAIA,CAAwC3sC,GAC1CyM,KAAK2gC,yCAA2CptC,CAClD,mBClIF,MAAM,aAAEgf,GAAiB,EAAQ,OAC3B,aAAE6H,GAAiB,EAAQ,OAC3B,yBAAE1jB,GAA6B,EAAQ,OACvC,sBAAEG,GAA0B,EAAQ,MAE1C,SAASwc,EAAgBiB,GACvB,MAAO,yBAAyBzd,EAAsBuI,SAASkV,IACjE,CAuOA9oB,EAAOC,QAAQmL,aAnLf,cAA2B2b,EACzB,WAAAxS,CAAY2jC,GACVpiC,MAAM,CACJ4R,OAAQrc,EAAsBsnC,QAC9BhrB,MAAQtc,EAAsByX,OAC9B+E,oBAGFrT,KAAK2jC,iBAAmBD,EACxB1jC,KAAKmY,OAAS,IAAIiC,GAAa,IAAIlG,IACjC,CAAC,qBAAsBA,KAEzBlU,KAAK4jC,oBACP,CAEA,kBAAAA,GAEE5jC,KAAK2jC,iBAAiBtvB,GAAG3d,EAAyBuyB,GAAIjpB,KAAK6jC,cAAcrlC,KAAKwB,OAE9EA,KAAK2jC,iBAAiBtvB,GAAG3d,EAAyB23B,qBACzBruB,KAAK8jC,yBAAyBtlC,KAAKwB,OAE5DA,KAAK2jC,iBAAiBtvB,GAAG3d,EAAyB2yB,KAAMrpB,KAAK+jC,gBAAgBvlC,KAAKwB,OAElFA,KAAK2jC,iBAAiBtvB,GAAG3d,EAAyB4yB,WACzBtpB,KAAKgkC,qBAAqBxlC,KAAKwB,OAExDA,KAAK2jC,iBAAiBtvB,GAAG3d,EAAyBynC,QAASn+B,KAAKikC,mBAAmBzlC,KAAKwB,OAExFA,KAAK2jC,iBAAiBtvB,GAAG3d,EAAyByyB,SACzBnpB,KAAKkkC,oBAAoB1lC,KAAKwB,OAEvDA,KAAK2jC,iBAAiBtvB,GAAG3d,EAAyBu6B,YACzBjxB,KAAKmkC,sBAAsB3lC,KAAKwB,MAC3D,CAEA,kBAAAikC,CAAmB1uB,GACjBvV,KAAKuT,KAAK1c,EAAsBsnC,QAAS5oB,EAC3C,CAEA,aAAAsuB,CAActuB,GACZvV,KAAKuT,KAAK1c,EAAsBoyB,GAAI1T,EACtC,CAEA,wBAAAuuB,CAAyBvuB,GACvBvV,KAAKuT,KAAK1c,EAAsBw3B,qBAAsB9Y,EACxD,CAEA,eAAAwuB,CAAgBxuB,GACdvV,KAAKuT,KAAK1c,EAAsBwyB,KAAM9T,EACxC,CAEA,oBAAAyuB,CAAqBzuB,GACnBvV,KAAKuT,KAAK1c,EAAsByyB,WAAY/T,EAC9C,CAEA,mBAAA2uB,CAAoB3uB,GAClBvV,KAAKuT,KAAK1c,EAAsBsyB,SAAU5T,EAC5C,CAEA,qBAAA4uB,CAAsB5uB,GACpBvV,KAAKuT,KAAK1c,EAAsBo6B,YAAa1b,EAC/C,CAcA,OAAAyG,GACE,MAAM,UAAE5C,EAAS,UAAEle,GAAc8E,KAAKmY,OACtC,IAEEnY,KAAK2jC,iBAAiB3nB,SACxB,CAAE,MAAOvd,GAEP,MADAvD,EAAUuD,EAAM1Q,YACV0Q,CACR,CACF,CAaA,UAAAge,GACE,MAAM,UAAErD,EAAS,UAAEle,GAAc8E,KAAKmY,OAEtC,IAEEnY,KAAK2jC,iBAAiBlnB,YACxB,CAAE,MAAOhe,GAEP,MADAvD,EAAUuD,EAAM1Q,YACV0Q,CACR,CACF,CAkBA,KAAAkR,GACE,MAAM,UAAEyJ,EAAS,UAAEle,GAAc8E,KAAKmY,OACtC,IAEEnY,KAAK2jC,iBAAiBh0B,OACxB,CAAE,MAAOlR,GAEP,MADAvD,EAAUuD,EAAM1Q,YACV0Q,CACR,CACF,CAaA,IAAAy9B,GACE,MAAM,UAAE9iB,EAAS,UAAEle,GAAc8E,KAAKmY,OACtC,IAEEnY,KAAK2jC,iBAAiBzH,MACxB,CAAE,MAAOz9B,GAEP,MADAvD,EAAUuD,EAAM1Q,YACV0Q,CACR,CACF,CAcA,sBAAA2lC,CAAuB/4B,GAErBrL,KAAK2jC,iBAAiB9I,eAAexvB,EAAQg5B,kBAC7Ch5B,EAAQi5B,QAAS,CACnB,yCC1OF,MAAM,KAAE/mC,GAAS,EAAQ,OACnB,UAAEse,EAAS,UACTzC,GAAc,EAAQ,OACxB,KAAEttB,GAAS,EAAQ,MAEnBy/B,EAAqBhuB,EAAKE,IAAI,CAClCy8B,GAAc,EACdC,UAAc,EACdO,aAAc,IAkEhBlvC,EAAOC,QAAU,CACf6/B,cAhEF,MACE,WAAAvrB,CAAYb,EAAK,GACf,MAAMqlC,EAAqB,iBAAPrlC,EAAkBpT,EAAK04C,WAAWtlC,GAAI,GAAQpT,EAAK24C,UAAUvlC,GACjFc,KAAKsyB,UAAYiS,EACjBvkC,KAAK0kC,aAAe,CACtB,CAEA,KAAArrB,GACErZ,KAAK0kC,aAAe,EACpB1kC,KAAKsyB,UAAYxmC,EAAK64C,IACxB,CAEA,UAAA9K,CAAWX,EAAW0L,GACpB,OAAI5kC,KAAK6kC,cAAcC,GAAGF,IACsD5kC,KAAK6kC,cAC5EtZ,EAAmBmP,cAExB16B,KAAK6kC,cAAcE,IAAI7L,IAC8Cl5B,KAAK6kC,cAE5E7kC,KAAK0kC,eACEnZ,EAAmB4O,YAG5Bn6B,KAAK6kC,cAAgB3L,EACrBl5B,KAAK0kC,eACEnZ,EAAmB2O,GAC5B,CAEA,QAAAwD,GACE19B,KAAKglC,WAAal5C,EAAK24C,UAAUzkC,KAAK6kC,eACtC7kC,KAAK0kC,aAAe,CACtB,CAEA,eAAI1K,GACF,OAAOh6B,KAAK0kC,YACd,CAEA,aAAIpS,GACF,OAAOtyB,KAAKglC,UACd,CAMA,aAAI1S,CAAU/+B,GACqBA,EAAMxF,WACvC2L,OAAOC,OAAOqG,KAAM,CAClBglC,WAAel5C,EAAK24C,UAAUlxC,GAC9BsxC,cAAe/4C,EAAK24C,UAAUlxC,IAElC,CAEA,gBAAIg/B,GACF,OAAOvyB,KAAK6kC,aACd,CAEA,QAAA92C,GACE,OAAOiT,EAAahB,KACtB,GAKAurB,sCC5EF,MAAM,iBAAE0Z,GAAqB,EAAQ,KAC/B,gCAAEhuC,GAAoC,EAAQ,MAC9C,0BAAEiuC,GAA8B,EAAQ,OACxC,2BAAEhuC,GAA+B,EAAQ,MACzC,oCAAEiuC,GAAwC,EAAQ,MAClD,kBAAEC,GAAsB,EAAQ,OAChC,uBAAEC,GAA2B,EAAQ,MAE3C75C,EAAOC,QAAQwL,gCAAkCA,EACjDzL,EAAOC,QAAQw5C,iBAAmBA,EAClCz5C,EAAOC,QAAQyL,2BAA6BA,EAC5C1L,EAAOC,QAAQ25C,kBAAoBA,EACnC55C,EAAOC,QAAQ45C,uBAAyBA,EACxC75C,EAAOC,QAAQ05C,oCAAsCA,EACrD35C,EAAOC,QAAQy5C,0BAA4BA,wCCd3C,MAAM,KAAEp5C,GAAS,EAAQ,MAEnBk0C,EAAW,CACfgF,WAAYl5C,EAAK04C,WAAW,GAAG,GAC/Bc,UAAYx5C,EAAK04C,WAAW,GAAG,GAC/Be,MAAYz5C,EAAK04C,WAAW,GAAG,IAG3BgB,EAAe/nB,GAAKA,EAAE1vB,SAAS,IAErC,MAAM03C,EACJ,WAAA1lC,CAAYozB,GACVz5B,OAAOC,OAAOqG,KAAMggC,EAAU7M,EAChC,CAEA,aAAIb,GACF,OAAOtyB,KAAKglC,UACd,CACA,aAAI1S,CAAU/+B,GACZyM,KAAKglC,WAAal5C,EAAK24C,UAAUlxC,EACnC,CAEA,YAAImyC,GACF,OAAO1lC,KAAKslC,SACd,CACA,WAAAK,CAAYzmC,GACVc,KAAKslC,UAAYx5C,EAAK24C,UAAUvlC,GAChCc,KAAKulC,MAAQvlC,KAAKslC,UAAU50B,IAAI,EAClC,CAEA,QAAIk1B,GACF,OAAO5lC,KAAKulC,KACd,CAEA,CAAC,4CACC,MAAO,CACL,UAAaC,EAAaxlC,KAAKsyB,WAC/B,SAAakT,EAAaxlC,KAAK0lC,UAC/B,KAAaF,EAAaxlC,KAAK4lC,MAEnC,CAEA,QAAA73C,GACE,OAAOiT,EAAahB,KACtB,EAGFxU,EAAOC,QAAQg6C,WAAaA,iBC/C5B,MAAM,KAAEloC,GAAS,EAAQ,MAuBzB/R,EAAOC,QAAQwL,gCAAkCsG,EAAKE,IAfd,CAMtCooC,YAAa,cAMbC,SAAa,6BCpBf,MAAM,KAAEvoC,GAAS,EAAQ,MAQnB2nC,EAA4B3nC,EAAKE,IAAI,CACzCsoC,qBAA2B,gDAC3B1X,qBAA2B,+CAC3B3D,SAA2B,oCAC3BvB,SAA2B,qCAC3BE,KAA2B,iCAC3B2c,kBAA2B,4CAC3BC,0BAA2B,oDAC3BC,iBAA2B,4CAC3BC,wBAA2B,kDAC3Bld,GAA2B,+BAC3Bmd,eAA2B,4CAG7B56C,EAAOC,QAAQy5C,0BAA4BA,iBCtB3C,MAAM,wBAAEpG,GAA4B,EAAQ,MACtC,gCAAE7nC,GAAoC,EAAQ,MAE9C,iBACJ8nC,EAAgB,WAChBC,EAAU,YACVE,EAAW,UACXC,EAAS,SACTC,GACEN,EAGEqG,EAAsC,CAC1C,QAAAtkC,CAASsN,GACP,MAAMsP,EAAIshB,EAAiBvgC,KAAK,KAAM,6BAA8B2P,GACpEsP,EAAE,UAAW,CAACuhB,IACdvhB,EAAE,aAAc,CAAC0hB,GAAY,CAACC,EAAU,EAAG,MAC3C3hB,EAAE,4BAA6B,CAAC0hB,GAAY,CAACC,EAAU,GAAI,MAC3D3hB,EAAE,kBAAmB,CAACyhB,EAAajoC,EAAiC,oCACpEwmB,EAAE,oBAAqB,CAAC0hB,GAAY,CAACC,EAAU,EAAGtB,OAAOgC,YACzDriB,EAAE,wBAAyB,CAAC0hB,GAAY,CAACC,EAAU,GAAItB,OAAOgC,WAChE,GAGFt0C,EAAOC,QAAQ05C,oCAAsCA,iBCxBrD,MAAMxnC,EAAsB,EAAQ,OAC9B,cAAEma,GAAkB,EAAQ,MAC5B,MAAEC,GAAU,EAAQ,MACpB,gCAAE9gB,GAAoC,EAAQ,MAC9C,sBAAEovC,GAA0B,EAAQ,MAE1C,SAASC,IACP,MAAM,eAAExoC,GAAmBH,EAErB4oC,EADUzoC,EAAevK,MACC0jB,2BAC1BuvB,EAAqBH,EAAsBI,IAAIC,YACrD,OAAOH,GAAmBC,CAC5B,CAEA,SAASG,IACP,MAAO,CACLC,QAA2BN,IAC3B9Z,WAA2B,GAC3BJ,0BAA2B,IAC3BJ,gBAA2B/0B,EAAgC4uC,YAC3DgB,kBAA2B,EAC3BhW,sBAA2B,IAE/B,CAQA,MAAM35B,UAAmC4gB,EAKvC,WAAA/X,CAAYqQ,GACV9O,MAAMqlC,IAAev2B,GAAW,CAAC,EACnC,CAYA,WAAIw2B,GACF,OAAO5mC,KAAK8mC,QACd,CACA,WAAIF,CAAQ/F,GACV7gC,KAAK8mC,SAAWjG,CAClB,CASA,cAAIrU,GACF,OAAOzU,EAAMgvB,QAAQ/mC,KAAK+gC,aACtB/gC,KAAK+gC,YACL4F,IAAcna,UACpB,CACA,cAAIA,CAAWqU,GACb7gC,KAAK+gC,YAAcF,CACrB,CAUA,6BAAIzU,GACF,OAAOrU,EAAMgvB,QAAQ/mC,KAAKmsB,4BACtBnsB,KAAKmsB,2BACLwa,IAAcva,yBACpB,CACA,6BAAIA,CAA0ByU,GAC5B7gC,KAAKmsB,2BAA6B0U,CACpC,CAUA,mBAAI7U,GACF,OAAOhsB,KAAKwgC,kBAAoBvpC,EAAgC4uC,WAClE,CACA,mBAAI7Z,CAAgB6U,GAClB7gC,KAAKwgC,iBAAmBK,CAC1B,CAUA,qBAAIgG,GACF,OAAO9uB,EAAMgvB,QAAQ/mC,KAAKgnC,oBACtBhnC,KAAKgnC,mBACLL,IAAcE,iBACpB,CACA,qBAAIA,CAAkBhG,GACpB7gC,KAAKgnC,mBAAqBnG,CAC5B,CAUA,yBAAIhQ,GACF,OAAO9Y,EAAMgvB,QAAQ/mC,KAAKinC,wBACtBjnC,KAAKinC,uBACLN,IAAc9V,qBACpB,CACA,yBAAIA,CAAsBgQ,GACxB7gC,KAAKinC,uBAAyBpG,CAChC,CAEA,CAAC,4CACC,MAAO,CACL+F,QAA2B5mC,KAAK4mC,QAChCpa,WAA2BxsB,KAAKwsB,WAChCJ,0BAA2BpsB,KAAKosB,0BAChCJ,gBAA2B/0B,EAAgCmI,SAASY,KAAKgsB,iBACzE6a,kBAA2B7mC,KAAK6mC,kBAChChW,sBAA2B7wB,KAAK6wB,sBAEpC,EAGFrlC,EAAOC,QAAQyL,2BAA6BA,sCCvJ5C,MAAMg0B,EAAS,EAAQ,OACjB,KAAE1R,EAAI,qBAAEE,GAAyB,EAAQ,OACzC,aAAEU,GAAiB,EAAQ,OAC3B,0BAAE8qB,GAA8B,EAAQ,OACxC,2BAAEhuC,GAA+B,EAAQ,MACzC,aAAEgwC,GAAiB,EAAQ,OAC3B,kBAAE9B,GAAsB,EAAQ,OAChC,uBAAEC,GAA2B,EAAQ,OAErC,SAAEpqC,GAAa,IAAImf,EAEzB,MAAM6qB,UAAyBzrB,EAmB7B,WAAAzZ,EAAY,WAAE6rB,EAAU,wBAAEpR,GAA4B,CAAC,GAErDlZ,MADwB,IAAIpK,EAA2B00B,GAChCpR,EAAyB,CAC9CtH,OAAQgyB,EAA0Ba,qBAClC5yB,MAAQ+xB,EAA0B52B,SAEpCtO,KAAKqc,KAAOrc,KAAKshC,WACjB,MAAMnpB,EAAS,IAAIiC,EACnBjC,EAAOoM,UAAY,YAAsBrQ,GACvC,MAAO,CACL,yBACGA,EAEP,EACAlU,KAAK+a,IAAM5C,EAAO6C,KAAKhb,KAAK+a,IAAK/a,MAGjCA,KAAKmnC,cAAe,EAEpBnnC,KAAKqU,GAAGqF,EAAqBiE,aAAc3d,KAAKonC,eAAe5oC,KAAKwB,OACpEA,KAAKqU,GAAG6wB,EAA0B7W,qBAAsBruB,KAAKqnC,cAAc7oC,KAAKwB,OAChFA,KAAKqU,GAAG6wB,EAA0B7b,KAAMrpB,KAAKsnC,QAAQ9oC,KAAKwB,OAC1DA,KAAKqU,GAAG6wB,EAA0Bjc,GAAIjpB,KAAKunC,MAAM/oC,KAAKwB,MACxD,CAEA,aAAAqnC,GACErnC,KAAKmnC,cAAe,CACtB,CAEA,cAAAC,GACEpnC,KAAKmnC,cAAe,CACtB,CAEA,OAAAG,GACEtnC,KAAKmnC,cAAe,CACtB,CAEA,KAAAI,GACEvnC,KAAKmnC,cAAe,CACtB,CAMA,QAAA7F,GACE,OAAO,IAAI4F,EAAa,CACtBM,UAAkBxnC,KAClBnD,KAAkB,eAClB8d,iBAAkB3a,KAAKqb,kBACvBuQ,WAAkB5rB,KAAKob,aAE3B,CAKA,UAAIiC,GACF,OAAOrd,KAAKg8B,OACd,CAKA,UAAI3e,CAAO9pB,GACTyM,KAAKg8B,QAAUzoC,CACjB,CAKA,QAAIsJ,GACF,OAAOmD,KAAKynC,SACd,CAKA,QAAI5qC,CAAKtJ,GACPyM,KAAKynC,UAAYl0C,CACnB,CAKA,eAAIm0C,GACF,OAAO1nC,KAAK2nC,YACd,CAIA,eAAID,CAAYn0C,GACdyM,KAAK2nC,aAAep0C,CACtB,CAMA,cAAIq4B,GACF,OAAO5rB,KAAKob,YAAYwB,OAC1B,CAOA,OAAAZ,GACE1a,MAAM0a,UACDhc,KAAKqc,KAAK6E,mBACblhB,KAAKqc,KAAK1M,OAEd,CAOA,kBAAA+M,GACEpb,MAAMob,qBACN1c,KAAKid,gBAAgB,IAAImoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBnb,aAC5E,CAMA,gBAAA9N,GACE,OAAO8oB,EAA0B/b,QACnC,CAOA,SAAAye,CAAU1oC,GACRc,KAAKid,gBAAgB,IAAImoB,EACvB,CAAEvoC,KAAMwoC,EAAuBhb,KAC/B,CAAExC,IAAK3oB,IAEX,CAQA,UAAA2oC,CAAW3oC,EAAI4oC,GACb9nC,KAAKid,gBAAgB,IAAImoB,EACvB,CAAEvoC,KAAMwoC,EAAuBhb,KAC/B,CAAE0d,KAAM7oC,EAAI4oC,gBAEhB,CAKA,gCAAA/qB,CAAiC1R,GAC/B,MAAM8qB,EAAU9qB,EAAQ8qB,SAClB,yBAAEC,GAA6BlL,EACrC,OAAQiL,GACN,KAAKC,EAAyB4R,UAC5B,CACE,MAAM9oC,EAAKmM,EAAQgoB,oBACfhoB,EAAQ/P,UAAUm7B,YAAc,IAClCz2B,KAAK6nC,WAAW3oC,EAAImM,GAEpBrL,KAAK4nC,UAAU1oC,GAEjB,KACF,CACF,KAAKk3B,EAAyB6R,WAC5B,CACE,MAAM/oC,EAAKmM,EAAQgoB,oBACnBrzB,KAAK6nC,WAAW3oC,EAAImM,GACpB,KACF,CACF,KAAK+qB,EAAyB8R,aAC5BloC,KAAKid,gBAAgB,IAAImoB,EACvB,CAAEvoC,KAAMwoC,EAAuBjb,gBAEjC,MACF,QACEnvB,EAAS,6CAA6C+E,OAC7Co2B,EAAyBh3B,SAAS+2B,IAEjD,CAQA,uBAAAgS,CAAwBC,GACtB,OAAOpoC,KAAKqc,KAAK8rB,wBAAwBC,EAC3C,CAEA,aAAAC,GACE,OAAOroC,KAAKmnC,YACd,CAMA,CAAC,4CACC,OAAOztC,OAAOC,OAAO2H,MAAM,4CAAwB,CACjD,KAAetB,KAAKnD,KACpB,YAAemD,KAAK0nC,aAExB,CAKA,QAAA35C,GACE,OAAOiT,EAAahB,KACtB,CAOA,WAAAqiC,GACEriC,KAAKid,gBAAgB,IAAImoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBtrB,UAC5E,CAEA,eAAA2D,GACE,OAAO1d,KAAKqc,KAAKof,gBACnB,EAIFjwC,EAAOC,QAAQw5C,iBAAmBA,kBC7QlC,MAAM,KAAE1nC,GAAS,EAAQ,MA0BzB/R,EAAOC,QAAQ45C,uBAAyB9nC,EAAKE,IAnBd,CAC7BksB,WAAkB,qBAClBC,iBAAkB,yBAClBC,aAAkB,uBAClBE,YAAkB,yBAClBC,QAAkB,qBAClBE,WAAkB,wBAClBE,aAAkB,0BAClBgc,eAAkB,yBAClB/b,IAAkB,eAClBC,YAAkB,sBAClBC,aAAkB,uBAClBE,eAAkB,yBAClBC,SAAkB,mBAClBC,gBAAkB,0BAClB2d,gBAAkB,0BAClBvuB,QAAkB,qCCvBpB,MAAM,SAAE6D,GAAa,EAAQ,MA2B7BpyB,EAAOC,QAAQ25C,kBAjBf,cAAgCxnB,EAO9B,WAAA7d,CAAYnD,EAAMquB,EAASsd,GACzBjnC,MAAM1E,GACNlD,OAAOC,OAAOqG,KAAMirB,GACpBvxB,OAAOC,OAAOqG,KAAMuoC,EACtB,CACA,YAAAC,GACE,OAAOxoC,KAAKyoC,UACd,mBCxBF,MAAMvd,EAAS,EAAQ,MAGjBwd,EAAmB,EAAQ,OAC3B,2BAAEtlC,EAA0B,aAC1BxU,EAAY,eACZC,GAAmB,EAAQ,OAC7B,aAAEurB,GAAiB,EAAQ,OAC3B,KAAEtuB,GAAS,EAAQ,OACnB,WAAE25C,GAAe,EAAQ,OACzB,gCAAExuC,GAAoC,EAAQ,MAC9C,0BAAEiuC,GAA8B,EAAQ,OACxC,qBAAExrB,GAAyB,EAAQ,OACnC,kBAAE0rB,GAAsB,EAAQ,OAChC,uBAAEC,GAA2B,EAAQ,OACrC,oBAAEsD,GAAwB,EAAQ,OAClC,MAAE9qB,EAAK,aAAEC,GAAiB,EAAQ,OAClC,SAAE1kB,GAAa,EAAQ,OACvB,oBAAEwvC,GAAwB,EAAQ,MAElCC,EACM,EADNA,EAEM,EAFNA,EAGM,EAw7BZr9C,EAAOC,QAAQy7C,aAr7Bf,cAA2BppB,EACzB,WAAA/d,EAAY,UAAEynC,EAAS,KAAE3qC,EAAI,iBAAE8d,EAAgB,WAAEiR,GAAe,CAAC,GAC/DtqB,MAAM,CAAEzE,SAER,MAAMgvB,EAAM7rB,KACNmhB,EAAe,KACnB,MAAM7C,EAAQuN,EAAI3K,kBAClB,OAAO5C,EAAQA,EAAM7d,UAAY,eAAe,EAElDT,KAAKmY,OAAS,IAAIiC,GAAa,IAAIlG,IAAS,CAC1C,YAAYyG,EAAiBE,gBAC7B,0BAA0B2sB,EAAU1sB,aACpC,IAAIqG,UACDjN,KAELlU,KAAK+a,IAAM/a,KAAKmY,OAAO6C,KAAKhb,KAAK+a,IAAK/a,MACtC,MAAM,UACJ6b,EAAS,UACTzC,EAAS,SACT0S,EAAQ,SACR7wB,GACE+E,KAAKmY,OAETze,OAAOC,OAAOqG,KAAM,CAClB8oC,WAA4BtB,EAC5BhH,iBAA4B5U,EAAWI,gBACvCG,2BAA4BP,EAAWQ,0BACvC/Q,kBAA4BV,EAC5BomB,YAA4BnV,EAAWY,WACvCuc,aAA4B,KAQ9B/oC,KAAKgpC,mBAAqBpd,EAAWgb,QACrC5mC,KAAKipC,YAAcrd,EAAWY,WAC9BxsB,KAAKkpC,sBACLlpC,KAAKmpC,uBAAwB,EAW7BnpC,KAAKopC,0BAA2B,EAEhCppC,KAAKye,SAAQ,WACX,OAAOze,KAAK0e,aAAamN,EAAIwd,kBACHvY,IACuBA,EAAQ5R,kBAAkBze,SAAY,GAGzF,IAEAorB,EAAIjK,wBAAuB,SAA0BrM,GACnD,OAAQA,EAAM9U,WACZ,KAAK4kC,EAAuBjb,aAM1B,OAFApqB,KAAKgpC,oBAAqB,EAC1BhpC,KAAK8oC,WAAWv1B,KAAK2xB,EAA0Be,2BACxCjmC,KAAK0e,aACVmN,EAAIwd,kBACHvY,IAC2CA,EAAQ5R,kBAAkBze,SAAY,IAEtF,KAAK4kC,EAAuBtrB,QAG5B,KAAKsrB,EAAuBe,eAG5B,KAAKf,EAAuB3a,SAI1B,MACF,QAC8BnV,EAAM9U,UAEtC,OAAOT,IACT,IAEA6rB,EAAIwd,iBAAmB,IAAIxrB,EAAM,CAC/BhhB,KAAe8rC,EAAoB5X,QACnCxS,cAAesN,GACd,CACD,sBAAAyd,GAEE9B,EAAUj0B,KAAK2xB,EAA0B7b,MACzCme,EAAUj0B,KAAKmG,EAAqBiE,aACtC,IAEC+E,OAAM,WACL1iB,KAAKspC,yBACLzd,EAAImb,mBAAqBpb,EAAWib,iBACtC,IACCxkB,SAASgjB,EAAuBjb,cAAc,WAC7C,OAAOpqB,KAAKkjB,oBACd,IACCb,SAASgjB,EAAuB1b,YAAY,WAC3C,OAAO3pB,KAAK0e,aAAamN,EAAI0d,sBAC/B,IAEF1d,EAAI0d,sBAAwB,IAAI1rB,EAAM,CACpChhB,KAAe8rC,EAAoBa,aACnCjrB,cAAesN,GACd,CACD,uBAAA4d,CAAwBxe,GACtBuc,EAAUj0B,KAAK2xB,EAA0B7W,qBAAsBpD,EACjE,EAOA,sBAAAye,CAAuBC,GACrB,MAAMC,EAAgBD,EAAOruC,UACvBsnC,EAAWgH,EAAcnT,YAO/B,GAAIkT,EAAOxT,UAAYjL,EAAOkL,yBAAyByT,YACrD,OAAOhe,EAAI3O,aAAa,IAAIkoB,EACxB,CAAEvoC,KAAMwoC,EAAuBtb,aAC/B,CACE+f,WAAalH,EACbjM,YAAa,wBAAwBzL,EAAOkL,yBAAyBh3B,SAASuqC,EAAOxT,cAW7F,GAAiB,OAAbyM,EAKF,OAHA4E,EAAUxqB,QAAQ5jB,EAASs9B,gCAEjB/b,EAAiBE,aACpB,KAGT,GAAiB,MAAb+nB,EAAkB,CACpB,MAAMj6B,EAAUihC,EAAchT,WACxBmT,EAAgB3mC,EAA2BgG,kBAAkBw5B,EAAUj6B,GAC7E,OAAOkjB,EAAI3O,aAAa,IAAIkoB,EAC1B,CAAEvoC,KAAMwoC,EAAuBtb,aAC/B,CACEze,QAAay+B,EACbD,WAAalH,EACbjM,YAAahuB,IAGnB,CAMA,MAAMqhC,EAAiBL,EAAOtW,oBACxB9lC,EAASo8C,EAAOM,YAChB5sB,EAASssB,EAAOrW,YAChB4W,EAAWP,EAAOQ,cAClBzC,EAAciC,EAAOS,iBAM3B,GAF6Cve,EAAIwe,iBAElCz5C,IAAXrD,EACF,OAAOs+B,EAAI3O,aACT,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBtb,aAC/B,CAAE4M,YAAa,gCAGzC,GAAIppC,EAASyS,KAAK+gC,YAChB,OAAOlV,EAAI3O,aACT,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBtb,aAC/B,CAAE4M,YAAa,gCAIzC9K,EAAIod,YAAc17C,EAASs+B,EAAIye,aAAap9C,OACxC2+B,EAAIod,YAAc,IAAGpd,EAAIod,YAAc,GAG3CvvC,OAAOC,OAAOkyB,EAAIid,WAAY,CAC5BjsC,KAAMqtC,EACN7sB,SACAqqB,gBAKF7b,EAAImd,oBAAqB,EAEpBnd,EAAI0e,iBAAmB1B,GACzBhd,EAAI0e,iBAAmB1B,GAExBhd,EAAIwe,YAAY1E,YAAYqE,GAEsCne,EAAIwe,YAAuDxe,EAAI0e,eAC7H1e,EAAI0e,iBAAmB1B,GACzBrB,EAAUj0B,KAAK2xB,EAA0Bc,kBAAmB,CAC1DwE,SAAU,IAAI3e,EAAIye,cAClBG,MAAU5e,EAAIye,aAAap9C,SAG/B2+B,EAAI0e,eAAiB1B,EACrBhd,EAAIye,aAAax8B,SAASzC,IACVA,EAAQ8tB,yBACtBtN,EAAI6e,UAAUr/B,GACwCA,EAAQ8tB,yBAC9DtN,EAAIwe,YAAY1E,YAAYt6B,EAAQ8tB,yBAAyB,KAG/DtN,EAAIye,aAAax8B,SAASzC,IACxBA,EAAQs/B,UAAUttB,GAClBhS,EAAQu/B,eAAepD,EAAUE,aACYr8B,EAAQ8tB,wBAA2B,IAIpF,MAAM0R,EAAmBhf,EAAIxQ,kBAAkBqmB,cAAcgH,EAAiBtwC,eAAe0yC,yBAAyBC,WAmBtH,OAlBAlf,EAAIye,aAAax8B,SAASzC,IACpBw/B,EAAmBx/B,EAAQ2/B,kBAAkB99C,QAC/C+N,EAAS,gBAAgBoQ,EAAQ2/B,kBAAkB99C,6BAA6B29C,IAClF,IAIEhf,EAAIye,aAAap9C,QACnB2+B,EAAIof,WAAWjB,GAAgB,EAAOL,GAAQ,GAI9C9d,EAAIqf,oBAAsBrf,EAAIye,aAAa,IAE3Cze,EAAIwe,YAAY/X,UAAYxmC,EAAK24C,UAAUuF,GAEKne,EAAIwe,YAE/Cxe,EAAI3O,aACT,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBrb,UACzD,EAKAmhB,sBAAqB,KACnBrf,EAAS,qCACFD,EAAI3O,aACT,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuB9a,iBAEzD,qBAAA6gB,GAME,OALAtf,EAAS,yCAITD,EAAIqd,qBAAoB,GACjBlpC,KAAK8iB,qBAAqB+I,EAAI0d,sBACvC,EAKA,YAAA8B,GACE,MAAM/a,EAAiB3V,EAAiB4V,oBAElC+a,EAAiBpgB,EAAOsF,kBAAkB+a,wBAC9C1f,EAAIwe,YAAY/X,UAChBzG,EAAIwe,YAAY3E,SAChB9Z,EAAWY,WACXX,EAAIid,WAAWrB,UACfnX,GAGqCzE,EAAIwe,YAAY/X,UAAsCzG,EAAIwe,YAAY3E,SAAkC9Z,EAAWY,WAAuCX,EAAIid,WAAWrB,UAChN9sB,EAAiB+V,YAAY4a,GAC7B3wB,EAAiBgW,eAAeL,GACA,IAAMtwB,KAAKmrC,yBACXvf,EAAWiF,sBACX,MACA2a,GAAYxrC,KAAK0pC,uBAAuB8B,IAE1E,IAEC9oB,OAAM,WACL,IACE1iB,KAAKqrC,cACP,CAAE,MAAOvrB,GACP7kB,EAAS,kCAAkC6kB,KAC3C+L,EAAI3O,aAAa,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBxb,eACxE,CACF,IACCxH,SAASgjB,EAAuBnb,YAAY,WAC3C,OAAOlqB,KAAK0e,aAAamN,EAAI4f,uBAC/B,IACCppB,SAASgjB,EAAuBrb,SAAS,WACxC,OAAOhqB,KAAK0e,aAAamN,EAAI6f,YAC/B,IACCrpB,SAASgjB,EAAuBxb,cAAc,WAC7C,OAAO7pB,KAAK0e,aAAamN,EAAIwd,iBAC/B,IACChnB,SAASgjB,EAAuB9a,cAAc,WAC7C,OAAIsB,EAAImb,mBAAqB,GAC3Bnb,EAAImb,qBACGhnC,KAAK8iB,qBAAqB+I,EAAI0d,yBAEvCvpC,KAAKypC,wBAAwB,CAC3Bn+B,QAAa1c,EAAa6a,QAC1BktB,YAAa,oDAER32B,KAAK0e,aAAamN,EAAIwd,kBAC/B,IACChnB,SAASgjB,EAAuBtb,aAAa,SAAsB4hB,GAClE,MAAM,QAAErgC,EAAO,WAAEw+B,EAAU,YAAEnT,GAAgBgV,EAE7C,OAAQA,EAAOrgC,UACR1c,EAAa2X,kBAETvG,KAAKorC,yBAGZprC,KAAKypC,wBAAwB,CAC3Bl0B,MAAOo2B,EACPrgC,UACAw+B,aACAnT,gBAGF9K,EAAIqd,sBAEDlpC,KAAK0e,aAAamN,EAAIwd,kBAC/B,IAEFxd,EAAI4f,uBAAyB,IAAI5tB,EAAM,CACrChhB,KAAe8rC,EAAoBiD,cACnCrtB,cAAesN,GACd,CACD,uBAAAggB,CAAwBtT,GACtB,MAAMqR,EAAgBrR,EAASj9B,UACzBsnC,EAAWgH,EAAcnT,YAE/B,OAAI8B,EAASpC,UAAYjL,EAAOkL,yBAAyB8R,aAChDrc,EAAI3O,aAAa,IAAIkoB,EAC1B,CAAEvoC,KAAMwoC,EAAuBtb,aAC/B,CACE+f,WAAalH,EACbjM,YAAa,wBAAwBzL,EAAOkL,yBAAyBh3B,SAASm5B,EAASpC,cAI5E,OAAbyM,GAEF4E,EAAUxqB,QAAQ5jB,EAASs9B,gCAEjB/b,EAAiBE,aACpB,OAGQ,MAAb+nB,GACF/W,EAAI3O,aACF,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBtb,aAC/B,CACE+f,WAAalH,EACbjM,YAAaiT,EAAchT,cAIhD/K,EAAI3O,aACT,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBjb,gBACzD,EAEA0hB,uBAAsB,KACpBhgB,EAAS,uCACFD,EAAI3O,aACT,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuB5a,mBAGzD,aAAAshB,GACE,MAAMzb,EAAiB3V,EAAiB4V,oBAClCyb,EAAkB9gB,EAAOsF,kBAAkByb,yBAC/CpgB,EAAIid,WAAWzrB,OACfiT,GAEF3V,EAAiB+V,YAAYsb,GAC7BrxB,EAAiBgW,eAAeL,GACA,IAAMtwB,KAAK8rC,0BACXlgB,EAAWiF,sBACX,MACA2a,GAAYxrC,KAAK6rC,wBAAwBL,IAE3E,IAEC9oB,OAAM,WAEL,OADA1iB,KAAK+rC,gBACE/rC,IACT,IACCqiB,SAASgjB,EAAuBhb,KAAK,SAAe9U,GAEnD,OADAsW,EAAIqgB,gBAAgB32B,GACbvV,KAAKkjB,oBACd,IACCb,SAASgjB,EAAuBjb,cAAc,WAC7C,OAAOpqB,KAAK0e,aAAamN,EAAIwd,iBAC/B,IACChnB,SAASgjB,EAAuBtb,aAAa,WAC5C/pB,KAAK0e,aAAamN,EAAIwd,iBACxB,IACChnB,SAASgjB,EAAuB5a,gBAAgB,WAC/C,OAAOzqB,KAAK0e,aAAamN,EAAI4f,uBAC/B,IAEF5f,EAAI6f,YAAc,IAAI7tB,EAAM,CAC1BhhB,KAAe8rC,EAAoB1f,GACnC1K,cAAesN,GACd,CACD,UAAAsgB,GACE3E,EAAUj0B,KAAK2xB,EAA0Bjc,GAC3C,IAECxK,SAAQ,WACP,OAAOze,KAAK0e,aACVmN,EAAIye,aAAap9C,OACb2+B,EAAIugB,wBACJvgB,EAAIwgB,kBAEZ,IACC3pB,OAAM,WAIL,OADAmJ,EAAIygB,qBAAqBzgB,EAAI6f,aAAa,IAAM1rC,KAAKmsC,eAC9CnsC,IACT,IACCqiB,SAASgjB,EAAuBhb,KAAK,SAAe9U,GAGnD,OADAsW,EAAIqgB,gBAAgB32B,GACbvV,KAAKkjB,oBACd,IACCb,SAASgjB,EAAuB/a,aAAa,WAG5C,OADAuB,EAAIqf,oBAAsBrf,EAAIye,aAAa,GACpCtqC,KAAK0e,aAAamN,EAAIugB,wBAC/B,IACG/pB,SAASgjB,EAAuBnb,YAAY,WAC3C,OAAOlqB,KAAK0e,aAAamN,EAAI4f,uBAC/B,IACCppB,SAASgjB,EAAuBxb,cAAc,WAC7C,OAAO7pB,KAAK0e,aAAamN,EAAIwd,iBAC/B,IACChnB,SAASgjB,EAAuBe,gBAAgB,WAC/C,OAAOpmC,KAAKkjB,oBACd,IAEJ2I,EAAIwgB,kBAAoB,IAAIxuB,EAAM,CAChChhB,KAAe8rC,EAAoB4D,UACnChuB,cAAesN,EAAI6f,cAElBhpB,OAAM,KAELmJ,EAAIud,0BAA2B,EAC/Bvd,EAAIygB,qBAAqBzgB,EAAIwgB,mBAAmB,IAAMxgB,EAAI2gB,qBAAoB,IAE/EnqB,SAASgjB,EAAuBe,gBAAgB,WAC/C,OAAOpmC,KAAK0e,aAAamN,EAAI4gB,wBAC/B,IACC7pB,MAAK,KAMJiJ,EAAIud,0BAA2B,CAAI,IAGvCvd,EAAI4gB,wBAA0B,IAAI5uB,EAAM,CACtChhB,KAAe8rC,EAAoB+D,gBACnCnuB,cAAesN,EAAI6f,cAElBrpB,SAASgjB,EAAuBe,gBAAgB,WAI/C,OAFAta,EAAS,yCAEF9rB,KAAKkjB,oBACd,IACCb,SAASgjB,EAAuB3a,UAAU,WAGzC,OAAO1qB,KAAK0e,aAAamN,EAAIugB,wBAC/B,IAEFvgB,EAAIugB,wBAA0B,IAAIvuB,EAAM,CACtChhB,KAAe8rC,EAAoBgE,eACnCpuB,cAAesN,EAAI6f,aAClB,CACD,UAAAkB,GACE,IACE/gB,EAAIghB,oBACN,CAAE,MAAOj3B,GAEHA,aAAc/mB,GAAkB+mB,EAAGtK,UAAY1c,EAAaib,mBAE9DgiB,EAAI3O,aACF,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBe,mBAGvDta,EAAS,uCAAuClW,KAChDiW,EAAI3O,aACF,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBtb,eAE3D,CACF,IAECrH,OAAM,WACL1iB,KAAK4sC,YACP,IACCvqB,SAASgjB,EAAuBiD,iBAAiB,WAChD,OAAOtoC,KAAK0e,aAAamN,EAAIwgB,kBAC/B,IACChqB,SAASgjB,EAAuBe,gBAAgB,WAK/C,OAFqEva,EAAIye,aAAap9C,OAE/E8S,KAAK0e,aAAamN,EAAI4gB,wBAC/B,GACJ,CAEA,cAAAhR,GACE,OAAKz7B,KAAKkhB,qBACDlhB,KAAKyhB,eAAeknB,EAAoB5X,QACnD,CAWA,uBAAAoX,CAAwBC,GACtB,IAAKpoC,KAAKgpC,mBACR,MAAM,IAAIn6C,EAAe,iEACvBD,EAAa2W,eACb,2CAEJ,GAAIvF,KAAKipC,aAAe,EAGtB,MAFAjpC,KAAK8oC,WAAW9rB,QAAQ5jB,EAAS0zC,kBACjC9sC,KAAKmpC,uBAAwB,EACvB,IAAIt6C,EACR,mCACAD,EAAaib,oBAKjB,MAAMkjC,EAAc/sC,KAAKsqC,cACnB,UACJzuB,EAAS,UACTzC,EAAS,SACT0S,EAAQ,SACR7wB,GACE+E,KAAKmY,OAELiwB,EAAQ4E,uBACV5E,EAAQ4E,sBAAuB,EAC/B5E,EAAQ6E,qBAAkBr8C,EAC1Bw3C,EAAQ4C,uBAAoBp6C,GAE9B,MAAMs8C,EAAS9E,EAAQxrB,QACjBuwB,EAAcjiB,EAAOpwB,MAAMsyC,OAAOC,iCAAiCH,GACzE,IAAIrC,EAAmB,EACvB,IACEA,EAAmB7qC,KAAKqb,kBAAkBqmB,cAAcgH,EAAiBtwC,eAAe0yC,yBAAyBC,UAEnH,CAAE,MAAOjrB,GACPgM,EAAS,2DACChM,EAAEzT,KACd,CACA,GAAK,EAAIw+B,GAAsBsC,EAActC,EAC3C,MAAM,IAAIh8C,EACR,yBAAyBs+C,0DAAoEtC,KAC7Fj8C,EAAa8U,qBAIf1D,KAAKipC,YACPjpC,KAAK0qC,UAAUwC,GACfltC,KAAKstC,cAAcJ,EAAQ9E,GAE3B2E,EAAYj0B,KAAKo0B,GAGjB,MAAMK,EAAQL,EAAO/T,yBASrB,GARAn5B,KAAKqqC,YAAY1E,YAAY4H,GAEPR,EAAY7/C,OAAwB8S,KAAKipC,YAM3DjpC,KAAKopC,yBAOP,YAHiCx4C,IAA7BoP,KAAKkrC,sBACPlrC,KAAKkrC,oBAAsBgC,GAEtBtE,EAAoB1O,GAK7B,IAAI4P,EACJ,IACEA,EAAa9pC,KAAKqb,kBAAkBmyB,gBAAgBN,GAChDpD,IAAelB,EAAoB1O,GACjC4P,IAAelB,EAAoB6E,WACrC3D,EAAalB,EAAoB1O,GACjCl6B,KAAKkrC,oBAAsBgC,EAC3BltC,KAAKkd,aAAa,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBe,mBAQzE8G,EAAOQ,gBAAe,GAGxB1tC,KAAK2tC,gBACP,CAAE,MAAO/3B,GACP,MAAIA,aAAc/mB,GAC6CD,EAAawQ,SAASwW,EAAGtK,SAAcsK,EAAGvK,QAIvG0hC,EAAYa,MACZ5tC,KAAKqqC,YAAY1E,YAAYuH,EAAOpT,oCAClC95B,KAAKipC,YACD,IAEuCrzB,EAAGvK,QAC1CuK,EAEV,CACA,OAAOgzB,EAAoB1O,EAC7B,CAEA,eAAAgS,CAAgB32B,GACdvV,KAAK8oC,WAAW9rB,QAAQ5jB,EAASy0C,cACjC7tC,KAAKirC,WAAW11B,EAAMsS,KAAOtS,EAAMwyB,OAAQxyB,EAAMwyB,KAAMxyB,EAAMuyB,YAC/D,CAEA,UAAAmD,CAAW/rC,EAAI6oC,EAAMD,OAAcl3C,EAAWk9C,GAAW,GACvD,MACEzD,YAAa0D,EACbzD,aAAcyC,GACZ/sC,MACE,UAAEoZ,EAAS,SAAE0S,GAAa9rB,KAAKmY,OAErC,GAAI41B,EAAWzb,UAAUyS,IAAI7lC,GAM3B,YALI4uC,EACqE9tC,KAAKqqC,YAE5Eve,EAAS,gCAAgC5sB,gBAAiBc,KAAKqqC,gBAKnE,MAAM2D,EAAc,GAOpB,KAAOjB,EAAY7/C,QACZgS,EAAG6lC,IAAIgI,EAAY,GAAG5T,2BAE3B6U,EAAYl1B,KAAKi0B,EAAYx+C,UAIwB,IAAnDw+C,EAAY7qC,QAAQlC,KAAKkrC,uBAC3BlrC,KAAKkrC,oBAAsB6B,EAAY,IAKzC/sC,KAAKipC,aAAe+E,EAAY9gD,OACK8S,KAAKipC,YAK1C8E,EAAWzb,UAAYpzB,EAGvB,MAAM+uC,EAAelG,EAAOiG,EAAYJ,MAAQ,KAI1CM,EAAWF,EAAY9gD,OAC7B,GAAIghD,EACF,GAAIluC,KAAKwgC,mBAAqBvpC,EAAgC4uC,YAAa,CACiBkH,EAAY7/C,OACtG,IAAK,IAAIX,EAAI,EAAGA,EAAI2hD,IAAY3hD,EAC9ByT,KAAK8oC,WAAWv1B,KAAK2xB,EAA0Ba,qBAAsBiI,EAAYzhD,GAErF,KAAO,CACL,MAAM4hD,EAAmBH,EAAYE,EAAW,GACLC,EAAiBhV,yBAC5Dn5B,KAAK8oC,WAAWv1B,KAAK2xB,EAA0Ba,qBAAsBoI,EACvE,CAIEF,IAC0CA,EAAa9U,yBACzDn5B,KAAK8oC,WAAWv1B,KAAK2xB,EAA0BgB,iBAAkB+H,EAAcnG,IAGvCiF,EAAY7/C,OAElD6/C,EAAY7/C,OAEd8S,KAAKouC,iBAELpuC,KAAKquC,iBAIPruC,KAAKwsC,mBACP,CAEA,iBAAAA,GACE,MAAM,UAAE3wB,GAAc7b,KAAKmY,OACtBnY,KAAKmpC,uBACe,IAArBnpC,KAAKipC,cAKTjpC,KAAKmpC,uBAAwB,EAC7BnpC,KAAK8oC,WAAWv1B,KAAK2xB,EAA0Bxa,UACjD,CAEA,kBAAAmiB,GACE,MAAM,UAAE3xC,EAAS,SAAE4wB,EAAQ,UAAE1S,GAAcpZ,KAAKmY,OAM1Cm2B,EAAOtuC,KAAKsqC,aAClB,IAAIiE,EAAcD,EAAKpsC,QAAQlC,KAAKkrC,qBACpC,IAAqB,IAAjBqD,EAaF,OAVIvuC,KAAKkrC,qBACPhwC,EAAU,0EAA0E8E,KAAKkrC,oBAAoB/R,+BAE3F,IAAhBmV,EAAKphD,SAEyB8S,KAAKqqC,YAAYt8C,WACjDiS,KAAKkd,aACH,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBiD,qBAO3D,IAF+DgG,EAAKphD,OAC1DohD,EAAK57C,KAAI87C,GAAKA,EAAErV,yBAAyBprC,aAC5CwgD,EAAcD,EAAKphD,QAAQ,CAC5BohD,EAAKC,GAAanE,mBAAqBpqC,KAAK8oC,WAAWpB,aACzDxsC,EAAU,qCAAqCozC,EAAKC,GAAanE,uCAAuCpqC,KAAK8oC,WAAWpB,gBAE1H,MAAMoC,EAAa9pC,KAAKqb,kBAAkBozB,SAASH,EAAKC,IACxD,GAAIzE,IAAelB,EAAoB6E,SAMrC,OAJAztC,KAAKkrC,oBAAsBoD,EAAKC,GAChCziB,EAAS,mFACT9rB,KAAKkd,aACH,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBe,kBAGzD,GAAI0D,IAAelB,EAAoB1O,GAErC,OAIFoU,EAAKC,GAAab,gBAAe,GACjCa,IACAvuC,KAAK2tC,gBACP,CAE8B3tC,KAAKqqC,YAAYt8C,WAC/CiS,KAAKkd,aACH,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuBiD,kBAEzD,CAEA,mBAAAY,CAAoBwF,GAAW,GAC7B,MAAM,UAAEt1B,GAAcpZ,KAAKmY,OAGvBnY,KAAK2uC,WAAW3uC,KAAKquC,iBAEzB30C,OAAOC,OAAOqG,KAAM,CAClBqqC,YAAa,IAAI5E,IAGnB/rC,OAAOC,OAAOqG,KAAK8oC,WAAY,CAC7BpB,iBAAa92C,EACbysB,YAAazsB,EACbs5C,SAAa,OAGXwE,EACF1uC,KAAKuqC,eAAiB1B,GAGtB7oC,KAAKsqC,aAAe,GACpBtqC,KAAKuqC,eAAiB1B,EAE1B,CAEA,cAAAwF,GACE,MAAM,UAAExyB,GAAc7b,KAAKmY,OACEnY,KAAK2uC,WAAY3uC,KAAK2uC,UAC9C3uC,KAAK2uC,YACV73B,aAAa9W,KAAK2uC,WAClB3uC,KAAK2uC,UAAY,KACnB,CAEA,gBAAAC,GACE,MAAM,UAAE/yB,GAAc7b,KAAKmY,OAE3B,KAAOnY,KAAK+oC,aAAa77C,QAAQ,CAC/B,MAAM2hD,EAAO7uC,KAAK+oC,aAAax6C,QACzB+vB,EAAQuwB,EAAK,GACbt5B,EAAQs5B,EAAK,GAEf7uC,KAAKyhB,eAAenD,EAAM7d,YAE5B8U,EAAMnlB,MAAMkuB,EAEhB,CACF,CAKA,iBAAAwwB,GACE,MAAM,UAAEjzB,GAAc7b,KAAKmY,OAE3BnY,KAAK2uC,UAAY,KACjB3uC,KAAK8oC,WAAW9rB,QAAQ5jB,EAAS21C,gBACjC/uC,KAAKkd,aAAa,IAAIkoB,EAAkB,CAAEvoC,KAAMwoC,EAAuB/a,cACzE,CASA,SAAAogB,CAAUr/B,GACR,MAAM0iC,EAAa/tC,KAAKqqC,YAClB2E,EAAUjB,EAAWnI,KAC3Bv6B,EAAQ4jC,+BAA+BlB,EAAWrI,UAClDr6B,EAAQ6jC,uBAAuBF,GAE/B,MAAMxH,EAAYxnC,KAAK8oC,WACvBz9B,EAAQs/B,UAAUnD,EAAUnqB,QAC5BhS,EAAQu/B,eAAepD,EAAUE,YACnC,CAEA,aAAA4F,CAAc6B,EAASC,GACrBA,EAAMH,+BAA+BE,EAAQrV,kCAC7CsV,EAAMF,uBAAuBC,EAAQhW,0BACrCiW,EAAMzE,UAAUwE,EAAQ7b,aACxB8b,EAAMxE,eAAeuE,EAAQ/E,iBAC/B,CAEA,cAAAgE,GACEpuC,KAAKquC,iBACLruC,KAAK2tC,gBACP,CAEA,oBAAArB,CAAqBhuB,EAAO/I,GAC1BvV,KAAK+oC,aAAajwB,KAAK,CAACwF,EAAO/I,IAC/BvV,KAAKqvC,qBAAoB,IAAMrvC,KAAK4uC,oBAAoB,oBAC1D,CAEA,mBAAAS,CAAoBhwB,EAAQiwB,EAAO,aACjC,MAAM,UAAEl2B,EAAS,SAAEne,GAAa+E,KAAKmY,OACjCnY,KAAKuvC,kBAAoBvvC,KAAKuvC,iBAAiBD,OAASA,IAKxDtvC,KAAKuvC,kBAAoBvvC,KAAKuvC,iBAAiBD,MACjDr0C,EAAS,+BAA+B+E,KAAKuvC,iBAAiBD,aAAaA,KAE7EtvC,KAAKuvC,iBAAmB,CAAElwB,OAAQA,GAAU,MAAS,GAAGiwB,QACxDtvC,KAAKuhB,oBAAmB,KACtBvhB,KAAKuvC,iBAAiBlwB,SACtBrf,KAAKuvC,iBAAmB,IAAI,IAEhC,CAKA,cAAA5B,GAIM3tC,KAAK2uC,YACT3uC,KAAK2uC,UAAY93B,YAAW,IAAM7W,KAAK8uC,qBACX9uC,KAAKmsB,4BACnC,mBC38BF,MAAM,KAAE5uB,GAAS,EAAQ,MAkBzB/R,EAAOC,QAAQk9C,oBAAsBprC,EAAKE,IAXd,CAC1BszB,QAAiB,mBACjByY,aAAiB,wBACjBvgB,GAAiB,cACjBwF,OAAiB,kBACjBmd,cAAiB,yBACjBW,UAAiB,oBACjBG,gBAAiB,iCACjBC,eAAiB,4CCfnB,MAAM,QAAEx1C,GAAY,EAAQ,OACtB,aAAEC,GAAiB,EAAQ,OAC3B,mBAAEC,GAAuB,EAAQ,OACjC,sBAAEm4C,GAA0B,EAAQ,MAE1ChkD,EAAOC,QAAQ0L,QAAUA,EACzB3L,EAAOC,QAAQ2L,aAAeA,EAC9B5L,EAAOC,QAAQ4L,mBAAqBA,EACpC7L,EAAOC,QAAQ+jD,sBAAwBA,kBCRvC,MAAQ7zC,WAAW,kBAAE8zC,IAAwB,EAAQ,KAyCrDjkD,EAAOC,QAAQ0L,QA9Bd,MASG,UAAAu4C,GACI,OAAO1vC,KAAK2vC,UAAY,IAC5B,CAUA,UAAAC,CAAWr8C,GACPyM,KAAK6vC,YAAYJ,EAAkB,UAAWl8C,GAClD,CACA,WAAAs8C,CAAYt8C,GACRyM,KAAK2vC,SAAWp8C,CACpB,mBCrCJ,MAAM,UAAEoI,GAAc,EAAQ,MACxB,QAAE/P,GAAY,EAAQ,MAGtBkD,EAAa,eAEb,SACFghD,EAAQ,UACRC,EAAS,SACT/zC,EAAQ,kBACRyzC,GACA9zC,GAEE,mBAAEjL,GAAuB9E,EAW9B,MAAMyL,EAUH,WAAA0I,GACIC,KAAKgwC,SAAW,KAChBhwC,KAAKiwC,QAAU,KACfjwC,KAAKkwC,YAAa,EAClBlwC,KAAKmwC,YAAc,KACnBnwC,KAAKowC,SAAW,CACpB,CAOA,KAAAxzB,GACI,MAAMyzB,EAAuB,IAAIh5C,EAMjC,OALAg5C,EAAqBC,WAAWtwC,KAAKiwC,SACrCI,EAAqBE,YAAYvwC,KAAKgwC,UACtCK,EAAqBG,YAAYxwC,KAAKkwC,YACtCG,EAAqBI,eAAezwC,KAAKmwC,aACzCE,EAAqBK,YAAY1wC,KAAKowC,UAC/BC,CACX,CAKA,gCAAWM,GACP,OAAO,EACX,CAKA,+BAAWC,GACP,OAAO,CACX,CAKA,WAAIC,GACA,OAAO7wC,KAAKowC,UAAY,CAC5B,CAMA,UAAAU,CAAWv9C,GACPyM,KAAK0wC,YAAYZ,EAAS,UAAWv8C,GACzC,CACA,WAAAm9C,CAAYn9C,GACRyM,KAAKowC,SAAW78C,CACpB,CAKA,WAAIw9C,GACA,OAAO/wC,KAAKgwC,QAChB,CAMA,UAAAgB,CAAWz9C,GACPyM,KAAKuwC,YAAYv0C,EAAS,UAAWzI,GACzC,CACA,WAAAg9C,CAAYh9C,GACRyM,KAAKgwC,SAAWz8C,CACpB,CAKA,UAAI09C,GACA,OAAOjxC,KAAKiwC,OAChB,CAMA,SAAAiB,CAAU39C,GACNyM,KAAKswC,WAAWt0C,EAAS,SAAUzI,GACvC,CACA,UAAA+8C,CAAW/8C,GACPyM,KAAKiwC,QAAU18C,CACnB,CAKA,aAAI49C,GACA,OAAOnxC,KAAKkwC,aAAc,CAC9B,CAMA,UAAAkB,CAAW79C,GACPyM,KAAKwwC,YAAYT,EAAU,YAAax8C,GAC5C,CACA,WAAAi9C,CAAYj9C,GACRyM,KAAKkwC,WAAa38C,CACtB,CAKA,cAAI89C,GACA,OAAOrxC,KAAKmwC,WAChB,CAOA,aAAAmB,CAAc/9C,GACVyM,KAAKywC,eAAehB,EAAkB,aAAcl8C,GACxD,CACA,cAAAk9C,CAAel9C,GACXyM,KAAKmwC,YAAc58C,CACvB,CASA,uBAAOg+C,CAAiBC,GAEpB,GAAyB,MAArBA,EACA,OAAO,KAGX,IAAIC,EAAqB,KAQzB,GAPI3iD,EAAW0E,SAASg+C,GACpBC,EAAqBD,EACe,iBAAtBA,IACdC,EAAqB3iD,EAAWhB,KAAK0jD,EAAmB,YAIvDC,GAAsBA,EAAmBvkD,OAAS,GACnD,OAAO,KAGX,IACI,MAAMwkD,EAAoB,IAAK/hD,WAAW8hD,GAAqBhhD,OAC/D,IAAIkhD,EAAY,EAEhB,MAAMC,EAAqB,IAAIv6C,EAEzBw6C,EAAYH,EAAkBr/C,MAAMs/C,EAAWA,EAAY,GAEjE,IAAIG,EADkB,IAAIC,SAASF,EAAW,EAAG,GACvBG,SAASL,GAEnC,MAAMd,EAAUiB,GAAS,EACzBF,EAAmBd,WAAWD,GAE9B,MAAMM,EAA+B,IAAT,GAARW,GACpBF,EAAmBR,WAAWD,GAC9BQ,IAEA,MAAMM,EAAiBP,EAAkBr/C,MAAMs/C,EAAWA,EAAY,IAChEZ,EAAUrgD,EAAmBuhD,EAAgB,OACnDL,EAAmBZ,WAAWD,GAC9BY,GAAat6C,EAAmBs5C,sBAEhC,MAAMuB,EAAeR,EAAkBr/C,MAAMs/C,EAAWA,EAAY,GAC9DV,EAASvgD,EAAmBwhD,EAAc,OAChDN,EAAmBV,UAAUD,GAC7BU,GAAat6C,EAAmBu5C,qBAEhCe,IACAA,GAAa,EAEb,MAAMQ,EAAwBT,EAAkBr/C,MAAMs/C,EAAWA,EAAY,GAEvES,EAD2B,IAAIL,SAASI,EAAuB,EAAGA,EAAsBjiD,YAC5CmiD,UAAU,GAAG,GAI/D,GAHAV,GAAa,EAGTS,EAAmB,EAAG,CACtB,MAAME,EAAkBZ,EAAkBr/C,MAAMs/C,EAAWA,EAAY,GACjEN,EAAa3gD,EAAmB4hD,GACtCV,EAAmBN,cAAcD,EACrC,CACA,OAAOO,CACX,CAAE,MAAOh8B,GACL,OAAO,IACX,CACJ,EAGJpqB,EAAOC,QAAQ4L,mBAAqBA,kBC3OpC,MAAM,UAAEsE,GAAc,EAAQ,MACxB,QAAE/P,GAAY,EAAQ,OACtB,mBAAEyL,GAAuB,EAAQ,OAEjC,UACF04C,EAAS,kBACTN,GACA9zC,GAEE,mBACFtM,EAAkB,sBAClB4B,GACArF,EAWJ,MAAMwL,EAYF,WAAA2I,CAAY6xC,GACR5xC,KAAKgwC,SAAWP,EAAkB,UAAWmC,EAAmBb,SAChE/wC,KAAKiwC,QAAUR,EAAkB,SAAUmC,EAAmBX,QAC9DjxC,KAAKkwC,WAAaH,EAAU,YAAa6B,EAAmBT,WAC5DnxC,KAAKmwC,YAAcyB,EAAmBP,WACtCrxC,KAAKowC,SAAWwB,EAAmBf,OACvC,CASA,YAAOj0B,CAAM21B,GACT,MAAMC,EAAmB,IAAIn7C,EAM7B,OALAm7C,EAAiBlC,WAAWiC,EAAQE,aACpCD,EAAiBjC,YAAYgC,EAAQG,cACrCF,EAAiBhC,YAAY+B,EAAQI,gBACrCH,EAAiB/B,eAAe8B,EAAQK,iBACxCJ,EAAiB9B,YAAY6B,EAAQM,cAC9B,IAAIz7C,EAAao7C,EAC5B,CAKA,WAAI3B,GACA,OAAO7wC,KAAKowC,UAAY,CAC5B,CAMA,UAAAyC,GACI,OAAO7yC,KAAK6wC,OAChB,CAOA,0BAAIiC,GACA,OAAO,GACX,CAKA,WAAI/B,GACA,OAAO/wC,KAAKgwC,QAChB,CAOA,UAAA0C,GACI,OAAO1yC,KAAKgwC,QAChB,CAKA,UAAIiB,GACA,OAAOjxC,KAAKiwC,OAChB,CAOA,SAAAwC,GACI,OAAOzyC,KAAKiwC,OAChB,CAKA,aAAIkB,GACA,OAAOnxC,KAAKkwC,UAChB,CAOA,YAAAyC,GACI,OAAO3yC,KAAKkwC,aAAc,CAC9B,CAKA,cAAImB,GACA,OAAOrxC,KAAKmwC,WAChB,CAOA,aAAAyC,GACI,OAAO5yC,KAAKmwC,aAAe,IAC/B,CAOA,sBAAA4C,GACI,OAAO/yC,KAAKgzC,8BAA8BhzC,KAAK8yC,uBACnD,CAUA,sBAAAG,GAGI,GAAoB,MAAhBjzC,KAAK+wC,SAAkC,MAAf/wC,KAAKixC,OAC7B,OAAO,KAGX,MAAMmB,EAAsC,MAAnBpyC,KAAKqxC,WAAqB,EAAIrxC,KAAKqxC,WAAWnkD,OAGjEgmD,EAAgB,IAAIzjD,YAAY,GAAK2iD,GAC3C,IAAIe,EAAY,EAChB,MAAMC,EAAwB,IAAIrB,SAASmB,GAE3C,IAAIpB,EAAQ,EAEZA,GAAU9xC,KAAK6wC,SAAW,EAC1BiB,GAAS9xC,KAAKmxC,UAAY,EAAO,EAGjCiC,EAAsBC,SAASF,EAAWrB,GAAO,GACjDqB,IAGA,MAAMG,EAAgBriD,EAAsB+O,KAAK+wC,SACjD,IAAI,IAAIxkD,EAAI,EAAGA,EAAI,GAAIA,IAEnB6mD,EAAsBC,SAASF,EAAY5mD,EAAG+mD,EAAc/mD,IAAI,GAEpE4mD,GAAa,GAGb,MAAMI,EAActiD,EAAsB+O,KAAKixC,QAC/C,IAAI,IAAI1kD,EAAI,EAAGA,EAAI,EAAGA,IAElB6mD,EAAsBC,SAASF,EAAY5mD,EAAGgnD,EAAYhnD,IAAI,GAcrE,GAZG4mD,GAAa,EAGbC,EAAsBC,SAASF,EAAW,GAAM,GAChDA,IAIAC,EAAsBI,UAAUL,EAAW,GAAG,GAC9CC,EAAsBI,UAAUL,EAAY,EAAG,GAAG,GAClDA,GAAa,EAEO,MAAnBnzC,KAAKqxC,WAGF+B,EAAsBI,UAAUL,EAAW,GAAG,GAC9CA,GAAa,MACb,CAEL,MAAMM,EAAsBzzC,KAAK+yC,yBACjC,GAA2B,MAAvBU,EAA6B,CAE5B,MAAMrB,EAAmBqB,EAAoBvmD,OAEvCilD,EAAwB,IAAIuB,YAAY,CAACtB,IAE/CgB,EAAsBI,UAAUL,EAAWhB,GAAuB,GAClEgB,GAAa,EAGb,MAAMb,EAAkBjjD,EAAmBokD,GAC3C,IAAI,IAAIlnD,EAAI,EAAGA,EAAI+lD,EAAgBplD,OAAQX,IAEvC6mD,EAAsBC,SAASF,EAAY5mD,EAAG+lD,EAAgB/lD,IAAI,GAEtE4mD,GAAab,EAAgBplD,MAClC,CACF,CAGA,OAAO,IAAIyC,WAAWujD,EACvB,CAUA,6BAAAF,CAA8BW,GAE7B,IAAK3zC,KAAKmwC,aAAmC,MAApBnwC,KAAKmwC,YAC5B,OAAO,KACF,GAAInwC,KAAKmwC,YAAYjjD,OAASymD,EACnC,OAAO3zC,KAAKmwC,YAGX,MAAMyD,EAAiB,IAAIphD,MACxBqhD,EAAyB,IAAIrhD,MAChC,IAAIshD,EAA+B,EACtC,MAAMC,EAAc/zC,KAAKmwC,YAAYv9C,MAAM,KAE3C,IAAK,IAAIrG,EAAI,EAAGA,EAAIwnD,EAAY7mD,OAAQX,IAAK,CACtC,IAAIynD,EAAaD,EAAYxnD,GAC7B,GAAmB,KAAfynD,GAAmC,MAAdA,EAAoB,CACzC,IAAIC,EAAsBD,EAAW9mD,OACrC,GAAI+mD,EAAsB,IAEtBL,EAAe96B,KAAKk7B,OACjB,CACsBF,EAA+BG,GACpDH,EAA+B,EAAI,EAAI,IAElBH,GAErBE,EAAuB/6B,KAAKk7B,GAE5BF,GAAiCG,GAC7BH,EAA+B,EAAI,EAAI,IAE3CF,EAAe96B,KAAKk7B,EAE5B,CACJ,CACP,CAGA,IAAK,IAAIznD,EAAI,EAAGA,EAAIqnD,EAAe1mD,OAAQX,IAAK,CACzC,IAAI2nD,EAAgBN,EAAernD,GAC/B0nD,EAAsBC,EAAchnD,OAEf4mD,EAA+BG,GACpDH,EAA+B,EAAI,EAAI,IAClBH,IAErBE,EAAuB/6B,KAAKo7B,GAE5BJ,GAAiCG,GAC7BH,EAA+B,EAAI,EAAI,GAEtD,CAGA,OAAOD,EAAuB5/C,KAAK,IACvC,CAOG,QAAAlG,GACI,MAAO,YAAciS,KAAK0yC,aACpB,YAAc1yC,KAAKyyC,YACnB,aAAezyC,KAAKmxC,UACpB,iBAAuC,MAAnBnxC,KAAKqxC,WAAsB,IAAM,IAAMrxC,KAAKqxC,WAAa,KACvF,EAGJ7lD,EAAOC,QAAQ2L,aAAeA,kBClU9B,MAAM,aAAEgjB,GAAiB,EAAQ,OAC3B,QAAEjjB,GAAY,EAAQ,OACtB,aAAEC,GAAiB,EAAQ,OAC3B,mBAAEC,GAAuB,EAAQ,MAgHvC7L,EAAOC,QAAQ+jD,sBArGf,MAUE,WAAAzvC,GAEA,CAcA,qBAAAo0C,GAKE,OAJ+B,MAA5Bn0C,KAAKo0C,qBAA2DxjD,MAA5BoP,KAAKo0C,sBAE1Cp0C,KAAKo0C,oBAAsB,IAAI/8C,GAE1B2I,KAAKo0C,mBACd,CAWA,mBAAAC,GACE,OAAOr0C,KAAKs0C,iBACd,CAMA,oBAAAC,CAAqBC,GACC,MAAjBA,IACDx0C,KAAKs0C,kBAAoB,IAAIl9C,EAAao9C,GAE9C,CAUA,kBAAAC,GAEE,OAAOz0C,KAAK00C,gBACd,CAMA,mBAAAC,CAAoBH,GAEE,MAAjBA,IACDx0C,KAAK00C,iBAAmB,IAAIt9C,EAAao9C,GAE7C,CASA,UAAA9E,GACE,OAAO1vC,KAAK2vC,QACd,CAMA,WAAAE,CAAYt8C,GACVyM,KAAK2vC,SAAWp8C,CAClB,mBCjHF,MAAM,0BACJgD,EAAyB,aACzB80B,GACE,EAAQ,OACN,QAAE52B,GAAY,EAAQ,OACtB,mBAAEwB,GAAuB,EAAQ,OACjC,wBAAEC,GAA4B,EAAQ,MACtC,gBAAEC,GAAoB,EAAQ,OAC9B,4BAAEy+C,GAAgC,EAAQ,OAC1C,gBAAEC,GAAoB,EAAQ,OAC9B,YAAEx+C,GAAgB,EAAQ,OAC1B,eAAED,GAAmB,EAAQ,MAC7B,mBAAEE,GAAuB,EAAQ,OACjC,iBAAEjB,GAAqB,EAAQ,MAQrCA,EAAiBy/C,cAAgBz/C,EAAiByG,eAAc,IAAM,IAAIrH,IAmB1EY,EAAiB0/C,gCAAkC1/C,EAAiByG,eAAcoD,GAChFmsB,EAAa2pB,WAAW91C,KAE1B1T,EAAOC,QAAQgJ,QAAUA,EACzBjJ,EAAOC,QAAQwK,mBAAqBA,EACpCzK,EAAOC,QAAQyK,wBAA0BA,EACzC1K,EAAOC,QAAQ0K,gBAAkBA,EACjC3K,EAAOC,QAAQmpD,4BAA8BA,EAC7CppD,EAAOC,QAAQopD,gBAAkBA,EACjCrpD,EAAOC,QAAQ4K,YAAcA,EAC7B7K,EAAOC,QAAQ2K,eAAiBA,EAChC5K,EAAOC,QAAQ6K,mBAAqBA,EACpC9K,EAAOC,QAAQ8K,0BAA4BA,EAC3C/K,EAAOC,QAAQ4/B,aAAeA,kBCrD9B,MAAM,KAAE9tB,GAAS,EAAQ,MAqCzB/R,EAAOC,QAAQwK,mBAAqBsH,EAAKE,IAnBd,CAKzBw3C,KAAS,EAKTC,OAAS,EAKTC,QAAS,mBCjCX,MAAM,KAAE53C,GAAS,EAAQ,MA+CzB/R,EAAOC,QAAQyK,wBAA0BqH,EAAKE,IAtCd,CAa9B23C,OAAgB,EAgBhBC,WAAgB,EAMhBC,eAAgB,oBC5ClB,MAAM,KAAE/3C,GAAS,EAAQ,MAqBzB/R,EAAOC,QAAQ0K,gBAAkBoH,EAAKE,IAXd,CAItB83C,cAAe,EAIfC,aAAe,oBClBjB,MAAMC,EAAW,EAAQ,KACnBC,EAAqB,EAAQ,OAC7B,YAAEthD,GAAgB,EAAQ,OAC1B,UAAE8G,GAAc,EAAQ,OACxB,KAAEpP,GAAS,EAAQ,OACnB,mBAAEmK,GAAuB,EAAQ,OACjC,wBAAEC,GAA4B,EAAQ,MACtC,gBAAEC,GAAoB,EAAQ,OAC9B,mBAAEG,GAAuB,EAAQ,OACjC,gBAAEyB,EAAe,aAAED,GAAiB,EAAQ,MAC5C,YAAEoC,GAAgB,EAAQ,KAG1B06C,EAA8B,CAElC,aAAAe,CAActqC,GACZ,MAAMuqC,EAAOvqC,EAAQkwB,iBACrB,OAAa,OAATqa,GAAiBA,aAAgBxhD,EAC5B,CAAC,eAAe,EAAMwhD,EAAK7nD,WAAY,MAEzC,CAAC,eAAe,EAAO,GAAI,KACpC,EAEA8nD,WAAWxqC,GACF,CAAC,gBAAuCza,IAA1Bya,EAAQyqC,eAAyD,OAA1BzqC,EAAQyqC,cAAyBzqC,EAAQyqC,cAAe,MAGtHC,aAAa1qC,GACJ,CAAC,sBAA2Dza,IAAxCya,EAAQ2qC,6BAAqF,OAAxC3qC,EAAQ2qC,4BACtF3qC,EAAQ2qC,4BAA6B,MAGzCC,WAAW5qC,GACF,CAAC,oBAAuDza,IAAtCya,EAAQ6qC,2BAAiF,OAAtC7qC,EAAQ6qC,0BAClF7qC,EAAQ6qC,0BAA2B,MAGvC,gBAAAC,CAAiB9qC,GACf,MAAM+qC,EAAc/qC,EAAQgrC,oBAC5B,MAA2B,iBAAhBD,EACF,CAAC,kBAAkB,EAAMA,EAAa,MAExC,CAAC,kBAAkB,EAAO,GAAI,KACvC,EAEA,qBAAAE,CAAsBjrC,GACpB,MAAMkrC,EAAalrC,EAAQmrC,yBAC3B,OAAI1qD,EAAK2qD,OAAOF,GACP,CAAC,uBAAuB,EAAMA,EAAWxoD,WAAY,MAEvD,CAAC,uBAAuB,EAAO,GAAI,KAC5C,EAEA2oD,gBAAgBrrC,GACP,CAAC,qBAAiDza,IAA/Bya,EAAQsrC,oBAAmE,OAA/BtrC,EAAQsrC,mBAC5EtrC,EAAQsrC,mBAAoB,MAGhCC,kBAAiB,IACR,CAAC,qBAAqB,OAAOhmD,EAAW,MAGjDimD,sBAAqB,IACZ,CAAC,yBAAyB,OAAOjmD,EAAW,MAGrD,eAAAkmD,CAAgBzrC,GACd,MAAM0rC,EAAY1rC,EAAQ2rC,qBAC1B,GAAyB,iBAAdD,EAAwB,CAEjC,MAAO,CAAC,iBAAiB,EACvB,GAAGA,MAFOrB,EAAmBb,gBAERoC,WAAWF,MAAe,KACnD,CACA,MAAO,CAAC,iBAAiB,EAAO,GAAI,KACtC,EAEA,cAAAG,CAAe7rC,GACb,MAAM0rC,EAAY1rC,EAAQ8rC,uBAC1B,GAAyB,iBAAdJ,EAAwB,CAEjC,MAAO,CAAC,gBAAgB,EACtB,GAAGA,MAFOrB,EAAmBb,gBAERoC,WAAWF,MAAe,KACnD,CACA,MAAO,CAAC,gBAAgB,EAAO,GAAI,KACrC,EAEAK,iBAAiB/rC,GAEI,iBADPA,EAAQgsC,aAEX,CAAC,oBAAoB,EAAM/gD,EAAmB6Y,OAAO9D,EAAQgsC,cAAe,MAE9E,CAAC,oBAAoB,EAAO,GAAI,MAQzCC,eAAejsC,GAEO,iBADPA,EAAQksC,kBAEZ,CAAC,gBAAgB,EAAMrhD,EAAwBiZ,OAAO9D,EAAQksC,mBAAoB,MAEpF,CAAC,gBAAgB,EAAO,GAAI,MAGrC,iBAAAC,CAAkBnsC,GAChB,MAAMkiC,EAAQliC,EAAQ8tB,yBACtB,OAAIrtC,EAAK2qD,OAAOlJ,GACP,CAAC,cAAc,EAAMA,EAAMx/C,SAAS,IAAK,MAE3C,CAAC,cAAc,EAAO,GAAI,KACnC,EAEA,2BAAA0pD,CAA4BpsC,GAC1B,MAAMqsC,EAAQrsC,EAAQssC,+BACtB,YAAc/mD,IAAV8mD,EACK,CAAC,gCAAgC,EAAO,GAAI,MAE9C,CAAC,gCAAgC,EAAMA,EAAM3pD,WAAY,KAClE,EAEA,YAAA6pD,CAAavsC,GACX,MAAMwsC,EAAaxsC,EAAQysC,gBAC3B,GAA0B,iBAAfD,EAAyB,CAClC,MAAME,EAAMrC,EAAmBb,gBACzBmD,EAAI,IAAIjzB,KACd,MAAO,CAAC,cAAc,EACpB,GAAG8yB,MAAeE,EAAId,WAAWe,EAAEC,UAAYJ,MAAgB,KACnE,CACA,MAAO,CAAC,cAAc,EAAO,GAAI,KACnC,EAEA,YAAAK,CAAa7sC,GACX,MAAM0rC,EAAY1rC,EAAQ8sC,kBAC1B,GAAyB,iBAAdpB,EAAwB,CAEjC,MAAO,CAAC,cAAc,EACpB,GAAGA,MAFOrB,EAAmBb,gBAERoC,WAAWF,MAAe,KACnD,CACA,MAAO,CAAC,cAAc,EAAO,GAAI,KACnC,EAEAqB,qBAAqB/sC,GACZ,CAAC,eAAgBA,EAAQgtC,gBAAiB,GAAI,MAGvDC,qBAAqBjtC,GACZ,CAAC,uBAAwBA,EAAQktC,gBAAiB,GAAI,MAG/D,sBAAAC,CAAuBntC,GAErB,IACE,MAAO,CAAC,0BAA0B,EAAMA,EAAQotC,mBAAoB,KACtE,CAAE,MAAO34B,GACP,MAAO,CAAC,0BAA0B,EAAO,GAAI,KAC/C,CACF,EAEA44B,oBAAoBrtC,GACX,CAAC,qBAAsBA,EAAQstC,sBAAuB,GAAI,MAGnEC,iBAAiBvtC,GACR,CAAC,kBAAmBA,EAAQwtC,2BAA4B,GAAI,MAGrEC,kBAAkBztC,GACT,CAAC,mBAAoBA,EAAQ0tC,oBAAqB,GAAI,MAG/DC,eAAe3tC,GACN,CAAC,gBAAiBA,EAAQ4tC,iBAAkB,GAAI,MAGzD,SAAAC,CAAU7tC,GACR,MAAM8tC,EAAU9tC,EAAQ+tC,aACxB,OAAgB,OAAZD,GAAoBA,aAAmB/kD,EAClC,CAAC,WAAW,EAAM+kD,EAAQprD,WAAY,MAExC,CAAC,WAAW,EAAO,GAAI,KAChC,EAEAsrD,eAAehuC,GACN,CAAC,iBAAkBA,EAAQiuC,iBAAkB,GAAI,MAG1DC,eAAeluC,GACN,CAAC,qBAAsBA,EAAQmuC,mBAAqBvjD,EAAmBg/C,KAAM,GAAI,MAG1F,gBAAAwE,CAAiBpuC,GACf,MAAMquC,EAAiBruC,EAAQsuC,oBAC/B,MAA8B,iBAAnBD,EACF,CAAC,oBAAoB,EAAMA,EAAgB,MAE7C,CAAC,oBAAoB,EAAO,GAAI,KACzC,EAEA,iBAAAE,CAAkBvuC,EAASwuC,GACzB,MAAMC,EAAUzuC,EAAQ0uC,qBACxB,GAAgB,OAAZD,GAAoBA,aAAmB/hD,EAAiB,CAC1D,MAAMxE,EAAQ,GAAGumD,EAAQE,UAAU9sD,iBACnC,IAAI+sD,EAAc,KAClB,GAAIJ,IAAU1jD,EAAgBq/C,aAC5B,IAEEyE,EADYvE,EAAmBb,gBACbqF,SAASJ,EAAS,EACtC,CAAE,MAAOh6B,GACP5kB,EAAU4kB,EAAEzU,QAASyU,EAAEzT,OACvB4tC,EAAc,OAChB,CAEF,MAAO,CAAC,qBAAqB,EAAM1mD,EAAO0mD,EAC5C,CACA,MAAO,CAAC,qBAAqB,EAAO,GAAI,KAC1C,EAEA,gBAAAE,CAAiB9uC,GACf,MAAM+uC,EAAW/uC,EAAQgvC,oBACzB,MAAO,CAAC,0BAA2B,MAACD,EAClCA,EAAU,KACd,EAEAE,WAAWjvC,GACLnR,EAAYqgD,SAASlvC,EAAQmvC,eACxB,CAAC,aAAa,EAAM,OAAOnvC,EAAQmvC,cAActtD,SACtDuoD,EAASthD,MAAM2F,gBAAgBuR,EAAQmvC,eAAe,EAAM,IAEzD,CAAC,aAAa,EAAO,GAAI,MAGlC,WAAAC,CAAYpvC,EAASwuC,GACnB,MAAMa,EAAgBrvC,EAAQsvC,kBAC9B,GAAsB,OAAlBD,GAA0BA,EAAch6C,YAAc5I,EAAa8iD,OAAQ,CAC7E,MAAM7C,EAAMrC,EAAmBb,gBACzBthD,EAAQ,GAAGwkD,EAAI8C,WAAWH,EAAc3P,sBAC9C,IAAIkP,EAAc,KAClB,GAAIJ,IAAU1jD,EAAgBq/C,aAC5B,IACEyE,EAAclC,EAAI+C,YAAYJ,EAAc3P,WAAY,EAC1D,CAAE,MAAOjrB,GACP5kB,EAAU4kB,EAAEzU,QAASyU,EAAEzT,OACvB4tC,EAAc,OAChB,CAEF,MAAO,CAAC,cAAc,EAAM1mD,EAAO0mD,EACrC,CACA,MAAO,CAAC,cAAc,EAAO,GAAI,KACnC,EAEA,QAAAc,CAAS1vC,EAASwuC,GAChB,MAAMa,EAAgBrvC,EAAQsvC,kBAC9B,GAAsB,OAAlBD,GAA0BA,EAAch6C,YAAc5I,EAAakjD,IAAK,CAC1E,MAAMznD,EAAQ,GAAGmnD,EAAc3P,WAAWiP,UAAU9sD,iBACpD,IAAI+sD,EAAc,KAClB,GAAIJ,IAAU1jD,EAAgBq/C,aAC5B,IAEEyE,EADYvE,EAAmBb,gBACbqF,SAASQ,EAAc3P,WAAY,EACvD,CAAE,MAAOjrB,GACP5kB,EAAU4kB,EAAEzU,QAASyU,EAAEzT,OACvB4tC,EAAc,OAChB,CAEF,MAAO,CAAC,WAAW,EAAM1mD,EAAO0mD,EAClC,CACA,MAAO,CAAC,WAAW,EAAO,GAAI,KAChC,EAEA,kBAAAgB,CAAmB5vC,EAASwuC,GAC1B,IAAKxuC,EAAQ6vC,mBAAqB7vC,EAAQ6vC,kBAAkBhuD,OAAS,EACnE,MAAO,CAAC,qBAAqB,EAAO,GAAI,MAE1C,MAAMiuD,EAAM9vC,EAAQ6vC,kBAAkBntD,SAAS,UACzCwF,EAAQ,OAAO4nD,EAAIjuD,SACzB,IAAI+sD,EAAc,KAIlB,OAHIJ,IAAU1jD,EAAgBq/C,eAC5ByE,EAAcxE,EAASthD,MAAM2F,gBAAgBqhD,GAAK,EAAM,IAEnD,CAAC,qBAAqB,EAAM5nD,EAAO0mD,EAC5C,EAEA,YAAAmB,CAAa/vC,EAASwuC,GACpB,MAAMwB,EAAMhwC,EAAQiwC,gBACpB,GAAIphD,EAAYqgD,SAASc,GAAM,CAC7B,MAAM9nD,EAAQ,OAAO8nD,EAAInuD,SACzB,IAAI+sD,EAAc,KAIlB,OAHIJ,IAAU1jD,EAAgBq/C,eAC5ByE,EAAcxE,EAASthD,MAAM2F,gBAAgBuhD,GAAK,EAAM,IAEnD,CAAC,OAAO,EAAM9nD,EAAO0mD,EAC9B,CACA,MAAO,CAAC,OAAO,EAAO,GAAI,KAC5B,EAEA,aAAAsB,CAAclwC,EAASwuC,GACrB,MAAM2B,EAAcnwC,EAAQowC,iBAC5B,GAAIvhD,EAAYqgD,SAASiB,GAAc,CACrC,MAAMjoD,EAAQ,OAAOioD,EAAYtuD,SACjC,IAAI+sD,EAAc,KAIlB,OAHIJ,IAAU1jD,EAAgBq/C,eAC5ByE,EAAcxE,EAASthD,MAAM2F,gBAAgB0hD,GAAa,EAAM,IAE3D,CAAC,gBAAgB,EAAMjoD,EAAO0mD,EACvC,CACA,MAAO,CAAC,gBAAgB,EAAO,GAAI,KACrC,EAEA,wBAAAyB,CAAyBrwC,EAASwuC,GAChC,MAAMnF,EAAmBrpC,EAAQopC,qBAE3BkH,EAAiC,MAApBjH,GACmB,MAAjCA,EAAiBhC,cACe,MAAhCgC,EAAiBjC,YAEtB,IAAIwH,EAAc,KAIlB,OAHIJ,GAASA,IAAU1jD,EAAgBq/C,eACrCyE,EAAmC,MAApBvF,EAA4BA,EAAiB3mD,WAAa,MAEpE,CAAC,0BAA2B4tD,EAAW1B,EAAa,KAC7D,EAEA,yBAAA2B,CAA0BvwC,EAASwuC,GACjC,MAAMvF,EAAoBjpC,EAAQgpC,sBAE5BsH,EAAkC,MAArBrH,GACoB,MAAlCA,EAAkB5B,cACe,MAAjC4B,EAAkB7B,YAEvB,IAAIwH,EAAc,KAIlB,OAHIJ,GAASA,IAAU1jD,EAAgBq/C,eACrCyE,EAAoC,MAArB3F,EAA6BA,EAAkBvmD,WAAa,MAEtE,CAAC,8BAA+B4tD,EAAW1B,EAAa,KACjE,EAEA,gBAAA4B,CAAiBxwC,EAASwuC,GACxB,MAAM8B,EAAqC,MAAxBtwC,EAAQqkC,cACe,MAArCrkC,EAAQqkC,aAAaA,aAE1B,IAAIuK,EAAc,KAClB,GAAIJ,GAASA,IAAU1jD,EAAgBq/C,aAAc,CACnD,MAAM7F,EAAWtkC,EAAQqkC,aACzBuK,EAA2B,MAAZtK,EAAoBA,EAASD,aAAe,IAC7D,CACA,MAAO,CAAC,kBAAmBiM,EAAW1B,EAAa,KACrD,GAIFzuD,EAAOC,QAAQmpD,4BAA8BA,kBCjW7C,MAAMa,EAAW,EAAQ,KACnBqG,EAAiC,EAAQ,OACzC,aACJhkD,EAAY,gBACZC,EAAe,mBACfC,EAAkB,yBAClBC,EAAwB,qBACxBC,GACE,EAAQ,MACN,MAAE6f,GAAU,EAAQ,MACpB,aAAEnpB,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,gBAAEsH,GAAoB,EAAQ,OAC9B,aAAE8D,EAAY,YAAEC,GAAgB,EAAQ,KAExC6hD,EAAmB,CACvB,iBAAIC,GACF,MAAMC,EAAYH,EAA+BlH,4BACjD,OAAOl7C,OAAO8F,KAAKy8C,GAAWvpD,KAAIrC,GAAK4rD,EAAU5rD,IACnD,GAGIwkD,EAAkB,CACtBqH,mBAAmBC,GACM,iBAAZA,EACF,mBAAmB1G,EAASthD,MAAM2F,gBAAgBqiD,KAEpD,mBAAmB1G,EAASthD,MAAM2F,gBAAgBqiD,EAAQpuD,SAAS,aAG5E,QAAAg9C,CAASqR,GACP,IAAI7oD,EAAQ,KACZ,IAEE,OADAA,EAAQ6oD,EAASrR,WACVx3C,CACT,CAAE,MAAOusB,GACP,GAAIA,aAAa7nB,GACf,GAAI6nB,EAAEu8B,eAAiBnkD,EAAqBokD,8BAC1C,OAAOt8C,KAAKk8C,mBAAmBp8B,EAAEy8B,sBAE9B,GAAIz8B,aAAajxB,GAAkBixB,EAAExU,UAAY1c,EAAa+a,uBACnE,MAAO,iBAET,MAAMmW,CACR,CACF,EAEA,QAAAo6B,CAASsC,EAAQC,GACf,GAAI1kC,EAAM2kC,QAAQF,MAAaA,aAAkBzkD,GAC/C,OAAO,KAET,MAAM4kD,EAAQ,GACRC,EAAY1iD,EAAYG,SAAS,GAAIoiD,EAAQ,KAyBnD,OAxBaD,EAAOxC,UAAU6C,OACzB/uC,SAASG,IACZ,MAAMysC,EAAgB8B,EAAOM,SAAS7uC,GAChC/Q,EAAOw9C,EAAch6C,UACrBnN,EAAQyM,KAAK+qC,SAAS2P,GAC5B,IAAIN,EACJ,OAAQl9C,GACN,KAAKpF,EAAakjD,IAChBZ,EAAW,KAAKp6C,KAAKk6C,SAAS3mD,EAAOkpD,EAAS,KAC9C,MACF,KAAK3kD,EAAa8iD,OAChBR,EAAW,KAAKp6C,KAAK86C,YAAYvnD,EAAOkpD,EAAS,KACjD,MACF,KAAK3kD,EAAailD,UAChB3C,EAAW3E,EAASthD,MAAM2F,gBAAgBvG,EAAMxF,SAAS,WAAW,EAAO,GAC1D,OAAbqsD,GAA6C,OAAxBA,EAASloD,QAAQ,KACxCkoD,EAAWA,EAASj4C,UAAU,EAAGi4C,EAASltD,OAAS,IAErD,MACF,QACEktD,EAAsB,OAAV7mD,EAAkBA,EAAMxF,WAAa,KAErD4uD,EAAM7jC,KAAK,GAAG8jC,SAAiB3uC,OAASnW,EAAaqX,OAAOjS,QAAWk9C,IAAW,IAE7EuC,EAAM1oD,KAAK,KACpB,EAEA,WAAA6mD,CAAYkC,EAAWP,GACrB,GAAI1kC,EAAM2kC,QAAQM,MAAgBA,aAAqBhlD,GACrD,OAAO,KAETglD,EAAUC,SACV,MAAMN,EAAQ,GACRC,EAAY1iD,EAAYG,SAAS,GAAIoiD,EAAQ,KACnD,KAAOO,EAAUE,WAAW,CAC1B,MAAMxC,EAAgBsC,EAAUG,UAC1BjgD,EAAOw9C,EAAch6C,UACrBnN,EAAQyM,KAAK+qC,SAAS2P,GAE5B,IAAIN,EACJ,OAAQl9C,GACN,KAAKpF,EAAakjD,IAChBZ,EAAW,KAAKp6C,KAAKk6C,SAAS3mD,EAAOkpD,EAAS,KAC9C,MACF,KAAK3kD,EAAa8iD,OAChBR,EAAW,KAAKp6C,KAAK86C,YAAYvnD,EAAOkpD,EAAS,KACjD,MACF,KAAK3kD,EAAailD,UAChB3C,EAAW3E,EAASthD,MAAM2F,gBAAgBvG,EAAMxF,SAAS,WAAW,EAAO,GAC1D,OAAbqsD,GAA6C,OAAxBA,EAASloD,QAAQ,KACxCkoD,EAAWA,EAASj4C,UAAU,EAAGi4C,EAASltD,OAAS,IAErD,MACF,KAAK4K,EAAaslD,YAChBhD,EAAW7mD,EAAMxF,WACjB,MACF,QACEqsD,EAAsB,OAAV7mD,EAAkBA,EAAMxF,WAAa,KAErD4uD,EAAM7jC,KAAK,GAAG8jC,KAAa9kD,EAAaqX,OAAOjS,QAAWk9C,IAC5D,CAEA,OADA4C,EAAUC,SACHN,EAAM1oD,KAAK,KACpB,EAEA,UAAA4mD,CAAWmC,GACT,GAAIjlC,EAAM2kC,QAAQM,MAAiBA,aAAqBhlD,GACtD,OAAO,EAETglD,EAAUC,SACV,IAAIxS,EAAQ,EACZ,KAAOuS,EAAUE,WACfF,EAAUG,UACV1S,IAGF,OADAuS,EAAUC,SACHxS,CACT,EAEAwM,WAAWoG,GACF,IAAIt4B,KAAKs4B,GAAWtvD,WAG7B,IAAAuvD,CAAKjyC,EAASwuC,EAAO0D,EAAWC,GAC9B,MAAMC,EAAK,IAAIxjD,EACf,IAAIyjD,EAAe,KACfC,GAAgB,EAChBC,EAAgB,GAsCpB,OArCIL,SAAsE,iBAAdA,IAC1DG,EAAeH,GAEbC,SAAyE,iBAAfA,IAC5DI,EAAgBJ,GAGlBzB,EAAiBC,cAAcluC,SAAQ,CAAC+vC,EAAUl8C,KAChD,MAAOsM,EAAK0tC,EAAWpoD,EAAO0mD,GAAe4D,EAASxyC,EAASwuC,GAC1D8B,IAGDgC,GACFF,EAAG9iD,OAAO+iD,GAGE,OAAVnqD,GAAmC,IAAjBA,EAAMrG,OAG1BuwD,EAAG9iD,OAAOsT,IAEVwvC,EAAG9iD,OAAOT,EAAYG,SAAS,GAAG4T,KAAQ2vC,EAAe,MACzDH,EAAG9iD,OAAOpH,IAGQ,OAAhB0mD,GAAyBJ,EAAQ1jD,EAAgBq/C,eACnDiI,EAAG9iD,OAAO,MACwB,IAA9Bs/C,EAAY/3C,QAAQ,OACtBu7C,EAAG9iD,OAAO,MAEZ8iD,EAAG9iD,OAAOs/C,GACqB,OAA3BA,EAAY/nD,QAAQ,IAAeyP,EAASo6C,EAAiBC,cAAc9uD,OAAS,GACtFuwD,EAAG9iD,OAAO,OAGdgjD,GAAgB,EAAI,IAEfF,EAAG1vD,UACZ,GAGFvC,EAAOC,QAAQopD,gBAAkBA,iBCrLjC,MAAM,KAAEt3C,GAAS,EAAQ,MA6CzB/R,EAAOC,QAAQ2K,eAAiBmH,EAAKE,IApCd,CAMrB6pB,SAAkB,EASlBmH,OAAkB,EAkBlBC,SAAkB,oBC1CpB,MAAM,KAAEnxB,GAAS,EAAQ,MAmCzB/R,EAAOC,QAAQ4K,YAAckH,EAAKE,IAvBd,CAKlBqgD,OAAQ,EAKR9C,IAAQ,EAKRJ,OAAQ,EAKRmD,KAAQ,oBChCV,MAAM,KAAExgD,GAAS,EAAQ,MAiDzB/R,EAAOC,QAAQ6K,mBAAqBiH,EAAKE,IA1Bd,CAQzBugD,KAAM,EAONC,KAAM,EAQNC,KAAM,oBC9CR,MAAM,MAAEthC,GAAU,EAAQ,KACpBjf,EAAsB,EAAQ,OAC5B7C,MAAOqjD,GAAa,EAAQ,MAC9B,QAAEvyD,GAAY,EAAQ,OACtB,YAAEwI,GAAgB,EAAQ,OAC1B,aAAExF,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,UAAEuqB,EAAS,SAAEne,GAAa,EAAQ,OAClC,mBAAEhF,GAAuB,EAAQ,OACjC,wBAAEC,GAA4B,EAAQ,MACtC,gBAAEC,GAAoB,EAAQ,OAC9B,gBAAE0+C,GAAoB,EAAQ,OAC9B,YAAEx+C,GAAgB,EAAQ,OAC1B,eAAED,GAAmB,EAAQ,MAC7B,mBAAEE,GAAuB,EAAQ,OACjC,UAAEqF,GAAc,EAAQ,MACxB,aAAE0vB,GAAiB,EAAQ,OAC3B,SAAExzB,EAAQ,aAAEC,EAAY,gBAAEC,EAAe,yBAAEE,GAA6B,EAAQ,MAChF,QAAEd,EAAO,sBAAEq4C,EAAqB,aAAEp4C,EAAY,mBAAEC,GAAuB,EAAQ,OAE/E,eAAEyG,GAAmBH,GAErB,WACJzK,EAAU,iBACVI,GACE1H,GACE,UACJmkD,EAAS,aACT3sB,EAAY,aACZlK,EAAY,sBACZklC,EAAqB,kBACrBC,EAAiB,kBACjB5O,GACE9zC,EAQE2iD,EAAwB,CAAEC,UAAU,EAAOC,sBAAsB,GAOvE,SAASC,EAAYpzC,GACnBA,EAAQqzC,cAAgBxoD,EAAwBk/C,OAChD/pC,EAAQszC,SAAWroD,EAAmB0nD,KACtC3yC,EAAQuzC,aAAe3oD,EAAmBg/C,KAC1C5pC,EAAQwzC,sBAAmBjuD,EAM3Bya,EAAQyzC,eAAYluD,EACpBya,EAAQ0zC,gBAAkB,EAG1B1zC,EAAQ+oC,oBAAsB,KAC9B/oC,EAAQqpC,iBAAmB,KAC3BrpC,EAAQipC,kBAAoB,KAC5BjpC,EAAQskC,SAAW,IAAIx4C,CACzB,CAsDA,MAAM1C,UAAgB+6C,EAMpB,WAAAzvC,GACEuB,QACAm9C,EAAYz+C,KACd,CAWA,OAAAU,GACE,OAAOV,KAAKg/C,cAAgB3oD,EAAYynD,MAC1C,CAMA,uBAAAmB,CAAwB1rD,GACtByM,KAAKk/C,sBAAwBzP,EAAkB,uBAAwBl8C,EACzE,CAMA,uBAAA2iD,GACE,OAAOl2C,KAAKk/C,qBACd,CAOA,yBAAAC,CAA0B5rD,GACxByM,KAAKo/C,wBAA0B3P,EAAkB,yBAA0Bl8C,EAC7E,CAOA,yBAAAyiD,GACE,OAAOh2C,KAAKo/C,uBACd,CAYA,mBAAAC,GACE,OAAIr/C,KAAKk7C,mBAAqBp9C,EAAevK,MAAM4jB,kBAC1CnX,KAAKk7C,kBAAkBntD,SAAS,UAElCiS,KAAKk7C,iBACd,CAsBA,mBAAAoE,CAAoB/rD,GACdA,IACFyM,KAAKg/C,aAAe3oD,EAAYynD,QAElC99C,KAAKu/C,qBAAqBjsD,EAAiBC,GAC7C,CACA,oBAAAgsD,CAAqBhsD,GACnByM,KAAKk7C,kBAAoB3nD,CAC3B,CAQA,iBAAAomD,GACE,OAAO35C,KAAKw/C,eACd,CAMA,kBAAAC,CAAmBC,GACjB1/C,KAAKw/C,gBAAkBE,CACzB,CAUA,gBAAA/I,GACE,OAAO32C,KAAK2/C,cACd,CAUA,gBAAAC,CAAiBrsD,GACfyM,KAAK2/C,eAAiBlQ,EAAkB,gBAAiBl8C,EAC3D,CAcA,iBAAA8mD,GACE,OAAOr6C,KAAK8L,iBAAmB,IACjC,CAyBA,iBAAA+zC,CAAkBtsD,GAChByM,KAAK8L,gBAAkBvY,CACzB,CAQA,cAAA+lD,GACE,OAAOt5C,KAAK8/C,gBAAiB,CAC/B,CAOA,eAAAC,CAAgBxsD,GACdyM,KAAKggD,iBAAiBhgD,KAAK8/C,cAAgB/P,EAAU,eAAgBx8C,GACvE,CACA,gBAAAysD,CAAiBzsD,GACfyM,KAAK8/C,cAAgBvsD,CACvB,CAMA,eAAAgkD,GACE,OAAOv3C,KAAK0+C,aACd,CAMA,eAAAuB,CAAgB1sD,GACdyM,KAAKkgD,iBAAiB98B,EAAa,eAAgB7vB,EAAO2C,GAC5D,CACA,gBAAAgqD,CAAiB3sD,GACfyM,KAAK0+C,cAAgBnrD,CACvB,CAMA,cAAAgoC,GACE,OAAOv7B,KAAKw7B,YACd,CAOA,cAAA2kB,CAAe5sD,GACbyM,KAAKogD,gBAAgBlnC,EAAa,cAAe3lB,EAAOa,GAC1D,CACA,eAAAgsD,CAAgB7sD,GACdyM,KAAKw7B,aAAejoC,CACtB,CASA,mBAAAolD,GACE,OAAO34C,KAAKqgD,qBAAsB,CACpC,CAMA,oBAAAC,CAAqB/sD,GACnByM,KAAKugD,sBAAsBxQ,EAAU,oBAAqBx8C,GAC5D,CACA,qBAAAgtD,CAAsBhtD,GACpByM,KAAKqgD,mBAAqB9sD,CAC5B,CAYA,iBAAAwlD,GACE,OAAO/4C,KAAKwgD,mBAAoB,CAClC,CAYA,kBAAAC,CAAmBltD,GACjByM,KAAK0gD,oBAAoB3Q,EAAU,qBAAsBx8C,GAC3D,CACA,mBAAAmtD,CAAoBntD,GAClByM,KAAKwgD,iBAAmBjtD,CAC1B,CAWA,cAAA62C,GACE,OAAOpqC,KAAK2nC,YACd,CAKA,cAAAiD,CAAer3C,GACbyM,KAAK2nC,aAAep0C,CACtB,CAMA,qBAAAotD,GACE,OAAO3gD,KAAK4gD,eACd,CAKA,qBAAAC,CAAsBttD,GACpByM,KAAK4gD,gBAAkBrtD,CACzB,CASA,aAAAukD,GACE,OAAO93C,KAAK8gD,WACd,CAiBA,aAAAC,CAAcxtD,GAIZ,GAAIA,QAAJ,CAIA,GAAqB,iBAAVA,GAAsBvG,MAAMuG,GACrC,MAAM,IAAI1E,EAAe,gCACvBD,EAAa+a,wBAEjB,GAAIpW,EAAQ,GAAKA,EAXU,QAYzB,MAAM,IAAI1E,EAAe,6BACvBD,EAAa8E,wBAEjBsM,KAAK8gD,YAAcvtD,CATnB,MAFEyM,KAAK8gD,YAAcvtD,CAYvB,CAQA,eAAA4kD,GACE,OAAOn4C,KAAKghD,WACd,CAcA,eAAAC,CAAgB1tD,GACdyM,KAAKghD,YAAc3C,EAAkB,eAAgB9qD,EACvD,CAKA,aAAA8kD,GACE,OAAOr4C,KAAKkhD,eAAgB,CAC9B,CAQA,cAAAC,CAAe5tD,GACbyM,KAAKohD,gBAAgBrR,EAAU,cAAex8C,GAChD,CACA,eAAA6tD,CAAgB7tD,GACdyM,KAAKkhD,aAAe3tD,CACtB,CAUA,SAAA+/B,GACE,OAAOtzB,KAAKg8B,OACd,CAKA,SAAA2O,CAAUp3C,GACRyM,KAAKg8B,QAAUzoC,CACjB,CAMA,8BAAAumC,GACE,OAAO95B,KAAKqhD,oBACd,CAKA,8BAAApS,CAA+B17C,GAC7ByM,KAAKqhD,qBAAuB9tD,CAC9B,CAMA,mBAAAomC,CAAoBpmC,GAClByM,KAAK6+C,iBAAmBtrD,CAC1B,CAMA,mBAAAkmC,GAQE,YAA8B7oC,IAA1BoP,KAAK6+C,iBACAxzB,EAAaqO,aAEf15B,KAAK6+C,gBACd,CASA,kBAAAyC,GACE,OAAOthD,KAAKksB,SACd,CAKA,kBAAA0V,CAAmBruC,GACjByM,KAAKksB,UAAY34B,CACnB,CAWA,sBAAA4lC,GACE,OAAOn5B,KAAKqkC,gBACd,CAKA,sBAAA6K,CAAuB37C,GACrByM,KAAKqkC,iBAAmB9wC,CAC1B,CAMA,oBAAAguD,CAAqBhuD,GACnByM,KAAKwhD,kBAAoBjuD,CAC3B,CAOA,4BAAAokD,GACE,QAA8B/mD,IAA1BoP,KAAK6+C,kBACHxzB,EAAaqO,aAAaxD,GAAGl2B,KAAK6+C,kBACtC,OAGF,MAAM4C,EAAOzhD,KAAKwhD,mBAAqBxhD,KAAKqkC,iBAG5C,OAAOhZ,EAAav9B,KAAK,CAAE4zD,KAAM1hD,KAAK6+C,iBAAkB8C,MAAOF,GACjE,CAOA,sBAAAjL,GACE,OAAOx2C,KAAK4hD,oBACd,CAMA,sBAAAC,CAAuBtL,GACrBv2C,KAAK4hD,qBAAuBrL,CAC9B,CASA,gBAAAkC,GACE,IAA6B,IAAzBz4C,KAAK++C,eACP,MAAM,IAAIlwD,EAAe,2CACvBD,EAAa4a,mBAEjB,OAAOxJ,KAAK++C,cACd,CAMA,gBAAAxlB,CAAiBuoB,GACf9hD,KAAK++C,eAAiB+C,CACxB,CA+BA,MAAAC,CAAOC,GAGL,GAAIhiD,KAAKskC,OACP,MAAM,IAAIz1C,EAAe,mCACvBD,EAAagc,8BAEjB,GAAI5K,KAAK0+C,gBAAkBxoD,EAAwBk/C,OACjD,MAAM,IAAIvmD,EAAe,iCACvBD,EAAa+b,gCAEjB,IAAK3K,KAAKksB,UACR,MAAM,IAAIr9B,EAAe,0CACvBD,EAAa+b,gCAEjB,IAAK3K,KAAKksB,UAAU7Q,kBAAkB8B,OACpC,MAAM,IAAItuB,EAAe,yCACvBD,EAAa0a,uBAEjB,IAAKtJ,KAAKksB,UAAU/O,OAClB,MAAM,IAAItuB,EAAe,kDACvBD,EAAa4a,mBAEjB,GAAIxJ,KAAKksB,UAAUvP,gBAAgB6V,QACjC,MAAM,IAAI3jC,EAAe,6GACvBD,EAAa4a,mBAGjB,GAAIxJ,KAAKksB,UAAU7P,KAAK2hB,kBAGtB,YAFA/iC,EAAS,gEACP+E,KAAKqkC,kDAKT,MAAMjd,EAAoB46B,EAC1B,IAA0D,IAAtD5rD,EAAekY,OAAOpM,QAAQklB,GAChC,MAAM,IAAIv4B,EAAe,+CACvBD,EAAa4a,mBAIjB,MAAMy4C,EAA6BjiD,KAAKksB,UAAUvP,gBAAgB4R,2BAA2B9uB,MAAKge,GAAKA,IAAM2J,IAE7G,GAAIA,GAAqBhxB,EAAekxB,WAAa26B,EACnD,MAAM,IAAIpzD,EAAe,yBAAyBuH,EAAe+Y,OAAOiY,6CACtEx4B,EAAa4a,mBAIjBxJ,KAAKksB,UAAU8O,kBAAkBh7B,KAAKqkC,iBAAkBjd,GACxDpnB,KAAKskC,QAAS,CAChB,CAQA,aAAI4d,GACF,OAAOliD,KAAKskC,SAAU,CACxB,CAMA,0BAAA6d,GACE,GAAIniD,KAAKskC,OACP,MAAM,IAAIz1C,EAAe,wCACvBD,EAAagc,8BAEjB,GAAI5K,KAAK0+C,gBAAkBxoD,EAAwBk/C,OACjD,MAAM,IAAIvmD,EAAe,sCACvBD,EAAa+b,gCAEjB,IAAK3K,KAAKksB,UACR,MAAM,IAAIr9B,EAAe,+CACvBD,EAAa+b,gCAEjB,IAAK3K,KAAKksB,UAAU7Q,kBAAkB8B,OACpC,MAAM,IAAItuB,EAAe,8CACvBD,EAAa0a,uBAEjB,IAAKtJ,KAAKksB,UAAU/O,OAClB,MAAM,IAAItuB,EAAe,uDACvBD,EAAa4a,mBAEjB,GAAIxJ,KAAKksB,UAAUvP,gBAAgB6V,QACjC,MAAM,IAAI3jC,EAAe,6GACvBD,EAAa4a,kBAEnB,CAwBA,WAAA44C,GAEEpiD,KAAKmiD,6BAGDniD,KAAKksB,UAAU7P,KAAK2hB,kBACtB/iC,EAAS,gEACP+E,KAAKqkC,uDAKTrkC,KAAKksB,UAAU2O,eAAe76B,KAAKqkC,kBAAkB,GACrDrkC,KAAKskC,QAAS,EAChB,CAMA,gBAAAb,GAEEzjC,KAAKmiD,6BAGLniD,KAAKksB,UAAU2O,eAAe76B,KAAKqkC,kBAAkB,GACrDrkC,KAAKskC,QAAS,CAChB,CAQA,kBAAId,GACF,OAAOxjC,KAAKskC,SAAU,CACxB,CAeA,wBAAAuU,GACE,OAAO74C,KAAKqiD,kBAAmB,CACjC,CAiBA,yBAAAC,CAA0B/uD,GACxByM,KAAKuiD,2BAA2BxS,EAAU,yBAA0Bx8C,GACtE,CACA,0BAAAgvD,CAA2BhvD,GACzByM,KAAKqiD,gBAAkB9uD,CACzB,CASA,cAAAimD,GACE,OAAOx5C,KAAK4+C,YACd,CAMA,eAAA4D,CAAgBC,GACdziD,KAAK4+C,aAAe6D,CACtB,CAOA,cAAAxJ,GACE,OAAOj5C,KAAK0iD,gBAAiB,CAC/B,CAMA,aAAAnK,GACE,OAAOv4C,KAAK2iD,eAAgB,CAC9B,CAKA,cAAAjV,CAAen6C,GACbyM,KAAK2iD,aAAepvD,CACtB,CAMA,iBAAAqvD,CAAkBrvD,GAChByM,KAAK0iD,cAAgB3S,EAAU,iBAAkBx8C,EACnD,CAMA,oBAAA4jD,GACE,OAAOn3C,KAAK6iD,kBACd,CAMA,UAAAzJ,GACE,OAAOp5C,KAAK8iD,QACd,CAMA,UAAAC,CAAWxvD,GACTyM,KAAK8iD,SAAW1E,EAAsB,UAAW7qD,EAAOa,EAC1D,CAMA,WAAA0hD,GACE,OAAO91C,KAAKgjD,SACd,CAMA,WAAAC,CAAY1vD,GACVyM,KAAKgjD,UAAYvT,EAAkB,WAAYl8C,EACjD,CAOA,kBAAAyjD,GACE,OAAOh3C,KAAKkjD,gBACd,CAaA,kBAAAC,CAAmB5vD,GACjByM,KAAKkjD,iBAAmB7E,EAAkB,kBAAmB9qD,EAC/D,CAUA,iBAAA8iD,GACE,GAAIr2C,KAAKojD,qBACP,MAAMpjD,KAAKojD,qBAEb,OAAOpjD,KAAKqjD,eACd,CAQA,iBAAAC,CAAkB/vD,GACZA,aAAiB0E,EACnB+H,KAAKojD,qBAAuB7vD,GAE5ByM,KAAKqjD,gBAAkBhF,EAAkB,iBAAkB9qD,GAC3DyM,KAAKojD,0BAAuBxyD,EAE5BoP,KAAKujD,qBAAsB,EAE/B,CAoBA,UAAAlM,GACE,OAAOr3C,KAAK2+C,QACd,CAgBA,WAAA6E,GACE,OAAOxjD,KAAK8+C,SACd,CAsBA,UAAA2E,CAAWlwD,GACTyM,KAAK0jD,YAAYtgC,EAAa,UAAW7vB,EAAO+C,GAClD,CACA,WAAAotD,CAAYnwD,GACVyM,KAAK2+C,SAAWprD,CAClB,CAgBA,WAAAowD,CAAYpwD,GACV,GAAIA,QAAJ,CAIA,GAAqB,iBAAVA,GAAsBvG,MAAMuG,GACrC,MAAM,IAAI1E,EAAe,oCACvBD,EAAa+a,wBAEjB,GAAIpW,EAAQ,GAAKA,EAAQ,IACvB,MAAM,IAAI1E,EAAe,yBACvBD,EAAa8E,wBAEjBsM,KAAK4jD,aAAarwD,EATlB,MAFEyM,KAAK4jD,kBAAahzD,EAYtB,CAEA,YAAAgzD,CAAarwD,GACXyM,KAAK8+C,UAAYvrD,CACnB,CAMA,WAAAinD,GACE,OAAOx6C,KAAK6jD,SACd,CAMA,WAAAC,CAAYvwD,GACVyM,KAAK+jD,aAAatU,EAAkB,WAAYl8C,GAClD,CACA,YAAAwwD,CAAaxwD,GACXyM,KAAK6jD,UAAYtwD,CACnB,CAQA,aAAA+nD,GACE,OAAOt7C,KAAKgkD,WACd,CAOA,oBAAAC,GACE,OAAOjkD,KAAKgkD,YAAc9wD,EAAW8M,KAAKgkD,aAAehkD,KAAKgkD,WAChE,CASA,aAAAE,CAAc3wD,GACZ,MAAM4wD,EAAW1U,EAAkB,aAAcl8C,GACjDyM,KAAKgkD,YAAcG,EAAWnxD,SAASC,mBAAmBkxD,IAAaA,CACzE,CAOA,sBAAAC,CAAuB7wD,GACrByM,KAAKgkD,YAAcvU,EAAkB,qBAAsBl8C,EAC7D,CAMA,cAAA8wD,CAAe9wD,GACbyM,KAAKskD,gBAAgB7U,EAAkB,cAAel8C,GACxD,CACA,eAAA+wD,CAAgB/wD,GACdyM,KAAKukD,aAAehxD,CACtB,CAMA,cAAAkoD,GACE,OAAOz7C,KAAKukD,YACd,CAKA,uBAAIC,GACF,OAAOxkD,KAAKykD,kBAAoB,IAClC,CAKA,uBAAID,CAAoBE,GACtB1kD,KAAKykD,iBAAmBC,CAC1B,CAKA,aAAIppD,GACF,OAAO0E,KAAK2kD,UACd,CAKA,aAAIrpD,CAAUhN,GACZ0R,KAAK2kD,WAAar2D,CACpB,CAKA,yBAAIs2D,GACF,OAAO5kD,KAAKujD,sBAAuB,CACrC,CAKA,yBAAIqB,CAAsBrxD,GACxByM,KAAKujD,oBAAsBhwD,CAC7B,CAKA,0BAAIsxD,GACF,OAAO7kD,KAAK8kD,uBAAwB,CACtC,CAKA,0BAAID,CAAuBtxD,GACzByM,KAAK8kD,qBAAuBvxD,CAC9B,CAOA,kBAAAwmD,GACE,OAAO/5C,KAAK+kD,gBACd,CAOA,kBAAAC,CAAmBzxD,GACjByM,KAAK+kD,iBAAmB3G,EAAsB,kBAAmB7qD,EAAOwE,EAC1E,CAiBA,eAAAktD,CAAgBC,GACd,MAAMC,EAAsB/G,EAAsB,eAAgB8G,EAAWrtD,GAC7E,GAAIstD,QAIF,OAFAnlD,KAAKolD,qBAAuB,UAC5BplD,KAAKs/C,oBAAoB,MAI3Bt/C,KAAKu/C,qBAAqB,MAE1B,OADgB4F,EAAoBzkD,WAElC,KAAK5I,EAAakjD,IAChBh7C,KAAKg/C,aAAe3oD,EAAY2kD,IAChC,MACF,KAAKljD,EAAa8iD,OAChB56C,KAAKg/C,aAAe3oD,EAAYukD,OAChC,MACF,KAAK9iD,EAAautD,OAChBrlD,KAAKg/C,aAAe3oD,EAAY0nD,KAChC,MACF,QACE,MAAM,IAAIlvD,EAAe,uEAEvBD,EAAa+a,wBAEnB3J,KAAKolD,qBAAuBD,CAC9B,CAQA,eAAAxK,GACE,MAAMxkB,EAAUn2B,KAAKU,UACf4kD,EAAmBtlD,KAAKk7C,kBACxBqK,EAAyBD,EAAmBA,EAAiBp4D,OAAS,EAE5E,OAAIipC,IAAY9/B,EAAYynD,OAEnB,WAKgC,IAA9B99C,KAAKolD,uBAMdplD,KAAKolD,qBAFwB,IAA3BG,EAE0B,KAIApH,EAASqH,mBAAmBF,EAAkB,IATnEtlD,KAAKolD,qBAchB,CAYA,iBAAA/O,GACE,GAAIr2C,KAAKojD,qBACP,MAAMpjD,KAAKojD,qBAEb,OAAOpjD,KAAKqjD,eACd,CAcA,qBAAAlP,GAEE,OAAO7yC,MAAM6yC,uBACf,CAUA,kBAAAM,GAEE,OAAOnzC,MAAMmzC,oBACf,CAWA,mBAAAJ,GAEE,OAAO/yC,MAAM+yC,qBACf,CAQA,mBAAAoR,CAAoBjR,GAElBlzC,MAAMizC,qBAAqBC,EAC7B,CASA,UAAA9E,GAGE,OAAOpuC,MAAMouC,YACf,CAoBA,IAAA4N,CAAKzD,EAAQ1jD,EAAgBq/C,cAC3B,MAAMkQ,EAAatiC,EAAa,QAASy2B,EAAO1jD,GAChD,OAAO0+C,EAAgByI,KAAKt9C,KAAM0lD,EACpC,CAOA,KAAA9oC,GACE,OAAOA,EAAM5c,KAAMs+C,EACrB,CAMA,KAAAjlC,GAv7CF,IAAsBhO,IAw7CLrL,KAv7CAtG,OAAO8F,KAAK6L,GACpByC,SAAQ63C,UAAYt6C,EAAQs6C,KAu7CjClH,EAAYz+C,KACd,CASA,yBAAA4lD,GACgC5lD,KAv7CxBs0C,kBAAoB,IAw7C5B,EAQF7/C,EAAQoxD,wCAA0C,cAElDr6D,EAAOC,QAAQgJ,QAAUA,kBCxhDzB,MAAM,aAAE7F,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,KAAE/C,GAAS,EAAQ,OACnB,UAAE6P,GAAc,EAAQ,MACxB,oBAAE5E,EAAmB,gBAAE+uD,GAAoB,EAAQ,MAEnDh3D,EAAa,cAEbi3D,EAAwB,SAIxBC,EAAoB,qBACpBtsB,EAAe5tC,EAAK2/B,OAEpB,SACJzvB,EAAQ,QACRiqD,EAAO,aACP/sC,GACEvd,EAiBJ,MAAMpF,UAAkCQ,EAMtC,WAAAgJ,CAAYi1B,EAAiBkxB,GAC3B5kD,MAAM,CACJ6kD,kBAAmB,CACjBzE,KAAW1sB,EACX8F,UAAWorB,GAEbhmD,MAAO4lD,EAAgBM,QAOzBpmD,KAAKqmD,MAAQrxB,EAMbh1B,KAAKsmD,WAAaJ,CACpB,CAeA,OAAAK,CAAQC,GACNttC,EAAa,iCAAkCstC,EAAgCjwD,GAC/E,MAAMkwD,EAAMD,EACZ,IAAKxmD,KAAKqmD,MAAMplD,OAAOwlD,EAAIJ,OAAQ,CACjC,MAAMh7C,EAAU,wEAChB,MAAM,IAAIxc,EAAe,4CAA4C43D,EAAI14D,gCAEvEa,EAAawc,0BAA2BC,EAC5C,CACA,OAAIrL,KAAKsmD,WAAWI,GAAGD,EAAIH,YAClB,EACEtmD,KAAKsmD,WAAWxhB,GAAG2hB,EAAIH,aACxB,EAEH,CACT,CACA,CAAC,4CACC,MAAO,kCAAkCtmD,KAAKjS,aAChD,CASA,QAAAA,GACE,MACM44D,EADW73D,EAAWhB,KAAKkS,KAAKqmD,MAAMO,YAAYx1C,OAAOpR,KAAKsmD,WAAWM,cACpD74D,SAAS,OAEpC,MAAO,GAAGg4D,IAAwBY,EAAUxkD,UAAU,EAAG,MACtDwkD,EAAUxkD,UAAU,EAAG,OAAYwkD,EAAUxkD,UAAU,GAAI,OAC3DwkD,EAAUxkD,UAAU,GAAI,KAC7B,EASF,SAAS4yC,EAAgCn4C,GAEvC,OAAO,IAAIrG,EAA0BqG,EAAK8kD,KAAM9kD,EAAK+kD,MACvD,CAyFA,MAAMt2B,EAAe,CACrBA,WAxFA,SAAoBw7B,GAmBlB,GAjBA7qD,EAAS,KAAM6qD,GAgBfZ,EAAQ,KAAMY,EAAS35D,OArIR64D,GAqI0Bn3D,EAAa8E,uBAAwB,8BAAuCmzD,EAAS35D,WACzH25D,EAAS7pD,WAAW+oD,GAEvB,MAAM,IAAIl3D,EAAe,+DACvBD,EAAa8E,uBACb,OAAOmzD,0BAAiCd,KAE5C,MAAMe,EAAWD,EAAS1kD,UAAU4jD,GAA8BnzD,MAAM,KACxE,GAAwB,IAApBk0D,EAAS55D,QACc,IAAvB45D,EAAS,GAAG55D,QACW,KAAvB45D,EAAS,GAAG55D,QACW,IAAvB45D,EAAS,GAAG55D,QACW,IAAvB45D,EAAS,GAAG55D,OAEd,MAAM,IAAI2B,EAAe,+DACvBD,EAAa8E,uBACb,OAAOmzD,mDAWX,MAAME,EAAUD,EAAS7yD,KAAK,IAAI+c,OAMlC,GADAg1C,EAAkBgB,KAAK,KAClBhB,EAAkBgB,KAAKD,GAC1B,MAAM,IAAIl4D,EAAe,+DACvBD,EAAa8E,uBACb,OAAOmzD,gCAGX,IAAII,EACJ,IACEA,EAAan4D,EAAWhB,KAAKi5D,EAAS,MACxC,CAAE,MAAOnxC,GAEP,MAAM,IAAI/mB,EAAe,+DACvBD,EAAa8E,uBACb,OAAOmzD,kCAAyCjxC,EAAGvK,UACvD,CAEA,MAAM67C,EAASD,EAAaA,EAAW/5D,OAAS,EAChD,GAAe,KAAXg6D,EAEF,MAAM,IAAIr4D,EAAe,+DACvBD,EAAa8E,uBACb,OAAOmzD,4DAAmEK,KAG9E,MAAMxF,EAAO51D,EAAKmG,SAASg1D,EAAWE,aAAa,GAAIF,EAAWE,aAAa,IAAI,GACnF,GAAIzF,EAAKxrB,GAAGwD,GAEV,MAAM,IAAI7qC,EAAe,+DACvBD,EAAa8E,uBACb,OAAOmzD,yBAIX,OAAO9R,EAAgC,CAAE2M,OAAMC,MAFjC71D,EAAKmG,SAASg1D,EAAWE,aAAa,IAAKF,EAAWE,aAAa,IAAI,IAGvF,GAIA97B,EAAav9B,KAAOinD,EACpB1pB,EAAaqO,aAAeA,EAE5BluC,EAAOC,QAAQ8K,0BAA4BA,EAC3C/K,EAAOC,QAAQ4/B,aAAeA,kBCzN9B,MAAM,wBAAE/zB,GAA4B,EAAQ,OACtC,gBAAEC,GAAoB,EAAQ,OAC9B,gBAAEC,GAAoB,EAAQ,OAC9B,yBAAEonC,GAA6B,EAAQ,OACvC,qBAAEnnC,GAAyB,EAAQ,OACnC,iBAAEC,GAAqB,EAAQ,OAC/B,gBAAEC,GAAoB,EAAQ,OAC9B,yBAAEknC,GAA6B,EAAQ,MACvC,UAAEjnC,GAAc,EAAQ,MAE9BpM,EAAOC,QAAQ6L,wBAA0BA,EACzC9L,EAAOC,QAAQ8L,gBAAkBA,EACjC/L,EAAOC,QAAQ+L,gBAAkBA,EACjChM,EAAOC,QAAQmzC,yBAA2BA,EAC1CpzC,EAAOC,QAAQgM,qBAAuBA,EACtCjM,EAAOC,QAAQiM,iBAAmBA,EAClClM,EAAOC,QAAQkM,gBAAkBA,EACjCnM,EAAOC,QAAQozC,yBAA2BA,EAC1CrzC,EAAOC,QAAQmM,UAAYA,kBClB3B,MAAM,cAAEkgB,GAAkB,EAAQ,MAC5B,gBAAEtiB,GAAoB,EAAQ,OAC9B,eAAE3G,EAAc,aAAED,GAAiB,EAAQ,OAC3C,UAAEgJ,GAAc,EAAQ,MAExBooC,EAAW,CACfzQ,SAAS,EACTryB,UAAStM,GAGLw2D,EAAmB,CACvB,CAACxvD,EAAUuF,OAAiB,QAC5B,CAACvF,EAAU4nC,gBAAiB,kBAGxB6nB,EAAqC,CACzC,CAAC7xD,EAAgBgI,OAAkB,KACnC,CAAChI,EAAgB2H,OAAkBvF,EAAUuF,MAC7C,CAAC3H,EAAgB4H,iBAAkBxF,EAAUuF,OA8B/C,MAAM7F,UAAgCwgB,EAOpC,WAAA/X,CAAYunD,GACVhmD,MAAM0+B,EAnCV,SAAmCpjC,GACjC,GAAIA,GAAQA,EAAKC,MAAQD,EAAKM,MAAQ1H,EAAgB8Y,OAAOsE,SAAShW,EAAKM,MAAO,CAEhF,IADmBmqD,EAAmCzqD,EAAKM,MAEzD,MAAM,IAAIrO,EAAe,qCACA2G,EAAgB4J,SAASxC,EAAKM,oBAC9BtO,EAAa8a,oBAExC,MAAO,CACL7M,KAASD,EAAKC,KACdK,KAAStF,EAAUuF,MACnBoyB,QAAS3yB,EAAKM,OAAS1H,EAAgB4H,gBAE3C,CACA,OAAOR,CACT,CAoBoB2qD,CAA0BD,GAC5C,CAMA,OAAA5mD,GACE,OAAOV,KAAKE,KACd,CAMA,QAAIhD,GACF,OAAO8C,KAAKU,SACd,CACA,QAAIxD,CAAK3J,GACPyM,KAAKE,MAAQ3M,CACf,CAOA,SAAAksC,GACE,OAAOz/B,KAAKwnD,QACd,CAKA,WAAIj4B,GACF,OAAOvvB,KAAKy/B,WACd,CACA,WAAIlQ,CAAQh8B,GACVyM,KAAKwnD,SAAWj0D,CAClB,CAEA,CAAC,4CACC,MAAO,CACL,KAAWyM,KAAK9C,KAChB,QAAW8C,KAAKuvB,QAEpB,CAMA,QAAAxhC,GACE,OAAWiS,KAAKy/B,YAAsB,GAAR,OAAvB,YACA,GAAG2nB,EAAiBpnD,KAAKU,YAClC,EAIFlV,EAAOC,QAAQ6L,wBAA0BA,kBCnHzC,MAAM,KAAEiG,GAAS,EAAQ,MAyBzB/R,EAAOC,QAAQ8L,gBAAkBgG,EAAKE,IAfd,CAMtBi2B,UAAc,YAMd+zB,aAAc,iCCtBhB,MAAM,wBAAE3oB,GAA4B,EAAQ,MACtC,gBAAEtnC,GAAoB,EAAQ,OAC9B,UAAEI,GAAc,EAAQ,OAExB,iBACJmnC,EAAgB,WAChBC,EAAU,YACVE,EAAW,eACXwoB,GACE5oB,EAGEF,EAA2B,CAC/B,QAAA/9B,CAASsN,GACP,MAAMsP,EAAIshB,EAAiBvgC,KAAK,KAAM,kBAAmB2P,GACrDA,aAAoB3W,GACtBimB,EAAE,OAAQ,CAACiqC,IAEbjqC,EAAE,OAAQ,CAACyhB,EAAatnC,EAAW,cACnC6lB,EAAE,UAAW,CAACuhB,GAChB,GAGFxzC,EAAOC,QAAQmzC,yBAA2BA,kBCvB1C,MAAM,wBAAEtnC,GAA4B,EAAQ,OACtC,YAAElD,GAAgB,EAAQ,MAE1B4rC,EAAW,CACfnjC,UAASjM,EACT2+B,SAAS,GAcX,MAAM/3B,UAAwBF,EAU5B,WAAAyI,CAAYunD,GACVhmD,MAAMgmD,aAAqBlzD,EACjB,CAAEyI,KAAMyqD,EAAUzqD,KAAMK,KAAMoqD,EAAUpqD,MACxCxD,OAAOC,OAAO,CAAE,EAAGqmC,EAAUsnB,GACzC,CAMA,OAAA7mD,GACE,OAAOT,KAAKC,KACd,CACA,QAAIpD,GACF,OAAOmD,KAAKS,SACd,CACA,QAAI5D,CAAKtJ,GACPyM,KAAKC,MAAQ1M,CACf,CAEA,CAAC,4CACC,MAAO,CACL,KAAWyM,KAAKnD,KAChB,KAAWmD,KAAK9C,KAChB,QAAW8C,KAAKuvB,QAEpB,CAMA,QAAAxhC,GACE,MAAO,GAAGuT,MAAMvT,eAAeiS,KAAKS,WAAa,KACnD,CAQA,qBAAOknD,CAAe/qD,GACpB,OAAIA,EAAKC,KAAa,IAAIrF,EAAgBoF,GACnCtF,EAAwBsF,EACjC,EAGFpR,EAAOC,QAAQ+L,gBAAkBA,kBC7EjC,MAAM,KAAE+F,GAAS,EAAQ,MAuBzB/R,EAAOC,QAAQgM,qBAAuB8F,EAAKE,IAbd,CAK3BmqD,iBAAmB,mBAKnBC,kBAAmB,sCCpBrB,MAAM,KAAEtqD,GAAS,EAAQ,MAkDzB/R,EAAOC,QAAQiM,iBAAmB6F,EAAKE,IA7Bd,CAIvBs4B,KAAc,OAKd+xB,UAAc,YAKdC,QAAc,UAMdC,aAAc,eAMdC,OAAc,0BC/ChB,MAAM,wBAAEnpB,GAA4B,EAAQ,MACtC,gBAAEvnC,GAAoB,EAAQ,OAC9B,qBAAEE,GAAyB,EAAQ,OACnC,iBAAEC,GAAqB,EAAQ,OAE/B,iBACJqnC,EAAgB,WAChBC,EAAU,YACVE,EAAW,UACXC,EAAS,SACTC,GACEN,EAGED,EAA2B,CAC/B,QAAAh+B,CAASsN,GACP,MAAMsP,EAAIshB,EAAiBvgC,KAAK,KAAM,kBAAmB2P,QAC5Bvd,IAAzBud,EAASsnB,aAAsD,OAAzBtnB,EAASsnB,aACjDhY,EAAE,cAAe,CAACyhB,EAAaxnC,EAAkB,0BAEvB9G,IAAxBud,EAASolB,YAAoD,OAAxBplB,EAASolB,YAChD9V,EAAE,aAAc,CAACyhB,EAAa3nC,EAAiB,yBAExB3G,IAArBud,EAASynB,SAA8C,OAArBznB,EAASynB,SAC7CnY,EAAE,UAAW,CAAC0hB,GAAY,CAACC,EAAU,EAAGtB,OAAOC,yBAEjBntC,IAA5Bud,EAAS0nB,gBAA4D,OAA5B1nB,EAAS0nB,gBACpDpY,EAAE,iBAAkB,CAAC0hB,GAAY,CAACC,EAAU,EAAGtB,OAAOC,yBAE3BntC,IAAzBud,EAAS8lB,aAAsD,OAAzB9lB,EAAS8lB,aACjDxW,EAAE,cAAe,CAACuhB,SAEapuC,IAA7Bud,EAASomB,iBAA8D,OAA7BpmB,EAASomB,iBACrD9W,EAAE,kBAAmB,CAACyhB,EAAaznC,EAAsB,8BAErB7G,IAAlCud,EAAS2nB,sBAAwE,OAAlC3nB,EAAS2nB,sBAC1DrY,EAAE,uBAAwB,CAAC0hB,GAAY,CAACC,EAAU,EAAG,KAEzD,GAGF5zC,EAAOC,QAAQozC,yBAA2BA,wCCzC1C,MAAM,cAAE/mB,GAAkB,EAAQ,MAC5B,gBAAEvgB,GAAoB,EAAQ,OAC9B,qBAAEE,GAAyB,EAAQ,OACnC,iBAAEC,GAAqB,EAAQ,MAE/BsoC,EAAW,CACfvK,iBAAsB7kC,EACtB2iC,gBAAsB3iC,EACtBglC,aAAsBhlC,EACtBilC,oBAAsBjlC,EACtBqjC,iBAAsBrjC,EACtB2jC,qBAAsB3jC,EACtBklC,0BAAsBllC,GAYxB,MAAM+G,UAAwBmgB,EAE5B,WAAA/X,CAAYqQ,GACV9O,MAAM0+B,EAAU5vB,EAClB,CAYA,eAAIqlB,GACF,OAAOz1B,KAAKmiC,YACd,CACA,eAAI1M,CAAYoL,GACd7gC,KAAKmiC,aAAetB,CACtB,CAYA,cAAItN,GACF,OAAOvzB,KAAKgiC,aAAehC,EAASzM,UACtC,CACA,cAAIA,CAAWsN,GACb7gC,KAAKgiC,YAAcnB,CACrB,CAYA,WAAIjL,GACF,OAAO51B,KAAKkoD,QACd,CACA,WAAItyB,CAAQiL,GACV7gC,KAAKkoD,SAAWrnB,CAClB,CAOA,kBAAIhL,GACF,OAAO71B,KAAKmoD,eACd,CACA,kBAAItyB,CAAegL,GACjB7gC,KAAKmoD,gBAAkBtnB,CACzB,CAOA,eAAI5M,GACF,OAAOj0B,KAAKkiC,YACd,CACA,eAAIjO,CAAY4M,GACd7gC,KAAKkiC,aAAerB,CACtB,CAOA,mBAAItM,GACF,OAAOv0B,KAAKooD,gBACd,CACA,mBAAI7zB,CAAgBsM,GAClB7gC,KAAKooD,iBAAmBvnB,CAC1B,CASA,wBAAI/K,GACF,OAAO91B,KAAKqoD,qBACd,CACA,wBAAIvyB,CAAqB+K,GACvB7gC,KAAKqoD,sBAAwBxnB,CAC/B,CAEA,CAAC,4CACC,MAAO,CACL,YAAmBnpC,EAAiB0H,SAASY,KAAKy1B,aAClD,WAAmBl+B,EAAgB6H,SAASY,KAAKuzB,YACjD,QAAmBvzB,KAAK41B,QACxB,eAAmB51B,KAAK61B,eACxB,YAAmB71B,KAAKi0B,YACxB,gBAAmBj0B,KAAKu0B,gBACA98B,EAAqB2H,SAASY,KAAKu0B,iBACnC,YACxB,qBAAwBv0B,KAAK81B,qBAEjC,CAEA,QAAA/nC,GACE,OAAOiT,EAAahB,KACtB,EAGFxU,EAAOC,QAAQkM,gBAAkBA,kBCtJjC,MAAM,KAAE4F,GAAS,EAAQ,MAuBzB/R,EAAOC,QAAQmM,UAAY2F,EAAKE,IAbd,CAKhBN,MAAgB,QAKhBqiC,eAAgB,mCCpBlB,MAAM,UAAE7jC,GAAc,EAAQ,MACxB,oBAAE5E,EAAmB,gBAAE+uD,GAAoB,EAAQ,OACnD,6BAAE9uD,GAAiC,EAAQ,MAC3C,wBAAEsxD,GAA4B,EAAQ,OACtC,iBAAEjzD,GAAqB,EAAQ,MAGrC7J,EAAOC,QAAQsL,oBAAsBA,EACrCvL,EAAOC,QAAQuL,6BAA+BA,EAC9CxL,EAAOC,QAAQ68D,wBAA0BA,EACzC98D,EAAOC,QAAQq6D,gBAAkBA,EAYjCzwD,EAAiBkzD,mCAAqClzD,EAAiByG,eAAc,IACnF,IAAI9E,IAaN3B,EAAiBmzD,8BAAgCnzD,EAAiByG,eAAc2sD,GAC9EH,EAAwBE,8BAA8B7sD,EAAUud,aAAa,OAAQuvC,EAAU1jC,+CCrCjG,MAAM,KAAExnB,GAAS,EAAQ,MAMnBuoD,EAAkBvoD,EAAKE,IAAI,CAE/BirD,UAAW,EACXC,KAAW,EACXvC,MAAW,IA0Cb56D,EAAOC,QAAQsL,oBAtBf,MAOE,WAAAgJ,CAAYnD,GACVlD,OAAOC,OAAOqG,KAAMpD,QACDhM,IAAfoP,KAAKE,QAEPF,KAAKE,MAAQ4lD,EAAgB4C,UAEjC,CAIA,QAAA36D,GACE,OAAOiT,EAAahB,KACtB,GAIFxU,EAAOC,QAAQq6D,gBAAkBA,iBCrDjC,MAAM,oBAAE/uD,EAAmB,gBAAE+uD,GAAoB,EAAQ,MAgBzD,MAAM9uD,UAAqCD,EAIzC,WAAAgJ,GACEuB,MAAM,CACJpB,MAAO4lD,EAAgB4C,WAE3B,CACA,OAAQ,4CACN,MAAO,WACT,EAGFl9D,EAAOC,QAAQuL,6BAA+BA,kBC9B9C,MAAM,oBAAED,EAAmB,gBAAE+uD,GAAoB,EAAQ,MAgBzD,MAAMwC,UAAgCvxD,EAKpC,WAAAgJ,CAAYnD,GACV0E,MAAM,CACJ6kD,kBAAmBvpD,EAAKq7C,UACxB/3C,MAAmB4lD,EAAgB6C,MAEvC,CACA,CAAC,4CACC,MAAO,gBAAgB3oD,KAAKmmD,oBAC9B,CAOA,oCAAOqC,CAA8BC,GACnC,OAAO,IAAIH,EAAwBG,EACrC,EAGFj9D,EAAOC,QAAQ68D,wBAA0BA,iBCzCzC,MAAM,MAAExtD,GAAU,EAAQ,OACpB,YAAE8tD,GAAgB,EAAQ,OAC1B,SAAE/wD,GAAa,EAAQ,OACvB,aAAEC,GAAiB,EAAQ,OAC3B,gBAAEC,GAAoB,EAAQ,OAC9B,mBAAEC,GAAuB,EAAQ,OACjC,yBAAEC,GAA6B,EAAQ,OACvC,qBAAEC,GAAyB,EAAQ,MAEzC1M,EAAOC,QAAQqP,MAAQA,EACvBtP,EAAOC,QAAQm9D,YAAcA,EAC7Bp9D,EAAOC,QAAQoM,SAAWA,EAC1BrM,EAAOC,QAAQqM,aAAeA,EAC9BtM,EAAOC,QAAQsM,gBAAkBA,EACjCvM,EAAOC,QAAQuM,mBAAqBA,EACpCxM,EAAOC,QAAQwM,yBAA2BA,EAC1CzM,EAAOC,QAAQyM,qBAAuBA,kBChBtC,MAAM,oBAAE2wD,GAAwB,EAAQ,OAClC,WAAEC,GAAe,EAAQ,OACzB,mBAAEC,EAAkB,eAAEC,GAAmB,EAAQ,OAEjD,oBAAEC,GAAwBJ,GAC1B,mBAAErD,GAAuBuD,GACzB,eAAEG,GAAmBF,EAErBluD,EAAQ,CACZmuD,sBACAzD,qBACA0D,iBACAJ,cAGFt9D,EAAOC,QAAQqP,MAAQA,kBCfvB,MAAM,QAAElP,GAAY,EAAQ,OACtB,aAAEu9D,GAAiB,EAAQ,MAE3BC,EAAe,CACrBA,aAA4B,SAAsBC,EAAKC,GAErD,IAAIC,EAASF,GAAO,EAAK,IACrBG,EAAY,KAEZH,IAAQF,EAAav7C,KAAOy7C,IAAQF,EAAaM,QAEnDD,EAAY59D,EAAQgE,WAAW05D,EAAW,GAC1CC,GAAS,GACAD,EAAW,GAAK,KACzBE,EAAY59D,EAAQsF,UAAUo4D,EAAW,GACzCC,GAAS,GACAD,EAAW,GAAK,OACzBE,EAAY59D,EAAQyF,WAAWi4D,EAAW,GAC1CC,GAAS,IAETC,EAAY59D,EAAQgE,WAAW05D,EAAW,GAC1CC,GAAS,GAGX,OADY39D,EAAQsF,UAAUq4D,GAASC,CAEzC,GAEAh+D,EAAOC,QAAQ29D,aAAeA,YC1B9B,MAAMM,EAAgB,CAEtBA,WAA2B,SAAoBC,GAC7C,IAAIlsC,EAAIksC,EACR,MAAM7sD,EAAQ,GACd,IAAK,IAAIvQ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMq9D,EAASnsC,EAAI,IACnBA,EAAIogB,KAAKgsB,MAAMpsC,EAAI,KACnB3gB,EAAMgc,KAAK1rB,OAAOC,aAAau8D,GACjC,CAEA,OADA9sD,EAAM+Q,UACC/Q,EAAM7I,KAAK,GACpB,GAEAzI,EAAOC,QAAQi+D,cAAgBA,iBCf/B,MAAMI,EAAyB,EAAQ,MACjCC,EAAU,EAAQ,MAClB,aAAEX,GAAiB,EAAQ,OAC3B,aAAED,GAAiB,EAAQ,OAC3B,gBAAEpxD,GAAoB,EAAQ,OAE9B,aAAEiyD,GAAiBZ,EAEnBa,EAAY,CAMhB,SAAAC,CAAUC,GACR,MAAMC,EAAM,GACZ,KAAMD,aAAkBpyD,GACtB,OAAO,KAET,MAAMyH,EAAO2qD,EAAOnQ,UACpB,IAGIztD,EAHA89D,EAAW,KACXC,EAAc,KACdC,EAAa,KAEjB,IAAKh+D,EAAI,EAAGA,EAAIiT,EAAKtS,OAAQX,IAC3B89D,EAAWF,EAAOrN,SAASt9C,EAAKjT,IAC5B89D,IAEFE,EAAaR,EAAQ7vD,YAAYswD,cAAchrD,EAAKjT,IACpD+9D,EAAcN,EAAab,EAAa/7D,OAAQm9D,EAAWr9D,QAC3Do9D,GAAeC,EACfH,EAAItxC,KAAKwxC,GAGTR,EAAuBjB,oBAAoB4B,yBAAyBJ,EAAUD,IAGlF,OAAOA,EAAIn2D,KAAK,GAClB,GAGFzI,EAAOC,QAAQw+D,UAAYA,kBCzC3B,MAAMS,EAAiB,EAAQ,OACzB,QAAE9+D,GAAY,EAAQ,OACtB,aAAEw9D,GAAiB,EAAQ,OAC3B,cAAEM,GAAkB,EAAQ,OAC5B,UAAEO,GAAc,EAAQ,MACxB,aAAEU,GAAiB,EAAQ,OAC3B,WAAE7B,GAAe,EAAQ,OACzB,aAAEK,GAAiB,EAAQ,OAC3B,YAAEP,GAAgB,EAAQ,OAC1B,SAAE/wD,GAAa,EAAQ,OACvB,aAAEC,GAAiB,EAAQ,OAC3B,YAAEoC,GAAgB,EAAQ,MAE1B,aAAE8vD,GAAiBZ,GACnB,WAAEwB,GAAelB,GACjB,UAAEQ,GAAcD,GAChB,aAAEY,GAAiBF,GAEnB,cAAEH,GAAkBtwD,EAEpB4wD,EAASjtB,KAAKktB,IAAI,EAAG,IAQ3B,SAASN,EAAyBJ,EAAUD,GAC1C,KAAMC,aAAoBxyD,GACxB,OAAO,EAGT,MAAMtE,EAAQ82D,EAAStf,WACvB,IAAIigB,EAAW,KACX3B,EAAM,EACV,OAAQgB,EAAS3pD,WACf,KAAK5I,EAAamzD,KAChB5B,EAAMF,EAAa+B,QACnBF,EAAWp/D,EAAQsF,UAAUqC,EAAQ,EAAI,GACzC,MACF,KAAKuE,EAAaqzD,MAChB9B,EAAMF,EAAaiC,gBACnBJ,EAAWp/D,EAAQsF,UAAUqC,GAC7B,MACF,KAAKuE,EAAauzD,KAChBhC,EAAMF,EAAamC,QACnBN,EAAWp/D,EAAQsF,UAAUqC,GAC7B,MACF,KAAKuE,EAAayzD,OAChBlC,EAAMF,EAAaiC,gBACnBJ,EAAWp/D,EAAQyF,WAAWkC,GAC9B,MACF,KAAKuE,EAAa0zD,MAChBnC,EAAMF,EAAamC,QACnBN,EAAWp/D,EAAQyF,WAAWkC,GAC9B,MACF,KAAKuE,EAAa2zD,OAChBpC,EAAMF,EAAaiC,gBACnBJ,EAAWp/D,EAAQgE,WAAW2D,GAC9B,MACF,KAAKuE,EAAa4zD,MAChBrC,EAAMF,EAAamC,QACnBN,EAAWp/D,EAAQgE,WAAW2D,GAC9B,MACF,KAAKuE,EAAa6zD,OAChBtC,EAAMF,EAAaiC,gBACnBJ,EAAW59D,OAAOC,aAAa,GAAKD,OAAOC,aAAa,GAAKu9D,EAAWr3D,GACxE,MACF,KAAKuE,EAAa8zD,MAChBvC,EAAMF,EAAamC,QAEjBN,EADEz3D,GAAS,EACAnG,OAAOC,aAAa,GAAKD,OAAOC,aAAa,GAAKu9D,EAAWr3D,GAE5DnG,OAAOC,aAAa,KACpBD,OAAOC,aAAa,KACpBu9D,EAAWE,EAASv3D,GAElC,MACF,KAAKuE,EAAa+zD,MAChBxC,EAAMF,EAAa2C,KACnBd,EAAWp/D,EAAQyF,WAAWkC,EAAM9G,WAAW,IAC/C,MACF,KAAKqL,EAAautD,OAChBgE,EAAMF,EAAa/7D,OACnB49D,EAAWR,EA7DRx3D,SAASC,mBA6DuBM,KACnC,MACF,KAAKuE,EAAailD,UAChBsM,EAAMF,EAAa4C,UACnBf,EAAWz3D,EAAMxF,SAAS,UAC1B,MACF,KAAK+J,EAAak0D,UAChB3C,EAAMF,EAAa8C,MACnBjB,EAAWlC,EAAWoD,gBAAgB34D,GACtC,MACF,KAAKuE,EAAaq0D,WAChB9C,EAAMF,EAAa8C,MACnBjB,EAAWlC,EAAWsD,gBAAgB74D,GACtC,MACF,KAAKuE,EAAakjD,IAChBqO,EAAMF,EAAav7C,IACnBo9C,EAAWd,EAAU32D,GACrB,MACF,KAAKuE,EAAa8iD,OAChByO,EAAMF,EAAaM,OACnBuB,EAAWH,EAAat3D,GACxB,MACF,KAAKuE,EAAaslD,YAChBiM,EAAMF,EAAa/0D,YACfb,aAAiBm3D,EAAet2D,cAClC42D,EAAWp/D,EAAQsF,UAAU03D,EAAYr1D,EAAMmN,YAC3CnN,EAAMoN,YAEZ,MACF,KAAK7I,EAAau0D,SAChBhD,EAAMF,EAAamD,KACnBtB,EAAW,GACX,MACF,KAAKlzD,EAAay0D,QAChBvB,EAAW,KAIf,GAAiB,OAAbA,EAAmB,CACrB,MAAMwB,EAAMxC,EAAaX,EAAK2B,EAAS99D,QAGvC,OAFAk9D,EAAItxC,KAAK0zC,GACTpC,EAAItxC,KAAKkyC,IACF,CACT,CAEA,OAAO,CACT,CAQA,MAAMnC,EAAsB,CAC1BI,oBAPF,SAA6BoB,GAC3B,MAAMD,EAAM,GAEZ,OADAK,EAAyBJ,EAAUD,GAC5BA,EAAIn2D,KAAK,GAClB,EAIEw2D,4BAGFj/D,EAAOC,QAAQo9D,oBAAsBA,kBChJrC,MAAMiB,EAAyB,EAAQ,OACjC,mBAAE9xD,GAAuB,EAAQ,MAEjC2yD,EAAe,CACrBA,aAA4B,SAAsB8B,GAChD,MAAMrC,EAAM,GACZ,KAAMqC,aAAqBz0D,GACzB,OAAO,KAET,IAAIqyD,EAAW,KACf,KAAOoC,EAAUvP,WACfmN,EAAWoC,EAAUtP,UACjBkN,GACFP,EAAuBjB,oBAAoB4B,yBAAyBJ,EAAUD,GAGlF,OAAOA,EAAIn2D,KAAK,GAClB,GAEAzI,EAAOC,QAAQk/D,aAAeA,YCnB9B,MAAM7B,EAAa,CA0BjB,SAAA4D,CAAU/C,EAAKgD,EAAOC,GACpB,IAAInvC,EAAIksC,EACR,MAAMkD,GAAQ,GAAMF,EAAQ,GAAM,EAGlC,IAAI94D,EACAisB,EACA6lC,EACJ,GAAI34D,MAAMywB,GACRqC,GAAK,GAAK+sC,GAAQ,EAClBlH,EAAI,EACJ9xD,EAAI,OACC,GAAI4pB,IAAMqvC,KAAYrvC,KAAOqvC,IAClChtC,GAAK,GAAK+sC,GAAQ,EAClBlH,EAAI,EACJ9xD,EAAK4pB,EAAI,EAAK,EAAI,OACb,GAAU,IAANA,EACTqC,EAAI,EACJ6lC,EAAI,EACJ9xD,EAAK,EAAI4pB,IAAOqvC,IAAY,EAAI,OAKhC,GAHAj5D,EAAI4pB,EAAI,EACRA,EAAIogB,KAAKkvB,IAAItvC,GAETA,GAAKogB,KAAKktB,IAAI,EAAG,EAAI8B,GAAO,CAC9B,MAAMG,EAAKnvB,KAAKtwB,IAAIswB,KAAKgsB,MAAMhsB,KAAK9iB,IAAI0C,GAAKogB,KAAKovB,KAAMJ,GACxD/sC,EAAIktC,EAAKH,EACTlH,EAAKloC,EAAIogB,KAAKktB,IAAI,EAAG6B,EAAQI,GAAOnvB,KAAKktB,IAAI,EAAG6B,EAClD,MACE9sC,EAAI,EACJ6lC,EAAIloC,EAAIogB,KAAKktB,IAAI,EAAG,EAAI8B,EAAOD,GAKnC,MAAMM,EAAO,GACb,IAAK,IAAI3gE,EAAIqgE,EAAOrgE,EAAGA,GAAK,EAC1B2gE,EAAKp0C,KAAK6sC,EAAI,EAAI,EAAI,GACtBA,EAAI9nB,KAAKgsB,MAAMlE,EAAI,GAErB,IAAK,IAAIp5D,EAAIogE,EAAOpgE,EAAGA,GAAK,EAC1B2gE,EAAKp0C,KAAKgH,EAAI,EAAI,EAAI,GACtBA,EAAI+d,KAAKgsB,MAAM/pC,EAAI,GAErBotC,EAAKp0C,KAAKjlB,EAAI,EAAI,GAClBq5D,EAAKr/C,UACL,IAAIhgB,EAAMq/D,EAAKj5D,KAAK,IAGpB,MAAM6I,EAAQ,GACd,KAAOjP,EAAIX,QACT4P,EAAMgc,KAAKq0C,SAASt/D,EAAIsU,UAAU,EAAG,GAAI,IACzCtU,EAAMA,EAAIsU,UAAU,GAEtB,OAAOrF,CACT,EAEA,WAAAswD,CAAYtwD,EAAO6vD,EAAOC,GAExB,MAAMM,EAAO,GACb,IAAK,IAAI3gE,EAAIuQ,EAAM5P,OAAQX,EAAGA,GAAK,EAAG,CACpC,IAAIq9D,EAAQ9sD,EAAMvQ,EAAI,GACtB,IAAK,IAAI8gE,EAAI,EAAGA,EAAGA,GAAK,EACtBH,EAAKp0C,KAAK8wC,EAAQ,EAAI,EAAI,GAC1BA,IAAU,CAEd,CACAsD,EAAKr/C,UACL,MAAMhgB,EAAMq/D,EAAKj5D,KAAK,IAGhB44D,GAAQ,GAAMF,EAAQ,GAAM,EAC5B94D,EAAIs5D,SAASt/D,EAAIsU,UAAU,EAAG,GAAI,IAAM,EAAI,EAC5C2d,EAAIqtC,SAASt/D,EAAIsU,UAAU,EAAG,EAAIwqD,GAAQ,GAC1ChH,EAAIwH,SAASt/D,EAAIsU,UAAU,EAAIwqD,GAAQ,GAG7C,OAAI7sC,KAAO,GAAK6sC,GAAS,EACV,IAANhH,EAAU2H,IAAMz5D,GAAIi5D,KAEzBhtC,EAAI,EACCjsB,EAAIgqC,KAAKktB,IAAI,EAAGjrC,EAAI+sC,IAAS,EAAIlH,EAAI9nB,KAAKktB,IAAI,EAAG6B,IAEhD,IAANjH,EACK9xD,EAAIgqC,KAAKktB,IAAI,IAAK8B,EAAO,KAAOlH,EAAI9nB,KAAKktB,IAAI,EAAG6B,IAElD,CACT,EACA,YAAAW,CAAa1/D,GACX,MAAMiP,EAAQ,GACd,IAAK,IAAIvQ,EAAI,EAAGA,EAAIsB,EAAIX,OAAQX,IAAOuQ,EAAMgc,KAAyB,IAApBjrB,EAAIpB,WAAWF,IACjE,OAAOuQ,CACT,EACA,YAAA0wD,CAAa1wD,GACX,MAAMjP,EAAM,GACZ,IAAK,IAAItB,EAAI,EAAGA,EAAIuQ,EAAM5P,OAAQX,IAAOsB,EAAIirB,KAAK1rB,OAAOC,aAAwB,IAAXyP,EAAMvQ,KAC5E,OAAOsB,EAAIoG,KAAK,GAClB,EACA,iBAAAw5D,CAAkBx/D,GAAK,OAAO+R,KAAKotD,YAAYptD,KAAKutD,aAAat/D,GAAI,GAAI,GAAK,EAC9E,eAAAm+D,CAAgB3uC,GAAK,OAAOzd,KAAKwtD,aAAaxtD,KAAK0sD,UAAUjvC,EAAG,GAAI,IAAM,EAC1E,iBAAAiwC,CAAkBz/D,GAAK,OAAO+R,KAAKotD,YAAYptD,KAAKutD,aAAat/D,GAAI,EAAG,GAAK,EAC7E,eAAAi+D,CAAgBzuC,GAAK,OAAOzd,KAAKwtD,aAAaxtD,KAAK0sD,UAAUjvC,EAAG,EAAG,IAAM,GAG3EjyB,EAAOC,QAAQq9D,WAAaA,kBClI5B,MAAM,uBAAErtD,EAAsB,gBAAEjG,EAAe,MAAEoG,GAAU,EAAQ,OAC7D,UAAEwd,EAAS,SAAE0S,GAAa,EAAQ,OAClC,YAAE88B,GAAgB,EAAQ,OAC1B,SAAE/wD,GAAa,EAAQ,OACvB,aAAEC,GAAiB,EAAQ,OAC3B,MAAErC,GAAU,EAAQ,MAEpBk4D,EAAmB,CACzBA,iBAAoC,SAA0BC,EAASzyD,EAAKlL,GAC1E,MAAM49D,EAAWD,EAAQE,UAAU3yD,GAC7B4yD,EAAYH,EAAQ7/D,SAAS,SAAUoN,EAAM,EAAGA,EAAMlL,GAG5D,IAAIg/B,EAAcxzB,EAAuB4B,2BAA2B0wD,GACpE,GAAInF,EAAY35B,EAAY/xB,QAAU2wD,EAMpC,GAAIjF,EAAYpzD,EAAgB2H,SAAW0wD,EACzC5+B,EAAcrzB,EAAMS,oBAAoB0xD,OACnC,IAAInF,EAAYpzD,EAAgBgI,SAAWqwD,EAOhD,OADA/hC,EAAS,gDAAgD+hC,mBAA0BE,QAAgB9+B,EAAY/xB,QACxG,KANmG+xB,EAAY/xB,KAGtH+xB,EAAc,IAAIx5B,EAAMs4D,EAI1B,CAEF,OAAOl2D,EAASm2D,OAAOl2D,EAAaslD,YAAanuB,EACnD,GAEAzjC,EAAOC,QAAQkiE,iBAAmBA,kBCnClC,MAAM,aAAEM,GAAiB,EAAQ,OAE3B,0BAAEC,GAA8BD,EAEhCE,EAAmB,CAGzBA,iBAAoC,SAA0BP,EAAS3wD,GACrE,IAAI9B,EAAM8B,EACV,MAAMmxD,EAAUR,EAAQE,UAAU3yD,GAC5BkzD,GAAsB,IAAVD,IAAmB,EAC/BE,EAA8B,GAAR,EAAVF,GAClBjzD,IACA,MAAMozD,EAAUL,EAA0BN,EAASzyD,EAAKmzD,GACxDnzD,GAAOmzD,EAEP,MAAO,CAACD,EAAUE,EADCA,GAAW,EAAID,GACKnzD,EAAM8B,EAC/C,GAEAzR,EAAOC,QAAQ0iE,iBAAmBA,kBCnBlC,MAAM,SAAEt2D,GAAa,EAAQ,OACvB,aAAEC,GAAiB,EAAQ,MAE3B02D,EAAa,CACnBA,gBAA6B,SAAyBpE,EAAKjvD,EAAKlL,GAC9D,OAAQA,GACN,KAAK,EACH,OAAO4H,EAASm2D,OAAOl2D,EAAak0D,UAAW5B,EAAIqE,YAAYtzD,IACjE,KAAK,EACH,OAAOtD,EAASm2D,OAAOl2D,EAAaq0D,WAAY/B,EAAIsE,aAAavzD,IACnE,QACE,OAAOtD,EAASm2D,OAAOl2D,EAAay0D,QAASnC,EAAIr8D,SAAS,SAAUoN,EAAKA,EAAMlL,IAErF,GAEAzE,EAAOC,QAAQ+iE,WAAaA,kBCf5B,MAAM1iE,EAAO,EAAQ,OACf,SAAE+L,GAAa,EAAQ,OACvB,aAAEC,GAAiB,EAAQ,OAC3B,yBAAEG,GAA6B,EAAQ,OACvC,qBAAEC,GAAyB,EAAQ,OAEjC81D,OAAQW,GAAgB92D,EAE1Bo2D,EAAe,CAGrBA,0BAAyC,SAAmCL,EAASzyD,EAAKlL,GACxF,QAAI,CAAC,EAAG,EAAG,EAAG,GAAG2iB,SAAS3iB,IACjB29D,EAAQgB,WAAWzzD,EAAKlL,EAGnC,EAGAg+D,kBAAiC,SAA2BY,EAAUjB,EAASzyD,EAAKlL,GAClF,IAAI3B,EAAM,EAEV,OAAQ2B,GACN,KAAK,EACH,OAAI4+D,GACFvgE,EAAMs/D,EAAQkB,SAAS3zD,GAChBwzD,EAAY72D,EAAauzD,KAAM/8D,KAExCA,EAAMs/D,EAAQE,UAAU3yD,GACjBwzD,EAAY72D,EAAaqzD,MAAO78D,IAEzC,KAAK,EACH,OAAIugE,GACFvgE,EAAMs/D,EAAQmB,YAAY5zD,GACnBwzD,EAAY72D,EAAa0zD,MAAOl9D,KAEzCA,EAAMs/D,EAAQoB,aAAa7zD,GACpBwzD,EAAY72D,EAAayzD,OAAQj9D,IAE1C,KAAK,EACH,OAAIugE,GACFvgE,EAAMs/D,EAAQqB,YAAY9zD,GACnBwzD,EAAY72D,EAAa4zD,MAAOp9D,KAEzCA,EAAMs/D,EAAQzG,aAAahsD,GACpBwzD,EAAY72D,EAAa2zD,OAAQn9D,IAE1C,KAAK,EACH,CACE,IAAImQ,EAAQ,KACZ,MAAMywD,EACJpjE,EAAKmG,SAAS27D,EAAQzG,aAAahsD,EAAM,GAAIyyD,EAAQzG,aAAahsD,IAAO0zD,GACvEK,EAAUC,gBAAkB,KAC9B1wD,EAAQ,IAAIxG,EAAyB,yBACnCC,EAAqBokD,8BACrBsR,EAAQ7/D,SAAS,SAAUoN,EAAKlL,KAEpC3B,EAAM4gE,EAAUE,WAChB,MAAMC,EAAQV,EAAYE,EAAW/2D,EAAa8zD,MAAQ9zD,EAAa6zD,OAAQr9D,GAK/E,OAJImQ,GACF4wD,EAAMC,SAAS7wD,GAGV4wD,CACT,CAEF,QACE,OAAO,KAEb,GAEA7jE,EAAOC,QAAQwiE,aAAeA,kBCvE9B,MAAMsB,EAAwB,EAAQ,OAChC,UAAEr0D,GAAc,EAAQ,OACxB,iBAAEizD,GAAqB,EAAQ,OAC/B,aAAEhF,GAAiB,EAAQ,OAC3B,SAAEtxD,GAAa,EAAQ,OACvB,aAAEC,GAAiB,EAAQ,OAC3B,gBAAEC,GAAoB,EAAQ,MAE9By3D,EAAW,CACjBA,WAAsB,SAAoB5B,EAAS3wD,EAAQwyD,GACzD,MAAMC,EAAS,IAAI33D,EACnB,IAAIoD,EAAM8B,EACV,KAAO9B,EAAM8B,EAASwyD,GAAS,CAE7B,MAAME,EAAiBxB,EAAiByB,iBAAiBhC,EAASzyD,GAGlE,GAFAA,GAAOw0D,EAAe,GAElBA,EAAe,KAAOxG,EAAa/7D,OAIrC,OAFA8N,EAAU,gFACVA,EAAU,gBAAgBy0D,EAAe,MAClC93D,EAASm2D,OAAOl2D,EAAakjD,IAAK,MAE3C,MAAM6U,EAAYjC,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAMw0D,EAAe,GAAK,GAC5Ex0D,GAAOw0D,EAAe,GAItB,MAAMG,EAAmB3B,EAAiByB,iBAAiBhC,EAASzyD,GAC9D40D,EAAaR,EAAsBxG,mBAAmBvD,mBAAmBoI,EAASzyD,GACxFA,GAAO20D,EAAiB,GACpBC,GACFL,EAAOM,SAASH,EAAWE,EAE/B,CACA,OAAOl4D,EAASm2D,OAAOl2D,EAAakjD,IAAK0U,EAC3C,GAEAlkE,EAAOC,QAAQ+jE,SAAWA,kBCtC1B,MAAM,QAAE5jE,GAAY,EAAQ,OACtB,UAAEwtB,GAAc,EAAQ,OACxB,iBAAEu0C,GAAqB,EAAQ,OAC/B,iBAAEQ,GAAqB,EAAQ,OAC/B,WAAEK,GAAe,EAAQ,OACzB,aAAEP,GAAiB,EAAQ,OAC3B,SAAEuB,GAAa,EAAQ,OACvB,YAAES,GAAgB,EAAQ,OAC1B,aAAE9G,GAAiB,EAAQ,OAC3B,SAAEtxD,GAAa,EAAQ,OACvB,aAAEC,GAAiB,EAAQ,OAE3B,WACJ5E,GACEtH,GACE,iBAAEgkE,GAAqBzB,GACvB,gBAAE+B,GAAoB1B,GACtB,kBAAE2B,GAAsBlC,GACxB,WAAEmC,GAAeZ,GACjB,cAAEa,GAAkBJ,GACpB,iBAAEK,GAAqB3C,EAEvB5E,EAAqB,CAEzB,kBAAAvD,CAAmBoI,EAAS3wD,GAC1B,MAAMszD,EAAcX,EAAiBhC,EAAS3wD,GAC9C,IAAKszD,EAEH,OAAO,KAGT,MAAMp1D,EAAM8B,EAASszD,EAAY,GAG3BC,EAAaD,EAAY,GAE/B,OAAQA,EAAY,IAClB,KAAKpH,EAAamD,KAChB,OAAOz0D,EAASm2D,OAAOl2D,EAAau0D,SAAU,MAChD,KAAKlD,EAAa+B,QAChB,OAAOrzD,EAASm2D,OAAOl2D,EAAamzD,KAAiC,IAA3B2C,EAAQE,UAAU3yD,IAC9D,KAAKguD,EAAamC,QAChB,OAAO6E,GAAkB,EAAMvC,EAASzyD,EAAKq1D,GAC/C,KAAKrH,EAAaiC,gBAChB,OAAO+E,GAAkB,EAAOvC,EAASzyD,EAAKq1D,GAChD,KAAKrH,EAAa8C,MAChB,OAAOiE,EAAgBtC,EAASzyD,EAAKq1D,GACvC,KAAKrH,EAAa2C,KAChB,OAAOj0D,EAASm2D,OAAOl2D,EAAa+zD,MACbz+D,OAAOC,aAAaugE,EAAQoB,aAAa7zD,KAClE,KAAKguD,EAAa4C,UAChB,OAAOl0D,EAASm2D,OAAOl2D,EAAailD,UACb6Q,EAAQv7D,MAAM8I,EAAKA,EAAMq1D,IAClD,KAAKrH,EAAa/7D,OAEhB,OAAOyK,EAASm2D,OAAOl2D,EAAautD,OACbnyD,EAAW06D,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAMq1D,EAAa,KACvF,KAAKrH,EAAa/0D,YAChB,OAAOk8D,EAAiB1C,EAASzyD,EAAKq1D,GACxC,KAAKrH,EAAasH,WAChB,OAAO54D,EAASm2D,OAAOl2D,EAAa44D,YAAa9C,EAAQv7D,MAAM8I,EAAKA,EAAMq1D,IAC5E,KAAKrH,EAAav7C,IAChB,OAAOwiD,EAAWxC,EAASzyD,EAAKq1D,GAClC,KAAKrH,EAAaM,OAChB,OAAO4G,EAAczC,EAASzyD,EAAKq1D,GACrC,QAEE,OAAO34D,EAASm2D,OAAOl2D,EAAay0D,QACbqB,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAMq1D,IAEnE,GAGIxH,EAAiB,CACrBE,eAAer7D,GACM,cACDC,KAAKD,EAAK,WAIhCrC,EAAOC,QAAQs9D,mBAAqBA,EACpCv9D,EAAOC,QAAQu9D,eAAiBA,kBCjFhC,MAAMuG,EAAwB,EAAQ,OAChC,iBAAEpB,GAAqB,EAAQ,OAC/B,SAAEt2D,GAAa,EAAQ,OACvB,aAAEC,GAAiB,EAAQ,OAC3B,mBAAEE,GAAuB,EAAQ,MAEjCi4D,EAAc,CACpBA,cAA4B,SAAuBrC,EAAS3wD,EAAQwyD,GAClE,MAAMkB,EAAY,IAAI34D,EACtB,IAAImD,EAAM8B,EACV,KAAO9B,EAAM8B,EAASwyD,GAAS,CAC7B,MAAMK,EAAmB3B,EAAiByB,iBAAiBhC,EAASzyD,GAC9D40D,EAAaR,EAAsBxG,mBAAmBvD,mBAAmBoI,EAASzyD,GACxFA,GAAO20D,EAAiB,GACpBC,GACFY,EAAUX,SAASD,EAEvB,CACA,OAAOl4D,EAASm2D,OAAOl2D,EAAa8iD,OAAQ+V,EAC9C,GAEAnlE,EAAOC,QAAQwkE,YAAcA,kBCrB7B,MAAM,KAAE1yD,GAAS,EAAQ,MAqBzB/R,EAAOC,QAAQ09D,aAAe5rD,EAAKE,IAfd,CACnB6uD,KAAiB,EACjBpB,QAAiB,EACjBI,QAAiB,EACjBF,gBAAiB,EACjBa,MAAiB,EACjBH,KAAiB,EACjBC,UAAiB,EACjB3+D,OAAiB,EACjBgH,YAAiB,EACjBq8D,WAAiB,EACjB7iD,IAAiB,GACjB67C,OAAiB,qBClBnB,MAAM,gBAAEj0D,GAAoB,EAAQ,OAC9B,KAAE+H,GAAS,EAAQ,MASnBqrD,EAAc,CAClB,CAACpzD,EAAgBgI,OAAkB,EACnC,CAAChI,EAAgB2H,OAAkB,EACnC,CAAC3H,EAAgB4H,iBAAkB,GAGrC5R,EAAOC,QAAQm9D,YAAcrrD,EAAKE,IAAImrD,mBChBtC,MAAM,KAAErrD,GAAS,EAAQ,MAgIzB/R,EAAOC,QAAQqM,aAAeyF,EAAKE,IAxHd,CAKnBwtD,KAAa,EAKbE,MAAa,EAKbE,KAAa,EAKbE,OAAa,EAKbC,MAAa,EAKbC,OAAa,EAKbC,MAAa,EAObC,OAAa,EAObC,MAAa,EAKbC,MAAa,EAKbxG,OAAa,GAkBbtI,UAAa,GAKbiP,UAAa,GAKbG,WAAa,GAKbnR,IAAa,GAKbJ,OAAa,GAKbwC,YAAa,GAKbiP,SAAa,GAKbE,QAAa,GAKbmE,YAAa,qBC7Hf,MAAM/yD,EAAsB,EAAQ,OAC9B,QAAE/R,GAAY,EAAQ,OACtB,aAAEkM,GAAiB,EAAQ,OAC3B,iBAAE84D,GAAqB,EAAQ,MAE/B,iBAAEt9D,GAAqB1H,GACvB,eAAEkS,GAAmBH,EAuB3B,MAAM9F,EASJ,WAAAkI,CAAY7C,EAAOpF,EAAau0D,SAAU94D,EAAQ,MAChD,MAAMkiB,EAAMm7C,EAAiB1zD,EAAM3J,GACnC,GAAY,OAARkiB,EACF,MAAM,EAERzV,KAAKE,MAAQhD,EACTA,IAASpF,EAAailD,UACxB/8C,KAAK6wD,OAASv9D,EAAiBC,GAE/ByM,KAAK6wD,OAASt9D,EAEhByM,KAAKc,YAASlQ,CAChB,CAMA,OAAA8P,GACE,OAAOV,KAAKE,KACd,CAQA,QAAA6qC,GACE,QAAoBn6C,IAAhBoP,KAAKc,OACP,MAAOd,KAAW,OAEpB,OAAOA,KAAK8wD,iBACd,CASA,eAAAA,GACE,YAAoBlgE,IAAhBoP,KAAKc,OACAd,KAAKc,OAEVd,KAAKE,QAAUpI,EAAailD,WAAaj/C,EAAevK,MAAM4jB,kBACzDnX,KAAK6wD,OAAO9iE,SAAS,UAEvBiS,KAAK6wD,MACd,CAUA,QAAAvB,CAAS75C,GACPzV,KAAKc,OAAS2U,CAChB,CAEA,QAAA1nB,GACE,MAAO,kBAAkBiS,KAAKE,eAAeF,KAAK6wD,SACpD,CAWA,aAAO7C,CAAO9wD,EAAM3J,GAClB,OAAO,IAAIsE,EAASqF,EAAM3J,EAC5B,EAIF/H,EAAOC,QAAQoM,SAAWA,kBCzH1B,MAAM,aAAEjJ,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,SAAEgJ,GAAa,EAAQ,MAqE7BrM,EAAOC,QAAQsM,gBA9Df,MAIE,WAAAgI,GACEC,KAAK+wD,KAAO,EACd,CAMA,OAAA/W,GACE,OAAOtgD,OAAO8F,KAAKQ,KAAK+wD,KAC1B,CAOA,QAAAjU,CAAS7uC,GACP,OAAOjO,KAAK+wD,KAAK9iD,EACnB,CAMA,WAAA+iD,CAAY/iD,UACHjO,KAAK+wD,KAAK9iD,EACnB,CAkBA,QAAA+hD,CAAS/hD,EAAKgjD,EAAa19D,OAAQ3C,GACjC,GAAIqgE,aAAuBp5D,EACzBmI,KAAK+wD,KAAK9iD,GAAOgjD,MADnB,CAGO,QAAqB,IAAV19D,EAIlB,MAAM,IAAI1E,EAAe,uEACvBD,EAAa8a,oBAJb1J,KAAK+wD,KAAK9iD,GAAOpW,EAASm2D,OAAOiD,EAAa19D,EAEhD,CAGF,mBCnEF,MAAM29D,EAAc,EAAQ,OACtB,aAAEtiE,EAAY,eAAEC,GAAmB,EAAQ,MA4FjDrD,EAAOC,QAAQuM,mBApFf,MAIE,WAAA+H,GACEC,KAAKmxD,QAAU,GACfnxD,KAAKoxD,WAAY,EACjBpxD,KAAKqxD,QAAU,CACjB,CAOA,OAAAnU,GACE,OAAQl9C,KAAKmxD,QAAQjkE,OAAS8S,KAAKqxD,OACrC,CAOA,OAAAlU,GACE,OAAQn9C,KAAKqxD,QAAUrxD,KAAKmxD,QAAQjkE,OAAU8S,KAAKmxD,QAAQnxD,KAAKqxD,gBAAazgE,CAC/E,CAOA,MAAAqsD,GACEj9C,KAAKqxD,QAAU,CACjB,CA+BA,QAAArB,CAASiB,EAAa19D,OAAQ3C,GAC5B,GAAKoP,KAAKoxD,UAEV,GAAIH,aAAuBC,EAAYr5D,SACrCmI,KAAKmxD,QAAQr4C,KAAKm4C,OADpB,CAKA,QAAqB,IAAV19D,EAKX,MAAM,IAAI1E,EAAe,uEACvBD,EAAa8a,oBALb1J,KAAKmxD,QAAQr4C,KAAKo4C,EAAYr5D,SAASm2D,OAAOiD,EAAa19D,GAH7D,CASF,mBC1FF,MAAMkiD,EAAW,EAAQ,MACnB,YAAEpyC,GAAgB,EAAQ,MA4DhC7X,EAAOC,QAAQwM,yBA1Cf,cAAuCoL,EAOrC,WAAAtD,CAAYsL,EAASC,EAASgmD,GAQ5BhwD,MAAM,sBAAuB+J,GAM7BrL,KAAKsL,QAAUA,EACftL,KAAKsxD,WAAaA,GAAc,EAClC,CAEA,OAAAC,GACE,OAAOjwD,MAAMiwD,QAAQ,CACnBjmD,QAAY,KACZgmD,WAAY7zC,GAAKg4B,EAASthD,MAAM2F,gBAAgB2jB,GAAG,EAAO,IAE9D,CAEA,UAAA4+B,GACE,OAAOr8C,KAAKsL,OACd,CAEA,aAAAixC,GACE,OAAOv8C,KAAKsxD,UACd,mBCzDF,MAAM,KAAE/zD,GAAS,EAAQ,MAkBzB/R,EAAOC,QAAQyM,qBAAuBqF,EAAKE,IAVd,CAO3B6+C,8BAA+B,mBCfjC,MAAMoO,EAAiB,EAAQ,MACzB8G,EAAqB,EAAQ,MAC7BC,EAAwB,EAAQ,MAChCC,EAAc,EAAQ,MACtB,aAAE9iE,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,aAAEiJ,GAAiB,EAAQ,MAE3B65D,EAAY,MAChB,MAAM7gE,EAAS,GAef,OAdAA,EAAOgH,EAAamzD,MAAQ,UAC5Bn6D,EAAOgH,EAAaqzD,OAAS,SAC7Br6D,EAAOgH,EAAauzD,MAAQ,SAC5Bv6D,EAAOgH,EAAayzD,QAAU,SAC9Bz6D,EAAOgH,EAAa0zD,OAAS,SAC7B16D,EAAOgH,EAAa2zD,QAAU,SAC9B36D,EAAOgH,EAAa4zD,OAAS,SAC7B56D,EAAOgH,EAAa6zD,QAAU,SAC9B76D,EAAOgH,EAAa8zD,OAAS,SAC7B96D,EAAOgH,EAAa+zD,OAAS,SAC7B/6D,EAAOgH,EAAautD,QAAU,SAC9Bv0D,EAAOgH,EAAailD,WAAa,SACjCjsD,EAAOgH,EAAak0D,WAAa,SACjCl7D,EAAOgH,EAAaq0D,YAAc,SAC3Br7D,CACR,EAjBiB,GAmBlB,SAAS8gE,EAAqBC,GAC5B,OAAO,IAAIhjE,EACD,2DAA2DgjE,IAC3DjjE,EAAa+a,uBACzB,CAyBAne,EAAOC,QAAQmlE,iBAvBf,SAA0B1zD,EAAM3J,GAC9B,OAAIo+D,EAAUz0D,KACa,YAApBy0D,EAAUz0D,IAAwC,kBAAV3J,GAChB,WAApBo+D,EAAUz0D,IAAuC,iBAAV3J,GACnB,WAApBo+D,EAAUz0D,IAAuC,iBAAV3J,GACvCq+D,EAAqBD,EAAUz0D,IAGtCA,IAASpF,EAAakjD,KACrB0W,EAAY35C,MAAM+5C,WAAWv+D,EAAOi+D,EAAmBz5D,iBAGxDmF,IAASpF,EAAa8iD,QACrB8W,EAAY35C,MAAM+5C,WAAWv+D,EAAOk+D,EAAsBz5D,oBAG3DkF,IAASpF,EAAaslD,aACrBsU,EAAY35C,MAAM+5C,WAAWv+D,EAAOm3D,EAAet2D,aAGjD,KAFEw9D,EAAqB,eAJrBA,EAAqB,sBAJrBA,EAAqB,kBAWhC,kBCrDA,MAAM,qBAAEz5D,GAAyB,EAAQ,OACnC,eAAEC,EAAc,qBAAE25D,GAAyB,EAAQ,OACnD,gBAAE15D,GAAoB,EAAQ,OAC9B,uBAAEC,GAA2B,EAAQ,OACrC,QAAEzD,GAAY,EAAQ,OACtB,aAAE0D,GAAiB,EAAQ,OAC3B,mBAAEC,GAAuB,EAAQ,OACjC,iBAAEC,GAAqB,EAAQ,OAC/B,iBAAEu5D,GAAqB,EAAQ,OAC/B,kBAAEt5D,GAAsB,EAAQ,OAChC,aAAEC,GAAiB,EAAQ,OAE3B,iBAAEtD,GAAqB,EAAQ,OAC/B,aAAEuD,GAAiB,EAAQ,MAiBjCvD,EAAiB48D,cAAgB58D,EAAiByG,eAChD,CAACo2D,EAAmBC,EAAqBC,IACvC,IAAIv9D,EAAQq9D,EAAmBC,EAAqBC,KAExD5mE,EAAOC,QAAQ0M,qBAAuBA,EACtC3M,EAAOC,QAAQ2M,eAAiBA,EAChC5M,EAAOC,QAAQsmE,qBAAuBA,EACtCvmE,EAAOC,QAAQ4M,gBAAkBA,EACjC7M,EAAOC,QAAQ6M,uBAAyBA,EACxC9M,EAAOC,QAAQoJ,QAAUA,EACzBrJ,EAAOC,QAAQ+M,mBAAqBA,EACpChN,EAAOC,QAAQgN,iBAAmBA,EAClCjN,EAAOC,QAAQ8M,aAAeA,EAC9B/M,EAAOC,QAAQumE,iBAAmBA,EAClCxmE,EAAOC,QAAQiN,kBAAoBA,EACnClN,EAAOC,QAAQkN,aAAeA,EAC9BnN,EAAOC,QAAQmN,aAAeA,kBC9C9B,MAAM,KAAE2E,GAAS,EAAQ,MA2DzB/R,EAAOC,QAAQ0M,qBAAuBoF,EAAKE,IAhDd,CAK3B40D,MAA6B,6BAmB7BC,mBAA6B,yCAK7BC,4BAA6B,6BAM7BC,yCAA0C,yCAU1CC,OAAQ,gDCxDV,MAAM,KAAEl1D,GAAS,EAAQ,MAgLzB/R,EAAOC,QAAQ2M,eAAiBmF,EAAKE,IAvKd,CAIrBi1D,sBAA8B,EAI9BC,mBAA8B,EAI9BC,cAA8B,EAI9BC,gBAA8B,EAI9BC,eAA8B,EAK9BC,oBAA8B,EAO9BC,iBAA8B,EAI9BC,gBAA8B,EAI9BC,SAA8B,EAI9B/hC,2BAA8B,EAI9BgiC,mBAA8B,GAI9BC,2BAA8B,GAI9BC,0BAA8B,GAI9BC,cAA8B,GAI9BC,SAA8B,GAK9BzoB,wBAA8B,GAI9B0oB,2BAA8B,GAI9BC,YAA8B,GAK9BC,YAA8B,GAI9BC,0BAA8B,GAI9BC,qBAA8B,GAI9BC,KAA8B,GAI9BC,6BAA8B,GAK9BC,oBAA8B,GAI9BC,qBAA8B,GAI9BC,mBAA8B,GAI9BllC,eAA8B,GAI9BmlC,eAA8B,GAK9BhlC,qBAA8B,GAI9BwG,kBAA8B,GAI9B9G,kBAA8B,GAI9BulC,kBAA8B,KAgChC3oE,EAAOC,QAAQsmE,qBAAuBx0D,EAAKE,IArBd,CAK3B22D,WAAY,EAKZC,WAAY,EAQXC,GAAI,cC5JP9oE,EAAOC,QAAQ8oE,kBAlBf,MAUE,WAAAx0D,CAAYuwB,EAAgBkkC,EAAO5oD,EAAgB6oD,GACjDz0D,KAAKswB,eAAiBA,EACtBtwB,KAAKw0D,MAAQA,EACbx0D,KAAK4L,eAAiBA,EACtB5L,KAAKy0D,kBAAoBA,CAC3B,mBCfF,MAAM,eAAEr8D,GAAmB,EAAQ,MAEnC5M,EAAOC,QAAQipE,oBAAsB,CACnCC,0BAA0BzC,IACI,CAC1B,CAAC95D,EAAe+4B,6BAA6B,EAC7C,CAAC/4B,EAAeg7D,6BAA6B,EAC7C,CAACh7D,EAAe82B,uBAA6B,EAU7C,CAAC92B,EAAe0yC,yBAA0BonB,EAAkB0C,mCCjBlE,MAAM,QAAEC,GAAY,EAAQ,KAEtBC,EAASj3B,KAAKktB,IAAI,EAAG,IAE3B,SAASgK,EAAQlnE,EAAKoC,GACpB,OAAIA,EAAMpC,EAAIX,OACL,IAAIk1B,OAAOnyB,EAAMpC,EAAIX,QAAUW,EAEjCA,CACT,CAUA,MAAMmnE,EAAgB,CAEpBC,eAAgB,EAChBC,UAAgB,EAEhBC,OAXOJ,GADOl3B,KAAKu3B,SAAWN,GAAQO,QAAQ,GAC1BtnE,WAAY,IAahC,kBAAAunE,GAEE,OAAOP,KADS/0D,KAAKi1D,gBACAlnE,WAAY,EACnC,EAEA,MAAAwnE,GACE,QAASv1D,KAAKk1D,SAChB,EAEA,kBAAAM,GACE,MAAM,QAAEC,EAAO,SAAEC,GAAab,EAE9B,MADe,GAAGY,KAAWC,KAAY11D,KAAKm1D,UAAUn1D,KAAKs1D,sBAE/D,EAEA,0BAAAK,GACE,MAAM,QAAEF,EAAO,SAAEC,GAAab,EAC9B,MAAO,GAAGY,KAAWC,KAAY11D,KAAKm1D,QACxC,EAEAS,0BAAyB,IAChB,eAAef,EAAQl+B,cAAcx0B,UAAU,EAAG,MAI7D3W,EAAOC,QAAQupE,cAAgBA,kBCnD/B,MAAM,UAAEn5C,GAAc,EAAQ,OACxB,SAAEg6C,GAAa,EAAQ,KAE7B,IAAIC,EACuB,CAGzB,MAAMC,EAAM,EAAQ,MAMdC,EAAmB,CAACC,EAAK7lD,IAAY,IAAI8lD,SAASppD,IACtD,MAAMqpD,EAAON,EAASI,GAAKG,SAE3BL,EAAIM,OAAOF,EAAM/lD,GAAS,CAAC3R,EAAO3N,IAG5Bgc,EADa,OAAVrO,EACK,CAAEw3D,MAAKE,OAAMG,QAASxlE,EAAQylE,UAAU,GAEhD,CAAEN,MACAE,OACAI,UAAU,EACV93D,MAAU,CACR+3D,KAAU/3D,EAAY,KACtBg4D,MAAUh4D,EAAa,MACvB23D,SAAU33D,EAAgB,SAC1Bi4D,QAAUj4D,EAAe,YAGjC,IAuBJq3D,EAAoB,SAA+Ba,EAAMC,GACvD,MAAMC,EAAWF,EAAKjkE,KAAIujE,GAAOD,EAC/BC,EACA,CAAE,UAAY,MAIhBC,QAAQY,IAAID,GAAUE,MAAKR,GAAYK,EAAG,KAAML,KAAWS,OAAMvhD,GAAOmhD,EAAGnhD,IAC7E,CACF,CAiBAjqB,EAAOC,QAAQqqE,kBAAoBA,kBChFnC,MAAM,OAAEz0D,GAAW,EAAQ,OACrB,kBAAEy0D,GAAsB,EAAQ,OAChC,aAAE17C,GAAiB,EAAQ,OAC3B,SAAEy7C,GAAa,EAAQ,KAE7B,SAASoB,EAAUC,GACjB,OAAI1kE,MAAMwB,QAAQkjE,GACTA,EAAQxkE,KAAIykE,GAAUtB,EAASsB,KAEjCF,EAAUC,EAAQtkE,MAAM,QACjC,CAmBA,MAAMwkE,EACJ,WAAAr3D,CAAYkZ,EAAQ,CAAEg9C,IAAK,KAAMoB,SAAU,IACzC39D,OAAOC,OAAOqG,KAAMiZ,EACtB,EA2OFztB,EAAOC,QAAQ6rE,SArOf,MACE,WAAAv3D,EAAY,IACVk2D,EAAG,eACHsB,EAAc,iBACdC,EAAgB,sBAChBC,EAAqB,0BACrBC,GACE,CAAC,GACHh+D,OAAOC,OAAOqG,KAAM,CAClB23D,MAAOV,EAAUhB,GAAKvjE,KAAIotB,GAAKA,EAAE83C,OAIjCC,iBAAsC,IAApBN,EACdz5B,OAAOC,kBACPw5B,EAAiB,EAIrBO,mBAA0C,IAAtBN,EAChB15B,OAAOC,kBACPy5B,EAKJO,wBAAoD,IAA3BN,EACrB35B,OAAOC,kBACP05B,EAAwB,EAI5BC,4BAGAM,cAAe,CAAC,EAEhB7/C,OAAQ,IAAIiC,EAAa,iBAI3Bpa,KAAKqZ,QAELhY,EAAOrB,KAAK23D,MAAMzqE,QAAU,GAC5BmU,EAAOrB,KAAK63D,iBAAmB,GAC/Bx2D,EAAOrB,KAAK83D,mBAAqB,GACjCz2D,EAAOrB,KAAK+3D,wBAA0B,EACxC,CAOA,YAAAE,CAAa1vC,GACX,MAAM,UAAE1M,EAAS,SAAE5gB,GAAa+E,KAAKmY,OACrC29C,EAAkB91D,KAAK23D,OAAO,CAACliD,EAAK8gD,KAElC,GAAI9gD,EAAK,OAAO8S,EAAS9S,GACzBpU,EAAOk1D,EAASrpE,SAAW8S,KAAK23D,MAAMzqE,OAAQ,iDAG9C,IAAIgrE,EAAY,EAiBhB,OAhBA3B,EAASzoD,SAAShd,IACZA,EAAOwlE,WACP4B,EAECpnE,EAAOylE,WAIRzlE,EAAOwlE,SACwBxlE,EAAOwlE,QAAgBxlE,EAAOmlE,KAE/Dh7D,EAAS,sBAAuBnK,EAAO2N,MAAM+3D,KACpC,GAAG1lE,EAAO2N,MAAMi4D,YAAY5lE,EAAO2N,MAAM23D,aAAc,MAAOtlE,EAAOmlE,KAChF,IAGK1tC,EAAuB,IAAd2vC,EAAkB,kCAAoC,KAAK,GAE/E,CAMA,KAAA7+C,CAAMiF,EAAQ,CAAE65C,cAAc,EAAOC,cAAc,IAIjD1+D,OAAOC,OAAOqG,KAAKg4D,cAAe,CAChCG,aAAc75C,EAAM65C,aACpBC,aAAc95C,EAAM85C,aACpBC,YAAc,EACdC,UAAc,EACdC,UAAc,EACdC,WAAc,EACdC,aAAc,IAAIrB,GAEtB,CAOA,WAAAsB,GACE,MAAM,UAAE78C,GAAc7b,KAAKmY,OAErBmG,EAAQte,KAAKg4D,cACbG,EAAe75C,EAAM65C,aACrBM,EAAen6C,EAAMm6C,aAE3Bp3D,EAAOo3D,EAAc,sEAGrB,IAEE,GAAIn6C,EAAM85C,aAER,OAAO,KAIT/2D,GAAQid,EAAMk6C,UAAW,+CAGzB,MAAM5sC,EAAalyB,OAAOC,OAAO,CAC/Bg+D,MAAc33D,KAAK23D,MACnBgB,aAAc34D,KAAK+3D,uBACnBa,aAAcT,EAAen4D,KAAK83D,kBAAoB93D,KAAK63D,kBAqC7D,KA9BEv5C,EAAMg6C,UACJh6C,EAAMg6C,UAAY1sC,EAAW+sC,cAERr6C,EAAMg6C,UAAiCG,EAAaxC,MACzE33C,EAAM+5C,YAIJ/5C,EAAM+5C,aAAezsC,EAAW+rC,MAAMzqE,UAEtCoxB,EAAMi6C,UACJj6C,EAAMi6C,UAAY3sC,EAAWgtC,cAGKhtC,EAAWgtC,aAC/Ct6C,EAAMk6C,WAAY,IAGUl6C,EAAMi6C,UAAa3sC,EAAWgtC,aAC1Dt6C,EAAM+5C,YAAc,EACpB/5C,EAAMg6C,UAAY,IAGpBh6C,EAAMg6C,UAAY,IAIGh6C,EAAMg6C,UAAa1sC,EAAW+sC,cAGnDr6C,EAAMk6C,UAER,OAAO,KAKT,MAAMvC,EAAMrqC,EAAW+rC,MAAMr5C,EAAM+5C,aACnCh3D,EAAO40D,EAAK,gCAAgCrqC,EAAW+rC,SAASr5C,EAAM+5C,gBAItE,MAAMQ,EAAiC,OAArBJ,EAAaxC,IAEzB6C,EAAYL,EAAaxC,MAAQA,EAEjC8C,EAAoBN,EAAaxC,MAAQA,GAA6B,IAAtB33C,EAAM+5C,YAGtDhB,EAAYwB,GAAcC,IAAcC,EAC1C,EACA/4D,KAAK03D,0BAKHsB,EAAW,IAAI5B,EAAS,CAC5BnB,MACAoB,aAMF,OADA/4C,EAAMm6C,aAAeO,EACdA,EAAS/C,GAClB,CAAE,QAEF,CACF,CAEA,0BAAIgD,GAEF,OADA53D,EAAOrB,KAAKg4D,cAAcS,aAAaxC,IAAK,sEACrCj2D,KAAKg4D,cAAcS,aAAapB,QACzC,CAEA,mBAAA6B,GACE,MAAM56C,EAAQte,KAAKg4D,cACbG,EAAe75C,EAAM65C,aAErBvsC,EAAalyB,OAAOC,OAAO,CAC/Bg+D,MAAc33D,KAAK23D,MACnBgB,aAAc34D,KAAK+3D,uBACnBa,aAAcT,EAAen4D,KAAK83D,kBAAoB93D,KAAK63D,kBAIvDsB,EAAa76C,EAAM+5C,YAAc,EACvC,MAAO,SAAS/5C,EAAMm6C,aAAaxC,cAAckD,QAAiBvtC,EAAW+rC,MAAMzqE,mCAAmCoxB,EAAMg6C,gBAAgB1sC,EAAW+sC,uBAAuBR,EAAe,eAAiB,wBAAwB75C,EAAMi6C,gBAAgB3sC,EAAWgtC,eACzQ,aC5NFptE,EAAOC,QAAQ4M,gBAhCf,MAgBE,WAAA0H,CAAYq5D,EAAqBC,GAM/Br5D,KAAKo5D,oBAAsBA,EAM3Bp5D,KAAKq5D,WAAaA,CACpB,mBCzCF,MAAM,KAAE97D,GAAS,EAAQ,MAyBzB/R,EAAOC,QAAQ6M,uBAAyBiF,EAAKE,IAbd,CAK7B67D,YAAoB,EAKpBC,mBAAoB,cCTtB/tE,EAAOC,QAAQ+tE,uBAVf,MACE,WAAAz5D,CAAY05D,EAAejF,EAAOkF,EAAyBC,EAAqBN,GAC9Er5D,KAAKy5D,cAAgBA,EACrBz5D,KAAKw0D,MAAQA,EACbx0D,KAAK05D,wBAA0BA,EAC/B15D,KAAK25D,oBAAsBA,EAC3B35D,KAAKq5D,WAAaA,CACpB,aCVF,MAAMO,EAAU,CACdC,iBAAiBt1B,GACR,GAAIA,MAEbu1B,wBAAwBv1B,GACf,GAAIA,OAIf/4C,EAAOC,QAAQmuE,QAAUA,YCiCzBpuE,EAAOC,QAAQ+M,mBA/Bf,MAaE,WAAAuH,CAAYg6D,EAAwBV,GAKlCr5D,KAAKq5D,WAAaA,EASlBr5D,KAAK+5D,uBAAyBA,CAChC,mBCvCF,MAAM,KAAEx8D,GAAS,EAAQ,MAgLzB/R,EAAOC,QAAQgN,iBAAmB8E,EAAKE,IArJd,CAUvBu8D,UAAmC,EAMnC1wC,WAAmC,EAMnC+E,qBAAmC,EAMnC4rC,uBAAmC,EAMnC57B,mBAAmC,EAMnCD,gBAAmC,EAMnCxT,2BAAmC,EAMnCnf,gBAAmC,EAMnCC,gBAAmC,EAMnCwuD,mBAAmC,GAMnCC,sBAAmC,GASnCC,gBAAmC,GAMnCC,aAAmC,GAOnCC,oBAAmC,GAOnCC,mBAAmC,GAYnCC,8BAAmC,GAOnCz0B,qBAAmC,GAKnC00B,wBAAmC,GAOnCC,2BAAmC,GAQnCv8B,QAAmC,GAQnCw8B,kCAAmC,qBC7KrC,MAAM,KAAEp9D,GAAS,EAAQ,MA+BzB/R,EAAOC,QAAQumE,iBAAmBz0D,EAAKE,IAzBd,CACvBkc,QAA+B,iBAC/BC,WAA+B,oBAC/BG,QAA+B,iBAC/B6gD,gBAA+B,wBAC/BC,qBAA+B,4BAC/BC,kBAA+B,0BAC/BC,aAA+B,qBAC/BC,oBAA+B,4BAC/BC,0BAA+B,gCAC/BC,sBAA+B,6BAC/BC,uBAA+B,oBAC/BC,8BAA+B,2BAC/BC,UAA+B,mBAC/BC,kBAA+B,0BAC/BC,kBAA+B,0BAC/BvxC,QAA+B,gBAC/BD,YAA+B,oBAC/ByxC,WAA+B,mBAC/BC,mBAA+B,2BAC/BC,kBAA+B,0BAC/BC,wBAA+B,+BAC/BC,sBAA+B,qEC5BjC,MAAM,aAAEhtE,EAAY,eACZC,EAAc,aACd8G,EAAY,iBACZC,GAAqB,EAAQ,OAC/B,iBAAE6C,GAAqB,EAAQ,MAErC,SAASojE,EAAUC,GAQjB,MAAMvjE,UAAqBujE,EAYzB,WAAA/7D,CAAYg8D,EACAC,EACA7vD,EACAqqB,OAAe5lC,EACfqb,EAAe,EACfL,OAAiBhb,EACjB2a,OAAS3a,GACnB0Q,SAASy6D,GACT/7D,KAAKi8D,kBAAoBD,EACzBh8D,KAAKw+B,SAAWryB,EAChBnM,KAAKy+B,cAAgBjI,EACrBx2B,KAAK0+B,cAAgBzyB,EACrBjM,KAAK8L,gBAAkBF,EACvB5L,KAAK2+B,QAAUpzB,CACjB,CAMA,oBAAIywD,GACF,OAAOh8D,KAAKi8D,iBACd,CAMA,WAAI9vD,GACF,OAAOnM,KAAKw+B,QACd,CAMA,gBAAIhI,GACF,OAAOx2B,KAAKy+B,aACd,CAMA,gBAAIxyB,GAEF,OAAOjM,KAAKsL,SAAWtL,KAAK0+B,aAC9B,CAOA,gBAAIw9B,GACF,OAAOl8D,KAAKiM,YACd,CAUA,kBAAIL,GACF,OAAO5L,KAAK8L,eACd,CAOA,UAAIP,GACF,OAAOvL,KAAK2+B,OACd,CAKA,UAAIpzB,CAAOhY,GACTyM,KAAK2+B,QAAUprC,CACjB,CAEA,CAAC,4CAEC,OAAOmG,OAAOC,OAAO2H,MAAM,2CAAwB,CAAC,EAAG,CACrD,iBAAoB7I,EAAiB2G,SAASY,KAAKg8D,kBACnD,QAAoBh8D,KAAKmM,QACzB,aAAoBnM,KAAKw2B,aACzB,aAAoB5nC,EAAawQ,SAASY,KAAKiM,cAC/C,eAAoBjM,KAAK4L,eAAiB5L,KAAK4L,eAAe7d,WAAa,KAC3E,OAAoBiS,KAAKuL,OAASvL,KAAKuL,OAAS,MAEpD,CAEA,QAAAxd,GACE,OAAOiT,EAAahB,KACtB,EAGF,OAAOzH,CACT,CAEA,MAAM4jE,EAA+B,CACnC,CAAC1jE,EAAiB41B,sBAAoCx/B,EACtD,CAAC4J,EAAiB6wB,YAAoCz6B,EACtD,CAAC4J,EAAiBkiE,mCAAoC9rE,EACtD,CAAC4J,EAAiB0hE,uBAAoCxkE,EACtD,CAAC8C,EAAiBwhE,wBAAoCtkE,EACtD,CAAC8C,EAAiB4lC,oBAAoC1oC,EACtD,CAAC8C,EAAiBiiE,4BAAoC7rE,EACtD,CAAC+G,EAAiB6V,iBAAoC9V,EACtD,CAACC,EAAiB8V,iBAAoC/V,GAGlDymE,GAAkB,IAAIxuD,KACzBnf,IAAIiL,QAAQ,IAAM,KAClBjL,IAAII,GAAgB,CAACwtE,EAAKlwD,EAASmwD,EAAIhxD,EAASixD,EAAIhxD,IAAW,CAACY,EAASb,EAASC,KAClF9c,IAAIkH,GAAc,CAAC0mE,EAAKlwD,EAASmwD,EAAIhxD,EAASixD,EAAIhxD,IAAW,CAACY,EAASkwD,EAAKE,EAAIhxD,KAE7EixD,EAAa,IAAI5uD,IAiCvB,MAAMrV,EAAesjE,EAAUniE,QAC/BnB,EAAakkE,MAhCb,SAAeT,EACA7vD,EACAqqB,OAAe5lC,EACfqb,EAAe,EACfL,OAAiBhb,EACjB2a,OAAS3a,GACtB,MAAMkrE,EAAaK,EAA6BH,IAAqBtiE,OAerE,OAAO,IAdc,MACnB,IAAI5I,EAAS0rE,EAAWnuE,IAAIytE,GAC5B,OAAIhrE,IACJA,EAAS+qE,EAAUC,GACnBU,EAAW/tE,IAAIqtE,EAAYhrE,GACpBA,EACR,EANoB,GAcd,EAPwBsrE,EAAgB/tE,IAAIytE,IAAe,KAAO,KAC5BE,EACA7vD,EACAqqB,EACAvqB,EACAL,EACAL,GAErBywD,EACA7vD,EACAqqB,EACAvqB,EACAL,EACAL,EAC1B,EAMA/f,EAAOC,QAAQ8M,aAAeA,wCCzL9B,MAAM,aAAE3J,GAAiB,EAAQ,OAC3B,SAAEgvB,GAAa,EAAQ,OACvB,IAAE/xB,GAAQ,EAAQ,OAElB,gBAAEiI,GAAoBjI,EAQ5B,MAAM6wE,UAAwB9+C,EAC5B,WAAA7d,CAAYnD,EAAM+/D,GAChBr7D,MAAM1E,GAKNoD,KAAK48D,UAAY,KAKjB58D,KAAKiM,aAAe,KAKpBjM,KAAK68D,YAAc,KAMnB78D,KAAK88D,OAAS,KAKd98D,KAAK+8D,UAAY,KAKjB/8D,KAAKg9D,qBAAuB,KAE5BtjE,OAAOC,OAAOqG,KAAM28D,EACtB,CAEA,CAAC,4CACC,MAAO,CACL,UAAgB38D,KAAK48D,UACrB,YAAgB58D,KAAK68D,YACrB,aAAgBjuE,EAAawQ,SAASY,KAAKiM,cAC3C,UAAgBjM,KAAK+8D,WAAajpE,EAAgBkM,KAAK+8D,YAAc,MAEzE,CAEA,kBAAAh+C,GACE,OAAO/d,EAAahB,KACtB,EAGFxU,EAAOC,QAAQixE,gBAAkBA,gBChEjC,MAAMO,EAAc,EAAQ,KACtBC,EAAe,EAAQ,MACvBhyC,EAAS,EAAQ,MACjBvtB,EAAsB,EAAQ,MAC9Bw/D,EAAe,EAAQ,OAEvB,OAAE97D,GAAW,EAAQ,OACrB,eAAEjJ,GAAmB,EAAQ,OAC7B,MAAE2f,GAAU,EAAQ,MACpB,kBAAEw8C,GAAsB,EAAQ,OAChC,YAAEngE,GAAgB,EAAQ,OAC1B,2BAAEgP,EAA0B,aAC1BxU,EAAY,eACZC,GAAmB,EAAQ,OAC7B,SAAE+uB,EAAQ,MACRC,EAAK,aACLC,GAAiB,EAAQ,OAC3B,IAAEjyB,GAAQ,EAAQ,OAClB,aAAEuuB,GAAiB,EAAQ,OAC3B,QAAE3lB,EAAO,eACP2B,EAAc,wBACdF,GAA4B,EAAQ,OACtC,QAAE0jE,GAAY,EAAQ,OACtB,aAAErhE,GAAiB,EAAQ,OAC3B,iBAAEE,GAAqB,EAAQ,OAC/B,iBAAEu5D,GAAqB,EAAQ,OAC/B,gBAAE0K,GAAoB,EAAQ,OAC9B,mBAAEU,GAAuB,EAAQ,MACjC,iBAAEC,GAAqB,EAAQ,OAC/B,aAAEzkE,GAAiB,EAAQ,OAC3B,SAAEQ,EAAQ,YACRkkE,GAAgB,EAAQ,OAC1B,YAAEpjE,GAAgB,EAAQ,MAC1B,kCAAEqjE,GAAsC,EAAQ,OAEhD,gBAAEzpE,GAAoBjI,GACtB,mBAAEmS,GAAuB9D,GACzB,qBAAEsjE,EAAoB,oBACpBC,EAAmB,qBACnBC,EAAoB,oBACpBC,EAAmB,2BACnBC,EAA0B,iCAC1BC,GAAqCP,EAwyF7C9xE,EAAOC,QAAQqyE,WA/xFf,cAAyBhgD,EACvB,WAAA/d,CAAYmyD,EAAmB50C,EAASygD,EAAOpG,GAC7Cr2D,MAAM,CAAEzE,KAAM,eACd,MAAMgvB,EAAM7rB,KAQNmY,EAASnY,KAAKmY,OAAS,IAAIiC,GAPZ,YAAyBlG,GAC5C,MAAO,CACL,gBAAgB2X,EAAIhR,cAAgB,WACpC,IAAIgR,EAAI4M,4BACLvkB,EAEP,KAEM,UAAE2H,EAAS,UAAEzC,EAAS,SAAE0S,GAAa3T,EAC3CnY,KAAK+a,IAAM5C,EAAO6C,KAAKhb,KAAK+a,IAAK/a,MACjCA,KAAKg+D,mBAAqB9L,EAC1BlyD,KAAKud,SAAWD,EAChBtd,KAAKi+D,mBAAqBF,EAC1B/9D,KAAKk+D,OAASvG,EACd33D,KAAKm+D,WAAa,IAAIlB,EAAYt2C,cAIlC3mB,KAAKo+D,sBAAwBv1C,IAAQ,CACnC0H,kBAAiCvwB,KAAKuwB,kBAAkB/xB,KAAKwB,MAC7Dgd,QAAiChd,KAAKgd,QAAQxe,KAAKwB,MACnDyuC,SAAiCpjC,GAAWrL,KAAKq+D,KAAKhzD,EAASwd,GAAM,GACrE2kB,gBAAiCniC,GAAWrL,KAAKwtC,gBAAgBniC,EAASwd,GAAM,GAChF6H,YAAiCrlB,GAAWrL,KAAKq+D,KAAKhzD,EAASwd,GAAM,GACrE8H,eAAiC3wB,KAAKs+D,gCAAgC9/D,KAAKwB,MAC3Es8B,gCAAiChf,EAAQgf,gCAAgC99B,KAAK8e,GAC9Eif,2BAAiCjf,EAAQif,2BAA2B/9B,KAAK8e,GACzEqR,UAAiCrR,EAAQqR,UAAUnwB,KAAK8e,GACxDokB,cAAiCpkB,EAAQokB,cAAcljC,KAAK8e,GAC5Dmb,oBAAiCz4B,KAAKy4B,oBAAoBj6B,KAAKwB,MAC/DyiC,wBAAiCnlB,EAAQmlB,wBAAwBjkC,KAAK8e,GAEtE,gBAAIzC,GACF,OAAOgR,EAAIhR,YACb,EACA,UAAIsC,GACF,OAAOG,EAAQH,MACjB,IAKFnd,KAAKu+D,oBAAqB,EAE1Bv+D,KAAKw+D,oBAELx+D,KAAKye,SAAQ,WACX,OAAOze,KAAK0e,aAAamN,EAAI4yC,qBACJ3tC,GAAWA,EAAQ5R,kBAAkB7F,SAChE,IAOArZ,KAAK4hB,wBAAuB,SAA0B88C,GACpD,MAAMp9C,EAAWuK,EAAI3K,kBACrB,OAAQw9C,EAAOj+D,WACb,KAAKuxD,EAAiBuJ,kBAOpB,OAFAl6D,EAAOwqB,EAAIsyC,WAAY,2CACvBtyC,EAAIsyC,WAAWztD,IAAIguD,EAAO1B,sBACnBh9D,KACT,KAAKgyD,EAAiBj4C,QAEpB,OAAOuH,EAASnF,WAAU,IAAM0P,EAAI8yC,oBACtC,KAAK3M,EAAiBhoC,QAEpB,OADyC00C,EAAO1B,qBACzCh9D,KACT,QAEE,OAD4B0+D,EAAOj+D,UAAsBorB,EAAI4M,sBACtDz4B,KAEb,IAEAA,KAAK4+D,kBAAoB,IAAI/gD,EAAM,CACjChhB,KAAewgE,EAAiBwB,WAChCtgD,cAAesN,GACd,CAKD,wBAAAizC,GAKE,GAHAjzC,EAAIkzC,oBAEJlzC,EAAImzC,aAAenzC,EAAIqyC,OAAOxF,cACL,OAArB7sC,EAAImzC,aACN,OAAOh/D,KAAKgjB,sBAAsB6I,EAAI+yC,kBAAmB,aAG3D,MAAM,uBAAE3F,GAA2BptC,EAAIqyC,OAEvC,OAAIjF,EAAyB,IAAMptC,EAAIozC,mBACrCpzC,EAAIozC,kBAAoBpoD,YAAW,KACjCgV,EAAIozC,kBAAoB,KACxBpzC,EAAI3O,aAAa,IAAIw/C,EAAgB,CAAE7/D,KAAMm1D,EAAiB6I,uBAAwB,GACrF5B,GACIj5D,KAAK0e,aAAamN,EAAIqzC,gCAExBl/D,KAAK0e,aAAamN,EAAIszC,oBAC/B,IAECz8C,OAAM,KACLmJ,EAAIuzC,iBAAiB,IAEtB98C,WAAW,uBAAuB,WASjC,OARAuJ,EAAIqyC,OAAO7kD,MAAM,CAAE8+C,kBAAcvnE,EAAWwnE,cAAc,IAM1DvsC,EAAIwzC,kBAAoB5mE,EAAiB4hE,aACzCxuC,EAAIyzC,qBAAuB7mE,EAAiB4hE,aACrCr6D,KAAK0e,aAAamN,EAAI0zC,oBAC/B,IACCj9C,WAAW,sBAAsB,WAKhCuJ,EAAIwzC,kBAAoB5mE,EAAiB6wB,WACzCuC,EAAIyzC,qBAAuB7mE,EAAiB8hE,mBAE5C,MAAMnC,EAA4D,IAA7CvsC,EAAImyC,mBAAmBwB,kBAE5C,GADA3zC,EAAIqyC,OAAO7kD,MAAM,CAAE8+C,cAAc,EAAMC,kBAClCA,EAAc,CAMjB,MAAM3iD,EAAMoW,EAAI4zC,eAAiB,CAAC,EAC5BvrD,EAAO,CAACuB,EAAImnD,UAChBnnD,EAAI+gB,aACJ/gB,EAAIxJ,kBACJrb,EACA6kB,EAAIonD,aACNhxC,EAAItK,oBAAmB,KACrBsK,EAAIuzC,kBACJvzC,EAAI6zC,iBAAiBnnE,EAAakkE,MAAMhkE,EAAiB6hE,uBAAwBpmD,GAAM,GAE3F,CACA,OAAOlU,KAAK0e,aAAamN,EAAI0zC,oBAC/B,IACC9gD,SAAQ,KACPoN,EAAI2yC,oBAKJ3yC,EAAIwzC,kBAAoB5mE,EAAiB41B,qBACzCxC,EAAIyzC,qBAAuB7mE,EAAiBuhE,UAI5CnuC,EAAIqyC,OAAOjG,cAAcxiD,GAClBoW,EAAIqyC,OAILzoD,GAEFoW,EAAI8zC,gBAAgB,CAClB1zD,aAAcrd,EAAaoc,iBAC3B4xD,UAAcnnD,IAEhBoW,EAAIqyC,OAAO7kD,MAAM,CAAE++C,cAAc,IAC1Bp4D,KAAKkd,aAAa,IAAIw/C,EAAgB,CAAE7/D,KAAMm1D,EAAiBqJ,eAIxExvC,EAAIqyC,OAAO7kD,MAAM,CAAE8+C,cAAc,IACjCtsC,EAAImzC,aAAenzC,EAAIqyC,OAAOxF,cACvB14D,KAAKkd,aAAa,IAAIw/C,EAC3B,CAAE7/D,KAAMm1D,EAAiB2J,4BAhBlB,OAmBJ37D,KAAK0e,aAAamN,EAAI+zC,kBAE9Bv9C,SAAS2vC,EAAiB2J,yBAAyB,WAClD,OAAO37D,KAAK0e,aAAamN,EAAIszC,oBAC/B,IACC98C,SAAS2vC,EAAiBp4C,YAAY,WACrC,OAAO5Z,KAAK+iB,uBAAuB8I,EAAI+yC,kBAAmB,sBAC5D,IACCv8C,SAAS2vC,EAAiB4I,iBAAiB,WAK1C,OAJA/uC,EAAI8zC,gBAAgB,CAClB1zD,aAAcrd,EAAa6a,QAC3BmzD,UAAc,oBAET58D,KAAK0e,aAAamN,EAAI0zC,oBAC/B,IACCl9C,SAAS2vC,EAAiBwJ,YAAY,SAAqBqE,GAG1D,OAFA/zC,EAAS,yCAAyC+zC,KAClDh0C,EAAI8zC,gBAAgBE,GACb7/D,KAAK0e,aAAamN,EAAI0zC,oBAC/B,IACCl9C,SAAS2vC,EAAiBqJ,WAAW,SAAqByE,GAEzD,OADAj0C,EAAI8zC,gBAAgBG,GACb9/D,KAAK0e,aAAamN,EAAI0zC,oBAC/B,IACCl9C,SAAS2vC,EAAiBgJ,qBAAqB,SAA8B6E,GAG5E,OAFAh0C,EAAI8zC,gBAAgBE,GACpB/zC,EAAS,6BACF9rB,KAAK0e,aAAamN,EAAI0zC,oBAC/B,IACC38C,MAAK,KACJiJ,EAAIkzC,oBACAlzC,EAAIozC,oBACNnoD,aAAa+U,EAAIozC,mBACjBpzC,EAAIozC,kBAAoB,KAC1B,IAED18C,UAAU,iBAAiB,KAQ1BsJ,EAAItK,oBAAmB,KAIrB,GAHAsK,EAAI6zC,iBAAiBnnE,EAAakkE,MAAM5wC,EAAIyzC,qBACJ,IAAIzzC,EAAIqyC,OAAOhF,yBACf,IAAK,EAAG,KAAM,OAClDrtC,EAAI0yC,mBAAoB,CAC1B,MAAMsB,EAAetnE,EAAakkE,MAAMhkE,EAAiB2hE,gBACjB,GAAI,KAAM,EAAG,KAAM,IAC3DvuC,EAAI6zC,iBAAiBG,GACrBh0C,EAAI0yC,oBAAqB,CAC3B,KAIF1yC,EAAI2yC,oBACGx+D,KAAK0e,aAAamN,EAAIk0C,uBAE9Bx9C,UAAU,aAAa,WAatB,OAVAsJ,EAAItK,oBAAmB,KACrB,MAAM9L,EAAMoW,EAAI4zC,eAAiB,CAAC,EAE5BvrD,EAAO,CAACuB,EAAImnD,UAChBnnD,EAAI+gB,aACJ/gB,EAAIxJ,kBACJrb,EACA6kB,EAAIonD,aACNhxC,EAAI6zC,iBAAiBnnE,EAAakkE,MAAM5wC,EAAIwzC,qBAAsBnrD,GAAM,IAEnElU,KAAK0e,aAAamN,EAAI4yC,oBAC/B,IAEFz+D,KAAK4/D,cAAgB,IAAI/hD,EAAM,CAC7BhhB,KAAewgE,EAAiB2C,gBAChCzhD,cAAesN,EAAI+yC,oBAGrB5+D,KAAKu/D,oBAAsB,IAAI1hD,EAAM,CACnChhB,KAAewgE,EAAiB4C,qBAChC1hD,cAAesN,EAAI+yC,oBAElBl8C,OAAM,KACLoJ,EAAS,mCACTD,EAAIkzC,oBACJlzC,EAAIq0C,wBAAwB,wBAAyB,EAAE,IAExD79C,SAAS2vC,EAAiBgJ,qBAAqB,SAA8B6E,GAE5E,OADAh0C,EAAI8zC,gBAAgBE,GACbh0C,EAAI+yC,kBAAkBE,yBAAyBnsE,KAAKqN,KAC7D,IAEFA,KAAKk/D,8BAAgC,IAAIrhD,EAAM,CAC7ChhB,KAAewgE,EAAiB8C,iCAChC5hD,cAAesN,EAAI+yC,oBAElBv8C,SAAS2vC,EAAiB6I,sBAAsB,WAC/C,OAAO76D,KAAK0e,aAAamN,EAAIszC,oBAC/B,IAEFn/D,KAAKm/D,oBAAsB,IAAIthD,EAAM,CACnChhB,KAAewgE,EAAiB+C,sBAChC7hD,cAAesN,EAAI+yC,oBAElBngD,SAAQ,KACP,MAAM4hD,EAAe,sDACrBx0C,EAAIuzC,kBACJvzC,EAAI2yC,oBACJ,IACE3yC,EAAIy0C,eACN,CAAE,MAAOxgD,GAKP,OAJA9f,KAAK2/D,gBAAgB,CACnB/C,UAAc98C,EAAEzU,UAAYg1D,EAAeA,EAAe,GAAGA,MAAiBvgD,EAAEzU,UAChFY,aAAc6T,EAAExU,SAAW1c,EAAagb,eACxCizD,YAAc/8C,IACT+L,EAAI+yC,kBAAkBE,yBAAyBnsE,KAAKqN,KAC7D,CACA,OAAOA,KAAK0e,aAAamN,EAAI00C,sBAAsB,IAGvDvgE,KAAKugE,sBAAwB,IAAI1iD,EAAM,CACrChhB,KAAewgE,EAAiBmD,yBAChCjiD,cAAeve,KAAKm/D,sBAInBz8C,OAAM,KAAQ1iB,KAAKygE,cAAe,CAAI,IACtChiD,SAAQ,KACP,IAAKze,KAAKygE,aAAgB,OAAOzgE,KACjCA,KAAKygE,cAAe,EACpB,MAAMJ,EAAe,wDACrB,IACE,MAAMv2B,EAAaje,EAAI60C,WAAW1kD,UAClC,GAAI8tB,IAAeqzB,EAAav0B,oBAAoB1O,GAClD,MAAM,IAAIrrC,EACRwxE,EACAzxE,EAAa0b,iBACb6yD,EAAav0B,oBAAoBxpC,SAAS0qC,IAG9Che,EAAS,kCAAkCD,EAAIkxC,iBAAiBlxC,EAAIqyC,OAAOhF,wBAC7E,CAAE,MAAOp5C,GAKP,OAJA9f,KAAK2/D,gBAAgB,CACnB/C,UAAc98C,EAAEzU,UAAYg1D,EAAeA,EAAe,GAAGA,MAAiBvgD,EAAEzU,UAChFY,aAAc6T,EAAExU,SAAW1c,EAAagb,eACxCizD,YAAc/8C,IACT+L,EAAI+yC,kBAAkBE,yBAAyBnsE,KAAKqN,KAC7D,CACA,OAAOA,IAAI,IAEZqiB,SAAS2vC,EAAiBwJ,YAAY,SAAmBkD,GAExD,OADA5yC,EAAS,6DAA6D4yC,KAC/D1+D,KAAKkjB,mBAAmB,KACjC,IACCb,SAAS2vC,EAAiB+I,cAAc,SAAuB2D,GAC9D7yC,EAAIkxC,UAAY2B,EAAO3B,WAAa,GAEpC,GADmBlxC,EAAI80C,wBACJxD,EAAav0B,oBAAoB1O,GAClD,OAAOl6B,KAAK0e,aAAamN,EAAI+0C,iBAE/B,MAAMnrD,EAAM,CACVmnD,UAAc,sCACd3wD,aAAcrd,EAAayV,cAC3BmyB,aAAc,KAGhB,OADA3K,EAAI8zC,gBAAgBlqD,GACbzV,KAAK0e,aAAamN,EAAI0zC,oBAC/B,IAEFv/D,KAAK4gE,gBAAkB,IAAI/iD,EAAM,CAC/BhhB,KAAewgE,EAAiBwD,kBAChCtiD,cAAesN,EAAI+yC,oBAElBl8C,OAAM,KACLmJ,EAAIi1C,oBAAoB,IAEzBz+C,SAAS2vC,EAAiBoJ,+BAA+B,SAAsBsD,GAC9E,MAAMqC,EAAgBrC,EAAO5B,OACvBvkC,EAAWwoC,EAAcC,cACzBp+B,EAAWrK,EAAS/B,aACpB/gB,EAAM,CACV+gB,aAAcoM,GAGhB,GADA/W,EAAI4S,cAAgBmE,EACH,MAAbA,EACF,GAAK/W,EAAIo1C,aAAaF,GAKf,IAAKl1C,EAAIq1C,mBAAmBH,GAOjC,OADAl1C,EAAIs1C,2BAA2BJ,GACxB/gE,KAAK0e,aAAamN,EAAIu1C,wBAN7B1nE,OAAOC,OAAO8b,EAAK,CACjBmnD,UAAc,+DACd3wD,aAAcrd,EAAasc,8BAK/B,MAZExR,OAAOC,OAAO8b,EAAK,CACjBmnD,UAAc,yDACd3wD,aAAcrd,EAAaub,6BAW1B,CACL,MAAMk3D,EAAaj+D,EAA2B+F,gBAAgBy5B,EACArK,EAAS+oC,gBACjEh2D,EAAW+1D,IAAezyE,EAAasa,cAC3Cta,EAAayV,cAAgBg9D,EAC/Bv1C,EAAS,0BAA0BxgB,eAAqBs3B,iBACvCrK,EAAS+oC,kBAC1B5nE,OAAOC,OAAO8b,EAAK,CACjBmnD,UAAcrkC,EAAS+oC,eACvBr1D,aAAcX,GAElB,CAGA,OADAugB,EAAI8zC,gBAAgBlqD,GACbzV,KAAK0e,aAAamN,EAAI0zC,oBAC/B,IACCl9C,SAAS2vC,EAAiB8I,mBAAmB,WAC5C,OAAKjvC,EAAI60C,WAAWa,mBAAoG,IAAhF11C,EAAI60C,WAAWa,iBAAiB,qBAAsB3yE,EAAa6a,SASpGzJ,KAAK0e,aAAamN,EAAI00C,wBAR3B10C,EAAI8zC,gBAAgB,CAClB/C,UAAc,qBACd3wD,aAAcrd,EAAa6a,UAEtBzJ,KAAK0e,aAAamN,EAAI0zC,qBAKjC,IACC38C,MAAK,KACJiJ,EAAI21C,sBAAsB,IAU9BxhE,KAAKohE,uBAAyB,IAAIvjD,EAAM,CACtChhB,KAAewgE,EAAiBoE,6BAChCljD,cAAesN,EAAI+yC,oBAElBngD,SAAQ,WAEP,MAMM69C,EAAKzwC,EAAI61C,2BANE,SAA2BC,GAC1C3hE,KAAK0gE,WAAaiB,EAClB3hE,KAAKkd,aAAa,IAAIw/C,EACJ,CAAE7/D,KAAMm1D,EAAiB4J,wBAE7C,EACmDp9D,KAAKqtB,IACxD,OAAW,OAAPywC,EAEKt8D,MAET6rB,EAAI60C,WAAapE,EACVt8D,KAAK0e,aAAamN,EAAI+1C,yBAC/B,IACCv/C,SAAS2vC,EAAiB4J,uBAAuB,WAChD,OAAO57D,KAAK0e,aAAamN,EAAI+1C,wBAC/B,IAEF5hE,KAAK4hE,wBAA0B,IAAI/jD,EAAM,CACvChhB,KAAewgE,EAAiBwE,yBAChCtjD,cAAesN,EAAI+yC,oBAElBl8C,OAAM,KACLoJ,EAAS,kCACTD,EAAIi2C,2BAA2B,IAEhCrjD,SAAQ,WACP,OAAmC,IAA/BoN,EAAIk2C,uBAEC/hE,KAAK0e,aAAamN,EAAIm2C,mBAGxBhiE,KAAK0e,aAAamN,EAAIo2C,qBAC/B,IACC5/C,SAAS2vC,EAAiBsJ,mBAAmB,WAC5C,MACMhwD,EAAU1c,EAAa6a,QAK7B,OAJAoiB,EAAI8zC,gBAAgB,CAClB/C,UAHe,wCAIf3wD,aAAcX,IAETtL,KAAK0e,aAAamN,EAAI0zC,oBAC/B,IACC38C,MAAK,WAEJ,OADAiJ,EAAIq2C,6BACGliE,IACT,IAEFA,KAAKgiE,kBAAoB,IAAInkD,EAAM,CACjChhB,KAAewgE,EAAiB8E,uBAChC5jD,cAAesN,EAAI+1C,0BAElBv/C,SAAS2vC,EAAiBmJ,wBAAwB,SAAgCuD,GAEjF,MAAM90B,EAAgB80B,EAAO5B,OAAOxhE,UAC9B8mE,EAAkBpkE,EAAmB0gE,EAAO5B,OAAOuF,yBACnDz/B,EAAWgH,EAAcnT,YACzBoM,EAAW+G,EAAchT,WAC/B,GAAiB,MAAbgM,EAAkB,CACpB,MAAM32B,EAAe7I,EAA2B+F,gBAAgBy5B,EAAUC,GAQ1E,OAPA/W,EAAS,8CAA8C8W,MAAa32B,OACtD42B,sBAA6Bu/B,KAC3Cv2C,EAAI8zC,gBAAgB,CAClB/C,UAAc/5B,EACdrM,aAAcoM,EACd32B,iBAEKjM,KAAK0e,aAAamN,EAAIy2C,iBAC/B,CAEA,OAAIz2C,EAAItO,SAASglD,qBACb12C,EAAI22C,mBACJ32C,EAAI22C,kBAAkBn6B,gBACjBroC,KAAK0e,aAAamN,EAAI42C,4BAExBziE,KAAKgjB,sBAAsB6I,EAAI+yC,kBAAmB,gBAC3D,IAEF5+D,KAAKiiE,qBAAuB,IAAIpkD,EAAM,CACpChhB,KAAewgE,EAAiBqF,4BAChCnkD,cAAesN,EAAI+1C,0BAElBv/C,SAAS2vC,EAAiBmJ,wBAAwB,SAAgCuD,GAEjF,MAAM90B,EAAgB80B,EAAO5B,OAAOxhE,UAC9B8mE,EAAkBpkE,EAAmB0gE,EAAO5B,OAAOuF,yBACnDz/B,EAAWgH,EAAcnT,YACzBoM,EAAW+G,EAAchT,WAI/B,GAAiB,MAAbgM,EAAkB,CACpB,MAAM32B,EAAe7I,EAA2B+F,gBAAgBy5B,EAAUC,GAQ1E,OALAhX,EAAI8zC,gBAAgB,CAClB/C,UAAc/5B,EACdrM,aAAcoM,EACd32B,iBAEKjM,KAAK0e,aAAamN,EAAI0zC,oBAC/B,CAGA,OADAzzC,EAAS,sDAAsDs2C,KACxDpiE,KAAKkjB,mBAAmB,KACjC,IACCb,SAAS2vC,EAAiBiJ,2BAA2B,WACpD,OAAmC,IAA/BpvC,EAAIk2C,uBAEC/hE,KAAK0e,aAAamN,EAAIm2C,mBAGxBhiE,KAAKkjB,mBAAmB,KACjC,IAEFljB,KAAKyiE,2BAA6B,IAAI5kD,EAAM,CAC1ChhB,KAAewgE,EAAiBsF,oBAChCpkD,cAAesN,EAAI+yC,oBAElBl8C,OAAM,KAELmJ,EAAI22C,kBAAkBxmD,UACtB6P,EAAI+2C,4BAA4B/2C,EAAI22C,kBAAkB,IAEvDngD,SAAS2vC,EAAiBhoC,SAAS,WAElC,OAAK6B,EAAI22C,kBAAkBn6B,gBAKpBroC,KAAKkjB,mBAAmB,MAHtBljB,KAAKgjB,sBAAsB6I,EAAI+yC,kBAAmB,gBAI7D,IACCv8C,SAAS2vC,EAAiBjoC,aAAa,SAAiB20C,GAKvD,OAJA7yC,EAAI8zC,gBAAgB,CAClB/C,UAAc,wCAAwC8B,EAAO9B,YAC7D3wD,aAAcrd,EAAayV,gBAEtBrE,KAAK0e,aAAamN,EAAI0zC,oBAC/B,IAEFv/D,KAAK+/D,mBAAqB,IAAIliD,EAAM,CAClChhB,KAAewgE,EAAiBtC,aAChCx8C,cAAesN,IAEdnJ,OAAM,WAEL,OADAmJ,EAAIkzC,oBACG/+D,IACT,IACCye,SAAQ,WAQP,OAPIoN,EAAItO,SAASslD,qBAEfh3C,EAAIsyC,WAAW50C,MAAMzb,SAAQ6d,GAAYE,EAAIi3C,2BAA2Bn3C,KAExEE,EAAIsyC,WAAW30C,kBAAkB1b,SAC/B6d,GAAYE,EAAIi3C,2BAA2Bn3C,MAExC3rB,KAAK0e,aAAamN,EAAIk3C,eAC/B,IACC1gD,SAAS2vC,EAAiBp4C,YAAY,WACrC,OAAO5Z,KAAK0e,aAAamN,EAAIm3C,qBAC/B,IACC3gD,SAAS2vC,EAAiBqJ,WAAW,SAAqBqD,GAGzD,OAFA7yC,EAAI8zC,gBAAgBjB,GACpB7yC,EAAIo3C,iBACGjjE,KAAK+iB,uBAAuB8I,EAAI+yC,kBAAmB,qBAC5D,IACCv8C,SAAS2vC,EAAiBwJ,YAAY,SAAqBkD,GAI1D,OAHA7yC,EAAI8zC,gBAAgBjB,GACpB7yC,EAAIo3C,iBAEGjjE,KAAK+iB,uBAAuB8I,EAAI+yC,kBAAmB,qBAC5D,IACCv8C,SAAS2vC,EAAiBgJ,qBAAqB,SAA8B0D,GAK5E,OAJA7yC,EAAI8zC,gBAAgBjB,GACpB5yC,EAAS,wEAETD,EAAIo3C,iBACGjjE,KAAK+iB,uBAAuB8I,EAAI+yC,kBAAmB,qBAC5D,IACCv8C,SAAS2vC,EAAiBmJ,wBAAwB,SAAgCuD,GACjF,MAAM90B,EAAgB80B,EAAO5B,OAAOxhE,UAC9B8mE,EAAkBpkE,EAAmB0gE,EAAO5B,OAAOuF,yBACnDz/B,EAAWgH,EAAcnT,YACzBoM,EAAW+G,EAAchT,WAG/B,OADA/K,EAAIq3C,8BAA8BtgC,EAAUC,EAAUu/B,OAAiBxxE,GAAW,GAC3EoP,KAAKkjB,mBAAmB,KACjC,IACCb,SAAS2vC,EAAiBiJ,2BAA2B,SAAyByD,GAE7E,MAAMmB,EAAetnE,EAAakkE,MAAMhkE,EAAiB2hE,gBACjB,GAAI,KAAM,EAAG,KAAMsE,EAAO3wE,YAGlE,OAFA89B,EAAI6zC,iBAAiBG,GACrBh0C,EAAI0yC,oBAAqB,EAClBv+D,KAAKkjB,mBAAmB,KACjC,IACCb,SAAS2vC,EAAiBuJ,mBAAmB,SAA4BmD,GAExE,MAAM/yC,EAAWE,EAAIsyC,WAAWztD,IAAIguD,EAAO1B,sBAE3C,OADAnxC,EAAIi3C,2BAA2Bn3C,GACxB3rB,IACT,IACC4iB,MAAK,WAEJ,OADAiJ,EAAIs3C,iBACGnjE,IACT,IAEFA,KAAK+iE,eAAiB,IAAIllD,EAAM,CAC9BhhB,KAAewgE,EAAiB+F,gBAChC7kD,cAAesN,EAAIk0C,qBAElBr9C,OAAM,KACLmJ,EAAIwzC,kBAAoB5mE,EAAiB6wB,WACzCuC,EAAIw3C,mBAAmB,IAG3BrjE,KAAKy+D,oBAAsB,IAAI5gD,EAAM,CACnChhB,KAAewgE,EAAiBhD,aAChC97C,cAAesN,IAEdxJ,SAAS2vC,EAAiBp4C,YAAY,WAKrC,OAJAiS,EAAItK,oBAAmB,KACrBsK,EAAI6zC,iBAAiBnnE,EAAakkE,MAAMhkE,EAAiB4hE,cAAc,IAGlEr6D,KAAKkjB,mBAAmB,KACjC,IACCb,SAAS2vC,EAAiBr4C,SAAS,WAClC,OAAO3Z,KAAK0e,aAAamN,EAAI+yC,kBAC/B,IACCv8C,SAAS2vC,EAAiBqJ,WAAW,WAEpC,OAAOr7D,KAAKkjB,mBAAmB,KACjC,IACFljB,KAAKgjE,qBAAuB,IAAInlD,EAAM,CACpChhB,KAAewgE,EAAiBiG,cAChC/kD,cAAesN,IAEdpN,SAAQ,KACPqN,EAAS,yBAAyBD,KAC3B7rB,KAAK0e,aAAamN,EAAI03C,uBAE9BlhD,SAAS2vC,EAAiBp4C,YAAY,WACrC,OAAO5Z,KAAKkjB,mBAAmB,KACjC,IACCb,SAAS2vC,EAAiBqJ,WAAW,SAAqByE,GAYzD,OAFAj0C,EAAI8zC,gBAAgB,CAAEG,aACtBj0C,EAAIo3C,iBACGjjE,KAAK+iB,uBAAuB8I,EAAI+yC,kBAAmB,sBAC5D,IACCv8C,SAAS2vC,EAAiBgJ,qBAAqB,WAG9C,OAFAlvC,EAAS,0EACTD,EAAIo3C,iBACGjjE,KAAK+iB,uBAAuB8I,EAAI+yC,kBAAmB,sBAC5D,IAEF5+D,KAAKujE,mBAAqB,IAAI1lD,EAAM,CAClChhB,KAAewgE,EAAiBmG,oBAChCjlD,cAAesN,EAAIm3C,sBAClB,CAED,kBAAAS,GACE,MAAM,yBAAE/sE,GAA6BumE,EAUrC57D,GAAQrB,KAAK0jE,aACb1jE,KAAK0jE,aAAc,EAEnB,MAAMC,EAA0B,CAAC96C,EAAM+6C,EAAWC,KAGhD,GAFAxiE,EAAOwnB,EAAM,sCAET7oB,KAAK8jE,MAAM9xD,IAAI6W,GAAO,OAE1B7oB,KAAK8jE,MAAMpzD,IAAImY,GACf7oB,KAAK+jE,QAAQrzD,IAAImY,GACjB,MAAMm7C,EAAa,KAEjBH,EAAW/1D,SAAQyH,GAASsT,EAAKlN,gBAAgBpG,EAAOyuD,KACxDhkE,KAAK+jE,QAAQjyD,OAAO+W,GACf7oB,KAAK0jE,aAAa1jE,KAAKikE,mBAAmB,EAEjDJ,EAAW/1D,SAAQyH,GAASquD,EAAUjxE,KAAKk2B,EAAMtT,EAAOyuD,KACxD,IACEn7C,EAAKnM,oBACP,CAAE,MAAO9G,GAIPouD,GACF,GAcEn4C,EAAIsyC,YACNtyC,EAAIsyC,WAAW50C,MAAMzb,SAAS+a,IAC5B86C,EAAwB96C,EACAA,EAAKnN,MACL,CACEhlB,EAAyB2yB,KACzB3yB,EAAyB4yB,YACzB,IAI9BtpB,KAAK0jE,aAAc,CACrB,EAIA,iBAAAO,GAC0CjkE,KAAK+jE,QACnB,IAAtB/jE,KAAK+jE,QAAQv8C,OAEfxnB,KAAKyjE,qBAEqB,IAAtBzjE,KAAK+jE,QAAQv8C,MACfxnB,KAAKkkE,UAGX,EACA,OAAAA,GAGElkE,KAAK8jE,MAAQ,KACb9jE,KAAK+jE,QAAU,KACfj4C,EAAS,0BACTD,EAAI3O,aAAa,IAAIU,EAAS,CAAE/gB,KAAMm1D,EAAiByJ,qBACzD,IAEC/4C,OAAM,WACL1iB,KAAK8jE,MAAQ,IAAIz0D,IACjBrP,KAAK+jE,QAAU,IAAI10D,IACnBrP,KAAKikE,mBACP,IACC5hD,SAAS2vC,EAAiByJ,oBAAoB,WAC7C,OAAOz7D,KAAK0e,aAAamN,EAAIs4C,kBAC/B,IAEFnkE,KAAKmkE,kBAAoB,IAAItmD,EAAM,CACjChhB,KAAewgE,EAAiB+G,mBAChC7lD,cAAesN,EAAIm3C,sBAClB,CACD,cAAAqB,GACEx4C,EAAIo3C,iBACJp3C,EAAIy4C,uBAAsB,IAAMtkE,KAAKukE,uBACrCvkE,KAAK+8D,UAAY,IACnB,EACA,kBAAAwH,GACE14C,EAAI3O,aAAa,IAAIU,EAAS,CAAE/gB,KAAMm1D,EAAiB0J,oBACzD,IAECh5C,OAAM,WACLoJ,EAAS,sBACT9rB,KAAKqkE,gBACP,IACChiD,SAAS2vC,EAAiB0J,mBAAmB,WAE5C,OADA5vC,EAAS,4BACF9rB,KAAK+iB,uBAAuB8I,EAAI+yC,kBAAmB,sBAC5D,GACJ,CAMA,sBAAA4F,CAAuBv1C,GACrB,GAAIlX,EAAM2kC,QAAQztB,KAAiBjvB,KAAKykE,mBACtC,OAGF,MAAM,UAAErrD,GAAcpZ,KAAKmY,OACrBlK,EAAMghB,EAAYpyB,KACa,OAAjCmD,KAAKykE,mBAAmBx2D,SACSrd,IAAjCoP,KAAKykE,mBAAmBx2D,IAE1BjO,KAAKykE,mBAAmBx2D,GAAOghB,EAE/BjvB,KAAK0kE,2BAGL1kE,KAAKykE,mBAAmBx2D,GAAOghB,CAEnC,CAOA,8BAAA01C,CAA+Br0C,GAC7B,GAAIvY,EAAM2kC,QAAQpsB,KAAoBtwB,KAAK4kE,gBACzC,OAAO,KAET,MAAMC,EAAM7kE,KAAK4kE,gBAAgBt0C,GACjC,GAAIu0C,QACF,OAAO,KAGT,MAAM,UAAEzrD,EAAS,UAAEle,GAAc8E,KAAKmY,OAGlC0sD,EAAIrQ,QACN19C,aAAa+tD,EAAIrQ,OACjBqQ,EAAIrQ,MAAQ,MAEd,WACwBx0D,KAAK4kE,gBAAgBt0C,IAEzCp1B,EAAU,8BAA8Bo1B,IAE5C,CAAE,MAAOxQ,GACP5kB,EAAU,8BAA8Bo1B,IAAkBxQ,EAC5D,CACA,OAAO+kD,CACT,CAMA,cAAA5B,GACE,MAAM,SAAEn3C,GAAa9rB,KAAKmY,OAC1B2T,EAAS,oBAET,MAAM,iBACJlF,EAAgB,sBAChBC,GACEo2C,EAEAj9D,KAAK4kE,iBACPlrE,OAAO8F,KAAKQ,KAAK4kE,iBAAiB92D,SAAQG,GACxCjO,KAAK2kE,+BAA+B12D,KAGxCjO,KAAK++D,oBACL/+D,KAAKwhE,uBACLxhE,KAAKmjE,iBACLnjE,KAAKm+D,WAAW50C,MAAMzb,SAAS6d,IAC7BA,EAAS1O,gBACP,IAAI2J,EAAiB,CAAE/pB,KAAMgqB,EAAsBgD,eACpD,IAGH7pB,KAAKm+D,WAAW30C,kBAAkB1b,SAAS6d,IACzCA,EAAS1O,gBACP,IAAI2J,EAAiB,CAAE/pB,KAAMgqB,EAAsBgD,eACpD,IAEC7pB,KAAKwiE,mBACPxiE,KAAKwiE,kBAAkBvlD,gBACrB,IAAIigD,EAAa93B,kBAAkB,CACjCvoC,KAAMqgE,EAAa73B,uBAAuBxb,gBAIhD7pB,KAAKud,SAAS0lD,gBAChB,CAKA,oBAAAzB,GACOxhE,KAAK8kE,mBAIVhuD,aAAa9W,KAAK8kE,kBAClB9kE,KAAK8kE,iBAAmB,KAC1B,CAMA,iBAAA/F,GACO/+D,KAAK+kE,gBAIVjuD,aAAa9W,KAAK+kE,eAClB/kE,KAAK+kE,mBAAgBn0E,EACvB,CAMA,cAAAuyE,GACE,MAAM,SAAEr3C,GAAa9rB,KAAKmY,OAEtBnY,KAAKglE,kBACPl5C,EAAS,0BACTrV,cAAczW,KAAKglE,iBACnBhlE,KAAKglE,gBAAkB,MAGzBhlE,KAAKilE,uBACP,CAQA,YAAAhE,CAAaF,GACX,IAAImE,GAAmB,EACvB,IAAwC,IAApCllE,KAAKg+D,mBAAmB3rC,QAAkB,CAC5C,MAAM8yC,EAAOpE,EAAcqE,wBAKzBF,IAJGC,IAI0D,kBAAlCA,EAAK/sE,EAAe86D,WAA2BiS,EAAK/sE,EAAe86D,UAElG,CACA,OAAOgS,CACT,CASA,kBAAAhE,CAAmBH,GACjB,MAAM,UAAEllD,GAAc7b,KAAKmY,OAC3B,GAAInY,KAAKqlE,eAAgB,CACvB,MAAMF,EAAOpE,EAAcqE,wBAC3B,SAAKD,GAAuD,kBAAxCA,EAAK/sE,EAAe87D,mBAIO,IAAxCiR,EAAK/sE,EAAe87D,eAC7B,CACA,OAAO,CACT,CAQA,iCAAAoR,CAAkCr2C,GAChC,IAAIxwB,EAAQ,KAYZ,OAXIwwB,GAAeA,EAAYvuB,WACzBuuB,EAAYluB,wBACRkuB,EAAYluB,sBAAsBiB,SAC/BitB,EAAYluB,sBAAsBa,cACrC5B,KAAKud,SAASoR,UAAUv2B,EAAe82B,wBAC7CzwB,EAAQ,IAAI5P,EACV,iEACAD,EAAauc,mCACb,OAGC1M,CACT,CAKA,iBAAA+/D,GACEx+D,KAAKy/D,cAAgB,IACvB,CAKA,0BAAAyC,GACEliE,KAAKulE,uBAAyB,IAChC,CAKA,yBAAAzD,GAEE9hE,KAAKkiE,6BACLliE,KAAKulE,uBAAyB7rE,OAAO8F,KAAKQ,KAAKykE,oBAAsB,CAAC,GAItE,MAAMe,EAAW5L,EAAQE,wBAAwB95D,KAAKg+D,mBAAmByH,cACzEzlE,KAAKulE,uBAAuBzsD,KAAK0sD,EACnC,CAEA,sBAAAE,GACE,MAAM,UAAEtsD,GAAcpZ,KAAKmY,OAC3B,IAAKnY,KAAKg+D,mBAAmB2H,oBAAoB/+B,QAE/C,OAGF,MAAM,iBACJ3B,EAAgB,0BAChBC,GACEg4B,EACE11B,EAAY,IAAIvC,EAAiB,CACrCrZ,WAAyB5rB,KAAKg+D,mBAAmB2H,oBACjDnrD,wBAAyBxa,KAAKo+D,wBAEhC52B,EAAUnzB,GACR6wB,EAA0Bjc,IAC1B,IAAMjpB,KAAKkd,aAAa,IAAIw/C,EAC1B,CAAE7/D,KAAMm1D,EAAiBhoC,SACzB,CAAEgzC,qBAAsBx1B,OAC5BA,EAAUnzB,GACR6wB,EAA0B7W,sBAC1B9Y,GAASvV,KAAKkd,aACZ,IAAIw/C,EACF,CAAE7/D,KAAMm1D,EAAiBjoC,aACzB,CACEizC,qBAAsBx1B,EACtBjyB,QACAqnD,UAAsBrnD,EAAMohB,iBAGpC6Q,EAAUnzB,GAAG6wB,EAA0BgB,kBAAkB,CAAC76B,EAASy8B,KACjE,MAAMvR,EAASuR,EAAYxsC,UACrBsnC,EAAWrM,EAAOE,YAClBoM,EAAWtM,EAAOK,WAClB3qB,EAAe7I,EAA2BgG,kBAAkBw5B,EAAUC,GACtEttB,EAAQhd,EAAakkE,MAAMhkE,EAAiBwhE,uBACjBp3B,EACAD,EACA32B,EACAZ,EAAQgvC,qBACzC9kC,EAAe,QAAIlK,EACnBrL,KAAK0/D,iBAAiBnqD,EAAM,IAE9BiyB,EAAUnzB,GAAG6wB,EAA0Ba,sBAAuB16B,IAC5D,MAAMkK,EAAQhd,EAAakkE,MAAMhkE,EAAiBstC,qBACjB,+BACAn1C,EACA,EACAya,EAAQgvC,qBACzC9kC,EAAe,QAAIlK,EACnBrL,KAAK0/D,iBAAiBnqD,EAAM,IAE9BiyB,EAAUnzB,GAAG6wB,EAA0Bc,mBAAoB12C,IACzD,MAAM,SAAEk7C,EAAQ,MAAEC,GAAUn7C,EAC5B,GAAIm7C,EAAQ,EAAG,CACb,MAAMl1B,EAAQhd,EAAakkE,MAAMhkE,EAAiB+hE,8BACjB,gBAAgB/vB,sEAEjDl1B,EAAgB,SAAIi1B,EACpBj1B,EAAa,MAAIk1B,EACjBzqC,KAAK0/D,iBAAiBnqD,EACxB,KAEFiyB,EAAUnzB,GAAG6wB,EAA0Bxa,UAAU,KAC/C1qB,KAAK0/D,iBACHnnE,EAAakkE,MAAMhkE,EAAiB2hE,gBACjB,GAAG5yB,qCAA6C,IAEvEA,EAAUnzB,GAAG6wB,EAA0Be,2BAA2B,KAChEjmC,KAAK0/D,iBACHnnE,EAAakkE,MACXhkE,EAAiBkiE,kCACjB,2CAA2C,IAEjD36D,KAAKwiE,kBAAoBh7B,CAC3B,CAEA,0BAAAs7B,CAA2Bn3C,GACzB,MAAM,iBACJ/E,EAAgB,sBAChBC,GACEo2C,EAEE1nD,EAAQ,IAAIqR,EAAiB,CACjC/pB,KAFWmD,KAAKud,SAASslD,mBAGrBh8C,EAAsB8C,WACtB9C,EAAsB+C,mBAE5BrU,EAAMynD,qBAAuBrxC,EAC7BA,EAAS1O,gBAAgB1H,EAC3B,CAEA,2BAAAqtD,CAA4Bp7B,GAC1B,MAAMo+B,EAAO5lE,KAAKud,SAASglD,oBACrBhtD,EAAQ,IAAI2nD,EAAa93B,kBAAkB,CAC/CvoC,KAAM+oE,EACF1I,EAAa73B,uBAAuB1b,WACpCuzC,EAAa73B,uBAAuBzb,mBAE1CrU,EAAMynD,qBAAuBx1B,EAC7BA,EAAUvqB,gBAAgB1H,EAC5B,CAUA,qBAAAswD,CAAsBj6C,GACpB,MAAM,gBAAEp1B,GAAoBymE,EACtBtxC,EAAW,IAAIn1B,EAAgB,CACnCo1B,aACApR,wBAAyBxa,KAAKo+D,wBAI1BzoC,EAAqBhK,EAAShP,gBACpC,GAAIgZ,EAAmB3G,0BAA2B,CAEhD,MAAMvwB,EACFuB,KAAKslE,kCAAkC3vC,EAAmB3G,2BAC9D,GAAIvwB,EACF,MAAMA,CAEV,CAEA,MAAM,SAAExD,GAAa+E,KAAKmY,OAGpBqW,EAAqBmH,EAAmBpH,2BAC9C,GAAIC,GAAsBA,EAAmBthC,OAAS,EAAG,CAGvD,GADuBshC,EAAmB/uB,MAAKge,GAAKA,IAAMrnB,EAAeq4B,QAAUr4B,EAAes4B,aAC5E1uB,KAAKud,SAASoR,UAAUv2B,EAAew2B,mBAAoB,CAC/E,MAAMC,EAA2B,sDAC/BL,EAAmB97B,KAAI+qB,GAAK,yBAAyBrnB,EAAe+Y,OAAOsO,OAAMxpB,KAAK,UAKxF,MAFAgH,EAAS4zB,GAEH,IAAIhgC,EAAeggC,EAA0BjgC,EAAa4a,kBAAmB,KACrF,CACF,CACA,MAAMsM,EAAO,CAAEknD,qBAAsBrxC,GAKrC,OAHA3rB,KAAKkd,aACH,IAAIw/C,EAAgB,CAAE7/D,KAAMm1D,EAAiBuJ,mBAAqBzlD,IAE7D6V,CACT,CAUA,kBAAAm6C,CAAmBl6C,GACjB,MAAM,+BAAEn1B,EAA8B,aAAEG,GAAiBqmE,GACnD,UAAE7jD,GAAcpZ,KAAKmY,OAIrBwd,EAAqB,CAAC,EAC5BA,EAAmBrG,gBAAkB1D,EAAW0D,gBAChDqG,EAAmB3J,gBAAkBv1B,EAA+BynC,OACpEvI,EAAmBnD,SAAU,EAGzB94B,OAAOjH,UAAUmtC,eAAejtC,KAAKi5B,EAAY,2BACnD+J,EAAmB9E,sBAAwBjF,EAAWiF,uBAEpDn3B,OAAOjH,UAAUmtC,eAAejtC,KAAKi5B,EAAY,qBACnD+J,EAAmBrE,gBAAkB1F,EAAW0F,iBAE9C53B,OAAOjH,UAAUmtC,eAAejtC,KAAKi5B,EAAY,gBACnD+J,EAAmBnJ,WAAaZ,EAAWY,YAEzC9yB,OAAOjH,UAAUmtC,eAAejtC,KAAKi5B,EAAY,wCACnD+J,EAAmBsK,mCACjBrU,EAAWqU,oCAEXvmC,OAAOjH,UAAUmtC,eAAejtC,KAAKi5B,EAAY,6CACnD+J,EAAmBuK,wCACjBtU,EAAWsU,yCAKf,OADgB,IAAItpC,EADHoJ,KAAK6lE,sBAAsBlwC,GAG9C,CAOA,uBAAAuqC,CAAwB7vC,EAAK/kB,GAC3B,GAAIyM,EAAM2kC,QAAQ18C,KAAK0gE,YAKrB,YAHA1gE,KAAKkd,aACH,IAAIw/C,EAAgB,CAAE7/D,KAAMm1D,EAAiBgJ,uBAIjD,MAAM,SAAElvC,EAAQ,UAAE5wB,GAAc8E,KAAKmY,OACrC2T,EAAS,6BAET,MAAMge,EAAa9pC,KAAK0gE,WAAWqF,QAAQ11C,EAAK/kB,GAChDtL,KAAKgmE,WAAa,KAEdl8B,IAAeqzB,EAAav0B,oBAAoB1O,IAClDh/B,EAAU,qDACRiiE,EAAav0B,oBAAoBxpC,SAAS0qC,KAEhD,CAOA,eAAA60B,GACE,GAAI3+D,KAAKkb,UACP,OAGF,MAAM+qD,EAAa,CACjB,UAAa,KACXjmE,KAAKkgE,wBAAwB,YAAa,GAC1ClgE,KAAK0gE,WAAa,KAClB1gE,KAAKgmE,WAAa,IAAI,EAExB,QAAW,KACThmE,KAAKijE,iBACLjjE,KAAKud,SAAW,KAChBvd,KAAKg+D,mBAAqB,KAC1Bh+D,KAAK4kE,gBAAkB,KACvB5kE,KAAKo+D,sBAAwB,IAAI,EAEnC,WAAc,KACRp+D,KAAKi+D,qBACPj+D,KAAKi+D,mBAAmBliD,aACxB/b,KAAKi+D,mBAAqB,MAE5Bj+D,KAAKkmE,SAAW,IAAI,EAEtB,qBAAsB,KAChBlmE,KAAKykE,qBACP/qE,OAAO8F,KAAKQ,KAAKykE,oBAAoB32D,SACnCG,GAAOjO,KAAKmmE,4BAA4Bl4D,KAE1CjO,KAAKykE,mBAAqB,MAE5BzkE,KAAKkiE,6BACLliE,KAAK0kE,wBAA0B,CAAC,EAElC,kBAAqB,KACf1kE,KAAKwiE,oBACPxiE,KAAKwiE,kBAAkBtmD,UACvBlc,KAAKwiE,kBAAoB,KAC3B,EAEF,iBAAoB,KAClBxiE,KAAKm+D,WAAWz0C,aAChB1pB,KAAKm+D,WAAa,IAAI,EAExB,YAAa,KACXn+D,KAAKg/D,aAAe,KACpBh/D,KAAKk+D,OAAS,IAAI,GAItBxkE,OAAO8F,KAAKymE,GAAYn4D,SAASs4D,IAC/B,MAAM,UAAEvqD,EAAS,SAAEiQ,GAAa9rB,KAAKmY,OAC/BqF,EAAYyoD,EAAWG,GAC7B,IAEE5oD,GAEF,CAAE,MAAO5H,GACPkW,EAAS,YAAYs6C,YAAwBxwD,EAAI,gBACnD,KAEF5V,KAAKkb,WAAY,CACnB,CAEA,gBAAAwkD,CAAiBnqD,GAEfvV,KAAKud,SAAS8oD,UAAU9wD,EAC1B,CAUA,+BAAA+oD,CAAgChuC,EACAg2C,EACAC,EACA36D,EACA46D,GAC9B,GAAIzuD,EAAM2kC,QAAQpsB,GAChB,OAGF,MAAM,SAAExE,GAAa9rB,KAAKmY,OAC1B2T,EAAS,mDAAmDwE,KAC5D,IAAIkkC,EAAQ,KACR8R,IACF9R,EAAQ39C,WAAWyvD,EAAcC,GAAcvmE,KAAKg+D,mBAAmByI,qBAGzE,MAAMC,EAAiB,IAAInS,EAAkBjkC,EAC3CkkC,EACA5oD,EACA46D,GACFxmE,KAAK4kE,gBAAgBt0C,GAAkBo2C,CACzC,CAUA,UAAAC,CAAWC,EAAgB36D,EAAc4wD,EAAc,MACrD,MAAM,SAAE/wC,GAAa9rB,KAAKmY,OACpBumD,EAAS,IAAIhC,EAAgB,CAAE7/D,KAAMm1D,EAAiBqJ,YAO5D,OANAvvC,EAAS,0BAA0B86C,KAAkB/J,GAAeA,EAAYxwD,SAChFrM,KAAK2/D,gBAAgB,CACnB/C,UAAWgK,EACX36D,eACA4wD,gBAEK78D,KAAKkd,aAAawhD,EAC3B,CAEA,qBAAA4F,CAAsB/7C,GAChBvoB,KAAK0gE,WACP1gE,KAAK0gE,WAAWmG,MAAMt+C,GAEtBA,GAEJ,CAMA,iBAAAgI,GACE,OAAOvwB,KAAKgmE,WAAWc,oBACzB,CAQA,mBAAAruC,GACE,MAAMtX,EAAenhB,KAAKkhB,kBAE1B,OAAKC,EACDA,IAAiBnhB,KAAKyf,gBAAwB49C,EAAiBl0C,SAC5DnpB,KAAKkhB,kBAAkBzgB,UAFJ,IAG5B,CASA,OAAAoc,CAAQC,GACN,QAAgClsB,IAA5BoP,KAAKi+D,mBAYT,OAAInhD,IAAa1jB,EAAS2tE,mBACjB/mE,KAAKi+D,mBAAmBphD,QAAQzjB,EAAS4tE,gBAC9ChnE,KAAKi+D,mBAAmBphD,QAAQzjB,EAAS6tE,oBACzCjnE,KAAKi+D,mBAAmBphD,QAAQzjB,EAAS8tE,uBAClCpqD,IAAa1jB,EAAS+tE,oBACxBnnE,KAAKi+D,mBAAmBphD,QAAQzjB,EAASguE,iBAC9CpnE,KAAKi+D,mBAAmBphD,QAAQzjB,EAASiuE,qBACzCrnE,KAAKi+D,mBAAmBphD,QAAQzjB,EAASkuE,wBAEtCtnE,KAAKi+D,mBAAmBphD,QAAQC,EACzC,CAQA,gBAAAyqD,GACE,OAAIxvD,EAAM2kC,QAAQ18C,KAAK0gE,YACd,iBAEF1gE,KAAK0gE,WAAW8G,YACzB,CAWA,mBAAAC,CAAoBp8D,EAASkrB,GAC3B,MAAMlZ,EAAShS,EAAQioB,YACjBuP,EAAWtM,EAAOK,WAClBtG,EAAiBiG,EAAOmxC,YACxB,SAAE57C,EAAQ,UAAE1S,EAAS,SAAEne,GAAa+E,KAAKmY,OAE/C,GAAImY,EAAgB,CAGlBtwB,KAAK2nE,cAAct8D,GAEnBygB,EAAS,0CAA0CwE,KAEnD,MAAMs3C,EAAmB5nE,KAAK2kE,+BAA+Br0C,GAC7D,OAAIvY,EAAM2kC,QAAQkrB,GACT5nE,KAAK2mE,WAAW,8CAA8C9jC,IAC9Cj0C,EAAagb,gBAGlCg+D,EAAiBnT,mBAGnBmT,EAAiBnT,kBAAkBppD,EAASu8D,GACrC5nE,OAITA,KAAKgd,QAAQ5jB,EAASyuE,sBACf7nE,KACT,CAGA,IAAI6oB,EACJ,MAAMsN,EAAU9qB,EAAQ8qB,SAClB,yBAAEC,GAA6BlL,EACrC,OAAQiL,GACN,KAAKC,EAAyB4R,UAC9B,KAAK5R,EAAyB6R,WAC9B,KAAK7R,EAAyB8R,aACxBloC,KAAKwiE,kBAAkBnlD,SAAWA,IACpCwL,EAAO7oB,KAAKwiE,mBAEd,MACF,QACE35C,EAAO7oB,KAAKm+D,WAAW10C,YAAYpM,GAGvC,GAAIwL,IAASA,EAAKzL,SAIhB,OAFApd,KAAK2nE,cAAct8D,EAASwd,GAC5BA,EAAK9L,iCAAiC1R,GAC/BrL,KAIT,MAAMu4B,EAAWltB,EAAQ21D,cACnB1E,EAAK/jC,EAAW,IAAIA,EAAS/B,gBAAgB+B,EAAS+oC,mBAAqB,GAOjF,OANArmE,EACE,mBAAmBiwB,EAAOkL,yBAAyBh3B,SAASiM,EAAQ8qB,YAChEmmC,qBAAsBj/C,KAE5Brd,KAAKgd,QAAQ5jB,EAASkgC,iCAEft5B,IACT,CAQA,iBAAA8nE,CAAkBz8D,EAASkrB,GACzB,MAAM,UAAEnd,GAAcpZ,KAAKmY,OACrBkF,EAASkZ,EAAOwxC,aAEhBl/C,EAAO7oB,KAAKm+D,WAAW10C,YAAYpM,GACzC,OAAKwL,GAAQA,EAAKzL,UAGhBpd,KAAK2nE,cAAct8D,EAASrL,KAAKi+D,oBACjCj+D,KAAKgd,QAAQ5jB,EAASkgC,iCACf,OAETt5B,KAAK2nE,cAAct8D,EAASwd,GAC5BA,EAAK8Y,kBAAkBt2B,GAChBwd,EACT,CAOA,4BAAAm/C,CAA6B13C,EAAgB23C,GAE3C,QAA6Cr3E,IAAzCoP,KAAK4kE,gBAAgBt0C,IACoB,OAAzCtwB,KAAK4kE,gBAAgBt0C,GACvB,OAGF,MAAM,SAAExE,EAAQ,UAAE5wB,GAAc8E,KAAKmY,OACrC2T,EAAS,GAAGm8C,GAAc,6CAA6C33C,KACvE,WACwBtwB,KAAK4kE,gBAAgBt0C,IAEzCp1B,EAAU,8BAA8Bo1B,IAE5C,CAAE,MAAOxQ,GACP5kB,EAAU,8BAA8Bo1B,iBAA8BxQ,EAAEzU,UAC1E,CACF,CAQA,uBAAA68D,CAAwB78D,EAASkrB,GAC/B,IAAIjG,EACJ,MAAM,SAAExE,GAAa9rB,KAAKmY,OAC1BnY,KAAK2nE,cAAct8D,GACfA,EAAQ8qB,UAAYjL,EAAOi9C,yBAAyBC,OAGtD93C,EAAiB6sC,EAAakL,UAAUC,yCACxCx8C,EAAS,8CAETwE,EAAiBiG,EAAOmxC,WACxB57C,EAAS,0CAA0CwE,MAGrD,MAAMs3C,EAAmB5nE,KAAK2kE,+BAA+Br0C,GAC7D,GAAIvY,EAAM2kC,QAAQkrB,GAAmB,CACnC,MAAM/kC,EAAWtM,EAAOK,WACxB,OAAO52B,KAAK2mE,WAAW,8CAA8C9jC,IAC9Cj0C,EAAagb,eACtC,CAAO,OAAIg+D,EAAiBnT,kBAGnBmT,EAAiBnT,kBAAkBppD,IAG5CygB,EAAS,iEAAiEwE,KACnEtwB,KAAKgd,QAAQ5jB,EAASyuE,sBAC/B,CAMA,wBAAAU,CAAyBxH,GACvB,MAAMrC,EAAS,IAAIhC,EAAgB,CAAE7/D,KAAMm1D,EAAiBoJ,gCAC5DsD,EAAO5B,OAASiE,EAChB/gE,KAAKkd,aAAawhD,EACpB,CAKA,uBAAA8J,GACE,MAAM,SAAE18C,GAAa9rB,KAAKmY,OAC1B2T,EAAS,kCACT,MAAM4yC,EAAS,IAAIhC,EAAgB,CAAE7/D,KAAMm1D,EAAiB8I,oBAC5D96D,KAAKkd,aAAawhD,EACpB,CAMA,oBAAA+J,GACE,MAAM,SAAE38C,GAAa9rB,KAAKmY,OAC1B2T,EAAS,qCACT,MAAM4yC,EAAS,IAAIhC,EAAgB,CAAE7/D,KAAMm1D,EAAiB4I,kBAC5D56D,KAAKkd,aAAawhD,EACpB,CAQA,2BAAAgK,CAA4Bp4C,EAAgB23C,GAC1C,MAAM,UAAE/sE,GAAc8E,KAAKmY,OAE3B,WACwBnY,KAAK4kE,gBAAgBt0C,IAEzCp1B,EAAU,8BAA8Bo1B,IAE5C,CAAE,MAAOxQ,GACP5kB,EAAU,8BAA8Bo1B,iBAA8BxQ,EAAEzU,UAC1E,CAGA,MAAMw0D,EAAetnE,EAAakkE,MAAMhkE,EAAiB0hE,sBACjB8N,EACA,KACAr5E,EAAa6a,QACb,KACA,MACxCzJ,KAAKqmE,UAAUxG,EACjB,CAMA,uBAAA8I,CAAwBpyC,GAEtB,MAAMqM,EAAWrM,EAAOE,YAElBmyC,EAAeryC,EAAOsyC,sBACtB9sE,EAAY6sE,EAAeA,EAAaE,QAAQ,MAAO,IAAM,GAC7DjmC,EAAWtM,EAAOK,WAClB3qB,EAAe7I,EAA2B+F,gBAAgBy5B,EAAUC,GAC1E7iC,KAAK0/D,iBAAiBnnE,EAAakkE,MACjChkE,EAAiBwhE,uBACjBp3B,EACAD,EACA32B,EACA,KACA,UAAUlQ,KAEd,CAOA,gBAAAgtE,CAAiB19D,GACf,IAME,MAAMkrB,EAASlrB,EAAQ/P,UAEvB,GAAIi7B,EAAOyyC,eAMT,OAJIhpE,KAAKi+D,oBACPj+D,KAAKi+D,mBAAmBjhD,QAAQ5jB,EAASs9B,gCAGpC,KAKT,OAAQH,EAAOh7B,cACb,KAAK2vB,EAAO+9C,YAAYC,MACtB,OAAI3yC,EAAO4yC,QACFnpE,KAAK8nE,kBAAkBz8D,EAASkrB,IAEzCv2B,KAAK2nE,cAAct8D,EAASrL,KAAKi+D,oBACH,IAAvB1nC,EAAOE,YACVz2B,KAAKud,SAASokB,kBAAkBt2B,GAChCrL,KAAK2oE,wBAAwBpyC,IAEnC,KAAKrL,EAAO+9C,YAAYG,OACtB,OAAOppE,KAAKynE,oBAAoBp8D,EAASkrB,GAE3C,KAAKrL,EAAO+9C,YAAYI,WACtB,OAAOrpE,KAAKkoE,wBAAwB78D,EAASkrB,GAE/C,KAAKrL,EAAO+9C,YAAYK,IACtB,OAAOtpE,KAAKupE,iBAAiBl+D,EAASkrB,GAExC,KAAKrL,EAAO+9C,YAAYO,UACxB,KAAKt+C,EAAO+9C,YAAYQ,YAEtB,OAAO,KAET,QACE,OAAOzpE,KAAK0pE,6BAA6Br+D,EAASkrB,GAExD,CAAE,MAAOzW,GACP,MAAM,UAAE5kB,GAAc8E,KAAKmY,OAE3B,OADAjd,EAAU,6CAA6C4kB,EAAEzT,SAClDrM,KAAK2mE,WAAW,kCAAkC7mD,EAAEzU,UACpCyU,EAAExU,SAAW1c,EAAagb,eAC1BkW,EACzB,CACF,CAOA,mBAAA6pD,CAAoBC,GAIlB,OAAO5pE,KAAK2mE,WAAWiD,EACAh7E,EAAakb,eACtC,CAEA,gBAAAy/D,CAAiBl+D,EAASkrB,GACxBv2B,KAAK2nE,cAAct8D,GAGnB,MAAMu8D,EAAmB5nE,KAAK2kE,+BAA+BpuC,EAAOmxC,YAAc,IAQlF,GAAI3vD,EAAM2kC,QAAQkrB,IAAqB7vD,EAAM2kC,QAAQkrB,EAAiBnT,mBAAoB,CAOxF,MAAMiK,EAAS,IAAIhC,EAAgB,CAAE7/D,KAAMm1D,EAAiBmJ,yBAE5D,OADAuD,EAAO5B,OAASzxD,EACTrL,KAAKkd,aAAawhD,EAC3B,CAIA,OAAOkJ,EAAiBnT,kBAAkBppD,EAASu8D,EACrD,CAUA,6BAAA1E,CAA8BtgC,EAAUC,EAAUu/B,EAAiByH,EAASC,GAC1E,MAAM79D,EAAe7I,EAA2B+F,gBAAgBy5B,EAAUC,GAMpE52B,IAAiBrd,EAAamV,8BAClCkI,IAAiBrd,EAAaqV,wBAE9BjE,KAAKmmE,4BAA4B/D,GAMnCpiE,KAAKud,SAAS2lD,8BAA8BtgC,EACAC,EACAu/B,EACAyH,EACAC,EAC9C,CAMA,yBAAAC,CAA0Bz5C,GAExB,MAAM,UAAEp1B,GAAc8E,KAAKmY,OAC3B,IACE,IAAIrnB,GAAS,EACVkP,KAAK4kE,kBACN9zE,SAAgBkP,KAAK4kE,gBAAgBt0C,IAElCx/B,GACHoK,EAAU,8BAA8Bo1B,IAE5C,CAAE,MAAOxQ,GACP5kB,EAAU,8BAA8Bo1B,IAAkBxQ,EAC5D,CACA,MAAM4+C,EAAS,IAAIhC,EAAgB,CAAE7/D,KAAMm1D,EAAiBsJ,oBAC5Dt7D,KAAKkd,aAAawhD,EACpB,CAOA,oBAAAsL,CAAqBC,GACnB,MAAM,SAAEn+C,EAAQ,SAAE7wB,GAAa+E,KAAKmY,OAC9BhM,EAAU89D,EAAezC,cAAgB,GAG/C,IAAI9I,EAEJ,OAJA5yC,EAAS,4BAA4Bm+C,KAI7BA,EAAeC,yBACrB,KAAK/M,EAAagN,0BAA0BnQ,UAC1C0E,EAAS,IAAIhC,EAAgB,CAAE7/D,KAAMm1D,EAAiB+I,eACtD2D,EAAO3B,UAAYkN,EAAeG,eAClCpqE,KAAKkd,aAAawhD,GAClB,MAEF,KAAKvB,EAAagN,0BAA0BE,iBAC1C3L,EAAS,IAAIhC,EAAgB,CAAE7/D,KAAMm1D,EAAiBgJ,sBACtD0D,EAAO3B,UAAYkN,EAAeG,eAClC1L,EAAO9B,UAAYzwD,EACnBuyD,EAAOzyD,aAAeg+D,EAAe5tB,aACrCqiB,EAAO7B,YAAcoN,EACrBjqE,KAAKgmE,WAAa,KAClBhmE,KAAK0gE,WAAa,KAClB1gE,KAAKkd,aAAawhD,GAClB,MAEF,KAAKvB,EAAagN,0BAA0B/P,gBAG1Cp6D,KAAKsqE,iCACL5L,EAAS,IAAIhC,EAAgB,CAAE7/D,KAAMm1D,EAAiBiJ,4BACtDyD,EAAO3B,UAAYkN,EAAeG,eAClCpqE,KAAKkd,aAAawhD,GAClB,MAEF,KAAKvB,EAAagN,0BAA0B3O,WAC1CkD,EAAS,IAAIhC,EAAgB,CAAE7/D,KAAMm1D,EAAiBwJ,aACtDkD,EAAO3B,UAAYkN,EAAeG,eAClC1L,EAAO9B,UAAYqN,EAAezC,aAClC9I,EAAOzyD,aAAeg+D,EAAe5tB,aACrCqiB,EAAO7B,YAAcoN,EACrBjqE,KAAKkd,aAAawhD,GAClB,MAEF,KAAKvB,EAAagN,0BAA0B5/D,kBAC5C,KAAK4yD,EAAagN,0BAA0BI,cAE1C,OAAOvqE,KAAK2mE,WAAWsD,EAAezC,aACfyC,EAAe5tB,cACxC,QACEphD,EAAS,2CAA4CgvE,GAGzD,OAAO,CACT,CAQA,4BAAAP,CAA6Br+D,EAASkrB,GACpC,MAAM,SAAEzK,EAAQ,UAAE5wB,GAAc8E,KAAKmY,OAGrC,OADAnY,KAAK2nE,cAAct8D,GACfkrB,GAAUA,EAAOh7B,eAAiB2vB,EAAO+9C,YAAYuB,UAEvDtvE,EAAU,yEACRpH,EAAgByiC,EAAOh7B,iBACzBL,EAAU,yBAAyBmQ,EAAQo/D,iCACzC32E,EAAgBuX,EAAQ0xD,cAEnB/8D,KAAK2mE,WAAW,yCACA/3E,EAAa27E,iBAIlCvqE,KAAKi+D,oBACPj+D,KAAKi+D,mBAAmBjhD,QAAQ5jB,EAASs9B,gCAE3C5K,EAAS,wCAAwCh4B,EAAgByiC,EAAOh7B,iBACjE,KACT,CAWA,OAAAyhB,CAAQF,EAAUvpB,GAChB,OAAOyM,KAAKi+D,mBAAqBj+D,KAAKi+D,mBAAmBjhD,QAAQF,EAAUvpB,QAAS3C,CACtF,CAKA,aAAA0vE,GACE,MAAM,SAAEx0C,GAAa9rB,KAAKmY,OACpBg+C,EAAOn2D,KAAKg/D,aAClBlzC,EAAS,8BAA8BqqC,KACvCn2D,KAAKkmE,SAAW,CAAEwE,eAAgB,EAAGC,iBAAkB,GAEvD3qE,KAAKgmE,WAAa,IAAI7I,EAAakL,WACjCuC,GAAU5qE,KAAK+oE,iBAAiB6B,KAChCC,GAAW7qE,KAAK2pE,oBAAoBkB,IACpC7qE,MAGFA,KAAK0gE,WAAavD,EAAa2N,iBAAiBC,gBAC9C5U,GACA8T,GAAkBjqE,KAAKgqE,qBAAqBC,IAC5CjqE,KAAKgmE,WACLhmE,KAAKg+D,mBAAmBphD,SACxB,IAAM5c,KAAK6a,eAEb7a,KAAKgrE,2BAA2BhrE,KAAKirE,sBACvC,CAaA,0BAAAD,CAA2BE,GACzBlrE,KAAKirE,sBAAwBC,EACzBlrE,KAAK0gE,YACP1gE,KAAK0gE,WAAWyK,eAAeD,EAEnC,CAOA,gBAAAE,GACE,MAAM,UAAEvvD,EAAS,UAAEzC,EAAS,SAAE0S,GAAa9rB,KAAKmY,OAKhD,GAAInY,KAAKqrE,mBAAqBrrE,KAAKg+D,mBAAmBsN,wBAUpD,OATAx/C,EAAS,6CACC9rB,KAAKg+D,mBAAmBsN,2BAG9BtrE,KAAKglE,iBACPvuD,cAAczW,KAAKglE,iBAIdhlE,KAAK2mE,WAAW,4CACA/3E,EAAaob,oBAKtC,MAAMuhE,EAAcvrE,KAAK0gE,WAAW8K,iBAC9BC,EAAoBF,EAAYG,WAChCC,EAAsBJ,EAAYK,aAElCC,EAAQ,IAAI3gD,EAAO4gD,iBAEzB,OADmB9rE,KAAKq+D,KAAKwN,EAAO,MAAM,KACvB1O,EAAav0B,oBAAoB1O,GAM3Cl6B,KAAK2mE,WAAW,iCACA/3E,EAAaob,qBAOlChK,KAAKkmE,SAASwE,iBAAmBe,GACnCzrE,KAAKkmE,SAASyE,iBAAmBgB,IAMjC3rE,KAAKqrE,oBAC8BrrE,KAAKkmE,SAASwE,eAChB1qE,KAAKkmE,SAASyE,kBALvB3qE,KAAKqrE,kBAS/BrrE,KAAKkmE,SAASyE,iBAAmBY,EAAYK,aAC7C5rE,KAAKkmE,SAASwE,eAAiBa,EAAYG,YAEpC,EACT,CAUA,qBAAAK,CAAsB1gE,GACpB,GAAIA,aAAmB5W,EAAS,CAC9B,IAAIq1C,EAEJ,MAAMkiC,EAAe3gE,EAAQksC,kBAC7B,OAAQy0B,GAEN,KAAK91E,EAAwBk/C,OAC3B,IAAKp1C,KAAK0gE,WAAY,OACtBr1D,EAAQ2hC,sBAAuB,EAC/B3hC,EAAQ4hC,gBAAkB,KAC1B5hC,EAAQ2/B,kBAAoB,KAC5BlB,EAAa9pC,KAAKwtC,gBAAgBniC,GAClC,MAEF,KAAKnV,EAAwBm/C,WAC7B,KAAKn/C,EAAwBo/C,eAC3B,IAAKt1C,KAAKwiE,kBAAmB,CAC3B,MAAMj3D,EAASvL,KAAKud,SAAS0uD,kBACvB,mBACA,uBACN,MAAM,IAAIp9E,EAAe,iEACED,EAAa2W,eACbgG,EAC7B,CACMvL,KAAKksE,mBAAmBlsE,KAAKksE,oBACjCpiC,EAAa9pC,KAAKwiE,kBAAkBr6B,wBAAwB98B,GAE9D,MAEF,QAAS,CACP,MAAM,UAAEnQ,GAAc8E,KAAKmY,OAC3Bjd,EAAU,kCAAmChF,EAAwBkJ,SAAS4sE,GAChF,EAGF,GAAIliC,IAAeqzB,EAAav0B,oBAAoB1O,GAAI,CACtD,GAAI4P,IAAeqzB,EAAav0B,oBAAoB6E,SAIlD,MADAztC,KAAKu+D,oBAAqB,EACpB,IAAI1vE,EAAe,8CACvBD,EAAaib,mBACbszD,EAAav0B,oBAAoBxpC,SAAS0qC,IAI9C9pC,KAAK2/D,gBAAgB,IAAI9wE,EAAe,sBACpCD,EAAa4a,kBACb2zD,EAAav0B,oBAAoBxpC,SAAS0qC,KAC9C9pC,KAAKkd,aAAa,IAAIw/C,EAAgB,CAAE7/D,KAAMm1D,EAAiBqJ,YACjE,CACF,CACF,CAEA,8BAAAiP,GACMtqE,KAAKwiE,mBACPxiE,KAAKwiE,kBAAkBvlD,gBACrB,IAAIigD,EAAa93B,kBAAkB,CACjCvoC,KAAMqgE,EAAa73B,uBAAuB3a,WAElD,CAMA,oBAAAq3C,GACE,MAAM,SAAEj2C,EAAQ,UAAE1S,GAAcpZ,KAAKmY,QAC7B9iB,kBAAkB,uBAAEwG,IAA6B8B,EAIzD,GAHAmuB,EAAS,mCAAmC9rB,KAAKulE,uBAAuBr4E,WAGnE8S,KAAKulE,uBAER,OAAO,EAGT,IACE,KAAOvlE,KAAKulE,uBAAuBr4E,QAAQ,CAYzC,MAAM+gB,EAAMjO,KAAKulE,uBAAuBh3E,QAClC49E,EAA6D,IAAvCnsE,KAAKulE,uBAAuBr4E,OAClDk/E,EAAmBvwE,EAAuBoS,GAC1CquD,EAAKt8D,KAAKqsE,cAAcD,EACAD,EACA,KACAnsE,KAAKg+D,mBAAmByI,mBACxB,MAC1BnK,IAAOa,EAAav0B,oBAAoB1O,IAC1Cl6B,KAAK2mE,WACH,wCAAwCxJ,EAAav0B,oBAAoBxpC,SAASk9D,KAClF1tE,EAAagb,eAGnB,CACF,CAAE,MAAOkW,GACP,GAAIA,aAAajxB,GAAkBixB,EAAExU,UAAY1c,EAAaib,mBAE5D,OAAO,EAET7J,KAAK2mE,WAAW,iEAAiE7mD,IACjEA,EAAExU,SAAW1c,EAAagb,eAC1BkW,EAClB,CACA,OAAO,CACT,CAQA,2BAAAqmD,CAA4B5jC,GAC1B,GAAIxqB,EAAM2kC,QAAQna,KAAWviC,KAAKykE,mBAChC,OAAO,KAGT,MAAM,UAAErrD,EAAS,UAAEle,GAAc8E,KAAKmY,OAChClK,EAAOs0B,aAAiBnuC,EAAemuC,EAAM1lC,KAAO0lC,EAEpD+pC,EAAMtsE,KAAKykE,mBAAmBx2D,GACpC,GAAIq+D,QACF,OAAO,KAGT,WACwBtsE,KAAKykE,mBAAmBx2D,GAI5CjO,KAAK0kE,0BAFLxpE,EAAU,8BAA8B+S,IAI5C,CAAE,MAAO6R,GACP5kB,EAAU,8BAA8B+S,IAAO6R,EACjD,CACA,OAAOwsD,CACT,CAQA,KAAAjzD,GACErZ,KAAK+b,aAML/b,KAAK+8D,UAAY,KAGjB/8D,KAAKglE,gBAAkB,KACvBhlE,KAAKilE,wBACLjlE,KAAK4kE,gBAAkB,CAAC,EAExB5kE,KAAKkb,WAAY,EAEjBlb,KAAKgmE,WAAa,KAClBhmE,KAAKkmE,SAAW,CAAEwE,eAAgB,EAAGC,iBAAkB,GAMvD3qE,KAAKykE,mBAAqB,KAC1BzkE,KAAKulE,uBAAyB,KAC9BvlE,KAAK0kE,wBAA0B,EAC3B1kE,KAAKg+D,mBAAmB+D,uBAC1B/hE,KAAKykE,mBAAqB,CAAC,GAQ7BzkE,KAAK6L,WAAa,KAClB7L,KAAKy+B,cAAgB,KACrBz+B,KAAK48D,UAAY,KACjB58D,KAAKiM,aAAe,KACpBjM,KAAK68D,YAAc,IACrB,CAKA,qBAAAoI,GAGEjlE,KAAKqrE,kBAAoB,CAC3B,CAMA,UAAAtvD,GACE,OAAO/b,KAAKi+D,mBAAqBj+D,KAAKi+D,mBAAmBliD,kBAAenrB,CAC1E,CAOA,iBAAAyyE,GACE,MAAM,UAAEjqD,EAAS,UAAEle,GAAc8E,KAAKmY,QAChC,yBAAEo0D,GAA6BvsE,KAAKg+D,mBACT,IAA7BuO,IAKAvsE,KAAKglE,iBACPvuD,cAAczW,KAAKglE,iBAGrBhlE,KAAKglE,gBAAkBxuD,aAAY,KACjC,IACExW,KAAKorE,kBACP,CAAE,MAAOtrD,GACP5kB,EAAU,qCAAsC4kB,EAClD,IACCysD,GAGL,CAeA,IAAAlO,CAAKhzD,EAASmhE,EAAaxsE,KAAKi+D,mBAAoBwO,GAAoB,GACtE,IACE,OAAOzsE,KAAKwtC,gBAAgBniC,EAASmhE,EAAYC,EACnD,CAAE,MAAO72D,GACP,MAAM,UAAEiG,GAAc7b,KAAKmY,OAESvC,EAAGvK,QAAYuK,EAAGvJ,MACtDrM,KAAK2mE,WAAW,0BAA0B/wD,EAAGvK,UAC7BuK,EAAGtK,SAAW1c,EAAa0b,iBAC7C,CACA,OAAO6yD,EAAav0B,oBAAoBt+B,gBAC1C,CAaA,eAAAkjC,CAAgBniC,EAASmhE,EAAaxsE,KAAKi+D,mBAAoBwO,GAAoB,GACjF,IAAI3iC,EAAaqzB,EAAav0B,oBAAoBt+B,iBAElD,IAAKtK,KAAK0gE,WACR,MAAM,IAAI7xE,EAAe,+BAAgCD,EAAagb,gBAExE,MAAM8iE,EAAUxhD,EAAOpwB,MAAMsyC,OAAOu/B,sBAAsBthE,GAE1D,OADAy+B,EAAa9pC,KAAK0gE,WAAWrC,KAAKqO,EAASD,GACnC3iC,GACN,KAAKqzB,EAAav0B,oBAAoB1O,GACpCl6B,KAAK4sE,cAAcvhE,EAASmhE,GAC5B,MACF,KAAKrP,EAAav0B,oBAAoB6E,SACpC,IAAKg/B,EAEH,MAGJ,QACE,MAAM,IAAI59E,EAAe,sBAAsBsuE,EAAav0B,oBAAoBxpC,SAAS0qC,KACvFl7C,EAAagb,gBAGnB,OAAOkgC,CACT,CAQA,mBAAA62B,GACE,MAAM,SAAE70C,EAAQ,UAAE1S,EAAS,UAAEyC,GAAc7b,KAAKmY,OAEhDnY,KAAKqlE,eACDrlE,KAAKg+D,mBAAmB6O,iBAAmB,GACJ,OAAtC7sE,KAAKg/D,aAAa8N,MAAM,UAC7B9sE,KAAK+sE,cACqC,OAAtC/sE,KAAKg/D,aAAa8N,MAAM,WACvB9sE,KAAKg+D,mBAAmBgP,2BAA6Bp0E,EAAaq0E,UAC5BjtE,KAAK+sE,cAAiC/sE,KAAKqlE,eAGtF,MAAMtE,EAAgB71C,EAAOgiD,kBAAkBC,SAASntE,KAAKg+D,mBACLh+D,KAAKqlE,eACLrlE,KAAK+sE,eACvDjjC,EAAa9pC,KAAKq+D,KAAK0C,GAC7B,GAAIj3B,IAAeqzB,EAAav0B,oBAAoB1O,GAClDl6B,KAAKy+B,cAAgB,KACrBz+B,KAAK68D,YAAc,KAEf/yB,IAAeqzB,EAAav0B,oBAAoB6E,UAClDztC,KAAK48D,UAAY,qDACjB58D,KAAKiM,aAAerd,EAAaib,qBAEjCiiB,EAAS,mDACLqxC,EAAav0B,oBAAoBxpC,SAAS0qC,MAC9C9pC,KAAK48D,UAAY,0BACjB58D,KAAKiM,aAAerd,EAAa4a,uBAE9B,CAEL,MAAM8mB,EAAiB6sC,EAAakL,UAAUC,yCAC9Cx8C,EAAS,mCAAmCwE,mCAC5CtwB,KAAKs+D,gCAAgChuC,EACA,KACA,KACA,MACAkb,GAAYxrC,KAAKuoE,yBAAyB/8B,IAGjF,CACA,OAAO1B,CACT,CAcA,aAAAuiC,CAAc9pC,EAAO4pC,EAAqBvgE,EAAgB42B,EAAgBiyB,GACxE,MAAM,SAAE3oC,EAAQ,UAAE1S,GAAcpZ,KAAKmY,OACrC9W,EAAOkhC,aAAiBnuC,EAAa,sDAErC,MAAMk8B,EAAiBtwB,KAAKuwB,oBACtB68C,EAASliD,EAAOmiD,WAAWC,uBAAuBh9C,EACAiS,GACA,EACA4pC,GACxD9qE,EAAO+rE,EAAO/K,wBAAyB,mCACvC,MAAMv4B,EAAa9pC,KAAKq+D,KAAK+O,GAC7B,OAAItjC,IAAeqzB,EAAav0B,oBAAoB1O,IAClDpO,EAAS,mBAAoBqxC,EAAav0B,oBAAoBxpC,SAAS0qC,IAChEA,IAELqiC,GACFnsE,KAAKs+D,gCACHhuC,GACA,IAAMtwB,KAAK+pE,0BAA0Bz5C,IACrCkS,GAAkBxiC,KAAKg+D,mBAAmByI,mBAC1C76D,EACA6oD,GAEG3qB,EACT,CAYA,kBAAAyjC,CAAmBC,EACA3sC,EACAj1B,EACA42B,EACAiyB,GACjB,MAAMnkC,EAAiBtwB,KAAKgmE,WAAWc,qBACjCsG,EAASliD,EAAOgiD,kBAAkBO,UAAUD,EACA3sC,EACAvQ,GAE5CwZ,EAAa9pC,KAAKq+D,KAAK+O,GAC7B,OAAItjC,IAAeqzB,EAAav0B,oBAAoB1O,IAIpDl6B,KAAKs+D,gCACHhuC,GACA,IAAMtwB,KAAK0oE,4BAA4Bp4C,IACvCkS,GAAkBxiC,KAAKg+D,mBAAmByI,mBAC1C76D,EACA6oD,GARO3qB,CAUX,CAKA,kBAAAg3B,GACE9gE,KAAKwhE,uBAELxhE,KAAK8kE,iBAAmBjuD,YAAW,IAAM7W,KAAKwoE,2BACXxoE,KAAKg+D,mBAAmB0P,iCAC7D,CAKA,eAAAtO,GACEp/D,KAAK++D,oBAGL/+D,KAAK+kE,cAAgBluD,YAAW,IAAM7W,KAAKyoE,wBACXzoE,KAAKg+D,mBAAmBntC,sBAC1D,CAyBA,eAAA8uC,CAAgB7uD,GACd,MAAM3N,EAASnD,KAAKy/D,eAAiB,CAAC,GAChC,UAAE5jD,GAAc7b,KAAKmY,OAC3Bze,OAAO8F,KAAKsR,GAAQhD,SAASG,GACP,OAAhB6C,EAAO7C,SAAiCrd,IAAhBkgB,EAAO7C,KACf,OAAhB9K,EAAO8K,SAAiCrd,IAAhBuS,EAAO8K,IACqC9K,EAAO8K,GAAwB6C,EAAO7C,IACrG,IAET9K,EAAO8K,GAAO6C,EAAO7C,IACd,MAETjO,KAAKy/D,cAAgBt8D,CACvB,CAcA,kBAAAwqE,CAAmBC,EACAzB,EACAvgE,EACA42B,EACAqrC,EACApZ,GAEjB,MAAMh2D,EAAQuB,KAAKslE,kCAAkCsI,GACrD,GAAInvE,EACF,MAAMA,EAER,MAAMwpE,EACJ1K,EAAkCsQ,IAClCtQ,EAAkCuQ,QAC9BC,EAASF,IAAgBzQ,EAAmB4Q,wBAC5Ct9D,EAAOm9D,IAAgBzQ,EAAmB6Q,kBAC9CJ,IAAgBzQ,EAAmB8Q,aAC/B59C,EAAiBtwB,KAAKuwB,oBAKtBF,GAHkB09C,EACpB7iD,EAAOmiD,WAAWC,uBAClBpiD,EAAOsF,kBAAkB29C,0BACD79C,EACAs9C,EACAl9D,EACAy7D,GACtBriC,EAAa9pC,KAAKq+D,KAAKhuC,GAC7B,OAAIyZ,IAAeqzB,EAAav0B,oBAAoB1O,KAIhDiyC,GACFnsE,KAAKs+D,gCACHhuC,GACA,IAAMtwB,KAAKgoE,6BAA6B13C,EACA23C,IACxCzlC,GAAkBxiC,KAAKg+D,mBAAmByI,mBAC1C76D,EACA6oD,GAEAoZ,IAAgBzQ,EAAmB6Q,kBACrCjuE,KAAKg+D,mBAAmB+D,qBACxB/hE,KAAKwkE,uBAAuBoJ,GACnBC,IAAgBzQ,EAAmBgR,qBAC5CpuE,KAAKg+D,mBAAmB+D,sBACxB/hE,KAAKmmE,4BAA4ByH,IAjB1B9jC,CAoBX,CAYA,uBAAAukC,CAAwBT,EACA7qC,EACAP,EACA9xB,EACA+jD,GACtB,MAAMwT,EACJv3D,EAAM6sD,EAAkCH,EAAmB6Q,kBAC3D1Q,EAAkCH,EAAmBgR,qBACjD99C,EAAiBtwB,KAAKuwB,oBAEtBF,EAAMnF,EAAOmiD,WAAWiB,4BAC5Bh+C,EACAs9C,EACA7qC,EACAryB,GACIo5B,EAAa9pC,KAAKq+D,KAAKhuC,GAC7B,OAAIyZ,IAAeqzB,EAAav0B,oBAAoB1O,IAMpDl6B,KAAKs+D,gCACHhuC,GACA,KACE,MAAMi+C,EAAUvuE,KAAK4kE,gBAAgBt0C,GAErCtwB,KAAKgoE,6BAA6B13C,EACA23C,GAClCxT,EAAkB,KAAM8Z,EAAQ,GAElC/rC,GAAkBxiC,KAAKg+D,mBAAmByI,mBAC1C,KACAhS,GAdO3qB,CAgBX,CAOA,aAAA69B,CAAc6G,EAAYrrE,EAASnD,KAAKi+D,oBACtC,IAAK96D,EACH,OAEF,MAAM7H,EAAYkzE,EAAWlzE,UAC7B,IAAKA,EACH,OAEF,MAAM0wE,EAAe1wE,EAAUmzE,iBAAmB,EAC5CC,EAAa/Q,EAAoBqO,GACjC2C,EAAejR,EAAqBsO,GACpC4C,EAAYtzE,EAAUE,cAE5B,OAAQF,EAAUC,cAChB,KAAK2vB,EAAO+9C,YAAYC,MACQ,IAA1B5tE,EAAUm7B,cACZtzB,EAAO6Z,QAAQ5jB,EAASy1E,oBACxB1rE,EAAO6Z,QAAQ0xD,GACfvrE,EAAO6Z,QAAQ5jB,EAAS01E,oBAAqBF,GAC7CzrE,EAAO6Z,QAAQ2xD,EAAcC,GACzBtzE,EAAUyzE,QACZ5rE,EAAO6Z,QAAQ5jB,EAAS41E,4BAG5B,MACF,KAAK9jD,EAAO+9C,YAAYI,WACxB,KAAKn+C,EAAO+9C,YAAYK,IACxB,KAAKp+C,EAAO+9C,YAAYO,UACxB,KAAKt+C,EAAO+9C,YAAYQ,YACxB,KAAKv+C,EAAO+9C,YAAYG,OACtBjmE,EAAO6Z,QAAQ5jB,EAAS61E,iBACxB9rE,EAAO6Z,QAAQ5jB,EAAS81E,iBAAkBN,GAIhD,CAOA,aAAAhC,CAAc4B,EAAYrrE,EAASnD,KAAKi+D,oBACtC,IAAK96D,EACH,YAE4BvS,IAA1B49E,EAAWp1B,YAA4Bo1B,EAAWp1B,cAEpDj2C,EAAO6Z,QAAQ5jB,EAAS+1E,iBAE1B,MAAM7zE,EAAYkzE,EAAWlzE,UAC7B,IAAKA,EACH,OAGF,MAAM0wE,EAAe1wE,EAAUmzE,iBAAmB,EAClD,IAAIC,EAAajR,EAAoBuO,GACjC2C,EAAenR,EAAqBwO,GAIpCA,IAAiB91E,EAAwBk/C,QACvCo5B,EAAWj2B,kBACbm2B,EAAa9Q,EAA2BoO,GACxC2C,EAAe9Q,EAAiCmO,IAGpD,MAAM4C,EAAYtzE,EAAUE,cAE5B,OAAQF,EAAUC,cAChB,KAAK2vB,EAAO+9C,YAAYC,MACtB/lE,EAAO6Z,QAAQ0xD,GACfvrE,EAAO6Z,QAAQ2xD,EAAcC,GAC7B,MACF,KAAK1jD,EAAO+9C,YAAYI,WACxB,KAAKn+C,EAAO+9C,YAAYK,IACxB,KAAKp+C,EAAO+9C,YAAYO,UACxB,KAAKt+C,EAAO+9C,YAAYQ,YACxB,KAAKv+C,EAAO+9C,YAAYG,OACtBjmE,EAAO6Z,QAAQ5jB,EAASg2E,iBACxBjsE,EAAO6Z,QAAQ5jB,EAASi2E,iBAAkBT,GAIhD,CAMA,0BAAAzN,CAA2BmO,GACzB,MAAMr2D,EAAQjZ,KAAKg+D,mBAEnB/kD,EAAMs2D,iBAAiBD,EAAkBE,wBAA0B,IACnE,MAAMC,EAAuBx2D,EAAMy2D,kBAC7BC,EAAuBL,EAAkBM,qBAAuB,GACtE32D,EAAM42D,sBAAsBF,GACC,KAAzBF,GAA+BA,IAAyBE,GAC1D3vE,KAAK8vE,8BAA8BL,EAAsBE,GAK3D12D,EAAM82D,iBAAiBT,EAAkBU,oBAAsB,IAC/D/2D,EAAMg3D,kBAAkBrW,EAAQC,iBAAiB5gD,EAAMwsD,eACvDzlE,KAAKud,SAAS2yD,mBAAmBZ,EAAkBlK,yBAGnD,MAAM+K,EAAQnwE,KAAKud,SAAS6yD,eAAeh4E,EAAeg7D,4BAC1DpzD,KAAKksE,kBAAsC,kBAAViE,GAAwBA,EAOrD,KANA,KACA,MAAM,IAAIthF,EACV,sEACAD,EAAa4a,kBACb,KAAK,CAGX,CAEA,6BAAAsmE,CAA8BO,EAASC,GACjCtwE,KAAKm+D,aACPn+D,KAAKm+D,WAAW50C,MAAMzb,SAAQ6d,GAAYA,EAASoW,iBACnD/hC,KAAKm+D,WAAW30C,kBAAkB1b,SAAQ6d,GAAYA,EAASoW,kBAEjE/hC,KAAK0/D,iBACHnnE,EAAakkE,MAAMhkE,EAAiBmyB,2BACjB,uCAAuCylD,QAAcC,IACrD,KACA,EACA,KACA,MACvB,CAMA,gBAAIz1D,GACF,OAAO7a,KAAK+8D,WAAajpE,EAAgBkM,KAAK+8D,YAAc,KAC9D,CAEA,0BAAA2E,CAA2Bn5C,GACzB,MAAM,UAAE1M,GAAc7b,KAAKmY,OAG3B,GADmBnY,KAAK+sE,cAAiC/sE,KAAKqlE,eAC1DrlE,KAAK+sE,cAEP,OADA5P,EAAa2N,iBAAiByF,SAASvwE,KAAK0gE,WAAY1gE,KAAKqlE,eAAgB98C,GACtE,KAET,GAAIvoB,KAAKqlE,eAAgB,CAEvB,OADqBlI,EAAa2N,iBAAiB0F,iBAAiBxwE,KAAK0gE,WAE3E,CAEA,OAAO1gE,KAAK0gE,UACd,mBC/0FF,MAAM,KAAEnjE,GAAS,EAAQ,MAczB/R,EAAOC,QAAQglF,iBAAmBlzE,EAAKE,IARd,CACvBkc,QAAiB,UACjBC,WAAiB,aACjB82D,KAAiB,OACjBC,KAAiB,OACjBC,gBAAiB,oCCXnB,MAAM1T,EAAe,EAAQ,MACvB2T,EAAuB,EAAQ,MAC/B3lD,EAAS,EAAQ,OACjB,wBAAE4T,EAAuB,SAAE+2B,GAAa,EAAQ,MAChD,qBAAE19D,GAAyB,EAAQ,OACnC,MAAE4f,GAAU,EAAQ,MACpB,aAAEnpB,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,SAAEoM,EAAQ,SAAE6wB,GAAa,EAAQ,OACjC,aAAElzB,GAAiB,EAAQ,OAC3B,kBAAEU,GAAsB,EAAQ,OAEhC,iBACJylC,EAAgB,iBAChB+xC,EAAgB,iBAChBC,EAAgB,WAChB/xC,EAAU,UACVgyC,EAAS,YACTC,EAAW,UACX9xC,EAAS,SACTC,EAAQ,UACR8xC,EAAS,iBACTC,GACEryC,EAEEsyC,EAAoB,CAAC,QAAS,SAAU,MAAO,OAAQ,OAAQ,SAErE,SAASC,EAAc9xC,EAAUpxB,EAAUtR,GAEzC,MAAM4B,EACJysB,EAAOgiD,kBAAkBoE,mBACvBnjE,EAAStR,IACTwjE,GACE,IAAIxxE,EAAe,GAAG0wC,2BAAkC1iC,OAAUwjE,IAC/CzxE,EAAa8E,0BACtC,GAAI+K,EACF,MAAMA,CAEV,CAEA,SAASygC,EAAYK,EAAUpxB,EAAUF,EAAKsjE,EAAcrjE,EAAUsjE,GACpE,MAAMljF,EAAM6f,EAASF,GACrB,KAAIujE,GAAqB,OAARljF,QACI,IAAV,GAA0BijF,EAAajjE,OAAO7O,MAAKge,GAAKA,IAAMnvB,KACvE,MAAM,IAAIO,EAAe,GAAG0wC,2BAAkCtxB,0BACZC,IACzBtf,EAAa+a,uBAE1C,CAEA,SAAS8nE,EAAwBlyC,EAAUpxB,EAAUtR,GACnD,MAAMvO,EAAM6f,EAAStR,GACrB,GAAIkb,EAAM5K,MAAM7e,IACVA,EAAIpB,OAAS,EAAG,CAClB,MAAMwkF,EAAYb,EAAqBn4E,kBAAkBi5E,wBACzDrjF,EAAIwf,SAAS8jE,IACX,MAAMC,EAAQD,EAAS7gF,cACvB,GAAI2gF,EAAUxvE,QAAQ2vE,GAAS,EAC7B,MAAM,IAAIhjF,EAAe,GAAG0wC,2BAAkC1iC,qCACD+0E,IACnChjF,EAAa8E,uBACzC,GAEJ,CAEJ,CAEA,SAASo+E,EAAmBvyC,EAAUpxB,EAAUtR,GAC9C,MAAMvO,EAAM6f,EAAStR,GACrB,GAAIvO,GAAOypB,EAAMg6D,OAAOzjF,KAASypB,EAAMi6D,MAAM1jF,GAAM,CACjD,MAAM2jF,EAAU3jF,EAAIsE,MAAM,KACpB8+E,EAAYb,EAAqBn4E,kBAAkBw5E,wBACzDD,EAAQnkE,SAASqkE,IACf,GAAIT,EAAUxvE,QAAQiwE,EAAOnhE,QAAU,EACrC,MAAM,IAAIniB,EAAe,GAAG0wC,2BAAkC1iC,0CACLs1E,KACzCvjF,EAAa8E,uBAC/B,GAEJ,CACF,CAGA,SAAS0+E,EAA4B7yC,EAAUpxB,EAAUtR,GACvD,MAAMvO,EAAM6f,EAAStR,GACrB,GAAIkb,EAAM8nB,UAAUvxC,IAAQypB,EAAM5K,MAAM7e,IAAQA,EAAIpB,OAAS,GAC3D,MAAM,IAAI2B,EAAe,GAAG0wC,2BAAkC1iC,gCAElDjO,EAAa8E,uBAE7B,CAEA,SAAS2+E,EAAW9yC,EAAUpxB,EAAUtR,GACtC,MAAMvO,EAAM6f,EAAStR,GACfy1E,EAA0B,iBAARhkF,EAAmBA,EAAIsE,MAAM,KAAOtE,EAC5D,IAAKypB,EAAM5K,MAAMmlE,GACf,MAAM,IAAIzjF,EAAe,GAAG0wC,2BAAkC1iC,4CAEpCjO,EAAa+a,wBAEzC2oE,EAASxkE,SAAS+F,IAChB,IAAIoiD,EAAM,KACV,IACEA,EAAMJ,EAAShiD,EACjB,CAAE,MAAO+B,GACP,MAAM,IAAI/mB,EAAe,GAAG0wC,2BAAkC1iC,gCACLgX,IAC/BjlB,EAAa8E,uBACzC,CACA,IAAKqkB,EAAMw6D,SAAStc,EAAI2b,SAAUR,GAChC,MAAM,IAAIviF,EAAe,GAAG0wC,2BAAkC1iC,sBACfo5D,EAAI2B,oCACO3B,EAAI2b,YACpChjF,EAAa8E,uBACzC,GAEJ,CASA,SAAS8+E,EAAkCC,EAAmBC,GAC5D,GAAIA,EAAgBxlF,OAAS,GAR/B,SAAyBulF,GACvB,OAAQA,IACAA,IAAsBn5E,EAAkBq5E,uBACxCF,IAAsBn5E,EAAkBs5E,aACxCH,IAAsBn5E,EAAkBu5E,YAClD,CAGoCC,CAAgBL,GAAoB,CACpE,MAAMM,EAAYL,EAAgBxlF,QAAU,EAAIwlF,EAAkBA,EAAgBrgF,MAAM,EAAG,GAC3F,MAAM,IAAIxD,EAAe,yFACT4jF,oBAAoCM,IAAankF,EAAa8E,uBAChF,CACF,CA4BA,SAASs/E,EAAO7kE,EAAUtR,EAAMi6D,GAC9B,OA3BF,SAAkB3oD,EAAUtR,EAAMo2E,EAAOnc,GACvC,MAAMxoE,EAAM6f,EAAStR,GACrB,GAAIvO,aAAekE,MAAO,CAExB,MAAM0gF,EAAc5kF,EAAIpB,OACxB,IAAK,IAAIX,EAAI,EAAGA,EAAI2mF,EAAa3mF,IAAK,CACpC,MAAM4mF,EAAe7kF,EAAI/B,GACzB,GAAKuqE,GAIE,GAAIA,KACJ/+C,EAAMg6D,OAAOoB,KAAkBA,EAAarG,MAAMmG,IACrD,OAAO,OALT,GAAIl7D,EAAMg6D,OAAOoB,IAAiBA,EAAarG,MAAMmG,GACnD,OAAO,CAOb,CACA,IAAKnc,EACH,OAAO,EACF,GAAIA,EACT,OAAO,CAEX,CACA,OAAQ/+C,EAAMg6D,OAAOzjF,IAAQA,EAAIw+E,MAAMmG,EACzC,CAGSG,CAASjlE,EAAUtR,EAAM,sBAAuBi6D,EACzD,CAEA,MAAMuc,EAA6B,CACjC,QAAAxyE,CAASoY,GAEP,MAAMwE,EAAIshB,EAAiBvgC,KAAK,KAAM,oBAAqBya,GAkC3D,GAjCAwE,EAAE,MAAO,CAACwzD,GAAc,CAACE,GAAmB,CAACkB,IAC7C50D,EAAE,WAAY,CAACyzD,GAAY,CAACF,EAAW,MACvCvzD,EAAE,WAAY,CAACyzD,GAAY,CAACF,EAAW,MACvCvzD,EAAE,aAAc,CAACyzD,GAAY,CAACF,EAAW,KAAM,CAACK,IAChD5zD,EAAE,yBAA0B,CAACyzD,GAAY,CAACF,EAAW,MACrDvzD,EAAE,UAAW,CAACyzD,GAAY,CAACF,EAAW,KACtCvzD,EAAE,wBAAyB,CAAC0hB,GAAY,CAACC,EAAU,EAAGtB,OAAOgC,YAC7DriB,EAAE,wBAAyB,CAAC0hB,GAAY,CAACC,GAAW,EAAGtB,OAAOgC,YAC9DriB,EAAE,iBAAkB,CAAC0hB,GAAY,CAACC,GAAW,EAAGtB,OAAOgC,YACvDriB,EAAE,mBAAoB,CAAC0hB,GAAY,CAACC,GAAW,EAAGtB,OAAOgC,YACzDriB,EAAE,4BAA6B,CAAC0hB,GAAY,CAACC,EAAU,EAAG,MAC1D3hB,EAAE,qBAAsB,CAAC0hB,GAAY,CAACC,EAAU,EAAGtB,OAAOgC,YAC1DriB,EAAE,oBAAqB,CAAC0hB,GAAY,CAACC,EAAU,EAAGtB,OAAOgC,YACzDriB,EAAE,gBAAiB,CAAC0hB,GAAY,CAACC,EAAU,IAAKtB,OAAOgC,YAIvDriB,EAAE,yBAA0B,CAACuhB,IAC7BvhB,EAAE,4BAA6B,CAACuhB,IAChCvhB,EAAE,kBAAmB,CAACuhB,IACtBvhB,EAAE,2BAA4B,CAAC0hB,GAAY,CAACC,EAAU,EAAGtB,OAAOgC,YAChEriB,EAAE,0BAA2B,CAAC0hB,GAAY,CAACC,EAAU,EAAGtB,OAAOgC,YAC/DriB,EAAE,yBAA0B,CAACuhB,IAC7BvhB,EAAE,0BAA2B,CAAC0hB,GAAY,CAACC,EAAU,EAAG,IACxD3hB,EAAE,4BAA6B,CAAC0hB,GAAY,CAACC,EAAU,EAAG,IAC1D3hB,EAAE,mCAAoC,CAACuhB,IACvCvhB,EAAE,kCAAmC,CAACuhB,IACtCvhB,EAAE,uBAAwB,CAACuhB,IAC3BvhB,EAAE,UAAW,CAACuhB,IACdvhB,EAAE,mCAAoC,CAAC0hB,GAAY,CAACC,EAAU,EAAGtB,OAAOgC,YACxEriB,EAAE,UAAW,CAACyzD,IACdzzD,EAAE,cAAe,CAACyzD,IAEdj4D,EAAMw5D,mBAAqBx5D,EAAMq6D,yBACnC,MAAM,IAAIzkF,EAAe,2HAEAD,EAAa8E,wBAExC,GAAuC,OAAnCulB,EAAMq6D,+BAAwE1iF,IAAnCqoB,EAAMq6D,yBAAwC,CAC3F,IAAK9gF,MAAMwB,QAAQilB,EAAMq6D,0BACvB,MAAM,IAAIzkF,EAAe,8DACAD,EAAa+a,wBAExC,GAA8C,IAA1CsP,EAAMq6D,yBAAyBpmF,OACjC,MAAM,IAAI2B,EAAe,+DACAD,EAAa8E,uBAE1C,CAEA+pB,EAAE,uBAAwB,CAACyhB,EAAa/mC,EAAsB,wBAAwB,IACtF,MAAMo7E,EAAgBt6D,EAAMu6D,uBAAyBr7E,EAAqBm6D,mBAC1E,IAAK0gB,EAAO/5D,EAAO,OAAO,IAASs6D,EACjC,MAAM,IAAI1kF,EAAe,2HAC0BD,EAAa8E,wBAElE,GAAIqkB,EAAM07D,MAAMx6D,EAAMu6D,qBAAsBr7E,EAAqBs6D,QAAS,CACxE,IAAKugB,EAAO/5D,EAAO,OAAO,GACxB,MAAM,IAAIpqB,EAAe,mFACqBsJ,EAAqBs6D,kHAG1C7jE,EAAa8a,oBAExC,GAAIqO,EAAMi6D,MAAM/4D,EAAMy6D,UAAY37D,EAAMi6D,MAAM/4D,EAAM06D,aAClD,MAAM,IAAI9kF,EAAe,gFAEIsJ,EAAqBs6D,6TAOzB7jE,EAAa8a,mBAE1C,MAAYqO,EAAMi6D,MAAM/4D,EAAMy6D,UAAa37D,EAAMi6D,MAAM/4D,EAAM06D,cAC3D7nD,EAAS,iFAEI3zB,EAAqBs6D,wFAOlC,GAAI16C,EAAM8nB,UAAU5mB,EAAMw5D,oBACtBx5D,EAAMw5D,oBAAsBn5E,EAAkBs6E,UAChD,MAAM,IAAI/kF,EAAe,qFAEAD,EAAa+a,wBAExC,GAAIoO,EAAM8nB,UAAU5mB,EAAMq6D,0BAA2B,CACnD,IAAKv7D,EAAM5K,MAAM8L,EAAMq6D,0BACrB,MAAM,IAAIzkF,EAAe,yFAEAD,EAAa+a,wBAExC,GAA8C,IAA1CsP,EAAMq6D,yBAAyBpmF,QAC/B+rB,EAAMq6D,yBAAyB,KAAOh6E,EAAkBs6E,UAC1D,MAAM,IAAI/kF,EAAe,yGAEAD,EAAa+a,uBAE1C,CAWA,GATA8T,EAAE,uBAAwB,CAACszD,GAAmB,CAACU,IAC/Ch0D,EAAE,kBAAmB,CAACyzD,GAAY,CAACY,IACnCr0D,EAAE,yBAA0B,CAACuhB,KAEzB/lB,EAAM46D,wBAA0BN,KAClC91D,EAAE,iBAAkB,CAACszD,IACrBtzD,EAAE,2BAA4B,CAACszD,GAAmB,CAACqB,KAGjDmB,EAAe,CACjB91D,EAAE,SAAU,CAACyzD,IACbzzD,EAAE,iBAAkB,CAACyzD,IACrBzzD,EAAE,gBAAiB,CAACyzD,IACpBzzD,EAAE,wBAAyB,CAACyzD,IAC5BzzD,EAAE,iBAAkB,CAACyzD,IAGrB,MAAM4C,EAAY/7D,EAAM8nB,UAAU5mB,EAAM86D,SAAW96D,EAAM86D,OAAO7mF,OAC1D8mF,EACJj8D,EAAM8nB,UAAU5mB,EAAMg7D,gBACtBh7D,EAAMg7D,cAAc/mF,OAEhBgnF,EACJn8D,EAAM8nB,UAAU5mB,EAAMk7D,iBACtBl7D,EAAMk7D,eAAejnF,OAEvB,IAAK4mF,IAAcE,IAAqBE,EACtC,MAAM,IAAIrlF,EAAe,8JAGAD,EAAa8E,wBAExC,GAAIogF,IAAcE,GAAoBE,GACpC,MAAM,IAAIrlF,EAAe,wHAGAD,EAAa8E,wBAExC,GAAKsgF,IAAqBE,IAAiBF,GAAoBE,EAC7D,MAAM,IAAIrlF,EAAe,2GAGAD,EAAa8E,uBAE1C,CAIA,GAFA+pB,EAAE,mBAAoB,CAAC0hB,GAAY,CAACC,EAAU,EAAG,IAE7CnmB,EAAM4zD,iBAAmB,EAC3B,GAAI5zD,EAAMg9C,eAAezjE,MAAO,CAE9B,IADeymB,EAAMg9C,IAAI9jD,OAAM8jD,GAAOl+C,EAAMg6D,OAAO9b,IAAQA,EAAI6W,MAAM,aAEnE,MAAM,IAAIj+E,EAAe,6JAIAD,EAAa8E,uBAE1C,KAAO,KAAIqkB,EAAMg6D,OAAO94D,EAAMg9C,KAS5B,MAAM,IAAIpnE,EAEe,+FAAgBoqB,EAAMg9C,sBACJh9C,EAAMg9C,IACvBrnE,EAAa8E,wBAZvC,IAAKulB,EAAMg9C,IAAI6W,MAAM,WACnB,MAAM,IAAIj+E,EAAe,gJAIAD,EAAa8E,uBAQ1C,CAGF+pB,EAAE,2BAA4B,CAACyhB,EAAatmC,EAAc,gBAAgB,IAE5E6kB,EAAE,oBAAqB,CAACyhB,EAAa5lC,EAAmB,qBAAqB,IAC7EmkB,EAAE,2BACA,CAACqzD,EAAkBx3E,EAAmB,qBACpC,GAAM,GAAO,IAEjBk5E,EAAkCv5D,EAAMw5D,kBACNx5D,EAAMm7D,0BAEpCn7D,EAAM0sD,qBACRzI,EAAa/3B,oCAAoCtkC,SAASoY,EAAM0sD,qBAKlE,MAAM0O,EAAiBp7D,EAAMq7D,6BACvBC,EAAiBt7D,EAAM4X,uBACN5X,EAAMq6D,yBACzBr6D,EAAMq6D,yBAAyBpmF,OAC/B,GACiB,GAAKqnF,EAAiBF,GACzCp5E,EACE,sBAAsBs5E,2DACRF,kFAGpB,GAGF7oF,EAAOC,QAAQ4nF,2BAA6BA,kBCxX5C,MAAMmB,EAAmB,EAAQ,MAC3BtX,EAAe,EAAQ,OACvB,cAAEplD,GAAkB,EAAQ,MAC5B,qBAAE3f,GAAyB,EAAQ,OACnC,MAAE4f,GAAU,EAAQ,MACpB,SAAE9c,GAAa,EAAQ,OACvB,aAAErC,GAAiB,EAAQ,MAiBjC,MAAM67E,EAAgD,CACpD,8BACA,0BACA,uBACA,oBACA,gBACA,aACA,yBACA,eACA,8BACA,0BACA,uBACA,oBACA,gBACA,cACAxgF,KAAK,KAEDi+E,EAAkD,CACtD,oBACA,aACA,gBACA,oBACA,aACA,gBACA,eACA,8BACA,uBACA,0BACA,8BACA,uBACA,0BACA,0BAGIP,EACJ,CACA,QACA,UACA,WAyhBF,MAAM+C,EAlXN,cAAoC58D,EAIlC,qBAAI26D,GACF,OAAOzyE,KAAK20E,WACd,CACA,qBAAIlC,CAAkBl/E,GACpByM,KAAK20E,YAAcphF,CACrB,CAKA,4BAAI+/E,GACF,OAAOtzE,KAAK40E,sBACd,CACA,4BAAItB,CAAyB//E,GAC3ByM,KAAK40E,uBAAyBrhF,CAChC,CAKA,oCAAIm6E,GACF,OAAO1tE,KAAK60E,qBAAuB,KACrC,CACA,oCAAInH,CAAiCn6E,GACnCyM,KAAK60E,oBAAsBthF,CAC7B,CAMA,0BAAIuhF,GACF,OAAO90E,KAAK+0E,gBACd,CACA,0BAAAC,CAA2BzhF,GACzByM,KAAK+0E,iBAAmBxhF,CAC1B,CAKA,6BAAI0hF,GACF,OAAOj1E,KAAK+0E,gBACd,CACA,6BAAAG,CAA8B3hF,GAC5ByM,KAAK+0E,iBAAmBxhF,CAC1B,CAKA,wBAAI4hF,GACF,OAAOn1E,KAAKo1E,cACd,CACA,wBAAID,CAAqB5hF,GACvByM,KAAKo1E,eAAiB7hF,CACxB,CAgBA,wBAAI8hF,GACF,OAAOt9D,EAAM2kC,QAAQ18C,KAAKs1E,uBACtB,KACAt1E,KAAKs1E,qBACX,CACA,wBAAID,CAAqBx0C,GACvB7gC,KAAKs1E,sBAAwBz0C,CAC/B,CA2BA,mBAAI00C,GACF,OAAOx9D,EAAM2kC,QAAQ18C,KAAKw1E,kBACtBf,EACAz0E,KAAKw1E,gBACX,CACA,mBAAID,CAAgB10C,GAClB7gC,KAAKw1E,iBAAmB30C,CAC1B,CAYA,0BAAIgzC,GAEF,YAA8BjjF,IAA1BoP,KAAKy1E,iBAAqF,MAA7C10D,QAAQ20D,IAAIC,6BAC/B,OAA1B31E,KAAKy1E,kBACFz1E,KAAKy1E,gBACd,CACA,0BAAI5B,CAAuBhzC,GACzB7gC,KAAKy1E,iBAAmB50C,CAC1B,CAaA,kBAAI+0C,GACF,OAAO79D,EAAM2kC,QAAQ18C,KAAK61E,iBACtB,KACA71E,KAAK61E,eACX,CACA,kBAAID,CAAe/0C,GACjB7gC,KAAK61E,gBAAkBh1C,CACzB,CAgBA,4BAAIi1C,GACF,OAAO/9D,EAAM2kC,QAAQ18C,KAAK+1E,mBACtB,KACA/1E,KAAK+1E,iBACX,CACA,4BAAID,CAAyBj1C,GAC3B7gC,KAAK+1E,kBAAoBl1C,CAC3B,CAeA,UAAIkzC,GACF,OAAOh8D,EAAM2kC,QAAQ18C,KAAKg2E,SACtB,GACAh2E,KAAKg2E,OACX,CACA,UAAIjC,CAAOlzC,GACT7gC,KAAKg2E,QAAUn1C,CACjB,CAWA,kBAAIo1C,GACF,OAAOl+D,EAAM2kC,QAAQ18C,KAAKk2E,eAAiB,GAAKl2E,KAAKk2E,aACvD,CACA,kBAAID,CAAep1C,GACjB7gC,KAAKk2E,cAAgBr1C,CACvB,CAYA,iBAAIozC,GACF,OAAOl8D,EAAM2kC,QAAQ18C,KAAKm2E,gBAAkB,GAAKn2E,KAAKm2E,cACxD,CACA,iBAAIlC,CAAcpzC,GAChB7gC,KAAKm2E,eAAiBt1C,CACxB,CAWA,yBAAIu1C,GACF,OAAOr+D,EAAM2kC,QAAQ18C,KAAKq2E,sBAAwB,GAAKr2E,KAAKq2E,oBAC9D,CACA,yBAAID,CAAsBv1C,GACxB7gC,KAAKq2E,qBAAuBx1C,CAC9B,CAaA,kBAAIszC,GACF,OAAOp8D,EAAM2kC,QAAQ18C,KAAKs2E,iBAAmB,GAAKt2E,KAAKs2E,eACzD,CACA,kBAAInC,CAAetzC,GACjB7gC,KAAKs2E,gBAAkBz1C,CACzB,CAWA,eAAI01C,GACF,OAAOv2E,KAAKw2E,YACd,CACA,eAAID,CAAY11C,GACd7gC,KAAKw2E,aAAe31C,CACtB,CA0BA,oBAAIgsC,GACF,OAAO90D,EAAM2kC,QAAQ18C,KAAKy2E,mBAAqB,EAAIz2E,KAAKy2E,iBAC1D,CACA,oBAAI5J,CAAiBhsC,GACnB7gC,KAAKy2E,kBAAoB51C,CAC3B,CA0BA,4BAAImsC,GACF,OAAOj1D,EAAM2kC,QAAQ18C,KAAK02E,2BACxB99E,EAAam9B,KAAO/1B,KAAK02E,yBAC7B,CAEA,4BAAI1J,CAAyBnsC,GAC3B7gC,KAAK02E,0BAA4B71C,CACnC,CAEA,aAAA81C,GACE,MAAO,CACL,qBAA4B32E,KAAKq1E,qBACjC,gBAA4Br1E,KAAKu1E,gBACjC,uBAA4Bv1E,KAAK6zE,uBACjC,eAA4B7zE,KAAK41E,eACjC,yBAA4B51E,KAAK81E,yBACjC,OAA4B91E,KAAK+zE,OACjC,eAA4B/zE,KAAKi2E,eAAiB,QAAUj2E,KAAKi2E,eACjE,cAA4Bj2E,KAAKi0E,cACjC,sBAA4Bj0E,KAAKo2E,sBAAwB,QAAUp2E,KAAKo2E,sBACxE,eAA4Bp2E,KAAKm0E,eACjC,YAA4Bn0E,KAAKu2E,YACjC,iBAA4Bv2E,KAAK6sE,iBACjC,yBAA4B7sE,KAAKgtE,yBAErC,GAcF,MAAMt0E,UAA0Bg8E,EAM9B,WAAA30E,CAAYqQ,GACV9O,MAhmBJ,WAEE,MAAM,2BAAEpK,GAA+BgmE,EACvC,MAAO,CACL0Z,cAAsB,GACtBC,mBAAsB,GACtBC,eAAsB,GACtBC,cAAsB,GACtBC,oBAAsB,GACtBjC,iBAAsB,KACtBK,eAAsB,aACtB6B,qBAAsB,IAAI//E,EAE9B,CAmlBUggF,GAAgB9mE,EACxB,CAQA,wBAAIojE,GACF,OAAOz7D,EAAM2kC,QAAQ18C,KAAKm3E,aACpBh/E,EAAqBk6D,MACrBryD,KAAKm3E,WACb,CACA,wBAAI3D,CAAqB3yC,GACvB7gC,KAAKm3E,YAAct2C,CACrB,CAWA,eAAI8yC,GACF,OAAO57D,EAAMi6D,MAAMhyE,KAAKo3E,cAClB,GACAp3E,KAAKo3E,YACb,CAEA,eAAIzD,CAAY9yC,GACd7gC,KAAKo3E,aAAev2C,CACtB,CAWA,WAAI6yC,GACF,OAAO37D,EAAMi6D,MAAMhyE,KAAKq3E,UAClB,GACAr3E,KAAKq3E,QACb,CAEA,WAAI3D,CAAQ7yC,GACV7gC,KAAKq3E,SAAWx2C,CAClB,CAWA,oBAAIy2C,GACF,OAAOv/D,EAAMi6D,MAAMhyE,KAAKu3E,mBAClB,GACAv3E,KAAKu3E,iBACb,CAEA,oBAAID,CAAiBz2C,GACd9oB,EAAM7a,KAAK2jC,EAAU,UAMf9oB,EAAMi6D,MAAMnxC,GACrB5lC,EAAS,qMAIT+E,KAAKu3E,kBAAoB12C,GAVzB5lC,EAAS,iMAIT+E,KAAKu3E,kBAAoB,GAQ7B,CA2CA,OAAIthB,GACF,OAAOl+C,EAAM2kC,QAAQ18C,KAAKw3E,MAAQ,GAAKx3E,KAAKw3E,IAC9C,CAEA,OAAIvhB,CAAIp1B,GACN7gC,KAAKw3E,KAAO32C,CACd,CAUA,YAAI42C,GACF,OAAO1/D,EAAM2kC,QAAQ18C,KAAK03E,WAAa,GAAK13E,KAAK03E,SACnD,CAEA,YAAID,CAAS52C,GACX7gC,KAAK03E,UAAY72C,CACnB,CAQA,YAAI82C,GACF,OAAO5/D,EAAM2kC,QAAQ18C,KAAK43E,WAAa,GAAK53E,KAAK43E,SACnD,CAEA,YAAID,CAAS92C,GACX7gC,KAAK43E,UAAY/2C,CACnB,CAgBA,cAAIg3C,GACF,OAAO9/D,EAAM2kC,QAAQ18C,KAAK83E,aAAe,GAAK93E,KAAK83E,WACrD,CAEA,cAAID,CAAWh3C,GACb7gC,KAAK83E,YAAcj3C,CACrB,CAUA,0BAAIk3C,GACF,OAAOhgE,EAAM2kC,QAAQ18C,KAAKg4E,UAAY,GAAKh4E,KAAKg4E,QAClD,CACA,0BAAID,CAAuBl3C,GACzB7gC,KAAKg4E,SAAWn3C,CAClB,CAQA,WAAIo3C,GACF,OAAOlgE,EAAM2kC,QAAQ18C,KAAKk4E,UAAY,GAAKl4E,KAAKk4E,QAClD,CACA,WAAID,CAAQp3C,GACV7gC,KAAKk4E,SAAWr3C,CAClB,CAWA,gBAAIs3C,GACF,OAAOpgE,EAAM2kC,QAAQ18C,KAAK42E,eAAiB,GAAK52E,KAAK42E,aACvD,CAKA,gBAAArH,CAAiBh8E,GACfyM,KAAK42E,cAAgBrjF,CACvB,CAUA,qBAAIm8E,GACF,OAAO33D,EAAM2kC,QAAQ18C,KAAK62E,oBAAsB,GAAK72E,KAAK62E,kBAC5D,CAKA,qBAAAhH,CAAsBt8E,GACpByM,KAAK62E,mBAAqBtjF,CAC5B,CAqBA,yBAAIs9B,GACF,OAAI9Y,EAAM2kC,QAAQ18C,KAAKo4E,iBACdp4E,KAAKs0E,6BAEPt0E,KAAKo4E,eACd,CACA,yBAAIvnD,CAAsBgQ,GACxB7gC,KAAKo4E,gBAAkBv3C,CACzB,CAKA,gCAAIyzC,GACF,MACM,yBAAEhB,EAAwB,iCAAE5F,GAAqC1tE,KACjEq4E,EAAiB/E,EAA2BA,EAAyBpmF,OAAS,EAE9EorF,EAA0BD,EAAiB3K,GADlC2K,EAAiB,EAAI,IAAO,GAE3C,OAAOx6C,KAAKrwB,IALO,IAKS8qE,EAC9B,CAwBA,kBAAI/gB,GACF,OAAOx/C,EAAM2kC,QAAQ18C,KAAKu4E,iBAAmB,GAAKv4E,KAAKu4E,eACzD,CACA,kBAAIhhB,CAAe12B,GACjB7gC,KAAKu4E,gBAAkB13C,CACzB,CAcA,yBAAI42B,GACF,OAAO1/C,EAAM2kC,QAAQ18C,KAAKw4E,wBAA0B,EAAIx4E,KAAKw4E,sBAC/D,CACA,yBAAI/gB,CAAsB52B,GACxB7gC,KAAKw4E,uBAAyB33C,CAChC,CAcA,6BAAI62B,GACF,OAAO3/C,EAAM2kC,QAAQ18C,KAAKy4E,4BAA8B,IAAOz4E,KAAKy4E,0BACtE,CACA,6BAAI/gB,CAA0B72B,GAC5B7gC,KAAKy4E,2BAA6B53C,CACpC,CAqBA,oBAAI22B,GACF,OAAOz/C,EAAM2kC,QAAQ18C,KAAKw/D,mBAAqB,GAAKx/D,KAAKw/D,iBAC3D,CACA,oBAAIhI,CAAiB32B,GACnB7gC,KAAKw/D,kBAAoB3+B,CAC3B,CAWA,0BAAI63C,GACF,OAAO3gE,EAAM2kC,QAAQ18C,KAAK24E,qBAA8B34E,KAAK24E,kBAC/D,CACA,0BAAID,CAAuB73C,GACzB7gC,KAAK24E,mBAAqB93C,CAC5B,CASA,6BAAI+3C,GACF,OAAO7gE,EAAM2kC,QAAQ18C,KAAK64E,wBAAiC74E,KAAK64E,qBAClE,CACA,6BAAID,CAA0B/3C,GAC5B7gC,KAAK64E,sBAAwBh4C,CAC/B,CAUA,mBAAIi4C,GACF,OAAO/gE,EAAM2kC,QAAQ18C,KAAK+4E,mBAA4B/4E,KAAK+4E,gBAC7D,CACA,mBAAID,CAAgBj4C,GAClB7gC,KAAK+4E,iBAAmBl4C,CAC1B,CAUA,0BAAIm4C,GACF,OAAOjhE,EAAM2kC,QAAQ18C,KAAKi5E,qBAA8Bj5E,KAAKi5E,kBAC/D,CACA,0BAAID,CAAuBn4C,GACzB7gC,KAAKi5E,mBAAqBp4C,CAC5B,CAWA,4BAAI0rC,GACF,OAAOx0D,EAAM2kC,QAAQ18C,KAAKk5E,aAAe,IAAOl5E,KAAKk5E,WACvD,CACA,4BAAI3M,CAAyB1rC,GAC3B7gC,KAAKk5E,YAAcr4C,CACrB,CAWA,2BAAIyqC,GACF,OAAOvzD,EAAM2kC,QAAQ18C,KAAKm5E,mBAAqB,EAAIn5E,KAAKm5E,iBAC1D,CACA,2BAAI7N,CAAwBzqC,GAC1B7gC,KAAKm5E,kBAAoBt4C,CAC3B,CAcA,iBAAIu4C,GACF,OAAOrhE,EAAM2kC,QAAQ18C,KAAK82E,gBAAkB,GAAK92E,KAAK82E,cACxD,CAKA,iBAAA7G,CAAkB18E,GAChByM,KAAK82E,eAAiBvjF,CACxB,CAYA,gBAAIkyE,GACF,OAAO1tD,EAAM2kC,QAAQ18C,KAAK+2E,eAAiB,GAAK/2E,KAAK+2E,aACvD,CAOA,gBAAAhH,CAAiBx8E,GACfyM,KAAK+2E,cAAgBxjF,CACvB,CAWA,sBAAI8lF,GACF,OAAOthE,EAAM2kC,QAAQ18C,KAAKg3E,qBAAuB,GAAKh3E,KAAKg3E,mBAC7D,CAKA,sBAAAsC,CAAuB/lF,GACrByM,KAAKg3E,oBAAsBzjF,CAC7B,CAeA,2BAAIgmF,GACF,OAAOxhE,EAAM2kC,QAAQ18C,KAAKw5E,mBAAqB,EAAIx5E,KAAKw5E,iBAC1D,CACA,2BAAID,CAAwB14C,GAC1B7gC,KAAKw5E,kBAAoB34C,CAC3B,CAeA,6BAAI44C,GACF,OAAO1hE,EAAM2kC,QAAQ18C,KAAK05E,qBAAuB,EAAI15E,KAAK05E,mBAC5D,CACA,6BAAID,CAA0B54C,GAC5B7gC,KAAK05E,oBAAsB74C,CAC7B,CAQA,oCAAI84C,GACF,QAAO5hE,EAAM2kC,QAAQ18C,KAAK45E,qBAA6B55E,KAAK45E,kBAC9D,CACA,oCAAID,CAAiC94C,GACnC7gC,KAAK45E,mBAAqB/4C,CAC5B,CAQA,mCAAIg5C,GACF,QAAO9hE,EAAM2kC,QAAQ18C,KAAK85E,0BAAkC95E,KAAK85E,uBACnE,CACA,mCAAID,CAAgCh5C,GAClC7gC,KAAK85E,wBAA0Bj5C,CACjC,CAUA,wBAAIkhC,GACF,OAAOhqD,EAAM2kC,QAAQ18C,KAAK+5E,uBAAgC/5E,KAAK+5E,oBACjE,CACA,wBAAIhY,CAAqBlhC,GACvB7gC,KAAK+5E,qBAAuBl5C,CAC9B,CAYA,uBAAI8kC,GACF,OAAO3lE,KAAKi3E,oBACd,CACA,uBAAItR,CAAoBr3E,GACtB,MAAM,2BAAE4I,GAA+BgmE,EACvCl9D,KAAKi3E,qBAAuB3oF,aAAe4I,EACvC5I,EACA,IAAI4I,EAA2B5I,EACrC,CAcA,WAAI+jC,GACF,OAAOta,EAAM2kC,QAAQ18C,KAAK8gC,WAAoB9gC,KAAK8gC,QACrD,CACA,WAAIzO,CAAQwO,GACV7gC,KAAK8gC,SAAWD,CAClB,CAYA,sBAAI4lC,GACF,OAAO1uD,EAAM2kC,QAAQ18C,KAAKg6E,cAAgB,IAAQh6E,KAAKg6E,YACzD,CACA,sBAAIvT,CAAmB5lC,GACrB7gC,KAAKg6E,aAAen5C,CACtB,CAqBA,qBAAIo5C,GACF,OAAOliE,EAAM2kC,QAAQ18C,KAAKk6E,oBAAsB,MAAcl6E,KAAKk6E,kBACrE,CACA,qBAAID,CAAkBp5C,GACpB7gC,KAAKk6E,mBAAqBr5C,CAC5B,CAiBA,oBAAI+zB,GACF,OAAO78C,EAAM2kC,QAAQ18C,KAAKm6E,mBAAqB,IAAWn6E,KAAKm6E,iBACjE,CAEA,oBAAIvlB,CAAiB/zB,GACnB7gC,KAAKm6E,kBAAoBt5C,CAC3B,CAWA,iBAAIu5C,GACF,OAAOriE,EAAM2kC,QAAQ18C,KAAKq6E,gBAAkB,QAAgBr6E,KAAKq6E,cACnE,CACA,iBAAID,CAAcv5C,GAChB7gC,KAAKq6E,eAAiBx5C,CACxB,CAKA,4BAAIuzC,GAGF,MAAO,GAAG/lE,QAAOhe,GAAK0nB,EAAM8nB,UAAU7/B,KAAK3P,KAC7C,CAMA,CAAC,4CACC,OAAOqJ,OAAOC,OAAOqG,KAAK22E,gBAAiB,CACzC,qBAAoCx+E,EAAqBiH,SAASY,KAAKwzE,sBACvE,YAAoCxzE,KAAK2zE,YAAc,QAAU,UACjE,QAAoC3zE,KAAK0zE,QAAU,QAAU,UAC7D,iBAAoC1zE,KAAKs3E,iBAAmB,QAAU,UACtE,IAAoCt3E,KAAKi2D,IACzC,SAAoCj2D,KAAKy3E,SAAW,QAAUz3E,KAAKy3E,SACnE,SAAoCz3E,KAAK23E,SACzC,WAAoC33E,KAAK63E,WACzC,uBAAoC73E,KAAK+3E,uBACzC,QAAoC/3E,KAAKi4E,QACzC,aAAoCj4E,KAAKm4E,aACzC,kBAAoCn4E,KAAK0vE,kBACzC,sBAAoC1vE,KAAK6wB,sBACzC,eAAoC7wB,KAAKu3D,eACzC,sBAAoCv3D,KAAKy3D,sBACzC,0BAAoCz3D,KAAK03D,0BACzC,iBAAoC13D,KAAKw3D,iBACzC,uBAAoCx3D,KAAK04E,uBACzC,0BAAoC14E,KAAK44E,0BACzC,gBAAoC54E,KAAK84E,gBACzC,uBAAoC94E,KAAKg5E,uBACzC,yBAAoCh5E,KAAKusE,yBACzC,wBAAoCvsE,KAAKsrE,wBACzC,cAAoCtrE,KAAKo5E,cACzC,aAAoCp5E,KAAKylE,aACzC,mBAAoCzlE,KAAKq5E,mBACzC,wBAAoCr5E,KAAKu5E,wBACzC,0BAAoCv5E,KAAKy5E,0BACzC,iCAAoCz5E,KAAK25E,iCACzC,qBAAoC35E,KAAK+hE,qBACzC,oBAAoC/hE,KAAK2lE,oBACzC,QAAoC3lE,KAAKqyB,QACzC,mBAAoCryB,KAAKymE,mBACzC,kBAAoCzmE,KAAKi6E,kBACzC,cAAoCj6E,KAAKo6E,eAE7C,CAQA,QAAArsF,GACE,OAAOuT,MAAMvT,UACf,EAYA2K,EAAkB+7E,sBAAwBA,EAQ1C/7E,EAAkBw5E,wBAA0BA,EAO5Cx5E,EAAkBi5E,wBAA0BA,EAG5Cj5E,EAAkB4hF,8BAAgC,CAChD,MAAa9F,EAAkC,iBAAK,EACpD,MAAaA,EAAkC,iBAAK,EACpD,MAAaA,EAAkC,iBAAK,EACpD,UAAaA,EAAoC,mBAAK,EACtD,UAAaA,EAAoC,mBAAK,GAM1DhpF,EAAOC,QAAQiN,kBAAoBA,iBC37CnC,MAAM,KAAE6E,GAAS,EAAQ,MAczB/R,EAAOC,QAAQ2xE,mBAAqB7/D,EAAKE,IARd,CACzBwwE,iBAAyB,EACzBG,oBAAyB,EACzBF,aAAyB,EACzBqM,gBAAyB,EACzBvM,wBAAyB,sBCX3B,MAAM,KAAEzwE,GAAS,EAAQ,MAiCzB/R,EAAOC,QAAQ4xE,iBAAmB9/D,EAAKE,IAzBd,CACvB48D,aAAkC,sBAClCwE,WAAkC,oBAClCuB,sBAAkC,sBAClCI,yBAAkC,wBAClCK,kBAAkC,kBAClC9F,aAAkC,qBAClCqI,gBAAkC,wBAClCoX,cAAkC,eAClClX,cAAkC,uBAClCzB,yBAAkC,0BAClCc,oBAAkC,6BAClCx5C,SAAkC,kBAClCg5C,uBAAkC,oBAClCO,4BAAkC,uBAClCc,oBAAkC,qBAClCY,mBAAkC,oBAClCnE,qBAAkC,sBAClC72C,aAAkC,eAClCqxD,eAAkC,gBAClCta,iCAAkC,gCAClCH,gBAAkC,gBAClCyB,6BAAkC,8CC9BpC,MAAM,KAAElkE,GAAS,EAAQ,MA8BzB/R,EAAOC,QAAQkN,aAAe4E,EAAKE,IAxBd,CAInBohE,WAAe,EAIf6b,UAAe,EAIfF,cAAe,EAIflX,cAAe,EAIfjJ,aAAe,0CC1BjB,MAAM3P,EAAiB,EAAQ,MACzBiwB,EAAa,EAAQ,MACrBh9E,EAAsB,EAAQ,OAC9B,OAAE0D,GAAW,EAAQ,OACrB,aAAEnI,EAAY,qBACZ0hF,GAAyB,EAAQ,OACnC,eAAExiF,GAAmB,EAAQ,OAC7B,MAAE2f,EAAK,UACLpc,GAAc,EAAQ,MACxB,oBAAE+4D,GAAwB,EAAQ,OAClC,2BAAEtxD,EAA0B,aAC1BxU,EAAY,eACZC,EAAc,iBACd+G,GAAqB,EAAQ,OAC/B,aAAE2c,GAAiB,EAAQ,OAC3B,cAAEyiD,GAAkB,EAAQ,MAC5B,SAAEsC,GAAa,EAAQ,OACvB,aAAEl9C,GAAiB,EAAQ,OAC3B,gBAAE/hB,GAAoB,EAAQ,OAC9B,uBAAEC,GAA2B,EAAQ,OACrC,uBAAEkhE,GAA2B,EAAQ,OACrC,QAAEI,GAAY,EAAQ,OACtB,gBAAEpiE,EAAe,UACfI,GAAc,EAAQ,OACxB,SAAEC,EAAQ,aACRC,GAAiB,EAAQ,MAC3B,aAAES,GAAiB,EAAQ,OAC3B,mBAAEC,GAAuB,EAAQ,OACjC,iBAAEC,GAAqB,EAAQ,OAC/B,iBAAEu5D,GAAqB,EAAQ,OAC/B,WAAE8L,GAAe,EAAQ,KACzB,gBAAEpB,GAAoB,EAAQ,OAC9B,iBAAE+T,GAAqB,EAAQ,OAC/B,kBAAE/3E,GAAsB,EAAQ,OAChC,2BAAE26E,GAA+B,EAAQ,OACzC,mBAAEjW,GAAuB,EAAQ,MACjC,aAAEzkE,GAAiB,EAAQ,OAC3B,iBAAE0kE,GAAqB,EAAQ,OAC/B,MAAEhjD,EAAK,SACLjhB,GAAa,EAAQ,OACvB,YAAEc,GAAgB,EAAQ,MAC1B,sBAAEmsC,EAAqB,kBACrB/sC,EAAiB,oBACjBsvC,GAAwB,EAAQ,MA0BxC,SAASiyC,EAAmBpI,GAC1B,OAAQA,GACAA,IAAsBn5E,EAAkBq5E,uBACxCF,IAAsBn5E,EAAkBs5E,aACxCH,IAAsBn5E,EAAkBu5E,WAClD,CAEA,SAASx/D,EAAgBiB,GACvB,MAAO,oBAAoB7b,EAAiB2G,SAASkV,IACvD,CAKA,MAAMwmE,EAA2B,OAuEjC,MAAMjmF,UAAgB0d,EAmBpB,WAAAxS,CAAY6rB,EAAYmvD,EAAiBC,GACvC15E,MAAM,CACJ6R,MAAQ1a,EAAiB6V,OACzB4E,OAAQza,EAAiB0lC,QACzB9qB,oBAEF,MAAMuH,EAAO5a,KACbA,KAAKmY,OAAS,IAAIiC,EAClBpa,KAAKmY,OAAOoM,UAAY,YAAsBrQ,GAC5C,MAAO,CAAC,YAAY0G,EAAKqgE,YAAcrgE,EAAKqgE,YAAYpgE,aAAe,cAAe3G,EACxF,EACA,MAAM,UAAE2H,GAAc7b,KAAKmY,OAE3B,GAAI,MAACyT,EAAoD,CACvD,MAAM,UAAExS,GAAcpZ,KAAKmY,MAE7B,CAGAnY,KAAKqU,GAAG,SAAU5V,IAChB,MAAM,UAAEvD,GAAc0f,EAAKzC,OAC3Bjd,EAAUuD,EAAMqX,KAAKrX,MAAM,IAG7B,MAAMyzD,EAAoB,IAAIx5D,EAAkBkzB,GAChD,CACE,MAAM,UAAExS,GAAcpZ,KAAKmY,MAE7B,CAmCA,GA7BAnY,KAAKk7E,qBAAuBl7E,KAAKm7E,oBAAoBJ,GACrD/6E,KAAKo7E,mBAAqBp7E,KAAKq7E,kBAAkBL,GAG7CjjE,EAAMi6D,MAAM9f,EAAkB2lB,cAEhC3lB,EAAkB2lB,WAAa7iB,EAAcQ,sBAI/CtD,EAAkBonB,uBAAuBtkB,EAAcW,8BAGnD59C,EAAMi6D,MAAM9f,EAAkB6lB,0BAEhC7lB,EAAkB6lB,uBAAyB/iB,EAAcY,6BAS3Dyd,EAA2BxyE,SAASqxD,GAKhCn6C,EAAM2kC,QAAQwV,EAAkBohB,0BAA2B,CAI7D,MAAMgI,EAAmBppB,EAAkBugB,kBACrC8I,EApMZ,WACE,MAAM,eAAEz9E,GAAmBH,EAGzB,MAAO,CAACrE,EAAkBs6E,UAkB9B,CA8K0B4H,GACdC,EAAaH,EAAmBC,EAAYr5E,QAAQo5E,GAAoB,EAC9E,GAAIG,EAAa,EAEf,MAAM,IAAI5sF,EAAe,+BACAyK,EAAkB8F,SAASk8E,8CAE3B1sF,EAAa8a,oBAKxC,GAFAwoD,EAAkBohB,yBAA2BiI,EAAYlpF,MAAMopF,GAEL,IAAtDvpB,EAAkBohB,yBAAyBpmF,OAG7C,MAAM,IAAI2B,EAAe,iDACvByK,EAAkB8F,SAASk8E,KAC3B1sF,EAAa8a,oBAIjB,MAAMgyE,EAAaxpB,EAAkBohB,yBAAyBjlE,QAAOmlB,GACnEqnD,EAAmBrnD,KAWrB,GAV0B,IAAtBkoD,EAAWxuF,SACb8S,KAAK27E,kBACH,8EACEzpB,EAAkBohB,yBAAyB5gF,KAAIrC,GAC7CiJ,EAAkB8F,SAAS/O,KAAI4D,KAAK,SAMxCi+D,EAAkByT,oBAAoB/+B,QAAS,CACjD,GAAI5mC,KAAK27E,kBACP,MAAM,IAAI9sF,EACR,gFACAD,EAAa8a,mBACb1J,KAAK27E,mBAITzpB,EAAkBohB,yBAA2BoI,CAC/C,CAEF,KAAO,CAKL,MAAME,EAAqB1pB,EAAkBohB,yBAE7C,IADmBsI,EAAmBzpE,MAAM0oE,GAC3B,CACf,MAAMgB,EAAUD,EAAmBvtE,QAAOmlB,IAAMqnD,EAAmBrnD,KAGnE,GAFAxzB,KAAK27E,kBAAoB,wEACvBE,EAAQnpF,KAAIrC,GAAKiJ,EAAkB8F,SAAS/O,KAAI4D,KAAK,QACnDi+D,EAAkByT,oBAAoB/+B,QACxC,MAAM,IAAI/3C,EACR,gFACAD,EAAa8a,mBACb1J,KAAK27E,kBAGX,CACF,CAIA37E,KAAKg+D,mBAAqB9L,EAC1BlyD,KAAK87E,cAAgB,IAAIzhE,EACzBra,KAAKk+D,OAAS,IAAI5G,EAASpF,GAC3BlyD,KAAKi7E,YAAc,IAAInd,EACrB99D,KAAKg+D,mBACLh+D,KACAA,KAAK87E,cACL97E,KAAKk+D,QAEPl+D,KAAKi7E,YAAYtrE,QACjB3P,KAAKi7E,YAAYvV,yBAOjB1lE,KAAK+7E,qBAAuB,CAAC,EAC7B/7E,KAAKg8E,cAAgBtnB,EAAoBC,0BAA0BzC,GACnElyD,KAAKi8E,QAAU,CACjB,CA4BA,OAAAjgE,GACE,MAAM,UAAEH,GAAc7b,KAAKmY,OAErBrnB,EAASkP,KAAKk8E,eAAezL,EAAiB92D,SACpD,GAAI7oB,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAEnE,MAAMk1D,EAAS,IAAIhC,EAAgB,CAAE7/D,KAAMm1D,EAAiBr4C,UAC5D3Z,KAAKi7E,YAAY/9D,aAAawhD,EAChC,CAOA,UAAIvhD,GAmBF,MANqB,CACnBkgD,EAAiBwB,WACjBxB,EAAiBtC,aACjBsC,EAAiBiG,eAGC7jE,MAAK08E,KAAen8E,KAAKi7E,YAAYx5D,eAAe06D,IAC1E,CAUA,UAAA1/D,GACE,MAAM,UAAEZ,GAAc7b,KAAKmY,OAErBrnB,EAASkP,KAAKk8E,eAAezL,EAAiB72D,YACpD,GAAI9oB,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAEnE,MAAMk1D,EAAS,IAAIhC,EAAgB,CAAE7/D,KAAMm1D,EAAiBp4C,aAC5D5Z,KAAKi7E,YAAY/9D,aAAawhD,EAChC,CAMA,OAAAxiD,GACE,MAAM,UAAEL,GAAc7b,KAAKmY,OAEvBnY,KAAKkb,WAGTrE,YAAW,KACT7W,KAAKi7E,YAAY/9D,aACf,IAAIw/C,EAAgB,CAAE7/D,KAAMm1D,EAAiBj4C,WAE/C/Z,KAAKi7E,YAAYz+D,eACjBxc,KAAKkW,iBACLlW,KAAKkb,WAAY,CAAI,GACpB,EACL,CA8CA,SAAAkhE,CAAU75C,EAAO4pC,EAAqBvgE,EAAgB42B,GACpD,MAAM,UAAE3mB,GAAc7b,KAAKmY,OACuBoqB,GAASA,EAAMx0C,UAAYw0C,EAAMx0C,WACnF,MAAM+C,EAASkP,KAAKk8E,eAAezL,EAAiBC,MACpD,GAAI5/E,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAInE,GAFA7N,EAAUud,aAAa,QAASqpB,EAAOmoB,EAAet2D,aACtDmuC,EAAM1hC,WACF0hC,EAAM7hC,YAAcgqD,EAAel1D,gBAAgBgI,MACrD,MAAM,IAAI3O,EAAe,oCACA67D,EAAel1D,gBAAgB4J,SAASmjC,EAAM7hC,aAC9C9R,EAAayP,sBAGxC1C,EAAU0gF,mBAAmB,sBAAuBlQ,GACpDxwE,EAAU0iD,kBAAkB,iBAAkB7b,GAC9C7mC,EAAU2gF,wBAAwB,iBAAkB95C,EAAgB,IAAK,GAEzExiC,KAAKi7E,YAAYtN,mBACfprC,IACE4pC,EACFvgE,EACA42B,EACA46B,EAAmB6Q,kBACnB,CAACziC,EAAUo8B,IACT5nE,KAAKu8E,iCAAiC/wC,EACAo8B,EACAuE,IAC5C,CAEA,uBAAA1pC,CAAwBF,EAAOQ,EAAOryB,EAAKgzB,EAAiBnb,EAAUia,GACpE,MAAM,UAAE3mB,GAAc7b,KAAKmY,OAEaoqB,GAASA,EAAMx0C,UAAYw0C,EAAMx0C,WACvDg1C,GAASA,EAAMh1C,UAAYg1C,EAAMh1C,WAInD,MAAM+C,EAASkP,KAAKk8E,eAAezL,EAAiBC,MACpD,GAAI5/E,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAInE,GAFA7N,EAAUud,aAAa,QAASqpB,EAAOmoB,EAAet2D,aACtDmuC,EAAM1hC,WACF0hC,EAAM7hC,YAAcgqD,EAAel1D,gBAAgBgI,MACrD,MAAM,IAAI3O,EAAe,0CACA67D,EAAel1D,gBAAgB4J,SAASmjC,EAAM7hC,aAC9C9R,EAAayP,sBAIxC,GAFA1C,EAAUud,aAAa,QAAS6pB,EAAO2nB,EAAet2D,aACtD2uC,EAAMliC,WACDkiC,EAAMriC,YAAcgqD,EAAel1D,gBAAgB2H,OACvD4lC,EAAMriC,YAAcgqD,EAAel1D,gBAAgB4H,gBAClD,MAAM,IAAIvO,EAAe,0CACA67D,EAAel1D,gBAAgB4J,SAAS2jC,EAAMriC,aAC9C9R,EAAa+a,wBAGxChO,EAAU0iD,kBAAkB,iBAAkB7b,GAC9C7mC,EAAU2gF,wBAAwB,iBAAkB95C,EAAgB,IAAK,GAEzExiC,KAAKi7E,YAAY5M,wBACf9rC,EACAQ,EACAP,EACA9xB,GACA,CAAC86B,EAAUo8B,IACT5nE,KAAKw8E,sCACHhxC,EACAo8B,EACAr/C,IACR,CA8CA,WAAAk0D,CAAYl6C,EAAO4pC,EAAqBvgE,EAAgB42B,GACtD,MAAM,UAAE3mB,GAAc7b,KAAKmY,OACyBoqB,GAASA,EAAMx0C,UAAYw0C,EAAMx0C,WACrF,MAAM+C,EAASkP,KAAKk8E,eAAezL,EAAiBC,MACpD,GAAI5/E,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAInE,GAFA7N,EAAUud,aAAa,QAASqpB,EAAOmoB,EAAet2D,aACtDmuC,EAAM1hC,WACF0hC,EAAM7hC,YAAcgqD,EAAel1D,gBAAgBgI,MACrD,MAAM,IAAI3O,EAAe,sCACA67D,EAAel1D,gBAAgB4J,SAASmjC,EAAM7hC,aAC9C9R,EAAayP,sBAGxC1C,EAAU0gF,mBAAmB,sBAAuBlQ,GACpDxwE,EAAU0iD,kBAAkB,iBAAkB7b,GAC9C7mC,EAAU2gF,wBAAwB,iBAAkB95C,EAAgB,IAAK,GAEzExiC,KAAKi7E,YAAYtN,mBACfprC,IACE4pC,EACFvgE,EACA42B,EACA46B,EAAmBgR,qBACnB,CAAC5iC,EAAUo8B,IACT5nE,KAAKu8E,iCAAiC/wC,EACAo8B,EACAuE,IAC5C,CA+BA,+BAAAuQ,CAAgCptD,GAC9B,MAAM,UAAEzT,GAAc7b,KAAKmY,OACwDmX,GAAmBA,EAAgBvhC,UAAYuhC,EAAgBvhC,WAClJ,MAAM+C,EAASkP,KAAKk8E,eAAezL,EAAiBC,MACpD,GAAI5/E,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAGnE,MAAMylB,EAAcjvB,KAAKs8B,gCACvB9kC,EAAgBmwD,eAAer4B,IAEjCtvB,KAAKi7E,YAAYtN,mBACf1+C,GAF0B,OAI1Br+B,OACAA,EACAwsE,EAAmB4Q,yBACnB,CAACxiC,EAAUo8B,IACT5nE,KAAK28E,6BAA6BnxC,EACAo8B,IACxC,CA2BA,cAAAgV,CAAepP,EAAwB3sC,EAAU2B,EAAgB52B,GAC/D,MAAM,UAAEiQ,GAAc7b,KAAKmY,OAErBrnB,EAASkP,KAAKk8E,eAAezL,EAAiBC,MACpD,GAAI5/E,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAGnE,MAAM,MAAE/T,GAAUi1D,EASlB,IAAImV,EALJlkE,EAAUynB,aAAa,yBAA0BoqD,EAAwBl1E,GAEzEqD,EAAU0iD,kBAAkB,iBAAkB7b,GAC9C7mC,EAAU2gF,wBAAwB,iBAAkB95C,EAAgB,IAAK,GAYzE,MAmJMsH,EAAa9pC,KAAKi7E,YAAY1N,mBAAmBC,EACA3sC,EACAj1B,EACA42B,GAtJ7Bq6C,IACxB,MAAMtkD,EAAWskD,EAAQ7b,cACzB,GAA8B,MAA1BzoC,EAAS/B,cACX,GAAIg3C,IAA2Bl1E,EAAuBihE,mBAEpDv5D,KAAKg+D,mBAAmB+Z,uBAAyBl3C,EACjDg/B,EAAetnE,EAAakkE,MAAMhkE,EAAiByhE,mBACjB3hC,EAAS+oC,eACT/oC,EAAS/B,aACT,EACA5qB,EACA,MAClC5L,KAAKqmE,UAAUxG,QACV,GAAI2N,IAA2Bl1E,EAAuBghE,YAAa,CAExE,MAAMwjB,EAAkBljB,EAAQE,wBAC9B95D,KAAKg+D,mBAAmByH,cACpBsX,EAActnF,EAAMwG,eAAe6gF,GAEnCE,EAAkBpjB,EAAQE,wBAC9B+iB,EAAQ7M,oBACJiN,EAAcxnF,EAAMwG,eAAe+gF,GAEnCE,EAAoBC,IACxB,MAAMC,EAAOD,EAAQnc,cACrB,GAA0B,MAAtBoc,EAAK5mD,aAEPx2B,KAAKg+D,mBAAmB+R,iBAAiB8M,EAAQ7M,oBAAsB,IACvEhwE,KAAKg+D,mBAAmBiS,kBACtBrW,EAAQC,iBAAiB75D,KAAKg+D,mBAAmByH,eACnDzlE,KAAKg+D,mBAAmB6Z,WAAah3C,EACrCg/B,EAAetnE,EAAakkE,MAAMhkE,EAAiByhE,mBACjBkjB,EAAK9b,eACL8b,EAAK5mD,aACL,EACA5qB,EACA,MAClC5L,KAAKqmE,UAAUxG,OACV,CACL,MAAM5zD,EAAe7I,EAA2B+F,gBAAgBi0E,EAAK5mD,aACL4mD,EAAK9b,gBACjEr1D,IAAiBrd,EAAamV,8BAClB/D,KAAKg+D,mBAAmB2b,kCAEtC9Z,EAAetnE,EAAakkE,MAAMhkE,EAAiByhE,mBACjBkjB,EAAK9b,eACL8b,EAAK5mD,aACL,EACA5qB,EACA,MAClC5L,KAAKqmE,UAAUxG,IACN5zD,IAAiBrd,EAAamV,8BAC9BkI,IAAiBrd,EAAaoV,kCAC9BiI,IAAiBrd,EAAasV,sBAC9B+H,IAAiBrd,EAAaqW,yBAC9BgH,IAAiBrd,EAAagV,uBAEvCi8D,EAAetnE,EAAakkE,MAAMhkE,EAAiB0hE,sBACjBijB,EAAK9b,eACL8b,EAAK5mD,aACLvqB,EACAL,EACA,MAClC5L,KAAKqmE,UAAUxG,KAGfA,EAAetnE,EAAakkE,MAAMhkE,EAAiB0hE,sBACjBijB,EAAK9b,eACL8b,EAAK5mD,aACL5nC,EAAasb,yBACb0B,EACA,MAClC5L,KAAKqmE,UAAUxG,GAEnB,GAGIwd,EAAuBF,IAC3B,MAAMC,EAAOD,EAAQnc,cACrB,GAA0B,MAAtBoc,EAAK5mD,aAEPx2B,KAAKi7E,YAAYtN,mBAAmBsP,GACA,EACArxE,EACA5L,KAAKg+D,mBAAmByI,mBACxBrJ,EAAmB8Q,aACnBgP,OAC/B,CACL,MAAMjxE,EAAe7I,EAA2B+F,gBAAgBi0E,EAAK5mD,aACL4mD,EAAK9b,gBACjEr1D,IAAiBrd,EAAaqV,wBAC9BjE,KAAKg+D,mBAAmB6b,gCAG1B75E,KAAKi7E,YAAYtN,mBAAmBsP,GACA,EACArxE,EACA5L,KAAKg+D,mBAAmByI,mBACxBrJ,EAAmB8Q,aACnBgP,GAC3BjxE,IAAiBrd,EAAaoV,kCAC9BiI,IAAiBrd,EAAasV,sBAC9B+H,IAAiBrd,EAAaqV,wBAC9BgI,IAAiBrd,EAAaqW,yBAEvC46D,EAAetnE,EAAakkE,MAAMhkE,EAAiB0hE,sBACjBijB,EAAK9b,eACL8b,EAAK5mD,aACLvqB,EACA,KACA,MAClCjM,KAAKqmE,UAAUxG,KAGfA,EAAetnE,EAAakkE,MAAMhkE,EAAiB0hE,sBACjBijB,EAAK9b,eACL8b,EAAK5mD,aACL5nC,EAAasb,yBACb,KACA,MAClClK,KAAKqmE,UAAUxG,GAEnB,GAIF7/D,KAAKi7E,YAAYtN,mBAAmBoP,GACA,EACAnxE,EACA5L,KAAKg+D,mBAAmByI,mBACxBrJ,EAAmBmd,gBACnB8C,EACtC,MACK,CAEL,MAAMpxE,EAAe7I,EAA2B+F,gBAAgBovB,EAAS/B,aACT+B,EAAS+oC,gBACzEzB,EAAetnE,EAAakkE,MAAMhkE,EAAiB0hE,sBACjB5hC,EAAS+oC,eACT/oC,EAAS/B,aACTvqB,EACAL,EACA,MAClC5L,KAAKqmE,UAAUxG,EACjB,KAQE/1B,IAAelB,EAAoB1O,KAInC2lC,EADE/1B,IAAelB,EAAoB6E,SACtBl1C,EAAakkE,MAAMhkE,EAAiB0hE,sBACjB,iDACA,KACAvrE,EAAaib,mBACb,KACA,MAEnBtR,EAAakkE,MAAMhkE,EAAiB0hE,sBACjB,yBACA,KACAvrE,EAAa4a,kBACb,KACA,MAEpCxJ,KAAKqmE,UAAUxG,GAEnB,CA0BA,+BAAAyd,CAAgCC,GAC9B,MAAM,UAAE1hE,GAAc7b,KAAKmY,OACrBqlE,EAAoB,CAAC,cAAe,WACpC1sF,EAASkP,KAAKk8E,eAAezL,EAAiBG,iBACpD,GAAI9/E,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAEnE,IAAK+zE,GAAgE,iBAA7BA,EACtC,MAAM,IAAI1uF,EAAe,wEAAyED,EAAa+a,uBAAwB,MAEzI,IAAIsE,EACJ,IAAKA,KAAOsvE,EACV,IAAKC,EAAkB5qE,SAAS3E,GAC9B,MAAM,IAAIpf,EAAe,iEAAkED,EAAa8a,mBAAoB,MAGhI,MAAM+zE,EAAWz9E,KAAK09E,uBACtBhkF,OAAOC,OAAO8jF,EAAUF,GACxBlK,EAA2BxyE,SAAS48E,GACpCz9E,KAAKg+D,mBAAqByf,EAC1B/jF,OAAOC,OAAOqG,KAAKi7E,YAAYjd,mBAAoBuf,EAErD,CAgCA,IAAAlf,CAAKhzD,GACH,MAAM,UAAEwQ,GAAc7b,KAAKmY,OAErBrnB,EAASkP,KAAKk8E,eAAezL,EAAiBE,KAAMtlE,GAC1D,GAAIva,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAKnE,GAHA7N,EAAUud,aAAa,UAAW7N,EAASsvE,EAAWlmF,UAGjDuL,KAAK2uB,UAAUv2B,EAAe+7D,qBAIjC9oD,EAAQu6C,4BAGL5lD,KAAK29E,wCAAwCtyE,IAC9C,MAAM,IAAIxc,EACR,kEACAD,EAAa4a,mBAGnBxJ,KAAK49E,uBAAuBvyE,EAC9B,CAEA,uCAAAsyE,CAAwCtyE,GACtC,OAAO,CACT,CAuCA,WAAAwyE,CAAYxyE,EACAsL,OAAU/lB,EACV8oE,OAA0B9oE,EAC1BktF,OAA0BltF,EAC1ByoE,OAAazoE,GAEvB,MAAM,UAAEirB,GAAc7b,KAAKmY,OAErBrnB,EAASkP,KAAKk8E,eAAezL,EAAiBE,KAAMtlE,GAC1D,GAAIva,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAEnE7N,EAAUud,aAAa,UAAW7N,EAASsvE,EAAWlmF,SACtDkH,EAAU0iD,kBAAkB,UAAW1nC,GACvChb,EAAU2gF,wBAAwB,UAAW3lE,EAAS,KAAM,KAC5Dhb,EAAUoiF,oBAAoB,0BAA2BrkB,GACzD/9D,EAAUoiF,oBAAoB,0BAA2BD,GAGzD,MAAMrkB,EAAgBpuD,EAAQsrC,mBAC1B8iB,SACFpuD,EAAQu0C,iBAAiBk7B,EAA2B9lB,EAAcO,UAEpE,MAAMpc,EAAU9tC,EAAQ+tC,aACxB,GAAID,QAA2C,CAC7C,MAAM6kC,EAAetzB,EAAej1D,MAAMwG,eACxC+D,KAAKg+D,mBAAmBob,eAC1B/tE,EAAQ03C,WAAWi7B,EACrB,CAEAh+E,KAAK49E,uBAAuBvyE,GAG5BrL,KAAKi+E,0BAA0B5yE,EAAQsrC,mBACRmnC,EACAnnE,EACA+iD,EACAL,EACjC,CAuCA,SAAA6kB,CAAUC,EAAkBC,GAC1B,MAAM,UAAEviE,GAAc7b,KAAKmY,OAErBrnB,EAASkP,KAAKk8E,eAAezL,EAAiBE,KAAMyN,GAC1D,GAAIttF,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAOnE,GAJA7N,EAAUyiD,sBAAsB,mBAAoB+/B,EAAkBxD,EAAWlmF,SACjFkH,EAAUud,aAAa,eAAgBklE,EAAczD,EAAWlmF,SAEhE2pF,EAAax7B,mBAAkB,GAC3Bu7B,EAAkB,CACpBC,EAAax+B,iBAAiBu+B,EAAiBxnC,oBAC/C,MAAMwC,EAAUglC,EAAiB/kC,aACjC,GAAID,QACF,MAAM,IAAItqD,EAAe,uCACAD,EAAa8E,wBAExC0qF,EAAaj+B,eAAeg+B,EAAiB/kC,aAC/C,CACAp5C,KAAK49E,uBAAuBQ,EAC9B,CAcA,OAAAvhE,CAAQC,GACN,MAAM,UAAEjB,GAAc7b,KAAKmY,OAErBrnB,EAASkP,KAAKk8E,eAAezL,EAAiBG,iBACpD,GAAI9/E,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAInE,OADA7N,EAAUynB,aAAa,WAAYtG,EAAU1jB,GACtC4G,KAAKi7E,YAAYp+D,QAAQC,EAClC,CAQA,UAAAf,GACE,MAAM,UAAEF,GAAc7b,KAAKmY,OAErBrnB,EAASkP,KAAKk8E,eAAezL,EAAiBG,iBACpD,GAAI9/E,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAEnExJ,KAAKi7E,YAAYl/D,YACnB,CASA,oBAAA2hE,GACE,MAAM,UAAE7hE,GAAc7b,KAAKmY,OAErBrnB,EAASkP,KAAKk8E,eAAezL,EAAiBG,iBACpD,GAAI9/E,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAGnE,MAAMoiB,EAAa5rB,KAAKg+D,mBAAmBphD,QAM3C,OALqB5c,KAAKq+E,oBACJhhB,EAAiBhD,cAAiBr6D,KAAKi7E,YAAYva,YACvE90C,EAAWspD,8BAA8Bl1E,KAAKi7E,YAAYva,WAAW4d,wBAGhE1yD,CACT,CAqBA,SAAA+C,CAAU4vD,GACR,MAAM,UAAE1iE,GAAc7b,KAAKmY,OAErBrnB,EAASkP,KAAKk8E,eAAezL,EAAiBG,iBACpD,GAAI9/E,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAEnE7N,EAAUm0C,SAAS,iBAAkByuC,GAErC,MAAMpZ,EAAOnlE,KAAKg8E,cAClB,QAAK7W,IAKmC,kBAAzBA,EAAKoZ,IAAiCpZ,EAAKoZ,GAC5D,CAqBA,aAAA78C,CAAc68C,GACZ,MAAM,UAAE1iE,GAAc7b,KAAKmY,OAErBrnB,EAASkP,KAAKk8E,eAAezL,EAAiBG,iBACpD,GAAI9/E,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAGnE7N,EAAUm0C,SAAS,iBAAkByuC,GAErC,MAAMjwF,EAAM0R,KAAKowE,eAAemO,GAChC,MAAmB,kBAARjwF,EACFuJ,EAASm2D,OAAOl2D,EAAamzD,KAAM38D,GAEzB,iBAARA,EACFuJ,EAASm2D,OAAOl2D,EAAa8zD,MAAOt9D,GAE1B,iBAARA,EACFuJ,EAASm2D,OAAOl2D,EAAautD,OAAQ/2D,GAGvC,IACT,CAEA,cAAA8hF,CAAemO,GACb,MAAMpZ,EAAOnlE,KAAKg8E,cAClB,IAAK7W,EAAM,OAAO,KAElB,MAAM5xE,EAAQ4xE,EAAKoZ,GACnB,YAAkB3tF,IAAV2C,EAAuB,KAAOA,CACxC,CAYA,eAAA8qF,GACE,MAAM,UAAExiE,GAAc7b,KAAKmY,OAErBrnB,EAASkP,KAAKk8E,eAAezL,EAAiBG,iBACpD,GAAI9/E,EACF,MAAM,IAAIjC,EAAeiC,EAAQlC,EAAa4a,kBAAmB,MAEnE,MAAMg1E,EAAmBx+E,KAAKy+E,cAC9B,OAAQD,GACN,KAAKnhB,EAAiB+F,gBACpB,OAAOzqE,EAAa+hF,UACtB,KAAKrd,EAAiBiG,cACpB,OAAO3qE,EAAa2qE,cACtB,KAAKjG,EAAiBhD,aACpB,OAAO1hE,EAAa0hE,aACtB,KAAKgD,EAAiBmd,cACpB,OAAO7hF,EAAa6hF,cACtB,KAAKnd,EAAiBwB,WACtB,KAAKxB,EAAiB8C,iCACtB,KAAK9C,EAAiB2C,gBACtB,KAAK3C,EAAiBmD,yBACtB,KAAKnD,EAAiBqhB,uBACtB,KAAKrhB,EAAiBwD,kBACtB,KAAKxD,EAAiBshB,yBACtB,KAAKthB,EAAiBsF,oBACtB,KAAKtF,EAAiBwE,yBACpB,OAAOlpE,EAAakmE,WACtB,QACE,CAYE,MAAM,SAAE/yC,GAAa9rB,KAAKmY,OAE1B,OADA2T,EAAS,0BAA0BuxC,EAAiBj+D,SAASo/E,MACtD,IACT,EAEN,CAOA,WAAAC,GACE,OAAOz+E,KAAKi7E,YAAYxiD,qBAC1B,CAgBA,kBAAAmmD,CAAmBhzD,GACjB,MAAM,UAAE/P,GAAc7b,KAAKmY,OAE3B,OAAO,IAAIjf,EAAa0yB,EAAY5rB,KAAM,CAGxCgd,QAAShd,KAAKi7E,YAAYj+D,QAAQxe,KAAKwB,KAAKi7E,cAEhD,CAyDA,qBAAApV,CAAsBlwC,GACpB,MAAM,UAAE9Z,GAAc7b,KAAKmY,OAE3B,GAAInY,KAAK27E,kBACP,MAAM,IAAI9sF,EAAe,sDACAD,EAAa2W,eACbvF,KAAK27E,mBAEhC,GAAI,MAAChmD,EAAoE,CACvE,MAAM,UAAEvc,GAAcpZ,KAAKmY,MAE7B,CACA,OAAOnY,KAAKi7E,YAAYpV,sBAAsBlwC,EAChD,CA0DA,kBAAAmwC,CAAmB+Y,GACjB,MAAM,UAAEhjE,GAAc7b,KAAKmY,OAE3B,GAAInY,KAAK27E,kBACP,MAAM,IAAI9sF,EAAe,mDACAD,EAAa2W,eACbvF,KAAK27E,mBAEhC,GAAI,MAACkD,EAAkE,CACrE,MAAM,UAAEzlE,GAAcpZ,KAAKmY,MAE7B,CACA,OAAOnY,KAAKi7E,YAAYnV,mBAAmB+Y,EAC7C,CAcA,+BAAAviD,CAAgChN,GAC9B,MAAM,gBACJ95B,EAAe,MACfoG,EAAK,MACLnG,GACEi1D,EAEJ,IAAIo0B,EAAkBtpF,EAAgBgI,MAClC8xB,EAAgBpyB,OAAStF,EAAUuF,QACrC2hF,EAAkBxvD,EAAgBC,QAC9B/5B,EAAgB2H,MAChB3H,EAAgB4H,iBAGtB,MAAMP,EAAOyyB,EAAgBzyB,MAAQ,KAErC,GAAIyyB,EAAgBC,QAAS,CAC3BluB,EAAOxE,EAAM,qEAIb,OAHsByyB,EAAgB5uB,YAAc9I,EAAUuF,MAC1DvB,EAAMS,oBACN5G,EAAMwG,gBACWY,EACvB,CAEA,OAAOmD,KAAKu8B,2BAA2BuiD,EAAiBjiF,EAC1D,CASA,0BAAA0/B,CAA2BuiD,EAAiBjiF,GAC1C,MAAM,UAAEgf,GAAc7b,KAAKmY,QACrB,uBAAE1c,EAAsB,gBAAEC,GAAoBgvD,EAG9Cq0B,EAAM/+E,KAAK09E,uBAAuBhO,kBACxC,IAAK1vE,KAAK2uB,UAAUv2B,EAAe+6D,qBAA/B,MACA4rB,GAAoD,IAAfA,EAAI7xF,OAC3C,MAAM,IAAI2B,EACR,iFACAD,EAAa4a,mBAGjB,MAAMw1E,EAAYniF,GAAQA,EAAKG,WAAW,QACtCH,EACAnB,EAAgBsD,oBAAoB8/E,EAAiBC,EAAKliF,GAE9D,OAAOpB,EAAuBgB,0BAA0BuiF,EAC1D,CAMA,SAAA3Y,CAAUxG,GACR,IAAKA,EAAc,OACnB,GAAI7/D,KAAKkb,UAAW,OAEpB,MAAM,UAAEW,GAAc7b,KAAKmY,OAE3BnY,KAAKo7E,mBAAmBrhB,uBAAuB/5D,KACA6/D,EACA7/D,KAAKo7E,mBAAmB/hB,WACzE,CAQA,gBAAAkO,GACE,MAAM,UAAE1rD,GAAc7b,KAAKmY,OAE3B,OAAOnY,KAAKi7E,YAAY1T,kBAC1B,CAMA,0BAAAyD,CAA2BE,GACzBlrE,KAAKi7E,YAAYjQ,2BAA2BE,EAC9C,CAQA,cAAAgR,CAAe+C,EAAe5zE,GAC5B,IAAKrL,KAAKi7E,YAAa,OAAO,EAC9B,IAAIiE,GAAQ,EACZ,MAAMV,EAAmBx+E,KAAKi7E,YAAYxiD,sBAE1C,GAAI+lD,IAAqBnhB,EAAiBl0C,SACxC+1D,GAAQ,OACH,GAAInnE,EAAMonE,SAASF,GACxB,OAAQA,GACN,KAAKxO,EAAiB92D,QAChB6kE,IAAqBnhB,EAAiB+hB,KACtCZ,IAAqBnhB,EAAiBhD,eACxC6kB,GAAQ,GAEV,MACF,KAAKzO,EAAiB72D,WAChB4kE,IAAqBnhB,EAAiB+hB,MACxCF,GAAQ,GAEV,MACF,KAAKzO,EAAiBE,KACtB,KAAKF,EAAiBC,KACpBwO,EACIV,IAAqBnhB,EAAiB+F,iBACvC/3D,GAAYA,EAAQksC,oBAAsBojC,EAAWzkF,wBAAwBk/C,OAChF,MAEF,KAAKq7B,EAAiBG,gBACpBsO,GAAQ,EACR,MACF,QACEA,GAAQ,OAGZA,GAAQ,EAGV,OAAIA,EACK,KAGF,4BAA4BD,oBAAgCT,GACrE,CAMA,kBAAAtO,CAAmBmP,GACjBr/E,KAAKg8E,cAAgBqD,CACvB,CAMA,sBAAAzB,CAAuBvyE,GAGrB,MAAMi0E,EAAWj0E,EAAQkwB,iBACzB,GAAIxjB,EAAM2kC,QAAQ4iC,IAAavnE,EAAMi6D,MAAMsN,EAAS7+E,WAClD,MAAM,IAAI5R,EAAe,wCAAyCD,EAAaqb,eAGjF,MAAMs1E,EAAkBl0E,EAAQ2rC,qBAC1BwoC,EAAoBD,QAC1B,GAAIv/E,KAAKg+D,mBAAmB0a,yBACvB8G,GAAqBn0E,EAAQw5C,wBAAyB,CACzD,MAAM46B,EAAM,IAAI16D,KAChB1Z,EAAQ83C,mBAAmBs8B,EAAIxnC,WAC/B5sC,EAAQw5C,wBAAyB,CACnC,CACA,MAAM66B,EAAiBr0E,EAAQgrC,oBACzBspC,EAAmBD,QACrB1/E,KAAKg+D,mBAAmBgb,yBACvB2G,GAAoBt0E,EAAQu5C,yBAC/Bv5C,EAAQi4C,kBAAkBtjD,KAAKi8E,WAC/B5wE,EAAQu5C,uBAAwB,GAElC,MAAMg7B,EAAWv0E,EAAQyqC,cACnB+pC,EAAaD,QACf5/E,KAAKg+D,mBAAmB8a,iBAAmB+G,GAC7Cx0E,EAAQ43C,YAAYjjD,KAAKg+D,mBAAmB6Z,YAU9C73E,KAAKi7E,YAAYlP,sBAAsB1gE,EACzC,CAUA,yBAAA4yE,CAA0BxkB,EAAeqmB,EAAavZ,EAAYwZ,EAAc1mB,GAC9E,GAAIthD,EAAMioE,KAAKvmB,GACb,OAEF,MAAM,UAAE59C,EAAS,UAAE3gB,GAAc8E,KAAKmY,OAIhCq8C,EAAQ39C,YAAW,KACvB7W,KAAKi7E,YAAYj+D,QAAQ5jB,EAAS6mF,oBAElC,WACwBjgF,KAAK+7E,qBAAqBtiB,IAE9Cv+D,EAAU,8BAA8Bu+D,IAE5C,CAAE,MAAO35C,GACP5kB,EAAU,8BAA8Bu+D,IAAiB35C,EAC3D,CAEA,GAAI/H,EAAMonE,SAASW,GAAc,CAC/B,MAAMI,EAAe3nF,EAAakkE,MAAM7mE,EAAiB8V,gBACjB,kBACA+tD,GAExCqmB,EAAY9/E,KAAMkgF,EAAc7mB,EAClC,IACCkN,GAAcvmE,KAAKg+D,mBAAmByI,oBAEnCC,EAAiB,IAAIlN,EAAuBC,EACAjF,EACAurB,EACAD,EACAzmB,GAClDr5D,KAAK+7E,qBAAqBtiB,GAAiBiN,CAC7C,CAOA,wBAAAyZ,CAAyB1mB,GACvB,MAAM,UAAE59C,EAAS,UAAE3gB,GAAc8E,KAAKmY,OAEtC,GAAIJ,EAAMioE,KAAKvmB,KAAmBz5D,KAAK+7E,qBACrC,OAAO,KAGT,MAAMlX,EAAM7kE,KAAK+7E,qBAAqBtiB,GACtC,GAAIoL,QACF,OAAO,KAGLA,EAAIrQ,QACN19C,aAAa+tD,EAAIrQ,OACjBqQ,EAAIrQ,MAAQ,MAGd,WACwBx0D,KAAK+7E,qBAAqBtiB,IAE9Cv+D,EAAU,8BAA8Bu+D,IAE5C,CAAE,MAAO35C,GACP5kB,EAAU,8BAA8Bu+D,IAAiB35C,EAC3D,CACA,OAAO+kD,CACT,CAKA,cAAA5B,GACE,MAAM,UAAEpnD,GAAc7b,KAAKmY,OACvBnY,KAAK+7E,sBAEPriF,OAAO8F,KAAKQ,KAAK+7E,sBAAsBjuE,SAASG,IAC9C,MAAMmyE,EAAUpgF,KAAKmgF,yBAAyBlyE,GAC9C,GAAImyE,GAAWA,EAAQzmB,oBAAqB,CAC1C,MAAMumB,EAAe3nF,EAAakkE,MAAM7mE,EAAiB6V,gBACjB,kBACAwC,GACxCmyE,EAAQzmB,oBAAoB35D,KAAMkgF,EAAcE,EAAQ/mB,WAC1D,IAGN,CAMA,iBAAA13B,CAAkB0+C,GAChB,MAAM,UAAExkE,EAAS,SAAEiQ,GAAa9rB,KAAKmY,OAC/BmoE,EAAcD,EACpB,GAAIrgF,KAAKg+D,mBAAmB4a,0BAA2B,CACrD,MAAM6G,EAAM,IAAI16D,KAChBu7D,EAAYz9B,mBAAqB48B,EAAIxnC,SACvC,CAEA,GAAIqoC,EAAYrnC,iBAAkB,CAChC,MAAMwgB,EAAgB6mB,EAAY3pC,mBAClC,GAAI5+B,EAAMonE,SAAS1lB,GAAgB,CACjC,MAAM2mB,EAAUpgF,KAAKmgF,yBAAyB1mB,GAC9C,GAAgB,OAAZ2mB,EAKF,OAJApgF,KAAKi7E,YAAYj+D,QAAQ5jB,EAASmnF,0BAElCH,EAAQ1mB,wBAAwB15D,KAAMsgF,EAAaF,EAAQ/mB,YAK7D,GAAII,EAAcz8D,WAAW89E,GAK3B,OAFAhvD,EAAS,uEACT9rB,KAAKi7E,YAAYj+D,QAAQ5jB,EAASyuE,sBAIpC,GAAIpO,EAAcz8D,WAAW49E,MACrB1hF,GAAgB8G,KAAKk7E,qBAAqB7hB,sBAAsBngE,GAMtE,OAFA4yB,EAAS,iEACT9rB,KAAKi7E,YAAYj+D,QAAQ5jB,EAASyuE,qBAGtC,CACF,CAIA7nE,KAAKk7E,qBAAqB9hB,oBAAoBp5D,KACAsgF,EACAtgF,KAAKk7E,qBAAqB7hB,WAE1E,CASA,gCAAAkjB,CAAiCnP,EAAQvD,EAAS2W,GAChD,MAAMjoD,EAAW60C,EAAOpM,eAClB,aACJxqC,EAAY,eACZ8qC,GACG/oC,GACC,eAAE3sB,GAAmBi+D,EAK3B,GAAqB,MAAjBrzC,EAAsB,CAExB,MAAMqpC,EAAetnE,EAAakkE,MAAMhkE,EAAiB2lC,gBACjBkjC,EACA9qC,EACA,EACA5qB,EACA,MACxC5L,KAAKqmE,UAAUxG,EACjB,KAAO,CACL,MAAMuC,EAAkBloE,EAAY8D,mBAAmBovE,EAAO/K,yBAC9DriE,KAAKi7E,YAAY/X,8BAA8B1sC,EACA8qC,EACAc,EACAx2D,EACA40E,EACjD,CACF,CAUA,qCAAAhE,CAAsCpP,EAAQvD,EAASthD,GACrD,MAAM,UAAE1M,GAAc7b,KAAKmY,OAE3B,IAAKi1D,EAGH,YADA7kD,GAAS,EAAO35B,EAAa6a,QAAS,EAAG,WAI3C,MAAM8uB,EAAW60C,EAAOpM,eAClB,aACJxqC,EAAY,eACZ8qC,GACG/oC,EACCtsB,EAAe7I,EAA2BgG,kBAAkBotB,EAAc8qC,GAE3D,MAAjB9qC,GACDvqB,IAAiBrd,EAAamV,8BAC9BkI,IAAiBrd,EAAaqV,uBAE/BskB,GAAS,EAAM,EAAGiO,EAAc8qC,GAEhC/4C,GAAS,EAAOtc,EAAcuqB,EAAc8qC,EAEhD,CAUA,4BAAAqb,CAA6B8D,EAAe5W,GAC1C,MAAMtxC,EAAWkoD,EAAczf,eACzB,aACJxqC,EAAY,eACZ8qC,GACE/oC,GACE,eAAE3sB,GAAmBi+D,EACrBl+D,EAA6B,MAAjB6qB,EACd/9B,EAAiBgiE,wBACjBhiE,EAAiBiiE,2BACfpvD,EAA2B,MAAjBkrB,EACZ,EACApzB,EAA2BgG,kBAAkBotB,EACA8qC,GACjDthE,KAAKqmE,UAAU9tE,EAAakkE,MAAM9wD,EACA21D,EACA9qC,EACAlrB,EACAM,GAEpC,CAUA,6BAAAs3D,CAA8BtgC,EACAC,EACAu/B,EACAx2D,EACA40E,GAC5B,MAAMv0E,EAAe7I,EAA2B+F,gBAAgBy5B,EAAUC,GAC1E,GAAK52B,IAAiBrd,EAAamV,8BAC9B/D,KAAKg+D,mBAAmB2b,kCACxB1tE,IAAiBrd,EAAaqV,wBAC7BjE,KAAKg+D,mBAAmB6b,iCAC5B,GAAI2G,EAAgB,CAElB,MAAM3gB,EAAetnE,EAAakkE,MAChChkE,EAAiB2lC,gBACjByE,EACAD,EACA,EACAh3B,EACA,MAEF5L,KAAKqmE,UAAUxG,EACjB,MACK,CAEL,MAAMA,EAAetnE,EAAakkE,MAChChkE,EAAiB4lC,mBACjBwE,EACAD,EACA32B,EACAL,EACA,UAAUw2D,KAEZpiE,KAAKqmE,UAAUxG,EACjB,CACF,CAMA,cAAA6gB,GACE,OAAO1gF,KAAKo7E,kBACd,CAMA,cAAAuF,CAAeC,GACb5gF,KAAKo7E,mBAAqBwF,CAC5B,CAMA,gBAAAC,GACE,OAAO7gF,KAAKk7E,oBACd,CAMA,gBAAA4F,CAAiBC,GACf/gF,KAAKk7E,qBAAuB6F,CAC9B,CAMA,iBAAAxwD,GACE,OAAOvwB,KAAKi7E,YAAY1qD,mBAC1B,CAQA,iBAAA8qD,CAAkBL,GAChB,MAAM,SAAE//E,GAAa+E,KAAKmY,OACpBi6C,EACC4oB,EACDA,EAAcjhB,uBAA+BihB,EAC1C,IAAIxiF,EAAmBwiF,GAFH,KAI7B,OAAO,IAAIxiF,GAAmB,CAAC8kB,EAASuiD,EAAc9rE,EAAKitF,KACzD,MAAM,iBAAEhlB,GAAqB6D,EAC7B,GAAIzN,EACF,IACEA,EAAkB2H,uBAAuBz8C,EAASuiD,EAAc9rE,EAAKitF,EACvE,CAAE,MAAOprE,GACP,MAAMnX,EAAQ/E,OAAOC,OAAO,IAAI9K,EAC9B,wEACE4J,EAAiB2G,SAAS48D,KAC1BptE,EAAaic,eACb,aAAa,CAACmxD,EAAkB6D,EAAc9rE,EAAKitF,MAAQprE,KAC1D,CACDvJ,MAAOuJ,EAAGvJ,MACVyJ,KAAO,CACLP,MAAO,CACL1Y,KAAem/D,EACfjmD,cAAe,oBAAoBtd,EAAiB2G,SAAS48D,KAC7D9nD,KAAe,CAAC2rD,EAAc9rE,EAAKitF,IAErCviF,MAAOmX,KAIb3a,EAASwD,EAAM1Q,WAAY0Q,EAAMqX,KACnC,CAEF9V,KAAKuT,KAAKyoD,EAAkB6D,EAAa,GAE7C,CAQA,mBAAAsb,CAAoBJ,GAClB,MAAM,SAAE9/E,GAAa+E,KAAKmY,OAEpBg6C,EACC4oB,EACDA,EAAgB3hB,oBAA4B2hB,EACzC,IAAI1iF,EAAgB0iF,GAFE,KAKzBhlE,EAAgB,oBAAoBtd,EAAiB2G,SAAS3G,EAAiB0lC,WAC/E8iD,EAAkB,CAACrrE,EAAIvK,EAAS61E,IAAWxnF,OAAOC,OACtD,IAAI9K,EAAe,2DAA2DknB,IAC3DnnB,EAAaic,gBAChC,CACEwB,MAAOuJ,EAAGvJ,MACVyJ,KAAO,CACLP,MAAO,CACL1Y,KAAMpE,EAAiB0lC,QACvBpoB,gBACA7B,KAAM,CAAC7I,EAAS61E,IAElBziF,MAAOmX,KAIb,OAAO,IAAIvd,GAAgB,CAACilB,EAASjS,EAAS61E,KAC5C,GAAI/uB,EACF,IACEA,EAAoBiH,oBAAoB97C,EAASjS,EAAS61E,EAC5D,CAAE,MAAOtrE,GACP,MAAMnX,EAAQwiF,EAAgBrrE,EAAIvK,EAAS61E,GAAQnzF,WACnDkN,EAASwD,EAAOA,EAAMqX,KAAMF,EAC9B,CAEF,IACE5V,KAAKmU,WAAW9I,EAClB,CAAE,MAAOuK,GACP5V,KAAKuT,KAAK,QAAS0tE,EAAgBrrE,EAAIvK,EAAS61E,GAClD,IAEJ,CAMA,qBAAIjV,GACF,QAASjsE,KAAK27E,iBAChB,CAMA,sBAAI9Y,GACF,OAAI7iE,KAAKisE,oBACLjsE,KAAKg8E,cACAh8E,KAAK2uB,UAAUv2B,EAAe+4B,iCADvC,EAIF,CAMA,uBAAIoxC,GACF,OAAIviE,KAAKisE,oBACLjsE,KAAKg8E,cACAh8E,KAAK2uB,UAAUv2B,EAAeg7D,iCADvC,EAIF,CAMA,YAAIh2C,GACF,OAAOpd,KAAKkb,SACd,CAEA,CAAC,4CACC,MAAO,CACL,UAAalb,KAAKi7E,aAAej7E,KAAKi7E,YAAYpgE,cAAgB,QAClE,UAAa7a,KAAKunE,mBAClB,MAAa5uE,EAAayG,SAASY,KAAKq+E,mBAE5C,CAEA,QAAAtwF,GACE,OAAOiT,EAAahB,KACtB,EAGFxU,EAAOC,QAAQoJ,QAAUA,kBCrqEzB,MAAM,KAAE0I,GAAS,EAAQ,MAyBzB/R,EAAOC,QAAQmN,aAAe2E,EAAKE,IAbd,CAKnBs4B,KAAW,OAKXk3C,UAAW,+BCtBb,MAAM,mBAAE7P,GAAuB,EAAQ,KAEvC5xE,EAAOC,QAAU,CACf8xE,kCAAmC,CACjC,CAACH,EAAmB6Q,kBAA0B,mCAC9C,CAAC7Q,EAAmBgR,qBAA0B,sCAC9C,CAAChR,EAAmB8Q,cAA0B,qCAC9C,CAAC9Q,EAAmBmd,iBAA0B,wCAC9C,CAACnd,EAAmB4Q,yBAA0B,qCAC9CF,QAA8C,oCCTlD,MAAMqT,EAAW,EAAQ,OACnB,kBAAE3wD,EAAiB,gBAAE4wD,EAAe,kBAAElU,EAAiB,iBAAEpB,EAAgB,WAAEuB,GAAe,EAAQ,OAClG,yBAAEj3C,GAA6B,EAAQ,OACvC,mBAAEirD,GAAuB,EAAQ,OACjC,yBAAElZ,GAA6B,EAAQ,OACvC,mBAAEmZ,GAAuB,EAAQ,OACjC,iBAAEC,EAAgB,yBAAEC,GAA6B,EAAQ,OACzD,YAAEvY,GAAgB,EAAQ,OAC1B,kBAAEwY,GAAsB,EAAQ,OAChC,uBAAEC,GAA2B,EAAQ,OACrC,+BAAEC,GAAmC,EAAQ,MAEnDn2F,EAAOC,QAAQ+kC,kBAAoBA,EACnChlC,EAAOC,QAAQ21F,gBAAkBA,EACjC51F,EAAOC,QAAQyhF,kBAAoBA,EACnC1hF,EAAOC,QAAQqP,MAAQqmF,EACvB31F,EAAOC,QAAQqgF,iBAAmBA,EAClCtgF,EAAOC,QAAQ2qC,yBAA2BA,EAC1C5qC,EAAOC,QAAQ41F,mBAAqBA,EACpC71F,EAAOC,QAAQ08E,yBAA2BA,EAC1C38E,EAAOC,QAAQ61F,mBAAqBA,EACpC91F,EAAOC,QAAQ81F,iBAAmBA,EAClC/1F,EAAOC,QAAQw9E,YAAcA,EAC7Bz9E,EAAOC,QAAQi2F,uBAAyBA,EACxCl2F,EAAOC,QAAQg2F,kBAAoBA,EACnCj2F,EAAOC,QAAQk2F,+BAAiCA,EAChDn2F,EAAOC,QAAQ4hF,WAAaA,EAC5B7hF,EAAOC,QAAQ+1F,yBAA2BA,kBC3B1C,MAAMt2D,EAAS,EAAQ,OACjB,kBAAEsF,EAAiB,aAAEoxD,GAAiB,EAAQ,OAC9C,KAAEj2F,EAAI,QAAEC,GAAY,EAAQ,OAC5B,UAAEwtB,EAAS,SAAE0S,EAAQ,UAAE5wB,GAAc,EAAQ,OAC7C,gBAAE4qD,GAAoB,EAAQ,OAIlCz3D,IAAK6+D,EACLz+D,IAAKozF,GACHl2F,GAEE,UACJuF,EAAS,WACTG,EAAU,WACVG,EAAU,WACV5B,GACEhE,EA2FJ,SAASk2F,EAAaC,EAAIC,GACxB,MAAM1yF,EAAO,GACb,IAAIwiD,EAAQ,EAMZ,OAJAA,EAAQnmD,EAAK8C,IAAIqjD,EAAOiwC,EAAI,EAAG,GAC/BjwC,EAAQnmD,EAAK8C,IAAIqjD,EAAOkwC,EAAW,EAAG,GACtC1yF,EAAKwpB,KAAKltB,EAAQsF,UAAU4gD,IAC5BxiD,EAAKwpB,KAAKltB,EAAQsF,UAAU,IACrB5B,EAAK2E,KAAK,GACnB,CACA,SAASguF,EAAaF,EAAIC,EAAWzuF,GACnC,MAAMjE,EAAO,GACb,IAAIwiD,EAAQ,EAOZ,OALAA,EAAQnmD,EAAK8C,IAAIqjD,EAAOiwC,EAAI,EAAG,GAC/BjwC,EAAQnmD,EAAK8C,IAAIqjD,EAAOkwC,EAAW,EAAG,GACtC1yF,EAAKwpB,KAAKltB,EAAQsF,UAAU4gD,IAC5BxiD,EAAKwpB,KAAKltB,EAAQsF,UAAU,IAC5B5B,EAAKwpB,KAAKltB,EAAQsF,UAAUqC,IACrBjE,EAAK2E,KAAK,GACnB,CAEA,SAASiuF,EAAcH,EAAIC,EAAWzuF,GACpC,MAAMjE,EAAO,GACb,IAAIwiD,EAAQ,EAOZ,OALAA,EAAQnmD,EAAK8C,IAAIqjD,EAAOiwC,EAAI,EAAG,GAC/BjwC,EAAQnmD,EAAK8C,IAAIqjD,EAAOkwC,EAAW,EAAG,GACtC1yF,EAAKwpB,KAAKltB,EAAQsF,UAAU4gD,IAC5BxiD,EAAKwpB,KAAKltB,EAAQsF,UAAU,IAC5B5B,EAAKwpB,KAAKltB,EAAQyF,WAAWkC,IACtBjE,EAAK2E,KAAK,GACnB,CAEA,SAASkuF,EAAcJ,EAAIC,EAAWzuF,GACpC,MAAMjE,EAAO,GACb,IAAIwiD,EAAQ,EAOZ,OALAA,EAAQnmD,EAAK8C,IAAIqjD,EAAOiwC,EAAI,EAAG,GAC/BjwC,EAAQnmD,EAAK8C,IAAIqjD,EAAOkwC,EAAW,EAAG,GACtC1yF,EAAKwpB,KAAKltB,EAAQsF,UAAU4gD,IAC5BxiD,EAAKwpB,KAAKltB,EAAQsF,UAAU,IAC5B5B,EAAKwpB,KAAKltB,EAAQgE,WAAW2D,IACtBjE,EAAK2E,KAAK,GACnB,CAEA,SAASmuF,EAAcL,EAAIC,EAAWzuF,GACpC,MAAMjE,EAAO,GACb,IAAIwiD,EAAQ,EAOZ,OALAA,EAAQnmD,EAAK8C,IAAIqjD,EAAOiwC,EAAI,EAAG,GAC/BjwC,EAAQnmD,EAAK8C,IAAIqjD,EAAOkwC,EAAW,EAAG,GACtC1yF,EAAKwpB,KAAKltB,EAAQsF,UAAU4gD,IAC5BxiD,EAAKwpB,KAAKltB,EAAQsF,UAAU,KAC5B5B,EAAKwpB,KAAKltB,EAAQgG,WAAW2B,IACtBjE,EAAK2E,KAAK,GACnB,CAGA,MAAMouF,EAAgB,CAAC,EAQvB,SAASC,EAAkBP,EAAIC,EAAWzuF,GACxC,MAAMjE,EAAO,GACPizF,EAAUhvF,EAAM2J,KAChBslF,EAASjvF,EAAMA,MACrB,IAAIu+C,EAAQ,EAOZ,OALAA,EAAQnmD,EAAK8C,IAAIqjD,EAAOiwC,EAAI,EAAG,GAC/BjwC,EAAQnmD,EAAK8C,IAAIqjD,EAAOkwC,EAAW,EAAG,GACtC1yF,EAAKwpB,KAAKltB,EAAQsF,UAAU4gD,IAC5BxiD,EAAKwpB,KAAKltB,EAAQsF,UAAUmxF,EAAcE,KAC1CjzF,EAAKwpB,KAAKltB,EAAQsF,UAAUqxF,IACpBA,GACN,KAAKz8B,EAAgB6C,KAEnBr5D,EAAKwpB,KAAKltB,EAAQgG,WAAW4wF,IAC7B,MACF,KAAK18B,EAAgBM,MAOnB92D,EAAKwpB,KAAKltB,EAAQgG,WAAW4wF,EAAO9gC,OACpCpyD,EAAKwpB,KAAKltB,EAAQgG,WAAW4wF,EAAO1nD,YAEtC,KAAKgrB,EAAgB4C,WAQvB,OAAOp5D,EAAK2E,KAAK,GACnB,CAEA,SAASwuF,EAAqBV,EAAIC,EAAWz0E,EAAKC,EAAKk1E,OAAU9xF,GAC/D,MAAMtB,EAAO,GACb,IAAIwiD,EAAQ,EACZA,EAAQnmD,EAAK8C,IAAIqjD,EAAOiwC,EAAI,EAAG,GAC/BjwC,EAAQnmD,EAAK8C,IAAIqjD,EAAOkwC,EAAW,EAAG,GACtC,MAAMW,EAA0B/xF,MAAX8xF,GAAoC,IAAZA,EAAiB,GAAK,GAQnE,OAPApzF,EAAKwpB,KAAKltB,EAAQsF,UAAU4gD,IAC5BxiD,EAAKwpB,KAAKltB,EAAQsF,UAAUyxF,IAC5BrzF,EAAKwpB,KAAKltB,EAAQgG,WAAW2b,IAC7Bje,EAAKwpB,KAAKltB,EAAQgG,WAAW4b,IACf5c,MAAX8xF,GAAwBA,EAAU,GACnCpzF,EAAKwpB,KAAKltB,EAAQsF,UAAUwxF,IAEvBpzF,EAAK2E,KAAK,GACnB,CAEA,SAAS2uF,EAAkBb,EAAIC,EAAWzuF,GAExC,MAAMjE,EAAO,GACb,IAAIwiD,EAAQ,EACZA,EAAQnmD,EAAK8C,IAAIqjD,EAAOiwC,EAAI,EAAG,GAC/BjwC,EAAQnmD,EAAK8C,IAAIqjD,EAAOkwC,EAAW,EAAG,GACtC1yF,EAAKwpB,KAAKltB,EAAQsF,UAAU4gD,IAE5B,IAAI+wC,EAAQ,EAUZ,OATItvF,EAAMrG,QAAU,KAClB21F,EAAQtvF,EAAMrG,OAAS,EACvBoC,EAAKwpB,KAAKltB,EAAQsF,UAAU2xF,MAE5BA,EAAQ,EACRvzF,EAAKwpB,KAAKltB,EAAQsF,UAAU2xF,IAC5BvzF,EAAKwpB,KAAKltB,EAAQgE,WAAW2D,EAAMrG,OAAS,KAE9CoC,EAAKwpB,KAAKvlB,GACHjE,EAAK2E,KAAK,GACnB,CA/EAouF,EAAcv8B,EAAgB4C,WAAa,EAC3C25B,EAAcv8B,EAAgB6C,MAAQ,GACtC05B,EAAcv8B,EAAgBM,OAAS,GAoQvC56D,EAAOC,QAAQq3F,WA3Zf,SAAoBl1B,EAAS3wD,GAC3B,GAAKA,EAAS,EAAK2wD,EAAQ1gE,OAGzB,OAAO,EAET,IAAIiO,EAAM8B,EACNmxD,EAAUR,EAAQE,UAAU3yD,GAChCA,IAGA,MAAM4nF,EAAa71B,EAAKkB,EAAS,EAAG,GACpC,IAAIwgB,EACAz4C,EACJ,GAAI4sD,EAAa,EAAG,CAClB,MAAMC,EAAUp1B,EAAQoB,aAAa7zD,GACrCA,GAAO,EACPg7B,EAAU+2B,EAAK81B,EAAS,GAAI,GAE5BpU,EAAY1hB,EAAK81B,EAAS,EAAG,IAE7BpU,IAAc,CAChB,KAAO,IAAmB,IAAfmU,EAQT,OADA7nF,EAAU,gCAAiC6nF,IACpC,EAPP30B,EAAUR,EAAQE,UAAU3yD,GAC5BA,IACAg7B,EAAU+2B,EAAKkB,EAAS,EAAG,GAC3BwgB,EAAYhhB,EAAQzG,aAAahsD,GACjCA,GAAO,CAIT,CAIA,GAAI8B,EAAS2xE,EAAYhhB,EAAQ1gE,OAG/B,OAFAgO,EAAU,4CAA4C0zE,wCACbhhB,EAAQ1gE,OAAS+P,MACnD,EAET,MAAM0sC,EAAS,IAAInZ,EAAkB2F,EAAS4sD,GAC9C,KAAO5nF,EAAO8B,EAAS2xE,GAAY,CACjCxgB,EAAUR,EAAQE,UAAU3yD,GAC5BA,IACA,MAAM8nF,EAAU/1B,EAAKkB,EAAS,EAAG,GAC3B80B,EAAYh2B,EAAKkB,EAAS,EAAG,GAGnC,GAAkB,IAAd80B,EACF,SAEF,GAAI/nF,GAAQ8B,EAAS2xE,EAEnB,OADA1zE,EAAU,+CAA+CgoF,kBAA0B/nF,MAC5E,EAET,IACIgoF,EADAC,EAAWx1B,EAAQE,UAAU3yD,GAKjC,GAHAA,IAGiB,IAAbioF,EAAgB,CAElB,GAAIjoF,EAAM,EAAK8B,EAAS2xE,EAEtB,OADA1zE,EAAU,+CAA+CgoF,kBAA0B/nF,MAC5E,EAETioF,EAAWx1B,EAAQzG,aAAahsD,GAChCA,GAAO,EACPgoF,EAAgBC,EAAW,CAC7B,MACED,EAAgBC,EAAW,EAE7B,GAAIA,GAAY,EACd,OAAO,EAIT,GAAIjoF,EAAMgoF,EAAgBlmF,EAAS2xE,EAGjC,OAFA1zE,EAAU,+CAA+CgoF,aAC3CC,0BAAsChoF,MAC7C,EAET,MAAMkoF,EAAW,IAAIzB,EAAaqB,EAASC,EAAW,KAAMt1B,EAASzyD,EAAKA,EAAMgoF,GAChFx5C,EAAO25C,aAAaD,GACpBloF,GAAOgoF,CACT,CACA,OAAOx5C,CACT,EAqUAn+C,EAAOC,QAAQ83F,OAtLf,SAAgB55C,GACd,MAAM65C,EAAa,GACbC,EAAa95C,EAAO+5C,oBAE1B,IAAI31E,EACJ,IAAKA,EAAI,EAAGA,EAAI01E,EAAWv2F,OAAQ6gB,IAAK,CACtC,MAAM41E,EAAQF,EAAW11E,GAEzB,QAAcnd,IAAV+yF,EAIJ,OAAQA,EAAMjjF,WAIZ,KAAKwqB,EAAOm2D,mBAAmBuC,OAC/B,KAAK14D,EAAOm2D,mBAAmBwC,WAC/B,KAAK34D,EAAOm2D,mBAAmByC,WAC/B,KAAK54D,EAAOm2D,mBAAmB0C,SAC/B,KAAK74D,EAAOm2D,mBAAmB2C,gBAC/B,KAAK94D,EAAOm2D,mBAAmB4C,8BAC/B,KAAK/4D,EAAOm2D,mBAAmB6C,yBAC/B,KAAKh5D,EAAOm2D,mBAAmB8C,uBAC/B,KAAKj5D,EAAOm2D,mBAAmB+C,wBAC/B,KAAKl5D,EAAOm2D,mBAAmBgD,eAC7Bb,EAAW1qE,KAAKmpE,EAAa0B,EAAMW,QAASX,EAAMjjF,UAAWijF,EAAM54C,aACnE,MAIF,KAAK7f,EAAOm2D,mBAAmBkD,aAC/B,KAAKr5D,EAAOm2D,mBAAmBmD,mBAC7BhB,EAAW1qE,KAAKopE,EAAcyB,EAAMW,QAASX,EAAMjjF,UAAWijF,EAAM54C,aACpE,MAIF,KAAK7f,EAAOm2D,mBAAmBoD,OAC/B,KAAKv5D,EAAOm2D,mBAAmBqD,iBAC/B,KAAKx5D,EAAOm2D,mBAAmBsD,uBAC/B,KAAKz5D,EAAOm2D,mBAAmBuD,SAC/B,KAAK15D,EAAOm2D,mBAAmBwD,eAC/B,KAAK35D,EAAOm2D,mBAAmByD,mBAC/B,KAAK55D,EAAOm2D,mBAAmB0D,sBAC/B,KAAK75D,EAAOm2D,mBAAmB2D,aAC7BxB,EAAW1qE,KAAKqpE,EAAcwB,EAAMW,QAASX,EAAMjjF,UAAWijF,EAAM54C,aACpE,MAIF,KAAK7f,EAAOm2D,mBAAmB4D,cAC/B,KAAK/5D,EAAOm2D,mBAAmB6D,eAC/B,KAAKh6D,EAAOm2D,mBAAmB8D,kBAC/B,KAAKj6D,EAAOm2D,mBAAmB+D,eAC/B,KAAKl6D,EAAOm2D,mBAAmBgE,kBAC7B7B,EAAW1qE,KAAKspE,EAAcuB,EAAMW,QAASX,EAAMjjF,UAAWijF,EAAM54C,aACpE,MAIF,KAAK7f,EAAOm2D,mBAAmBiE,sBAC7B,CACE,MAAMC,EAAiB5B,EAAM54C,gBACzBn6C,IAAc20F,EAAehyF,MAE/BiwF,EAAW1qE,KAAKmpE,EAAa0B,EAAMW,QACNX,EAAMjjF,UACN6kF,EAAeroF,OAG5CsmF,EAAW1qE,KAAKwpE,EAAkBqB,EAAMW,QAASX,EAAMjjF,UAAW6kF,IAEpE,KACF,CAIF,KAAKr6D,EAAOm2D,mBAAmBmE,gBAC7B,CAEE,MAAMC,EAAS9B,EAAM54C,WACfg3C,EAAK4B,EAAMW,QACXpnF,EAAOymF,EAAMjjF,UAEnB+kF,EAAO33E,SAAQ,CAAC43E,EAAkBhD,KAChC,IAAK,IAAIn2F,EAAI,EAAGA,EAAIm5F,EAAiBx4F,SAAUX,EAAG,CAChD,MAAM8wC,EAAQqoD,EAAiBn5F,GAC/Bi3F,EAAW1qE,KAAK2pE,EAAqBV,EACA7kF,EACAmgC,EAAM,GACNA,EAAM,GACNqlD,GACvC,KAEF,KACF,CAIF,KAAKx3D,EAAOm2D,mBAAmBsE,UAC/B,KAAKz6D,EAAOm2D,mBAAmBuE,QAC/B,KAAK16D,EAAOm2D,mBAAmBwE,UAC/B,KAAK36D,EAAOm2D,mBAAmByE,SAC/B,KAAK56D,EAAOm2D,mBAAmB9tB,SAC/B,KAAKroC,EAAOm2D,mBAAmB0E,wBAC7BvC,EAAW1qE,KAAK8pE,EAAkBe,EAAMW,QAASX,EAAMjjF,UAAWijF,EAAM54C,aACxE,MAIF,KAAK7f,EAAOm2D,mBAAmB2E,uCAK/B,KAAK96D,EAAOm2D,mBAAmB4E,oCAK/B,KAAK/6D,EAAOm2D,mBAAmB6E,oCAC7B,MAKF,KAAKh7D,EAAOm2D,mBAAmB8E,QAC/B,KAAKj7D,EAAOm2D,mBAAmB3tB,YAC7B8vB,EAAW1qE,KAAKgpE,EAAa6B,EAAMW,QAASX,EAAMjjF,YAClD,MAIF,KAAKwqB,EAAOm2D,mBAAmB+E,oBAC7B,MACF,QACEt6D,EAAS,gDAGf,CAEA,MAAMu6D,EAAY7C,EAAWvvF,KAAK,IAE5B3E,EAAO,GACb,GAAuB,IAAnBq6C,EAAOkH,QAAe,CACxB,IAAIy1C,EAAa,EACjBA,EAAazE,EAAQyE,EAAY,EAAG,GAAI,GACxCA,EAAazE,EAAQyE,EAAY38C,EAAOkH,QAAS,GAAI,GACrDy1C,EAAazE,EAAQyE,EAAY38C,EAAOxT,QAAS,GAAI,GAKrD,IAAIowD,EAAW,GAAM,EAAIF,EAAUn5F,OAAU,GAE7C,MAAMA,EAAU,EAAIm5F,EAAUn5F,OAASq5F,GAAa,EAMpD,IALAD,EAAazE,EAAQyE,EAAYp5F,EAAQ,EAAG,IAC5CoC,EAAKwpB,KAAKtnB,EAAW80F,IACrBh3F,EAAKwpB,KAAKutE,GAEO,IAAbE,IAAgBA,EAAW,GACxBA,EAAW,GAChBj3F,EAAKwpB,KAAK5nB,EAAU,IACpBq1F,GAEJ,MAAO,GAAuB,IAAnB58C,EAAOkH,QAAe,CAC/B,IAAI21C,EAAW,EACfA,EAAW3E,EAAQ2E,EAAU,EAAG,GAAI,GACpCA,EAAW3E,EAAQ2E,EAAU78C,EAAOkH,QAAS,EAAG,GAChD21C,EAAW3E,EAAQ2E,EAAU78C,EAAOxT,QAAS,EAAG,GAChD7mC,EAAKwpB,KAAKznB,EAAWm1F,IACrBl3F,EAAKwpB,KAAKlpB,EAAW,EAAIy2F,EAAUn5F,SACnCoC,EAAKwpB,KAAKutE,EACZ,MACEnrF,EAAU,mBAAmByuC,EAAOkH,gCAGtC,OAAOvhD,EAAK2E,KAAK,GACnB,kBC5aA,MAAM,mBAAEwyF,GAAuB,EAAQ,OACjC,OAAE1rF,GAAW,EAAQ,OACrB,OAAEqyC,GAAW,EAAQ,OACrB,WAAEs5C,GAAe,EAAQ,MACzB,SAAEC,GAAa,EAAQ,OACvB,UAAE1xF,GAAc,EAAQ,MAE9BzJ,EAAOC,QAAQg7F,mBAAqBA,EACpCj7F,EAAOC,QAAQ2hD,OAASA,EACxB5hD,EAAOC,QAAQsP,OAASA,EACxBvP,EAAOC,QAAQi7F,WAAaA,EAC5Bl7F,EAAOC,QAAQk7F,SAAWA,EAC1Bn7F,EAAOC,QAAQwJ,UAAYA,kBCZ3B,MAAM,KAAEtJ,EAAI,QAAEC,GAAY,EAAQ,OAC5B,kBAAEshF,EAAiB,aAAE0U,GAAiB,EAAQ,OAC9C,UAAE1mF,GAAc,EAAQ,OAG5B7M,IAAK6+D,EACLz+D,IAAKozF,GACHl2F,GAEE,UACJuF,EAAS,WACTG,EAAU,WACVzB,GACEhE,EAuFJJ,EAAOC,QAAQm7F,UArFf,SAAmBh5B,EAAS3wD,EAAQ4pF,GAClC,MAAMC,EAAQ,IAAI5Z,EAClB,GAAI2Z,EAAa,GAAK5pF,EAAS,EAAI2wD,EAAQ1gE,OAGzC,OAAO45F,EAGT,IAAI3rF,EAAM8B,EACV,MAAMupF,EAAW54B,EAAQoB,aAAa7zD,GACtCA,GAAO,EAEP,MAAM01C,EAAUqc,EAAKs5B,EAAU,EAAG,GAC5BrwD,EAAU+2B,EAAKs5B,EAAU,EAAG,GAC5Bv2F,EAAM29D,EAAQzG,aAAahsD,GAIjC,GAHAA,GAAO,EAGS,IAAZ01C,EAEF,OADA31C,EAAU,kCAAkC21C,MACrC,EAGT,GAAI5gD,GAAO,GAAMgN,EAAShN,EAAO29D,EAAQ1gE,OACvC,OAAO,EAKT,IAFA45F,EAAM3wD,QAAUA,EAChB2wD,EAAMj2C,QAAUA,EACT11C,EAAO8B,EAAShN,GAAM,CAC3B,MAAMm+D,EAAUR,EAAQE,UAAU3yD,GAClCA,IACA,MAAM4rF,EAAU75B,EAAKkB,EAAS,EAAG,GAC3B80B,EAAYh2B,EAAKkB,EAAS,EAAG,GAC7Bg1B,EAAWx1B,EAAQzG,aAAahsD,GACtC,GAAIioF,GAAY,EACd,OAAO,EAGTjoF,GAAO,EACP,MAAMgoF,EAAgBC,EAAW,EAC3B4D,EAAO,IAAIpF,EAAamF,EAAS7D,EAAW,KAAMt1B,EAASzyD,EAAKA,EAAMgoF,GAC5E2D,EAAMxD,aAAa0D,GACnB7rF,GAAOgoF,CACT,CACA,OAAO2D,CACT,EAwCAt7F,EAAOC,QAAQw7F,MAtCf,SAAeH,GACb,MAAMI,EAAa,GACbC,EAAaL,EAAMpD,oBAOzB,IAAK,IAAI31E,EAAI,EAAGna,EAAIuzF,EAAWj6F,OAAQ6gB,EAAIna,IAAKma,EAAG,CACjD,MAAMq5E,EAAeD,EAAWp5E,GAEhC,QAAqBnd,IAAjBw2F,EACF,SAEF,IAAIC,EAAsB,EAC1BA,EAAsBxF,EAAQwF,EAAqBD,EAAa9C,QAAS,EAAG,GAC5E+C,EAAsBxF,EAAQwF,EAAqBD,EAAa1mF,UAAW,EAAG,GAC9EwmF,EAAWpuE,KAAK5nB,EAAUm2F,IAC1BH,EAAWpuE,KAAKlpB,EAAWw3F,EAAar8C,WAAW79C,OAAS,IAC5Dg6F,EAAWpuE,KAAKsuE,EAAar8C,WAC/B,CAEA,MAAMu8C,EAAYJ,EAAWjzF,KAAK,IAClC,IAAIuyF,EAAW,EACfA,EAAW3E,EAAQ2E,EAAU,EAAG,GAAI,GACpCA,EAAW3E,EAAQ2E,EAAU,EAAG,GAAI,GACpCA,EAAW3E,EAAQ2E,EAAU,EAAG,EAAG,GACnCA,EAAW3E,EAAQ2E,EAAUM,EAAM3wD,QAAS,EAAG,GAE/C,MAAM7mC,EAAO,GAIb,OAHAA,EAAKwpB,KAAKznB,EAAWm1F,IACrBl3F,EAAKwpB,KAAKlpB,EAAW,EAAI03F,EAAUp6F,SACnCoC,EAAKwpB,KAAKwuE,GACHh4F,EAAK2E,KAAK,GACnB,YC1FAzI,EAAOC,QAAQ87F,sBARf,MACE,WAAAxnF,CAAY7C,EAAO,KAAMsqF,EAAW,EAAGt6F,EAAS,GAC9C8S,KAAK9C,KAAOA,EACZ8C,KAAKwnF,SAAWA,EAChBxnF,KAAK9S,OAASA,CAChB,mBCLF,MAAM,KAAEqQ,GAAS,EAAQ,MAgBzB/R,EAAOC,QAAQg7F,mBAAqBlpF,EAAKE,IARd,CACzBgqF,SAAmB,EACnBC,YAAmB,EACnBC,kBAAmB,EACnBC,SAAmB,EACnBC,gBAAmB,oBCbrB,MAAMpyC,EAAW,EAAQ,KACnBqyC,EAA0B,EAAQ,MAClCC,EAAsB,EAAQ,OAC9B,QAAE5wF,EAAO,mBAAEE,GAAuB,EAAQ,MAC1C2wF,EAAkB,EAAQ,MAC1B,gBAAE5G,EAAe,iBAAEtV,GAAqB,EAAQ,OAChD,mBAAE2a,GAAuB,EAAQ,OACjC,IAAE56F,EAAG,KAAEC,EAAMF,SAAS,mBAAEyD,IAAyB,EAAQ,OACzD,KAAEod,GAAS,EAAQ,OACnB,aAAE2N,GAAiB,EAAQ,OAC3B,WAAE0oE,GAAe,EAAQ,OACzB,UAAE8D,GAAc,EAAQ,OACxB,SAAED,GAAa,EAAQ,OACvB,mBAAEsB,GAAuB,EAAQ,MACjC,YAAEhf,GAAgB,EAAQ,OAC1B,IAAEK,GAAQ,EAAQ,OAClB,UAAEr0E,GAAc,EAAQ,OAExB,gBAAEnB,GAAoBjI,GACtB,UAAE2kB,GAAc/D,GAChB,WAAEy7E,GAAevB,GACjB,WAAEwB,GAAe7e,GACjB,gBAAE8e,GAAoBnzF,EAEtBkjB,EAAS,IAAIiC,EAAa,iBAC1B,UAAEhB,EAAS,UACTle,GAAcid,EAEhBkwE,EAAqB73E,GAAU,KAAM,IAAIy3E,GAAqBp6E,UAE9Dy6E,EAAiB,CACrB,GAAMP,EAAoB1xF,YAAY2kD,IACtC,GAAM+sC,EAAoB1xF,YAAYukD,OACtC,EAAMmtC,EAAoB1xF,YAAY0nD,MAGxC,SAASwqC,EAAyBC,EAAYC,GAC5C,MAAMp9E,EAAUo9E,EACVC,EAAaV,EAAgBltF,MAAM0qD,mBAAmBgjC,EAAWG,QAAS,GAEhF,IAAMD,GAAcA,EAAWhoF,YAAcsnF,EAAgBlwF,aAAa8iD,OACxE,OAGF,MAAM6R,EAAYi8B,EAAW39C,WAC7B,IAAIsf,EAAWoC,EAAUtP,UACzB,GAAIkN,GAAYA,EAAS3pD,YAAcsnF,EAAgBlwF,aAAailD,WAC/DsN,EAASwG,QAAUxG,EAASwG,OAAO3jE,OAAS,EAAG,CAElD,MAAM07F,EAAgBv+B,EAASwG,OAAO/C,UAAU,GAMhD,GALqB,IAAhB86B,IAEHv9E,EAAQ2zC,aAAgBspC,EAA+B,GAAhBM,IACfb,EAAoB1xF,YAAYynD,QAEtDuM,EAASwG,OAAO3jE,OAAS,EAAG,CAC9B,MAAM27F,EAAgBx+B,EAASwG,OAAO/C,UAAU,GAChDziD,EAAQu3C,qBAAmC,IAAhBimC,GAC7B,CACF,CAGA,GADAx+B,EAAWoC,EAAUtP,UACjBkN,GAAYA,EAAS3pD,YAAcsnF,EAAgBlwF,aAAakjD,IAAK,CACvE,MAAMwB,EAAS6N,EAAStf,WAClBh9B,EAAIyuC,EAAOM,SAAS,KACpBgsC,EAAItsC,EAAOM,SAAS,KAI1B,GAHI/uC,GACF1C,EAAQ25C,mBAAmBj3C,EAAEg9B,YAE3B+9C,EAAG,CACL,MAAMC,EAAYD,EAAE/9C,WACdi+C,EAAKD,EAAUjsC,SAAS,MACxBmsC,EAAKF,EAAUjsC,SAAS,MACxBosC,EAAKH,EAAUjsC,SAAS,MACxBqsC,EAAKJ,EAAUjsC,SAAS,MACxBssC,EAAKL,EAAUjsC,SAAS,MACxBusC,EAAKN,EAAUjsC,SAAS,MACxBwsC,EAAKP,EAAUjsC,SAAS,MACxBlnC,EAAKmzE,EAAUjsC,SAAS,MAExBysC,EAAMR,EAAUjsC,SAAS,OACzB0sC,EAAMT,EAAUjsC,SAAS,OA0B/B,GAxBIksC,GACF39E,EAAQu0C,iBAAiBopC,EAAGj+C,YAE1Bk+C,GACF59E,EAAQ4zC,wBAAwBgqC,EAAGl+C,YAEjCm+C,GACF79E,EAAQ8zC,0BAA0B+pC,EAAGn+C,YAEnCo+C,GACF99E,EAAQ03C,WAAWomC,EAAGp+C,YAEpBq+C,GACF/9E,EAAQ43C,YAAYmmC,EAAGr+C,YAErBs+C,GACFh+E,EAAQi4C,kBAAkB+lC,EAAGv4B,mBAE3Bw4B,GACFj+E,EAAQ83C,mBAAmBmmC,EAAGv+C,YAE5Bn1B,GACFvK,EAAQ41C,gBAAgBrrC,EAAGm1B,YAEzBw+C,EAAK,CAEP,MAAME,EAAc,IAAItyF,EACxBsyF,EAAY75C,WAAW25C,EAAIx+C,YAC3B1/B,EAAQwkC,YAAY45C,EACtB,CACA,GAAID,EAAK,CAEP,MAAMp1C,EAAsB/8C,EAAmBk6C,iBAAiBi4C,EAAIz+C,YAEpE1/B,EAAQspC,oBAAoBP,EAC9B,CACF,CACF,CACF,CAyKA,MAAMr5C,EAAS,CACbC,sBA7DF,SAA+B4yD,EAASzyD,GACtC,MAAMo7B,EAAS2xD,EAAWt6B,EAASzyD,GACnC,IAAKo7B,EAEH,OAAO,KAGT,MAAMmzD,EAAkBvuF,EAAMo7B,EAAOozD,aAC/B9C,EAAatwD,EAAOqzD,cAC1B,IAAIv+E,EACJ,OAAQkrB,EAAOh7B,cACb,KAAK0tE,EAAYuB,SAEf,GADAn/D,EAAU+8E,EAAgBx6B,EAAS87B,EAAiBnzD,IAC/ClrB,EAAS,MAGd,OADAA,EAAQ/P,UAAYi7B,EACblrB,EAET,KAAK49D,EAAYC,MAIf,OAHA79D,EAAU,IAAI08E,EAAoBtzF,QAClC4W,EAAQs5C,WAAapuB,EA/H3B,SAA2Bj7B,EAAWmtF,EAAWoB,EAAQ5sF,GACvD,MAAMoO,EAAUo9E,EAwDhB,GAvDAp9E,EAAQ20C,mBAAmB1kD,EAAUwuF,SACrCz+E,EAAQ60C,iBAAiB5kD,EAAUmzE,iBACXsZ,EAAoB7xF,wBAAwBk/C,QAC5B,OAApC95C,EAAUutE,uBACZx9D,EAAQ+0C,gBACN0nC,EAAwBrsF,uBAAuB4B,2BAC7C/B,EAAUutE,wBAEhBx9D,EAAQk1C,wBAAwBjlD,EAAUyzE,QAC1C1jE,EAAQq1C,sBAAsBplD,EAAUyuF,qBACxC1+E,EAAQ+1C,kBAAkB9lD,EAAU0uF,8BACpC3+E,EAAQq4C,YAAY2kC,EAAmB90F,MAAMlF,IAAIiN,EAAU2uF,eAC3D5+E,EAAQu4C,aAAatoD,EAAU4uF,iBAC3B5uF,EAAU6uF,aAAa9+E,EAAQ04C,aAAazoD,EAAU6uF,aAE1D9+E,EAAQqiC,iBAAiBpyC,EAAU8uF,mBAAqB9uF,EAAU+uF,qBAElEh/E,EAAQs/B,UAAUrvC,EAAUysE,cAC5B18D,EAAQ6jC,uBAAuB5zC,EAAUgvF,aACzCj/E,EAAQ4jC,+BAA+B3zC,EAAUivF,iBACjDl/E,EAAQu/B,eAAetvC,EAAUkvF,mBACjCn/E,EAAQw1C,sBAAsBvlD,EAAUmvF,sBACxCp/E,EAAQw2C,uBAAuBvmD,EAAUovF,2BACrCr/E,EAAQksC,oBAAsBwwC,EAAoB7xF,wBAAwBk/C,OAC5E/pC,EAAQkuB,kBAAkB,GACjBj+B,EAAUqvF,sBACnBt/E,EAAQkuB,iBAAiBj+B,EAAUqvF,sBAAwB,GAI3Dt/E,EAAQkuB,iBAAiB,GAIvBj+B,EAAUsvF,yBACZv/E,EAAQsuB,oBAAoBr+B,EAAUsvF,yBAOpCtvF,EAAUuvF,sCACZx/E,EAAQk2C,qBAAqBjmD,EAAUuvF,uCAC9BvvF,EAAUwvF,gCACnBz/E,EAAQk2C,qBAAqBjmD,EAAUwvF,gCAGrCh/F,EAAK2qD,OAAOn7C,EAAUyvF,WACxB1/E,EAAQ01C,cAAczlD,EAAUyvF,UAAU37B,YAE1C/jD,EAAQ01C,cAAczlD,EAAUyvF,WAI9BzvF,EAAU0vF,wBAAyB,CAErC,MAAM52C,EAAsB/8C,EAAmBk6C,iBAAiBj2C,EAAU0vF,yBAE1E3/E,EAAQkpC,qBAAqBH,EAC/B,CAGA,MAAM62C,EAAgBhuF,EAAS3B,EAAUquF,aACnCuB,EAAK5vF,EAAU6vF,mBAErB,GAAMD,GAAMA,EAAGh+F,OASf,IAAK,IAAIX,EAAI,EAAGqH,EAAIs3F,EAAGh+F,OAAQX,EAAIqH,IAAKrH,EAAG,CACzC,MAAM6+F,EAAeF,EAAG3+F,GAClB8+F,EAAaJ,EAAgBG,EAAa5D,SAC1C8D,EAAWL,EAAgBG,EAAa5D,SAAW4D,EAAal+F,OACtE,OAAQk+F,EAAaluF,MACnB,KAAKupF,EAAmBkB,kBACtBt8E,EAAQk0C,qBAAqBsqC,EAAOx3F,MAAMg5F,EAAYC,IACtD,MACF,KAAK7E,EAAmBoB,gBACtB,CACE,MAAMW,EAAapH,EAAgBmK,eAAe1B,EAAQwB,GAC1DhgF,EAAQm5C,oBAAsBgkC,EACN,IAApBA,EAAWtrF,MAEbqrF,EAAyBC,EAAYn9E,GAEvC,KACF,CACF,KAAKo7E,EAAmBgB,SACtBp8E,EAAQi5C,gBAAgBulC,EAAO97F,SAAS,SAAUs9F,EAAYC,IAC9D,MACF,KAAK7E,EAAmBiB,YACtBr8E,EAAQ+4C,uBAAuBylC,EAAO97F,SAAS,SAAUs9F,EAAYC,IACrE,MACF,QACEpwF,EAAU,iCAAiCurF,EAAmBrnF,SAASgsF,EAAaluF,SAE1F,MAlCEmO,EAAQk0C,qBAAqBjkD,EAAUsuF,cAAgB,EACzBC,EAAOx3F,MAAM44F,EACAA,EAAgB3vF,EAAUsuF,oBACvCh5F,EAgClC,CAuBM46F,CAAkBj1D,EAAQlrB,EAASuiD,EAASzyD,GACrCkQ,EAET,KAAK49D,EAAYG,OAGf,OAFA/9D,EAAUy3E,EAAWl1B,EAAS87B,EAAiB7C,GAC/Cx7E,EAAQ/P,UAAYi7B,EACblrB,EAET,KAAK49D,EAAYI,WAEf,GADAh+D,EAAUu7E,EAAUh5B,EAAS87B,EAAiB7C,IACzCx7E,EAAS,MAGd,OADAA,EAAQ/P,UAAYi7B,EACblrB,EAET,KAAK49D,EAAYK,IAEf,GADAj+D,EAAU88E,EAAWv6B,EAAS87B,IACzBr+E,EAAS,MAGd,OADAA,EAAQ/P,UAAYi7B,EACblrB,EAET,KAAK49D,EAAYO,UACjB,KAAKP,EAAYQ,YAGf,OAFAp+D,EAAU,IAAIygE,EACdzgE,EAAQ/P,UAAYi7B,EACblrB,EAET,QACEnQ,EAAU,uBAAuBpH,EAAgByiC,EAAOh7B,0CAE9Ck6C,EAASthD,MAAM2F,gBAAgB8zD,EAAQv7D,MAAM8I,EACAA,EAAMo7B,EAAO/6B,eAAezN,SAAS,WACnD,EAAM,MAGnD,OAAO,IACT,GAMAvC,EAAOC,QAAQsP,OAASA,kBCtSxB,MAAM4/E,EAAa,EAAQ,OACrB,OAAEjvF,EAAM,KAAEC,EAAI,QAAEC,GAAY,EAAQ,OACpC,gBAAEw1F,EAAe,UAAEqK,EAAS,WAAEpe,GAAe,EAAQ,OACrD,MAAEt1D,GAAU,EAAQ,MACpB,kBAAEm1D,EAAiB,iBAAEpB,EAAgB,kBAAEt7C,GAAsB,EAAQ,OACnE11B,MAAOqjD,GAAa,EAAQ,MAC9B,sBAAEopC,GAA0B,EAAQ,OACpC,mBAAEd,GAAuB,EAAQ,OACjC,gBAAEjxF,GAAoB,EAAQ,OAC9B,OAAE+tF,GAAW,EAAQ,OACrB,MAAE0D,GAAU,EAAQ,OACpB,aAAEr4F,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,KAAE4d,GAAS,EAAQ,OACnB,UAAEoP,EAAS,SAAEiQ,GAAa,EAAQ,OAClC,WAAE46D,GAAe,EAAQ,MACzB,mBAAEuB,GAAuB,EAAQ,MACjC,SAAEpwF,EAAQ,aAAEC,EAAY,gBAAEC,EAAe,mBAAEC,GAAuB,EAAQ,MAC1E,iBAAEupF,EAAgB,yBAAEC,GAA6B,EAAQ,OACzD,YAAEvY,GAAgB,EAAQ,OAC1B,IAAEK,GAAQ,EAAQ,OAEhBn7E,OAAQu9F,GAAiBhgG,GACzB+C,IAAKozF,GAAYl2F,GACnB,UACJuF,EAAS,WACTG,EAAU,WACVG,EAAU,WACV5B,EAAU,WACVgC,EAAU,mBACVlB,GACE9E,GACE,UAAE4kB,GAAc/D,GAChB,kBACJk/E,EAAiB,gBACjBC,EAAe,iBACfC,EAAgB,eAChBC,EAAc,uBACdC,EAAsB,mBACtBC,GACEtF,GACE,oBAAEz9B,GAAwB9K,GAC1B,OAAE8tC,GAAW3iB,EAEb4iB,EAAqB17E,GAAU,KAAM,IAAIy3E,GAAqBt6E,UAEpE,SAASw+E,EAA0BC,EAAOC,EAAcC,EAAWC,GACjE,GAAIx0E,EAAMonE,SAASmN,IAAcA,EAAUp/F,OAAS,EAAG,CACrD,MAAMs/F,EAAM,IAAIjF,EAAsBgF,EAAQj/B,IAAKg/B,EAAUp/F,QAC7Dk/F,EAAMtzE,KAAK0zE,GACXH,EAAavzE,KAAKwzE,EACpB,CACF,CAEA,SAASG,GAAkB1D,EAAW96E,EAAK/Q,EAAM3J,GAC3CwkB,EAAMonE,SAAS5rF,IACjBw1F,EAAU/4B,SAAS/hD,EAAKpW,EAASm2D,OAAO9wD,EAAM3J,GAElD,CAkIA,SAAS85C,GAAiChiC,GACxC,IAAIqhF,GAGArhF,EAAQsrC,oBACRtrC,EAAQ6qC,2BACR7qC,EAAQ2qC,6BACR3qC,EAAQ+tC,cACR/tC,EAAQyqC,eACRzqC,EAAQgrC,qBACRhrC,EAAQ2rC,sBACR3rC,EAAQ0uC,sBACR1uC,EAAQ4tC,kBACR5tC,EAAQopC,sBACPppC,EAAQqkC,cAAgBrkC,EAAQqkC,aAAaA,cAC7CrkC,EAAQ3K,YAAci6E,EAAWtkF,YAAYynD,UAEhD4uC,EA/IJ,SAAkCrhF,GAChC,IAAIva,EAEJ,MAAMi4F,EAAY,IAAIhxF,EACtB00F,GAAkB1D,EAAW,KAAMjxF,EAAautD,OAAQh6C,EAAQsrC,oBAChE81C,GAAkB1D,EAAW,KAAMjxF,EAAautD,OAAQh6C,EAAQ6qC,2BAChEu2C,GAAkB1D,EAAW,KAAMjxF,EAAautD,OAAQh6C,EAAQ2qC,6BAChEy2C,GAAkB1D,EAAW,KAAMjxF,EAAaslD,YAAa/xC,EAAQ+tC,cACrEqzC,GAAkB1D,EAAW,KAAMjxF,EAAautD,OAAQh6C,EAAQyqC,eAChE22C,GAAkB1D,EAAW,KAAMjxF,EAAa8zD,MAAOvgD,EAAQgrC,qBAC/Do2C,GAAkB1D,EAAW,KAAMjxF,EAAa8zD,MAAOvgD,EAAQ2rC,sBAC/Dy1C,GAAkB1D,EAAW,KAAMjxF,EAAa8zD,MAAOvgD,EAAQ8sC,mBAG/D,MAAMxI,EAAWtkC,EAAQqkC,aACzB+8C,GAAkB1D,EAAW,MAAOjxF,EAAautD,OAAS1V,EAAWA,EAASD,aAAe,MAG7F,MAAMgF,EAAmBrpC,EAAQopC,qBACjCg4C,GACE1D,EAAW,MAAOjxF,EAAailD,UAC9BrI,EAAmBA,EAAiBzB,yBAA2B,MAIlE,MAAMuJ,EAAS,IAAIzkD,EACfsT,EAAQ0uC,sBACVyC,EAAOwT,SAAS,IAAKn4D,EAASm2D,OAAOl2D,EAAakjD,IAAK3vC,EAAQ0uC,uBAE7DgvC,EAAU/uC,UAAU9sD,OAAS,GAC/BsvD,EAAOwT,SAAS,IAAKn4D,EAASm2D,OAAOl2D,EAAakjD,IAAK+tC,IAGzD,IAAIH,EAAgB,EACpB,OAAQv9E,EAAQ3K,WACd,KAAKi6E,EAAWtkF,YAAYynD,OAC1B8qC,GAAiB,IACjB,MACF,KAAKjO,EAAWtkF,YAAY2kD,IAC1B4tC,GAAiB,GACjB93F,EAASm4D,EAAoB59C,EAAQ+5C,sBACrC,MACF,KAAKu1B,EAAWtkF,YAAYukD,OAC1BguC,GAAiB,GACjB93F,EAASm4D,EAAoB59C,EAAQ+5C,sBACrC,MACF,KAAKu1B,EAAWtkF,YAAY0nD,KAC1B6qC,GAAiB,EACjB93F,EAASm4D,EAAoB59C,EAAQ+5C,sBACrC,MACF,QACEt5B,EAAS,0BAA0BzgB,EAAQ3K,aAG/C,MAAMmoF,EAAgBx9E,EAAQ4tC,iBAAmB,IAAO,EAClD0zC,EAAc90F,EAASm2D,OAAOl2D,EAAailD,UACb3vD,OAAOC,aAAau7F,EAAeC,IAGjE+D,EAAqB,IAAI50F,EAC/B40F,EAAmB58B,SAAS28B,GAC5BC,EAAmB58B,SAASn4D,EAASm2D,OAAOl2D,EAAakjD,IAAKwB,IAE9D,MAAMgsC,EAAa,IAAIpH,EAKvB,OAJAoH,EAAWtrF,KAAO,EAClBsrF,EAAWG,QAAU1/B,EAAoBpxD,EAASm2D,OAAOl2D,EAAa8iD,OACbgyC,IACzDvhF,EAAQm5C,oBAAsBgkC,EACvB13F,CACT,CA0EwB+7F,CAAyBxhF,IAI/C,MAAM+gF,EAAQ,GACRzD,EAAU,GAChBwD,EAA0BC,EAAOzD,EACPt9E,EAAQowC,iBAAkBgrC,EAAmBgB,UACvE0E,EAA0BC,EAAOzD,EACPt9E,EAAQiwC,gBAAiBmrC,EAAmBiB,aAEpEyE,EAA0BC,EAAOzD,EAD/B+D,IAKwBrhF,EAAQ6vC,kBAAoB7vC,EAAQ6vC,kBAAkBntD,SAAS,UAAY,IAHxD04F,EAAmBkB,mBAKlE,MAAMa,EAAan9E,EAAQm5C,oBAC3B,GAAmB,OAAfgkC,EAAqB,CACvB,MAAMsE,EAAgBtE,EAAWuE,eAC3BC,EAAa,SACnB,GAAIF,EAAc5/F,OAAS8/F,EAEzB,MAD+BF,EAAc5/F,OACvC,IAAI2B,EAAe,qBAAqBi+F,EAAc5/F,oBAAoB8/F,UAAoBp+F,EAAa8E,wBAEjHy4F,EAA0BC,EAAOzD,EAASmE,EAAerG,EAAmBoB,gBAEhF,CAIA,OAHAx8E,EAAQ4hC,gBAAkBm/C,EAC1B/gF,EAAQ2/B,kBAAoB29C,EAAQ10F,KAAK,IACzCoX,EAAQ2hC,sBAAuB,EACxB3hC,EAAQ2/B,kBAAoB3/B,EAAQ2/B,kBAAkB99C,OAAS,CACxE,CAqBA,SAAS+/F,GAAkB5hF,EAAS6hF,IAnBpC,SAA2C7hF,EAAS6hF,GAClD,MAAM5xF,EAAY4xF,EACb7hF,EAAQ2hC,sBACXK,GAAiChiC,GAEnC,MAAM+gF,EAAQ/gF,EAAQ4hC,gBAChBkgD,EAAe9hF,EAAQ2/B,kBACR,IAAjBohD,EAAMl/F,QACY,IAAjBk/F,EAAMl/F,QAAgBk/F,EAAM,GAAGlvF,OAASupF,EAAmBkB,oBAK9DrsF,EAAU6vF,mBAAqBiB,GAGjC9wF,EAAUqtF,QAAUwE,CACtB,CAGEC,CAAkC/hF,EAAS6hF,GA7H7C,SAAsC7hF,EAAS6hF,GAC7C,MAAM5xF,EAAY4xF,EACZlhB,EAAe3gE,EAAQksC,kBAE7Bj8C,EAAUwuF,QAAUz+E,EAAQiuC,iBAC5Bh+C,EAAUmzE,gBAAkBzC,EAC5B1wE,EAAU6tE,QAAU6C,IAAiB2O,EAAWzkF,wBAAwBk/C,OAAS,EAAI,EACrF95C,EAAUyzE,OAAS1jE,EAAQstC,sBAC3Br9C,EAAUyuF,oBAAsB1+E,EAAQ0tC,oBACxCz9C,EAAU0uF,6BAA+B3+E,EAAQgtC,gBACjD/8C,EAAUysE,aAAe18D,EAAQioB,YACjCh4B,EAAUkvF,kBAAoBn/E,EAAQ++B,iBACtC9uC,EAAU+xF,qBAAuBhiF,EAAQs1C,wBACzCrlD,EAAUgvF,YAAcj/E,EAAQ8tB,yBAChC79B,EAAUivF,gBAAkBl/E,EAAQyuB,iCACpCx+B,EAAUyvF,UAAY1/E,EAAQysC,gBAC9Bx8C,EAAUgyF,aAAejiF,EAAQwtC,2BACjCv9C,EAAU8uF,gBAAkB/+E,EAAQktC,gBAGpC,MAAMjE,EAAoBjpC,EAAQgpC,sBACV,MAArBC,IAEDh5C,EAAU0vF,wBAA0B12C,EAAkBrB,0BAGxD,MAAM2C,EAAOvqC,EAAQkwB,iBACrB,GAAIqa,IACFt6C,EAAUutE,sBAAwBjzB,EAAKj1C,WACnCi1C,EAAK14C,OAAS1H,EAAgB2H,OAC9By4C,EAAK14C,OAAS1H,EAAgB4H,iBAAiB,CACjD,MAAM,OAAEH,GAAW24C,EACnBt6C,EAAUiyF,aAAejyF,EAAUutE,sBAAsB37E,OAAS+P,EAClE3B,EAAUkyF,gBAAkBvwF,CAC9B,CAGF3B,EAAU2uF,aAAeiC,EAAmB34F,MAAMlF,IAAIgd,EAAQgsC,mBAEhCzmD,IAA1Bya,EAAQm4C,eAC0B,iBAA1Bn4C,EAAQm4C,eACfn4C,EAAQm4C,eAAiB,KACzBn4C,EAAQm4C,eAAiB,EAC5BloD,EAAU4uF,gBAAkB7+E,EAAQm4C,cAEpCloD,EAAU4uF,gBAAkB,KAG9B,MAAMuD,EAAWpiF,EAAQmvC,cACzBl/C,EAAU6uF,YAAc,MAACsD,EACrB,KACApiF,EAAQmvC,aACd,CA0EEkzC,CAA6BriF,EAAS6hF,EACxC,CASA,MACMS,GAAa,CAACp/F,EAAO2+D,IADVA,IAAQ16D,MAAM1E,KAAK0E,MAAMqrC,KAAKktB,IAAI,EAAGmC,KAAQx6D,KAAI,CAACmhB,EAAItnB,IAAMA,IACzCqhG,CAAS1gC,GAAMx6D,KAAIpE,GAAOuzF,EAAQ,EAAGvzF,EAAKC,EAAO2+D,KAC/E2gC,GAASF,GAAW,GAAI,GACxBG,GAAuBH,GAAW,GAAI,GACtCI,GAAUJ,GAAW,GAAI,GACzBK,GAAUL,GAAW,GAAI,GACzBM,GAAWN,GAAW,GAAI,GAC1BO,GAAeP,GAAW,GAAI,GAC9BQ,GAAUR,GAAW,GAAI,GACzBS,GAAgBT,GAAW,GAAI,GAC/BU,GAAgBV,GAAW,GAAI,GAC/BW,GAAWX,GAAW,EAAG,GACzBY,GAAkBZ,GAAW,EAAG,GAChCa,GAAeb,GAAW,EAAG,GAEnC,SAASc,GAAUl4D,GAEjB,IAAIm4D,EAAK,EAGTA,GAAMb,GAAOt3D,EAAOw4C,OAAU,EAAK,GACnC2f,GAAMZ,GAAqBv3D,EAAOwzD,oBAAuB,EAAK,GAC9D2E,GAAMX,GAAQx3D,EAAOuzD,QAAW,EAAK,GACrC4E,GAAMV,GAAQz3D,EAAO4yC,QAAW,EAAK,GACrCulB,GAAMT,GAAS13D,EAAOyzD,6BAAgC,EAAK,GAC3D0E,GAAMR,GAAa33D,EAAOo4D,aAAe,GACzCD,GAAMP,GAAQ53D,EAAOq4D,QAAU,GAC/BF,GAAMN,GAAc73D,EAAOh7B,cAAgB,GAC3CmzF,GAAML,GAAc93D,EAAO0zD,cAAgB,GAC3CyE,GAAMJ,GAAS/3D,EAAOs4D,SAAW,GAEjC,MAAMC,EAAS,GAGXv4D,EAAOsyC,uBACTimB,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiBwN,aACpB,GAAGx4D,EAAOsyC,0BAEnCtyC,EAAOg3D,cACTuB,EAAOh2E,KAAK+yE,EAAiB,EAAGtK,EAAiByN,wBACpB39F,EAAWk9F,GAAgBh4D,EAAOi3D,iBACvBgB,GAAaj4D,EAAOg3D,iBAE1Dh3D,EAAO04D,cACTH,EAAOh2E,KAAK+yE,EAAiB,EAAGtK,EAAiB2N,wBACpB79F,EAAWk9F,GAAgBh4D,EAAO44D,iBACvBZ,GAAgBh4D,EAAO04D,iBAGvC,OAAtB14D,EAAOmxC,iBAA6C92E,IAAtB2lC,EAAOmxC,YACvConB,EAAOh2E,KAAK+yE,EAAiB,EAAGtK,EAAiB6N,kBACpB59F,EAAW+kC,EAAOmxC,cAE7CnxC,EAAO+2D,cACTwB,EAAOh2E,KAAK+yE,EAAiB,EAAGtK,EAAiB8N,sBACpB,KAGA,OAA3B94D,EAAO2zD,iBACT4E,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiB+N,gBACpBp+F,EAAUqlC,EAAO2zD,mBAEnB,OAAvB3zD,EAAO4zD,aAA+C,KAAvB5zD,EAAO4zD,aACxC2E,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiBgO,SACpBh5D,EAAO4zD,cAEhC5zD,EAAOi5D,aAETV,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiBkO,SACpB/D,EAAan1D,EAAOi5D,eAE7Cj5D,EAAOm5D,aAETZ,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiBoO,SACpBjE,EAAan1D,EAAOm5D,eAE7Cn5D,EAAOE,aAETq4D,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiBqO,SACpBhgG,EAAW2mC,EAAOE,aAAeF,EAAOK,aAGtC,OAA3BL,EAAOk4C,iBACTqgB,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiBsO,cACpBjE,EAAgBr1D,EAAOk4C,wBAGzB79E,IAAvB2lC,EAAO+zD,cACTwE,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiBuO,mBACpBl+F,EAAW2kC,EAAO+zD,eAC7CwE,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiBwO,uBACpBn+F,EAAW2kC,EAAOg0D,oBAG3Ch0D,EAAOwxC,cACT+mB,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiByO,eACpBpgG,EAAW2mC,EAAOwxC,gBAK3CxxC,EAAO6zD,iBACT0E,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiB0O,8BAA0Br/F,SAIlDA,IAArB2lC,EAAOw0D,WACT+D,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiB2O,cACpBt+F,EAAW2kC,EAAOw0D,aAK3Cx0D,EAAOi0D,mBACTsE,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiByD,aACpBp1F,EAAW2mC,EAAOi0D,qBAG3Cj0D,EAAO45D,sBACTrB,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiB6O,gBACpBx+F,EAAW2kC,EAAO45D,wBAK3C55D,EAAO40D,oBACT2D,EAAOh2E,KAAKgzE,EAAe,EAAGvK,EAAiB8O,wBACpB1E,EAAkBp1D,EAAO40D,sBAMtD,IAAImF,EAAyB,GACzBC,EAAa,EAEbh6D,EAAOi6D,yBACTF,GAA0BvE,EAAuB,EACAvK,EAAyBiP,oBACzBl6D,EAAOi6D,wBACxDD,EAAaA,GAAc,GAGzBh6D,EAAOm6D,mBACTJ,GAA0BvE,EAAuB,EACAvK,EAAyBmP,cACzBp6D,EAAOm6D,kBACxDH,EAAaA,GAAc,GAGzBh6D,EAAOq6D,8BACTN,GAA0BvE,EAAuB,EACAvK,EACCqP,yBACDt6D,EAAOq6D,6BACxDL,EAAaA,GAAc,GAGzBh6D,EAAOy0D,0BACTsF,GAA0BvE,EAAuB,EACAvK,EAAyBsP,qBACzBpgG,EAAmB6lC,EAAOy0D,yBAC1BgB,EAAmB+E,KACpER,EAAaA,GAAc,GAGzBD,EAAuBpjG,OAAS,GAClC4hG,EAAOh2E,KAAKgzE,EAAeyE,EACAhP,EAAiByP,qBACjBV,IAI7B,MAAMW,EAAgBnC,EAAO76F,KAAK,IAC5Bi9F,EAAS,GAAKD,EAAc/jG,OAC5BikG,EAASD,EAAS36D,EAAOqzD,cAK/B,OAFArzD,EAAO66D,gBAAgBF,EAAQ36D,EAAOqzD,eAGpCh6F,EAAW8+F,GACX9+F,EAAWshG,GACXthG,EAAWuhG,GACXF,CAEJ,CAyBA,MAAM7jD,GAAS,CACbu/B,sBAxBF,SAA+Bt8C,GAC7B,IAAIs4D,EAAU,GACVt4D,aAAesqD,EAAWlmF,SACvB47B,EAAI/0B,YACP+0B,EAAI/0B,UAAY,IAAImwF,EAAUxiB,EAAYC,MAAO,MAEnD+jB,GAAkB58D,EAAKA,EAAIs0B,YAC3BgkC,EAAUt4D,EAAIs0B,WAAWgkC,SAChBt4D,aAAe68C,EACxByb,EAAU1B,EAAM52D,GACPA,aAAeg9C,EACxBsb,EAAUsD,EAAO57D,GACRA,aAAey7C,GAEfz7C,aAAeG,IACxBm4D,EAAUpF,EAAOlzD,IAEnB,MAAMkG,EAASlG,EAAI/0B,UAGnB,OAFAi7B,EAAO86D,eAAe1I,EAAQz7F,QACRuhG,GAAUl4D,GACToyD,CACzB,EAIE8F,aACAphD,qCAGF7hD,EAAOC,QAAQ2hD,OAASA,kBCtexB,MAAMutC,EAAa,EAAQ,OACrB,QAAEpuE,EAAO,KAAEE,GAAS,EAAQ,OAC5B,KAAE9gB,EAAI,QAAEC,GAAY,EAAQ,OAC5B,sBAAE27F,GAA0B,EAAQ,OACpC,mBAAEd,GAAuB,EAAQ,OACjC,aAAE73F,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,UAAEqM,GAAc,EAAQ,OACxB,MAAEo2F,GAAU,EAAQ,OAEpB,UAAE9gF,GAAc/D,GAChB,UACJvb,EAAS,WACTG,EAAU,WACVG,EAAU,WACV5B,GACEhE,EAEE2lG,EAAqB/gF,GACzB,KAGE,MAAMM,EAAS,CACb,CAAC,EAAM6pE,EAAWzkF,wBAAwBo/C,gBAC1C,CAAC,EAAMqlC,EAAWzkF,wBAAwBm/C,YAC1C,CAAC,EAAMslC,EAAWzkF,wBAAwBk/C,SAC1C1iD,KAAImhB,GAAM,CAACA,EAAG,GAAIA,EAAG,MACvB,OAAO,IAAItH,KAAWuE,EAAO,IAE3B0gF,EAAmBhhF,GAAU,IAAM+gF,EAAmBh+F,MAAMoa,UAC5D8jF,EAAmBjhF,GAAU,IAAM+gF,EAAmBh+F,MAAMsa,UAS5D6jF,EAAY,MAChB,MAAM5gG,EAAS,GAET6gG,EAAiB9zD,KAAKktB,IAAI,EADV,GAWtB,OATAumC,EAAMhjF,OAAOR,SAASi0E,IACpBjxF,EAAOixF,GAAM,GACb,IAAK,IAAIx1F,EAAI,EAAGA,EAAIolG,IAAkBplG,EAAG,CACvC,IAAIulD,EAAQ,EACZA,EAAQnmD,EAAK8C,IAAIqjD,EAAOiwC,EAAI,EAAG,GAC/BjwC,EAAQnmD,EAAK8C,IAAIqjD,EAAOvlD,EAAG,EAPT,GAQlBuE,EAAOixF,GAAIx1F,GAAK2E,EAAU4gD,EAC5B,KAEKhhD,CACR,EAdiB,GAuBZ8gG,EAAU,IAAIp/F,MAAM,KAAKo1B,KAAK,MAAMl1B,KAAI,CAACwB,EAAG29F,IAAQ3gG,EAAU2gG,KAU9DC,EAAW,MACf,MAAMhhG,EAAS,GAET6gG,EAAiB9zD,KAAKktB,IAAI,EADV,GAGhBgnC,EAAWl0D,KAAKktB,IAAI,EADV,GAgBhB,OAdAumC,EAAMhjF,OAAOR,SAASi0E,IACpBjxF,EAAOixF,GAAM,GACb,IAAK,IAAIx1F,EAAI,EAAGA,EAAIolG,IAAkBplG,EAAG,CACvCuE,EAAOixF,GAAIx1F,GAAK,GAChB,IAAK,IAAI8gE,EAAI,EAAGA,EAAI0kC,IAAY1kC,EAAG,CACjC,IAAIvb,EAAQ,EACZA,EAAQnmD,EAAK8C,IAAIqjD,EAAOiwC,EAAI,EAAG,GAC/BjwC,EAAQnmD,EAAK8C,IAAIqjD,EAAO,EAAG,EAAG,GAC9BA,EAAQnmD,EAAK8C,IAAIqjD,EAAOvlD,EAAG,EAAG,GAC9BulD,EAAQnmD,EAAK8C,IAAIqjD,EAAOub,EAAG,EAAG,GAC9Bv8D,EAAOixF,GAAIx1F,GAAG8gE,GAAKn8D,EAAU4gD,EAC/B,CACF,KAEKhhD,CACR,EArBgB,GAuBXkhG,EAA0B,CAC9BvL,EAAmBgB,SACnBhB,EAAmBiB,YACnBjB,EAAmBkB,kBACnBlB,EAAmBmB,SACnBnB,EAAmBoB,iBAGfnB,EAAa,CAEnBA,mBAAgC,CAC9BuL,KAAO,EACPlB,IAAO,GAGTrK,uBAAoC,SAAgC94B,EAAS3wD,GAC3E,MAAMnM,EAAS,GAGf,OAFAA,EAAO,GAAK88D,EAAQE,UAAU7wD,GAC9BnM,EAAO,GAAK88D,EAAQE,UAAU7wD,EAAS,GAChCnM,CACT,EAEA41F,mBAAgC,SAA4B94B,EAAS3wD,EAAQmmF,GAC3E,MAAMtyF,EAAS,GAOf,OANAA,EAAO,GAAK88D,EAAQqB,YAAYhyD,GAE9BnM,EAAO,GADLsyF,EAAW,EACDx1B,EAAQ7/D,SAAS,SAAUkP,EAAS,EAAGA,EAASmmF,GAEhD,GAEPtyF,CACT,EAEA41F,kBAA+B,SAA2B94B,EAAS3wD,GACjE,MAAMi1F,EAAUtkC,EAAQE,UAAU7wD,GAC5Bo5D,EAASm7B,EAAiBj+F,MAAMlF,IAAI6jG,GAC1C,YAAkBthG,IAAXylE,EAAuBA,EAASskB,EAAWzkF,wBAAwBk/C,MAC5E,EAEAsxC,gBAA6B,SAAyBwL,GACpD,MACM77B,EADMo7B,EAAiBl+F,MACVlF,IAAI6jG,GACvB,OAAOhhG,OAAqBN,IAAXylE,EAAuBA,EAASskB,EAAWzkF,wBAAwBk/C,OACtF,EAEAsxC,oBAAiC,SAA6B94B,EAAS3wD,EAAQ/P,GAC7E,MAAMilG,EAAW,GACjB,IAAIC,EAAiB,EACjBj3F,EAAM8B,EAEV,KAAO9B,EAAM8B,EAAS/P,GAAQ,CAC5B,MAAM4kD,EAAQ8b,EAAQE,UAAU3yD,GAC1Bk3F,EAAc1mG,EAAK0C,IAAIyjD,EAAO,EAAG,GACjCwgD,EAAwB3mG,EAAK0C,IAAIyjD,EAAO,EAAG,GACjD,IAAIygD,EAAc,EAClB,OAAQD,GACN,KAAK,EACHC,EAAc3kC,EAAQE,UAAU3yD,EAAM,GACtC,MACF,KAAK,EACHo3F,EAAc3kC,EAAQoB,aAAa7zD,EAAM,GACzC,MACF,KAAK,EACHo3F,EAAc3kC,EAAQgB,WAAWzzD,EAAM,EAAG,GAC1C,MACF,KAAK,EACHo3F,EAAc3kC,EAAQqB,YAAY9zD,EAAM,GAO5C,GAA8B,IAA1Bm3F,EAEF,OADAp3F,EAAU,yDACH,KAETC,GAAOm3F,EAEP,MAAME,EAAMR,EAAwBK,QACxBzhG,IAAR4hG,GACFt3F,EAAU,0BAA0Bm3F,KAEtC,MAAMI,EAAiB,IAAIlL,EAAsBiL,EAAKJ,EAAgBG,GACtEJ,EAASr5E,KAAK25E,GACdL,GAAkBG,CACpB,CACA,OAAOJ,CACT,EAEAzL,kBAA+B,SAA2BgM,GACxD,MAAMC,EAA6B,GACnC,IAAK,IAAIpmG,EAAI,EAAGqH,EAAI8+F,EAAkBxlG,OAAQX,EAAIqH,IAAKrH,EAAG,CAExD,MAAMqmG,EAAwBF,EAAkBnmG,GAChD,IAAIsmG,EAAiB,GACjBhhD,EAAYlmD,EAAK8C,IAAI,EAAGmkG,EAAsB11F,KAAM,EAAG,GACvD01F,EAAsB1lG,QAAU,KAElC2kD,EAAYlmD,EAAK8C,IAAIojD,EAAW,EAAG,EAAG,GACtCghD,EAAiB3hG,EAAU0hG,EAAsB1lG,SACxC0lG,EAAsB1lG,QAAU,OACzC2kD,EAAYlmD,EAAK8C,IAAIojD,EAAW,EAAG,EAAG,GACtCghD,EAAiBxhG,EAAWuhG,EAAsB1lG,SACzC0lG,EAAsB1lG,QAAU,UACzC2kD,EAAYlmD,EAAK8C,IAAIojD,EAAW,EAAG,EAAG,GACtCghD,EAAiBrhG,EAAWohG,EAAsB1lG,UAElD2kD,EAAYlmD,EAAK8C,IAAIojD,EAAW,EAAG,EAAG,GACtCghD,EAAiBjjG,EAAWgjG,EAAsB1lG,SAEpDylG,EAA2B75E,KAAK5nB,EAAU2gD,IAC1C8gD,EAA2B75E,KAAK+5E,EAClC,CACA,OAAOF,EAA2B1+F,KAAK,GACzC,EAEAyyF,eAA4B,SAAwB3E,EAAIC,EAAWzuF,GACjE,QAAc3C,IAAV2C,EACF,OAAOm+F,EAAU3P,GAAIC,GAAa4P,EAAO,GAE3C,MAAM3hG,EAAMsD,EAAMrG,OAClB,OAAI+C,GAAO,IACFyhG,EAAU3P,GAAIC,GAAa4P,EAAO3hG,EAAM,GAAKsD,EAE/Cm+F,EAAU3P,GAAIC,GAAa4P,EAAO,GAAKhiG,EAAWK,EAAM,GAAKsD,CACtE,EAGAmzF,uBAAoC,SAAgC3E,EAAIC,EAAWzuF,EAAOu/F,GAAmB,GAC3G,IAAIhhD,EAAQ,EACZA,EAAQnmD,EAAK8C,IAAIqjD,EAAQiwC,EAAK,EAAI,EAAI,EAAG,GACzC,MAAM70F,EAAU,MAACqG,EAAyC,EAAIA,EAAMrG,OAG9D6lG,EAAgB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnD,IAAIC,EAAa,EACbC,EAAe,GAQnB,GALGH,IAAqBpM,EAAWsF,mBAAmBiG,MAAQa,IAAqBpM,EAAWsF,mBAAmB+E,MAC/G+B,GAAoB,GAIlBp5F,OAAOjH,UAAUmtC,eAAejtC,KAAKogG,EAAe7lG,GACtD8lG,EAAaD,EAAc7lG,QACtB,GACHA,EAAS,KAAQ4lG,IAAqBpM,EAAWsF,mBAAmB+E,KAClE+B,IAAqBpM,EAAWsF,mBAAmBiG,KAEvDe,EAAa,EACbC,EAAe/hG,EAAUhE,EAAS,OAC7B,MACHA,EAAS,OAAkB4lG,IAAqBpM,EAAWsF,mBAAmBiG,MAC5Ea,IAAqBpM,EAAWsF,mBAAmB+E,KAMvD,MADA71F,EAAU,2BAA2B8mF,kBAA0B90F,aACzD,IAAI2B,EAAe,uBAAuBmzF,8BAC5CpzF,EAAa8E,wBALjBs/F,EAAa,EACbC,EAAe5hG,EAAWnE,EAAS,EAKrC,CAEA4kD,EAAQnmD,EAAK8C,IAAIqjD,EAAOkhD,EAAY,EAAG,GACvClhD,EAAQnmD,EAAK8C,IAAIqjD,EAAQkwC,GAAa,EAAI,EAAG,GAC7C,MAAMa,EAAoB,IAAZb,EACd,OAAO9wF,EAAU4gD,GAAS5gD,EAAU2xF,GAASoQ,EAAe1/F,CAC9D,EAEAmzF,iBAA8B,SAA0B3E,EAAIC,EAAWzuF,GACrE,OAAOu+F,EAAS/P,GAAIC,GAAWzuF,EAAMrG,QAAUqG,CACjD,GAEA/H,EAAOC,QAAQi7F,WAAaA,kBC7Q5B,MAAM56F,EAAO,EAAQ,OACf,UACJstB,EAAS,UACTle,EAAS,SACT4wB,EAAQ,UACRjQ,GACE,EAAQ,OACN,OAAEnwB,EAAM,KAAEC,GAAS,EAAQ,OAC3B,WAAE+6F,GAAe,EAAQ,MACzB,UAAE+E,GAAc,EAAQ,OACxB,iBAAElK,EAAgB,yBAAEC,GAA6B,EAAQ,OAG7DpzF,OAAQ8kG,GACNxnG,GAEF2C,IAAK6+D,GACHvhE,EAEJ,SAASwnG,EAAqBvlC,EAAS3wD,GAErC,QADkB2wD,EAAQ1gE,OAAS+P,EACnB,GAKlB,CAEA,SAASm2F,EAAiBxlC,EAAS3wD,GACjC,IAAKk2F,EAAqBvlC,EAAS3wD,GACjC,OAAO,EAET,MAAM4zC,EAAsC,EAA5B+c,EAAQE,UAAU7wD,GAClC,OAAgB,IAAZ4zC,IACF31C,EAAU,8CAA8C21C,MACjD,EAGX,CAqBA,SAASwiD,EAAuB/3F,EAAWsyD,EAAS3wD,EAAQq2F,GAE1D,IAAIn4F,EAAM8B,EACV,KAAO9B,EAAM8B,EAASq2F,GAAW,CAC/B,GAAIn4F,EAAM,EAAI8B,EAASq2F,EAAW,CAChCp4F,EAAU,iDACV,KACF,CAMA,MAAM42C,EAAQ8b,EAAQE,UAAU3yD,GAC1B0nF,EAAQj1B,EAAQE,UAAU3yD,EAAM,GAChCo4F,EAAMrmC,EAAKpb,EAAO,EAAG,GACrBkhD,EAAa9lC,EAAKpb,EAAO,EAAG,GAC5B50C,GAAQgwD,EAAKpb,EAAO,EAAG,IAAM,GAAK+wC,EACxC1nF,GAAO,EACP,MAAM43F,EAAgB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnD,IAAIzpC,EAAW,EAEf,GAAI5vD,OAAOjH,UAAUmtC,eAAejtC,KAAKogG,EAAeC,GACtD1pC,EAAWypC,EAAcC,QACpB,GAAmB,IAAfA,EAET1pC,EAAWsE,EAAQE,UAAU3yD,GAAO,EACpCA,QACK,IAAmB,IAAf63F,EAOT,OAFA93F,EAAU,uBAAuB83F,gCAAyC91F,MAEnE,EALPosD,EAAWsE,EAAQoB,aAAa7zD,GAAO,EACvCA,GAAO,CAKT,CAEA,OAAQ+B,GACN,KAAKqkF,EAAiBiS,oBACpBl4F,EAAUqvF,sBAAwB/8B,EAAQzG,aAAahsD,GACvD,MACF,KAAKomF,EAAiBkS,qBACpBn4F,EAAUsvF,wBAA0B9+F,EAAKmG,SAAS27D,EAAQzG,aAAahsD,EAAM,GAC3ByyD,EAAQzG,aAAahsD,IACrB,GAClD,MACF,KAAKomF,EAAiBmS,kBACpBp4F,EAAUwvF,+BAAiCh/F,EAAKmG,SAAS27D,EAAQzG,aAAahsD,EAAM,GAC3ByyD,EAAQzG,aAAahsD,IACrB,GACzD,MACF,KAAKomF,EAAiBoS,uBACpBr4F,EAAUuvF,sCACP/+F,EAAKmG,SAAS27D,EAAQzG,aAAahsD,EAAM,GAC3ByyD,EAAQzG,aAAahsD,IACrB,GACjB,MACF,KAAKqmF,EAAyBsP,qBAGzBxnC,GAAY,KAEbhuD,EAAU0vF,wBAA0Bp9B,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAMmuD,IAK5E,MACF,QACc,IAARiqC,IAIFj4F,EAAU0tE,gBAAiB,GAMjC7tE,GAAOmuD,CACT,CAIA,OAHInuD,EAAM8B,EAASq2F,GACjBp4F,EAAU,gEAAgEC,GAAO8B,EAASq2F,QAErF,CAET,CAmPA,MAAM3M,EAAW,CACfwM,uBACAC,mBACAQ,eAhWF,SAAwBhmC,EAAS3wD,GAC/B,IAAKm2F,EAAiBxlC,EAAS3wD,GAC7B,OAAO,EAET,MAAM42F,EAAYjmC,EAAQ1gE,OAAS+P,EAEnC,OADiB2wD,EAAQzG,aAAalqD,EAAS,IAC3B42F,CACtB,EA0VE3L,WA7OF,SAAoBt6B,EAAS3wD,EAAQ62F,GAAiB,GACpD,IAAKV,EAAiBxlC,EAAS3wD,GAE7B,OAAO,KAET,IAAI9B,EAAM8B,EAGV,MAAM82F,EAAQnmC,EAAQzG,aAAahsD,GAC7B64F,EAAYpmC,EAAQzG,aAAahsD,EAAM,GACvC84F,EAAQrmC,EAAQzG,aAAahsD,EAAM,GAEnCG,EAAY,IAAImwF,EACtBnwF,EAAUyzE,OAAS7hB,EAAK6mC,EAAO,GAAI,GACnCz4F,EAAUyuF,oBAAsB78B,EAAK6mC,EAAO,GAAI,GAChDz4F,EAAUwuF,QAAU58B,EAAK6mC,EAAO,GAAI,GACpCz4F,EAAU6tE,QAAUjc,EAAK6mC,EAAO,GAAI,GACpCz4F,EAAU0uF,6BAA+B98B,EAAK6mC,EAAO,GAAI,GACzDz4F,EAAUqzF,YAAczhC,EAAK6mC,EAAO,GAAI,GACxCz4F,EAAUszF,OAAS1hC,EAAK6mC,EAAO,GAAI,GACnCz4F,EAAUC,aAAe2xD,EAAK6mC,EAAO,GAAI,GACzCz4F,EAAU2uF,aAAe/8B,EAAK6mC,EAAO,GAAI,GACzCz4F,EAAUuzF,QAAU3hC,EAAK6mC,EAAO,EAAG,GAEnC,MAAMlN,EAAaoN,EAAQD,EAC3B,GAAInN,EAAa,EAEf,OADA3rF,EAAU,iCACH,KAGT,GADAI,EAAU81F,gBAAgB4C,EAAWnN,GACjCiN,EACF,OAAOx4F,EAETH,GAAO,GAGP,MAAMyU,EAAM3S,EAAS+2F,EACrB,KAAO74F,EAAMyU,GAAK,CAChB,MAAMskF,EAAatmC,EAAQE,UAAU3yD,KACnCA,EAEF,MAAMg5F,EAAQjnC,EAAKgnC,EAAY,EAAG,GAElC,GADuD,IAA3BhnC,EAAKgnC,EAAY,EAAG,GACxB,CAEtB,MAAME,EAAUlnC,EAAKgnC,EAAY,EAAG,GAC9BG,EAASnnC,EAAKgnC,EAAY,EAAG,GAAK,EAClCI,EAAcD,EAAS,EAC7B,GAAIA,GAAU,EAEZ,OADAn5F,EAAU,wCACH,KAGT,OAAQk5F,GACN,KAAK7S,EAAiB6N,kBACpB9zF,EAAUosE,WAAa9Z,EAAQgB,WAAWzzD,EAAK,GAC/C,MACF,KAAKomF,EAAiB2N,wBACpB,CACE,MAAMqF,EAAqB7N,EAAW8N,uBAAuB5mC,EAASzyD,GACtEG,EAAUkyF,gBAAkB+G,EAAmB,GAC/Cj5F,EAAUiyF,aAAegH,EAAmB,GAC5C,KACF,CACF,KAAKhT,EAAiByN,wBACpB,CACE,MAAMyF,EAAqB/N,EAAW8N,uBAAuB5mC,EAASzyD,GACtEG,EAAU6zF,gBAAkBsF,EAAmB,GAC/Cn5F,EAAU2zF,aAAewF,EAAmB,GAC5C,KACF,CACF,KAAKlT,EAAiB8N,sBACpB/zF,EAAUgyF,eAAiB1/B,EAAQE,UAAU3yD,GAC7C,MACF,QACgB,IAAVg5F,IAMF74F,EAAU0tE,gBAAiB,GAIjC7tE,GAAOm5F,CACT,KAAO,CAEL,MAAMI,EAASv5F,EACTw5F,EAAQznC,EAAKgnC,EAAY,EAAG,GAClC,GAAc,IAAVS,EACF,MAGF,IAEIC,EAFAC,EAAOjnC,EAAQE,UAAU3yD,GAa7B,GAZAA,IAEa,IAAT05F,GAGFA,EAAOjnC,EAAQzG,aAAahsD,GAC5BA,GAAO,EACPy5F,EAAYC,EAAO,GAEnBD,EAAYC,EAAO,EAGjBA,GAAQ,EAGV,OAFA35F,EAAU,oCAAoC25F,KAAQD,uBACtBrT,EAAiBniF,SAASu1F,+BAAmCD,KACtF,KAGT,OAAQC,GACN,KAAKpT,EAAiByD,aACpB1pF,EAAUw5F,mBAAqBhpG,EAAKmG,SAAS27D,EAAQzG,aAAahsD,EAAM,GAC3ByyD,EAAQzG,aAAahsD,IACrB,GAC7C,MACF,KAAKomF,EAAiB6O,gBACpB90F,EAAUmvF,qBAAuB3+F,EAAKmG,SAAS27D,EAAQzG,aAAahsD,EAAM,GAC3ByyD,EAAQzG,aAAahsD,IACrB,GAC/C,MACF,KAAKomF,EAAiB+N,gBACpBh0F,EAAU4uF,gBAAkBt8B,EAAQE,UAAU3yD,GAC9C,MACF,KAAKomF,EAAiBgO,SACpBj0F,EAAU6uF,YAAcv8B,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAMy5F,GAC9D,MACF,KAAKrT,EAAiBkO,SAEpBn0F,EAAUk0F,YAAc0D,EAAatlC,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAMy5F,IAC3E,MACF,KAAKrT,EAAiBoO,SAEpBr0F,EAAUo0F,YAAcwD,EAAatlC,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAMy5F,IAC3E,MACF,KAAKrT,EAAiBqO,SACpB,CACE,MAAMmF,EAAiBrO,EAAWsO,mBAAmBpnC,EAASzyD,EAAKy5F,GACnEt5F,EAAUm7B,YAAcs+D,EAAe,GACvCz5F,EAAUs7B,WAAam+D,EAAe,GACtC,KACF,CACF,KAAKxT,EAAiB0T,YACtB,KAAK1T,EAAiB2T,mBACtB,KAAK3T,EAAiBoG,kBACpB77D,EAAS,sCAET,MACF,KAAKy1D,EAAiBsO,cAWhBv0F,EAAU6tE,UACZ7tE,EAAUmzE,gBAAkBiY,EAAWyO,kBAAkBvnC,EAASzyD,IAEpE,MACF,KAAKomF,EAAiBuO,mBACpBx0F,EAAUgvF,YAAcx+F,EAAKmG,SAAS27D,EAAQzG,aAAahsD,EAAM,GAC3ByyD,EAAQzG,aAAahsD,IACrB,GACtC,MACF,KAAKomF,EAAiBwO,uBACpBz0F,EAAUivF,gBAAkBz+F,EAAKmG,SAAS27D,EAAQzG,aAAahsD,EAAM,GAC3ByyD,EAAQzG,aAAahsD,IACrB,GAC1C,MACF,KAAKomF,EAAiB0O,yBACpB30F,EAAU8uF,iBAAkB,EAC5B,MACF,KAAK7I,EAAiB2O,cACpB50F,EAAUyvF,UAAYj/F,EAAKmG,SAAS27D,EAAQzG,aAAahsD,EAAM,GAC3ByyD,EAAQzG,aAAahsD,IACrB,GACpC,MACF,KAAKomF,EAAiB6T,wBACpB95F,EAAUovF,0BAA4B5+F,EAAKmG,SAAS27D,EAAQzG,aAAahsD,EAAM,GAC3ByyD,EAAQzG,aAAahsD,IACrB,GACpD,MACF,KAAKomF,EAAiB8O,wBACpB,CACE,MAAMgF,EAAiB3O,EAAW4O,oBAAoB1nC,EAASzyD,EAAKy5F,GACpE,IAAKS,EAEH,OADAn6F,EAAU,sCAAsCC,UAAYy5F,MACrD,EAETt5F,EAAU6vF,mBAAqBkK,EAC/B,KACF,CACF,KAAK9T,EAAiByO,eACpB10F,EAAUysE,aAAena,EAAQzG,aAAahsD,GAC9C,MACF,KAAKomF,EAAiBwN,aAEpBzzF,EAAUutE,sBAAwBjb,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAMy5F,GACxE,MACF,KAAKrT,EAAiBgU,wBACpBj6F,EAAU+uF,qBAAsB,EAChC,MACF,KAAK9I,EAAiByP,qBAEpB,IADmBqC,EAAuB/3F,EAAWsyD,EAASzyD,EAAKy5F,GAChD,OAAO,KAC1B,MAEF,QACgB,IAAVT,IAMF74F,EAAU0tE,gBAAiB,GAKjC7tE,GAAOy5F,CACT,CACF,CAEA,OAAOt5F,CACT,GASA9P,EAAOC,QAAQk7F,SAAWA,iBC5Y1B,MAAMhM,EAAa,EAAQ,OACrB,QAAEpuE,GAAY,EAAQ,MAU5B/gB,EAAOC,QAAQw8F,mBARf,cAAiC17E,EAC/B,WAAAxM,GACEuB,MAAM,CAACq5E,EAAWrkF,mBAAmB0nD,KAAM,GACrC,CAAC28B,EAAWrkF,mBAAmB2nD,KAAM,GACrC,CAAC08B,EAAWrkF,mBAAmB4nD,KAAM,GAC7C,mBCRF,MAAM,KAAEvyD,EAAI,QAAEC,GAAY,EAAQ,OAC5B,UAAEwtB,EAAS,UAAEyC,GAAc,EAAQ,OACnC,kBAAE4lE,GAAsB,EAAQ,OAChC,WAAEpU,GAAe,EAAQ,OAG7Bh/E,IAAK6+D,EACLz+D,IAAKozF,GACHl2F,GAEE,UACJuF,EAAS,WACTtB,GACEhE,EAEE09E,EAAM,CACZA,WAAiB,SAAoB1b,EAAS3wD,GAC5C,GAAKA,EAAS,EAAK2wD,EAAQ1gE,OAGzB,OAAO,EAET,IAAIiO,EAAM8B,EACV,MAAMmxD,EAAUR,EAAQE,UAAU3yD,GAClCA,IAGA,MAAMg7B,EAAU+2B,EAAKkB,EAAS,EAAG,GAC3Bgf,EAAS,IAAIC,EAEnB,GAAMl3C,IAAYsrD,EAAkB+T,iBAC9Br/D,IAAYsrD,EAAkBgU,iBAC9Bt/D,IAAYsrD,EAAkBiU,sBAC9Bv/D,IAAYsrD,EAAkBkU,qBAGlC,OAAO,EAG4B/nC,EAAQ7/D,SAAS,UAEtD,MAAM6gF,EAAYhhB,EAAQzG,aAAahsD,GAEvC,GADAA,GAAO,EACF8B,EAAS2xE,EAAahhB,EAAQ1gE,OAGjC,OAAO,EAET,MAAM0oG,EAAWhoC,EAAQE,UAAU3yD,GAKnC,GAJAA,IAEAiyE,EAAOj3C,QAAUA,EACjBi3C,EAAOyoB,SAAWD,EACdz/D,IAAYsrD,EAAkB+T,iBAChCr/D,IAAYsrD,EAAkBgU,gBAE9BroB,EAAO/K,wBAA0BzU,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAMyzE,EAAY,OAC9E,CACL,MAAMknB,EAAcloC,EAAQE,UAAU3yD,GACtCA,IACAiyE,EAAO2oB,qBAAuBnoC,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAM26F,GACpE36F,GAAO26F,EACP,MAAME,EAAapoC,EAAQE,UAAU3yD,GACrCA,IACAiyE,EAAO/K,wBAA0BzU,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAM66F,GACvE76F,GAAO66F,CACT,CACA,OAAO5oB,CACT,EAEA9D,OAAa,SAAgB8D,GAC3B,GAAMA,EAAOj3C,UAAYsrD,EAAkB+T,iBACrCpoB,EAAOj3C,UAAYsrD,EAAkBgU,iBACrCroB,EAAOj3C,UAAYsrD,EAAkBiU,sBACrCtoB,EAAOj3C,UAAYsrD,EAAkBkU,qBAGzC,OAAO,EAIT,MAAMrmG,EAAO,GACb,IAAI8+D,EAAU,EACdA,EAAUyzB,EAAQzzB,EAAS,EAAG,EAAG,GACjCA,EAAUyzB,EAAQzzB,EAASgf,EAAOj3C,QAAS,EAAG,GAC9C7mC,EAAKwpB,KAAK5nB,EAAUk9D,IACpB,IAAIwgB,EAAY,EAAIxB,EAAO/K,wBAAwBn1E,OAkBnD,OAjBIkgF,EAAOj3C,UAAYsrD,EAAkBiU,sBACvCtoB,EAAOj3C,UAAYsrD,EAAkBkU,uBACrC/mB,GAAa,EAAIxB,EAAO2oB,qBAAqB7oG,QAE/CoC,EAAKwpB,KAAKlpB,EAAWg/E,IACrBt/E,EAAKwpB,KAAK5nB,EAAUk8E,EAAOyoB,WACvBzoB,EAAOj3C,UAAYsrD,EAAkBiU,sBACvCtoB,EAAOj3C,UAAYsrD,EAAkBkU,sBAGrCrmG,EAAKwpB,KAAK5nB,EAAUk8E,EAAO2oB,qBAAqB7oG,SAChDoC,EAAKwpB,KAAKs0D,EAAO2oB,sBACjBzmG,EAAKwpB,KAAK5nB,EAAUk8E,EAAO/K,wBAAwBn1E,SACnDoC,EAAKwpB,KAAKs0D,EAAO/K,0BAEjB/yE,EAAKwpB,KAAKs0D,EAAO/K,yBAEZ/yE,EAAK2E,KAAK,GACnB,GAEAzI,EAAOC,QAAQ69E,IAAMA,kBC3GrB,MAAM,KAAE39E,EAAI,QAAEC,GAAY,EAAQ,OAC5B,KAAE6gB,GAAS,EAAQ,OACnB,UAAEvR,GAAc,EAAQ,OACxB,+BAAEymF,GAAmC,EAAQ,OAC7C,oBAAEsU,GAAwB,EAAQ,OAGtC5nG,IAAK6+D,GACHvhE,GACE,WACJ0F,EAAU,WACVzB,GACEhE,GACE,UAAE4kB,GAAc/D,EAGtB,SAASypF,EAAQtoC,EAAS3wD,GACxB,OAAO2wD,EAAQ1gE,OAAS+P,CAC1B,CAEA,SAASk5F,EAAgBvoC,EAAS3wD,EAAQm5F,GACxC,IAAIj7F,EAAM8B,EACV,GAAIi5F,EAAQtoC,EAASzyD,GAAO,GAE1B,OADAD,EAAU,+DACH,EAGT,MAAMm7F,EAAsB,IAAIJ,EAChCI,EAAoB/6F,UAAY86F,EAChC,MAAMpT,EAAUp1B,EAAQoB,aAAa7zD,GACrCA,GAAO,EACPk7F,EAAoBtU,GAAK70B,EAAK81B,EAAS,GAAI,GAC3CqT,EAAoB5rB,YAAcvd,EAAK81B,EAAS,EAAG,GACnD,MAAMsT,EAAWppC,EAAK81B,EAAS,EAAG,GAKlC,GAJAqT,EAAoBE,eAAiBD,EACrCD,EAAoBt5B,UAAYnP,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAM,GACtEA,GAAO,EAEHk7F,EAAoB5rB,cACpBkX,EAA+B6U,YAAa,CAE9C,MAAMC,EAAY7oC,EAAQE,UAAU3yD,GAEpC,GADAA,IACI+6F,EAAQtoC,EAASzyD,GAAOs7F,EAE1B,OADAv7F,EAAU,+DAA+Du7F,OAClE,EAETJ,EAAoBK,UAAY9oC,EAAQ7/D,SAAS,SAAUoN,EAAKA,EAAMs7F,GACtEt7F,GAAOs7F,CACT,CAcA,OAXAt7F,EAAM8B,EAASq5F,EAKiB,aAA5BF,EAAUxM,cAEZyM,EAAoBzM,cAAgBwM,EAAUxM,cAE9CyM,EAAoBzM,cAAgBwM,EAAUxM,cAAgB0M,EAEzDD,CACT,CAIA,MAAMM,EAAoBnmF,GAAU,IAClC5gB,EAAW,UACXA,EAAW,MAGPgnG,EAAwBpmF,GAAU,IACtCmmF,EAAkBpjG,MAClB3D,EAAW,IACXyB,EAAW,SAGPwlG,EAAiBrmF,GAAU,IAC/BmmF,EAAkBpjG,MAClB3D,EAAW,IACXyB,EAAW,OACXzB,EAAW,GACXA,EAAW,KAGPknG,EAAoBtmF,GAAU,IAClC5gB,EAAW,UACXA,EAAW,IACXA,EAAW,IACXyB,EAAW,SAGP0lG,EAA0BvmF,GAAU,IACxC5gB,EAAW,UACXA,EAAW,IACXA,EAAW,IACXyB,EAAW,SA6Db,MAAM4D,EAAY,CAChB+hG,kBA1DF,WACE,OAAOH,EAAetjG,KACxB,EAyDE0jG,mBAtDF,SAA4BC,GAC1B,OACEN,EAAsBrjG,MACtB2jG,CAEJ,EAkDEC,kBA/CF,SAA2BD,GACzB,OACEJ,EAAkBvjG,MAClB2jG,CAEJ,EA2CEE,wBAxCF,SAAiCF,EAAKG,GACpC,OACEN,EAAwBxjG,MACxB2jG,EACsC7lG,EAApCgmG,GAAgBA,EAAe,EAAgBA,EAA2B,EAEhF,EAmCEC,wBAjCF,SAAiCJ,GAC/B,MAAO,CACJtnG,EAAW,UAAcA,EAAW,IACpCyB,EAAW,OAAU6lG,EAE1B,EA6BEf,kBACA/N,gBA5BF,SAAyBx6B,EAAS3wD,EAAQm5F,GACxC,MAAMC,EAAsBF,EAAgBvoC,EAAS3wD,EAAQm5F,GAC7D,IAAKC,EACH,OAAO,KAIT,MAAMl7F,EAAM8B,EAASo5F,EAAoBE,eAIzC,OAAIL,EAAQtoC,EAASzyD,GAAOk7F,EAAoBzM,eAC9C1uF,EAAU,2DAA2Dm7F,EAAoBzM,kBAClF,OAGTyM,EAAoB1N,QACM/6B,EAAQv7D,MAAM8I,EAAKA,EAAMk7F,EAAoBzM,eAChEyM,EACT,GAYA7qG,EAAOC,QAAQwJ,UAAYA,kBCtK3B,MAAM,YAAEsiG,GAAgB,EAAQ,OAC1B,QAAE3rG,EAAO,KAAEE,GAAS,EAAQ,OAC5B,gBAAE0J,GAAoB,EAAQ,OAC9B,UAAEqmB,GAAc,EAAQ,OACxB,eAAEhtB,GAAmB,EAAQ,OAC7B,gBAAE0I,EAAe,qBACfE,GAAyB,EAAQ,OACnC,iBAAEC,EAAgB,UAAEE,GAAc,EAAQ,OAC1C,gBAAEkuD,GAAoB,EAAQ,OAC9B,eAAE1vD,GAAmB,EAAQ,OAC7B,yBAAEggC,GAA6B,EAAQ,OACvC,mBAAEirD,GAAuB,EAAQ,OACjC,UAAEoK,GAAc,EAAQ,OACxB,aAAE7J,GAAiB,EAAQ,OAC3B,YAAE3Y,GAAgB,EAAQ,OAC1B,MAAEqoB,GAAU,EAAQ,OACpB,YAAEp3F,GAAgB,EAAQ,KAG1BpL,EAAa,eAEb,UACJsC,EAAS,WACTG,EAAU,YACVzB,EAAW,YACXkC,GACEpG,EAEE4rG,EAAS1oG,EAAW2D,UAAUq7D,UAC9B2pC,EAAY3oG,EAAW2D,UAAUu8D,aACjC0oC,EAAY5oG,EAAW2D,UAAU00D,aACjCwwC,EAAY,SAAmBx8F,GACnC,OAAOrP,EAAKmG,SAAS+N,KAAKmnD,aAAahsD,EAAM,GAAI6E,KAAKmnD,aAAahsD,IAAM,EAC3E,GAEM,cACJqvD,EAAa,mBACbxsD,GACE9D,EAGE09F,EAAsB,CAC1B,CAACpiG,EAAgBgI,OAAQ6jF,EAAmBuE,QAC5C,CAACpwF,EAAgB2H,OAAQkkF,EAAmBsE,WAIxCkS,EAA6B,CACjC,CAACjgG,EAAU4nC,gBAAiB6hD,EAAmBuE,QAC/C,CAAChuF,EAAUuF,OAAiBkkF,EAAmBsE,WAG3CmS,EAA4B,CAChC,CAACpgG,EAAiBq+B,MAAe,EACjC,CAACr+B,EAAiBowD,WAAe,EACjC,CAACpwD,EAAiBqwD,SAAe,EACjC,CAACrwD,EAAiBswD,cAAe,EACjC,CAACtwD,EAAiBuwD,QAAe,IAG7B8vC,EAA0B,CAC9B,EAAMxgG,EAAgBm8B,UACtB,EAAMn8B,EAAgBkwD,cAGlBuwC,EAA2B,CAC/B,CAACzgG,EAAgBm8B,WAAe,EAChC,CAACn8B,EAAgBkwD,cAAe,GAG5BwwC,EAAwB,CAC5B,CAACxgG,EAAqBowD,mBAAoB,EAC1C,CAACpwD,EAAqBmwD,kBAAoB,GAG5C,SAASswC,EAAmB7sF,EAAS+mB,EAAiB+lE,GAAiB,GACrE,IAAK/lE,EACH,OAEF,MAAM,WACJmB,EAAU,gBACVgB,EAAe,qBACfuB,EAAoB,eACpBD,EAAc,YACdJ,EAAW,QACXG,EAAO,YACP3B,GACE7B,EAIAqD,QAA2D7kC,IAA3CknG,EAA0BriE,IAC5CpqB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmBsD,uBACnBmT,EAA0BriE,KAKzB0iE,QACYvnG,IAAf2iC,QACyC3iC,IAAzConG,EAAyBzkE,IAEzBloB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmByC,WACnBkU,EAAyBzkE,KAKzBqC,SACFvqB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmBuD,SACnBhvD,IAKAC,SACFxqB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmBwD,eACnBhvD,IAIJ,IAAIgkB,EAAQ,EACZ,GAAItlB,QAA2D,CAE7DslB,GAD6Bo+C,EAAsB1jE,IACjB,EAEpC,CACIslB,GACFxuC,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmBkD,aACnB1qC,IAIA/jB,SACFzqB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmBgD,eACnBvuD,IAIA7B,SACF5oB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmB2C,gBAClB/vD,EAAc,EAAM,GAG3B,CAKA,MAAMzD,UAA0B+mE,EAU9B,WAAAx3F,CAAY0qE,EAAc,EAAG55B,EAAU,GACrCvvC,MAAM,IAAImqF,EAAUxiB,EAAYG,OAAQ,IAGxCppE,KAAKm2B,QAAUs0C,EAGfzqE,KAAK6wC,QAAUA,CACjB,CAEA,cAAAwnD,CAAerW,EAAWsW,EAAU,KAAMC,EAAY,MACpD,MAAM5U,EAAQ3jF,KAAKw4F,aAAaxW,GAChC,QAAcpxF,IAAV+yF,EAAqB,OACzB,GAAI4U,GAAa5U,EAAM8U,YACrB,OAAOF,EAAU5lG,KAAKgxF,EAAM8U,YAAa9U,EAAM+U,YAEjD,MAAMnlG,EAAQowF,EAAM54C,WACpB,OAAOutD,EAAUA,EAAQ/kG,GAASA,CACpC,CAKA,aAAAkgC,GACE,MAAMkwD,EAAQ3jF,KAAKq4F,eAAehX,EAAmByC,WAAY1yF,EAAWomG,GAC5E,OAAOO,EAAwBpU,EACjC,CAKA,aAAAvvD,GACE,OAAOp0B,KAAKq4F,eAAehX,EAAmB8C,uBAAwB/yF,EAAWomG,EACnF,CAKA,uBAAAhjE,GACE,MAAMmvD,EAAQ3jF,KAAKq4F,eAAehX,EAAmBkD,aAAchzF,EAAYkmG,GAC/E,QAAc7mG,IAAV+yF,EACF,OAGF,MAAMgV,GAAkB,MAARhV,IAAmB,GACnC,OAAIgV,IAAWV,EAAsBxgG,EAAqBowD,mBACjDpwD,EAAqBowD,kBACnB8wC,IAAWV,EAAsBxgG,EAAqBmwD,kBACxDnwD,EAAqBmwD,sBADvB,CAIT,CAIA,4BAAAlzB,GAIE,QADwB,KAFV10B,KAAKq4F,eAAehX,EAAmBkD,aAAchzF,EAAYkmG,KAE5C,IAEjC,KAAK,EAML,QAEE,OANF,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,EAKb,CAKA,aAAA7iE,GACE,OAAO50B,KAAKq4F,eAAehX,EAAmBuX,YAAa9oG,EAAa4nG,EAC1E,CAKA,cAAAxjE,GACE,MAAM3gC,EAAQyM,KAAKq4F,eAAehX,EAAmB2C,gBAAiB5yF,EAAWomG,GACjF,QAAc5mG,IAAV2C,EAKJ,QAASA,CACX,CAKA,WAAA42C,GACE,OAAOnqC,KAAKq4F,eAAehX,EAAmByE,SAAU9nF,EAC1D,CAKA,SAAAs1B,GACE,OAAOtzB,KAAKq4F,eAAehX,EAAmBoD,OAAQ30F,EAAa4nG,EACrE,CAKA,QAAAviE,GACE,OAAOn1B,KAAKq4F,eAAehX,EAAmBuD,SAAU90F,EAAa4nG,EACvE,CAKA,aAAAriE,GACE,OAAOr1B,KAAKq4F,eAAehX,EAAmBwD,eAAgB/0F,EAAa4nG,EAC7E,CAKA,qBAAA9jE,GACE,OAAO5zB,KAAKq4F,eAAehX,EAAmBuE,QAChD,CAKA,qBAAA9xD,GACE,MAAM2B,EACJz1B,KAAKq4F,eAAehX,EAAmBwX,oBAAqB/oG,EAAa4nG,GAC3E,IAAI5mG,EAMJ,OALA4I,OAAO8F,KAAKs4F,GAA2BhqF,SAASG,IAC1C6pF,EAA0B7pF,KAASwnB,IACrC3kC,EAASmd,EACX,IAEKnd,CACT,CAKA,uBAAAkjC,GACE,MAAMyB,EACJz1B,KAAKq4F,eAAehX,EAAmBsD,uBAAwB70F,EAAa4nG,GAC9E,IAAI5mG,EAMJ,OALA4I,OAAO8F,KAAKs4F,GAA2BhqF,SAASG,IAC1C6pF,EAA0B7pF,KAASwnB,IACrC3kC,EAASmd,EACX,IAEKnd,CACT,CAKA,iBAAAuiC,GACE,OAAOrzB,KAAKq4F,eAAehX,EAAmB6D,eACnBlzF,EAAa2lG,EAC1C,CAKA,oBAAAmB,GACE,OAAO94F,KAAKq4F,eAAehX,EAAmB8D,kBACnBnzF,EAAa2lG,EAC1C,CAKA,cAAAvtD,GACE,OAAOpqC,KAAKq4F,eAAehX,EAAmB2D,aAAcl1F,EAAa4nG,EAC3E,CAKA,uBAAApjE,GACE,QAASt0B,KAAKq4F,eAAehX,EAAmB+C,wBAAyBhzF,EAAWomG,EACtF,CAKA,SAAAvtD,GACE,OAAOjqC,KAAKq4F,eAAehX,EAAmBuC,OAAQxyF,EAAWomG,EACnE,CAKA,gBAAAjiE,GACE,OAAOv1B,KAAKq4F,eAAehX,EAAmBgD,eAAgBjzF,EAAWomG,EAC3E,CAKA,qBAAA1iE,GACE,OAAO90B,KAAKq4F,eAAehX,EAAmB0X,wCACnBjpG,EAAa4nG,EAC1C,CAKA,kBAAA3iE,GACE,OAAO/0B,KAAKq4F,eAAehX,EAAmBgE,kBACnBrzF,EAAa2lG,EAC1C,CAKA,mBAAA1kE,GACE,OAAOjzB,KAAKq4F,eAAehX,EAAmBmD,mBACnBjzF,EAAYkmG,EACzC,CAKA,kBAAAxiE,GACE,OAAOj1B,KAAKq4F,eAAehX,EAAmB2X,kBACnBhnG,EAAa2lG,EAC1C,CAUA,+BAAO1rD,CAAyB5uB,EACAiT,GAC9B,MAAMjlB,EAAU,IAAImlB,EAAkB4F,EAAyB8R,cAQ/D,OANe78B,EAAQ/P,UAChBosE,WAAap3C,EAEpBjlB,EAAQi4E,aAAa,IAAI1B,EAAa0P,EAAM2H,OACN5X,EAAmBoD,OACnBpnE,IAC/BhS,CACT,CAYA,gBAAOwtB,CACLvJ,EACA8C,EACA9B,GAEA,MAAMjlB,EAAU,IAAImlB,EAAkB4F,EAAyB4C,QAEhD3tB,EAAQ/P,UAChBosE,WAAap3C,EAcpB,MAAM4oE,EAAoBrB,EAA2BvoE,EAAgBpyB,MACrE,QAA0BtM,IAAtBsoG,EAAiC,MAAM,IAAIrqG,EAAe,4BAkB9D,OAjBAwc,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACNC,EACA1uC,EAAcl7B,EAAgBzyB,QAKhCwO,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmBwC,WACnBv0D,EAAgBC,UAIlB2oE,EAAmB7sF,EAAS+mB,GAErB/mB,CACT,CAaA,8BAAOkgC,CACGnY,EACA+lE,EACA3sE,EACA0d,EACA5Z,GACR,MAAM8oE,EAAQ,IAAI5oE,EAAkB4F,EAAyByT,aA0B7D,OAxBkBuvD,EAAM99F,UACdosE,WAAap3C,OAEA1/B,IAAnBwiC,GACFgmE,EAAM9V,aAAa,IAAI1B,EAAa0P,EAAM2H,OACN5X,EAAmB6D,eACnB9xD,SAEhBxiC,IAAlBuoG,GACFC,EAAM9V,aAAa,IAAI1B,EAAa0P,EAAM2H,OACN5X,EAAmB4D,cACnBkU,IAGtCC,EAAM9V,aAAa,IAAI1B,EAAa0P,EAAM2H,OACN5X,EAAmBuC,OACnBp3D,IAEpC4sE,EAAM9V,aAAa,IAAI1B,EAAa0P,EAAM8G,OACN/W,EAAmByE,SACnB57C,GAAY,KAIzCkvD,CACT,CA2BA,6BAAOjnE,CAAuB7C,EACA8C,EACAL,EACAsnE,EACA/oE,EACA9D,EACA6F,EACAinE,EACAlmE,EAAiBtnC,EAAK2/B,MACtB8tE,EAAoBztG,EAAK2/B,MACzB+G,GAAU,EACVxF,OAAsBp8B,EACtB6hC,OAAkB7hC,EAClB8hC,OAAmB9hC,EACnB4oG,GAAiB,GA2B7C,MAAMjqE,EAAUD,EAAgBC,QAC1BkqE,EAAgB1nE,EAASj1B,MACzB48F,EAAe3nE,EAAS70B,KAKxBmO,EAAU,IAAImlB,EAAkB4F,EAAyBC,MAChDhrB,EAAQ/P,UAChBosE,WAAap3C,EAGpB,MAAM4oE,EAAoBtB,EAAoB8B,GAC9C,QAA0B9oG,IAAtBsoG,EAAiC,MAAM,IAAIrqG,EAAe,4BAuF9D,GAtFAwc,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACNC,EACAO,IAIEJ,GACFhuF,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACN5X,EAAmBwE,UACnBwT,EAAkBv8F,QAIlB48F,IAAiBlkG,EAAgB2H,QAEnCkO,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACN5X,EAAmB6D,eACnB9xD,IAGF/nB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmB8D,kBACnBoU,KAKJluF,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACN5X,EAAmBuC,OACnBp3D,IAIFnhB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmBwC,WACnBt0D,IAOF2oE,EAAmB7sF,EAAS+mB,GAAiB,GAEzCC,GAEFhnB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACN5X,EAAmB8E,QACnB,IAIAmT,GAEFjuF,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmB+C,wBACnB,IAOAoV,EAEFnuF,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACN5X,EAAmB0C,SACnB,IAEOvxD,GAETnnB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACN5X,EAAmB0C,SACnB,SAGwBnzF,IAAxBo8B,EAAmC,CAErC,IAAI2sE,EAAU3sE,EAAoBm5B,kBAClC,GAAIn5B,EAAoB9sB,QAAU4lD,EAAgB6C,KAAM,CAGtDgxC,EAF0B7tG,EAAK04C,WAAWxX,EAAoBm5B,mBAAmB,GACrCyzC,SAAS,IAEvD,CACAvuF,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACN5X,EAAmBiE,sBACnB,CACEpoF,KAAO8vB,EAAoB9sB,MAC3B3M,MAAOomG,IAGb,CAuBA,YArBwB/oG,IAApB6hC,GAGFpnB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmBgE,kBACnB5yD,IAKAC,SAGFrnB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmBmD,mBACnB9xD,IAIGrnB,CACT,CAWA,8BAAOolB,CAAwBpT,EACAiT,GAC7B,MAAMjlB,EAAU,IAAImlB,EAAkB4F,EAAyBsC,QAU/D,OARertB,EAAQ/P,UAChBosE,WAAap3C,EAEpBjlB,EAAQi4E,aAAa,IAAI1B,EAAa0P,EAAM2H,OACN5X,EAAmBoD,OACnBpnE,IAG/BhS,CACT,CAEA,+BAAO8iE,CAAyB79C,EACAiS,GAC9B,MAAMl3B,EAAU,IAAImlB,EAAkB4F,EAAyByjE,aAU/D,OATexuF,EAAQ/P,UAChBosE,WAAap3C,EAEpBjlB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACN5X,EAAmBuE,QACnBrjD,EAAM5hC,aAGD0K,CACT,CAcA,aAAOqxB,CAAOrf,EACAy8E,OAAqBlpG,EACrB47B,OAAa57B,EACbmpG,OAAuBnpG,GACnC,MAAMya,EAAU,IAAImlB,EAAkB4F,EAAyB4R,WA0B/D,GAxBA38B,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACN5X,EAAmBoD,OACnBpnE,IAGEy8E,GACFzuF,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACN5X,EAAmB6D,eACnB4U,IAIAttE,SAGFnhB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACLzsE,GAAc,IAAQ60D,EAAmBuC,OAASvC,EAAmBqD,iBACtEl4D,IAIAutE,GAAyBA,EAAqBvyE,KAAO,EAAI,CAE3D,IAAIyV,EAAiB,EACrB,MAAM+8D,EAAc5jG,EAAekY,OACnC,IAAI,IAAI/hB,EAAI,EAAGA,EAAIytG,EAAY9sG,OAAQX,IACrC0wC,GAAiB88D,EAAqB/nF,IAAIgoF,EAAYztG,IAAMwtG,EAAqB1rG,IAAI2rG,EAAYztG,IAAIW,OAAS,EAGhH,GAAI+vC,EAAgBzM,EAAkB0M,sBACpC,MAAM,IAAIruC,EAAe,mDAE3Bwc,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACN5X,EAAmBmE,gBACnBuU,GAEJ,CAEA,OAAO1uF,CACT,CAWA,mBAAO0wB,CAAa1e,EAAQoV,OAAkB7hC,EAAWkpG,OAAqBlpG,GAC5E,MAAMya,EAAU,IAAImlB,EAAkB4F,EAAyBsC,QAyB/D,OAvBArtB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM2H,OACN5X,EAAmBoD,OACnBpnE,IAGEoV,GAEFpnB,EAAQi4E,aAAa,IAAI1B,EACvB0P,EAAM8G,OACN/W,EAAmBgE,kBACnB5yD,IAYGpnB,CACT,EAIFmlB,EAAkB0M,sBAAwB,GAE1C1xC,EAAOC,QAAQ+kC,kBAAoBA,kBCl3BnC,MAAM,kBAAEA,GAAsB,EAAQ,OAChC,gBAAE4wD,GAAoB,EAAQ,MAC9B,kBAAElU,GAAsB,EAAQ,OAChC,iBAAEpB,GAAqB,EAAQ,OAC/B,UAAE2f,GAAc,EAAQ,OACxB,aAAE7J,GAAiB,EAAQ,OAC3B,MAAE0P,GAAU,EAAQ,OACpB,WAAEjkB,GAAe,EAAQ,OACzB,oBAAE4oB,GAAwB,EAAQ,MAExCzqG,EAAOC,QAAQ+kC,kBAAoBA,EACnChlC,EAAOC,QAAQ21F,gBAAkBA,EACjC51F,EAAOC,QAAQyhF,kBAAoBA,EACnC1hF,EAAOC,QAAQqgF,iBAAmBA,EAClCtgF,EAAOC,QAAQggG,UAAYA,EAC3BjgG,EAAOC,QAAQm2F,aAAeA,EAC9Bp2F,EAAOC,QAAQ6lG,MAAQA,EACvB9lG,EAAOC,QAAQ4hF,WAAaA,EAC5B7hF,EAAOC,QAAQwqG,oBAAsBA,YCuBrCzqG,EAAOC,QAAQ8rG,YArCf,MACE,WAAAx3F,CAAYw2B,EAAS,KAAMu4D,EAAS,IAClC9uF,KAAK2kD,WAAapuB,EAClBv2B,KAAKi6F,YAAcnL,CACrB,CAEA,YAAAxL,CAAaK,GACX3jF,KAAKi6F,YAAYtW,EAAMjjF,WAAaijF,CACtC,CAEA,YAAA6U,CAAatV,GACX,OAAOljF,KAAKi6F,YAAY/W,EAC1B,CAEA,iBAAAQ,GACE,OAAO1jF,KAAKi6F,WACd,CAEA,aAAI3+F,GACF,OAAO0E,KAAK2kD,UACd,CACA,aAAIrpD,CAAUhN,GACZ0R,KAAK2kD,WAAar2D,CACpB,CAEA,WAAA0yE,GACE,MAAM3lE,EAAM2E,KAAK1E,UACjB,OAAMD,GAAOA,EAAIo7B,aAAep7B,EAAIu7B,WAG7B,CACLJ,aAAgBn7B,EAAIo7B,YACpB6qC,eAAgBjmE,EAAIu7B,YAJb,IAMX,kBCtCF,MAAM,KAAEjrC,EAAI,QAAEC,GAAY,EAAQ,OAGhCyC,IAAK6+D,GACHvhE,GACE,UACJuF,EAAS,WACTM,GACE5F,EASJ,MAAMw1F,EACJ,WAAArhF,CAAY7C,EAAMyrF,GAChB3oF,KAAK9C,KAAOA,EACZ8C,KAAK2oF,QAAUA,CACjB,CAEA,YAAAoE,GACE,MAAM1xF,EAAM,GAKZ,OAJAA,EAAIyd,KAAK5nB,EAAU,IACnBmK,EAAIyd,KAAK5nB,EAAU8O,KAAK9C,OACxB7B,EAAIyd,KAAKtnB,EAAWwO,KAAK2oF,QAAQz7F,SACjCmO,EAAIyd,KAAK9Y,KAAK2oF,QAAQ56F,SAAS,WACxBsN,EAAIpH,KAAK,GAClB,CAEA,qBAAOs3F,CAAe2O,EAAQj9F,EAAS,GACrC,GAAKi9F,EAAOhtG,OAAS+P,EAAU,EAC7B,OAAO,KAET,MAAMk9F,EAAaD,EAAOpsC,UAAU7wD,GAC9Bm9F,EAAWF,EAAOjrC,YAAYhyD,EAAS,GACvCC,EAAOgwD,EAAKktC,EAAU,GAAI,GAC1BvT,EAAa35B,EAAKktC,EAAU,EAAG,IAC/BnP,EAA6B,EAAbkP,EAAiB,EACjCxR,EAAUuR,EAAO7nG,MAAM4K,EAASguF,EAAehuF,EAASguF,EAAgBpE,GAC9E,OAAO,IAAIzF,EAAgBlkF,EAAMyrF,EACnC,EAKFn9F,EAAOC,QAAQ21F,gBAAkBA,kBChDjC,MAAM,qBAAEjpF,EAAoB,eAAEC,EAAc,qBAAE25D,EAAoB,uBAAEz5D,EAAsB,kBAAEI,GAAsB,EAAQ,OACpH,YAAE6+F,GAAgB,EAAQ,OAC1B,KAAE5rG,EAAI,QAAEC,GAAY,EAAQ,OAC5B,gBAAE4J,EAAe,gBAAEkG,GAAoB,EAAQ,OAC/C,aAAE9M,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,QAAEgmE,EAAO,YAAE36D,EAAW,QAAEX,GAAY,EAAQ,MAC5C,yBAAE4uE,GAA6B,EAAQ,OACvC,mBAAEmZ,EAAkB,sBAAE+Y,GAA0B,EAAQ,OACxD,UAAE5O,GAAc,EAAQ,OACxB,aAAE7J,GAAiB,EAAQ,OAC3B,YAAE3Y,GAAgB,EAAQ,OAE1B,UAAEptD,GAAc,EAAQ,OAG5BxtB,IAAK6+D,EACLz+D,IAAKozF,GACHl2F,GACE,UACJuF,EAAS,UAAEE,EAAS,WACpBC,EAAU,WAAEzB,EAAU,WACtB2B,EAAU,WAAEI,GACV/F,GACE,cACJ4+D,EAAa,mBACbxsD,GACE9D,GACE,kBACJmF,GACE3D,EAEE4+F,EAAoB,CACxBliG,EAAey7D,KACfz7D,EAAeq7D,YACfr7D,EAAe+4B,2BACf/4B,EAAe+6D,mBACf/6D,EAAeg7D,2BACfh7D,EAAei7D,0BACfj7D,EAAek7D,cACfl7D,EAAem7D,SACfn7D,EAAew7D,qBACfx7D,EAAe27D,oBACf,KACA37D,EAAe47D,qBACf57D,EAAe66D,gBACf76D,EAAe67D,mBACf77D,EAAe86D,SACf96D,EAAeo7D,2BACfp7D,EAAe07D,6BACf17D,EAAeu7D,0BACfv7D,EAAes7D,YACf,KACAt7D,EAAe22B,eACf32B,EAAe87D,eACf,KACA97D,EAAe82B,qBACf92B,EAAes9B,kBACft9B,EAAew2B,kBACfx2B,EAAe+7D,mBAGXomC,EAAqB,IAAI3sF,IAAI,CACjC,CAACmkD,EAAqBqC,WAAY,KAClC,CAACrC,EAAqBsC,WAAY,IAClC,CAACtC,EAAqBuC,GAAI,MAQ5B,MAAM4Y,UAA0BqqB,EAC9B,WAAAx3F,CAAY0qE,EAAc,GACxBnpE,MAAM,IAAImqF,EAAUxiB,EAAYI,WAAY,IAG5CrpE,KAAKm2B,QAAUs0C,EAGfzqE,KAAK6wC,QAAU,CACjB,CAEA,gBAAAm/B,GACE,MAAMwqB,EAAWx6F,KAAKw4F,aAAalX,EAAmBmZ,UACtD,OAAKD,EAGEx8F,EAAmBw8F,EAASzvD,YAF1B,IAGX,CAEA,oBAAAykC,GACE,MAAMkrB,EAAW16F,KAAKw4F,aAAalX,EAAmBqZ,YACtD,OAAKD,EAGE18F,EAAmB08F,EAAS3vD,YAF1B,IAGX,CAEA,iBAAA6kC,GACE,MAAMgrB,EAAY56F,KAAKw4F,aAAalX,EAAmBuZ,UACvD,OAAKD,EAGE58F,EAAmB48F,EAAU7vD,YAF3B,IAGX,CAEA,cAAA+vD,GACE,MAAMC,EAAc/6F,KAAKw4F,aAAalX,EAAmB0Z,QACzD,OAAKD,EAGE/8F,EAAmB+8F,EAAYhwD,YAF7B,IAGX,CAEA,qBAAAq6B,GACE,IAAID,EAAO,GAGP81B,EAAWj7F,KAAKw4F,aAAalX,EAAmB4Z,qBAsBpD,OArBID,IACF91B,EAAO+H,EAAkBiuB,0BAA0BF,EAASlwD,WAAYo6B,IAI1E81B,EAAWj7F,KAAKw4F,aAAalX,EAAmB8Z,iBAC5CH,IACF91B,EAAK/sE,EAAes6D,uBAAyB10D,EAAmBi9F,EAASlwD,aAE3EkwD,EAAWj7F,KAAKw4F,aAAalX,EAAmB+Z,cAC5CJ,IACF91B,EAAK/sE,EAAeu6D,oBAAsB30D,EAAmBi9F,EAASlwD,aAExEkwD,EAAWj7F,KAAKw4F,aAAalX,EAAmBga,UAC5CL,IACF91B,EAAK/sE,EAAew6D,eAAiB50D,EAAmBi9F,EAASlwD,aAEnEkwD,EAAWj7F,KAAKw4F,aAAalX,EAAmBia,oBAC5CN,IACF91B,EAAK/sE,EAAe46D,kBAAoBh1D,EAAmBi9F,EAASlwD,aAE/Do6B,CACT,CAGA,6BAAOq2B,CAAuBC,GAC5B,QAAkB7qG,IAAd6qG,EAAIC,YAAuC9qG,IAAhB6qG,EAAIE,QACjC,OAAO,EAET,IAAI3Y,EAAU,EAGd,OAFAA,EAAUnB,EAAQmB,EAASyY,EAAIC,MAAO,EAAG,GACzC1Y,EAAUnB,EAAQmB,EAASyY,EAAIE,QAAS,EAAG,GACpCtqG,EAAW2xF,EACpB,CAEA,+BAAO4Y,CAAyBC,GAC9B,MAAMJ,EAAM,CAAC,EACPzY,EAAUzxF,EAAWsqG,EAAe3pG,OAAO,EAAG,IAGpD,OAFAupG,EAAIC,MAAQxuC,EAAK81B,EAAS,EAAG,GAC7ByY,EAAIE,QAAUzuC,EAAK81B,EAAS,EAAG,GACxByY,CACT,CAMA,gCAAON,CAA0BW,EAAiBC,GAChD,MAAM52B,EAAO42B,EACb,IAAMD,IAAmB32B,EACvB,OAAO,EAET,MAAM62B,EAAK5jG,EACX,IAAI+C,EAAM,EAGV,MAAM8gG,EAAe7qG,EAAU0qG,EAAgB3gG,IAK/C,IAAI+gG,IAJF/gG,EAKF,IAAK,IAAIghG,EAAW,EAAGA,EAAWF,IAAgBE,EAAU,CAC1D,MAAMC,EAAsB,EAAXD,EACA,IAAbC,IACFF,EAAW9qG,EAAU0qG,EAAgB3gG,MACnCA,GAEJ,MAAMkhG,EAAU/B,EAAkB6B,GAC7BE,IAELl3B,EAAKk3B,KAAanvC,EAAKgvC,EAAU,EAAIE,EAAU,GACjD,CAGA,IAAK,IAAI7vG,EAAI,EAAG4O,EAAM2gG,EAAgB5uG,QAAUX,EAD7B,MAC+CA,EAAG,CACnE,MAAM6hE,EAAUh9D,EAAU0qG,EAAgB3gG,IAC1CA,IACA,MAAMmhG,EAAS3qG,EAAWmqG,EAAgB5pG,OAAOiJ,EAAK,IAAM,EAC5DA,GAAO,EACP,MAAMi/C,EAAW0hD,EAAgB5pG,OAAOiJ,EAAKmhG,GAE7C,OADAnhG,GAAOmhG,EACCluC,GACN,KAAK,EACH+W,EAAK62B,EAAGnpC,iBAAwC,IAApBzY,EAASltD,OAAgByE,EAAWyoD,GAAY,EAC5E,MACF,KAAK,EACH+qB,EAAK62B,EAAGlpC,gBAAuC,IAApB1Y,EAASltD,OAAgBkE,EAAUgpD,GAAY,EAC1E,MACF,KAAK,EACH+qB,EAAK62B,EAAGlxD,yBAAgD,IAApBsP,EAASltD,OAAgByE,EAAWyoD,GAAY,EACpF,MACF,KAAK,EACH+qB,EAAK62B,EAAGjpC,qBAA4C,IAApB3Y,EAASltD,OAAgByE,EAAWyoD,GAAY,EAMtF,CACA,OAAO+qB,CACT,CAGA,eAAOgI,CAASovB,EAAOC,EAAeC,EAAcnsE,GAOlD,KAAMisE,aAAiB7jG,GACrB,OAAO,EAET,MAAMgkG,EAAK,IAAIxvB,EAAkB/E,EAAyBC,OACpD9sE,EAAYohG,EAAG/3C,WACfg4C,EAAeJ,EAAM/oB,uBAAyBr7E,EAAqBm6D,mBACzEh3D,EAAUosE,WAAap3C,EACnBisE,EAAM9kB,WAAaklB,IACrBrhG,EAAUo0F,YAAc6M,EAAM9kB,UAE5B8kB,EAAM5kB,WACRr8E,EAAUk0F,YAAc+M,EAAM5kB,UAE5B4kB,EAAMhjB,yBAA2BgjB,EAAM9iB,2BACzCijB,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmBsb,qBACnB1vB,EAAkBsuB,uBAAuB,CACvCE,MAASa,EAAMhjB,wBACfoiB,QAASY,EAAM9iB,8BAEhD8iB,EAAMtkB,SAAWskB,EAAMtkB,QAAQ/qF,OAAS,GAC1CwvG,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmBqZ,WACnBnwC,EAAc+xC,EAAMtkB,WAGnDskB,EAAMxkB,wBAA0BwkB,EAAMxkB,uBAAuB7qF,OAAS,GACxEwvG,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmBub,WACnBryC,EAAc+xC,EAAMxkB,0BAGnDwkB,EAAMljB,oBAAsBkjB,EAAMljB,mBAAmBnsF,OAAS,GAChEwvG,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmB0Z,OACnBxwC,EAAc+xC,EAAMljB,sBAGnDkjB,EAAM/oB,uBAAyBr7E,EAAqBs6D,SACtDiqC,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmBwb,sBACnBzC,EAAsB5nC,SAEnD8pC,EAAM7oB,UACRp4E,EAAUo1F,iBAAmBlmC,EAAc+xC,EAAM7oB,UAG/C6oB,EAAM5oB,cACRr4E,EAAUk1F,uBAAyBhmC,EAAc+xC,EAAM5oB,cAGrD4oB,EAAMjlB,mBACRh8E,EAAUs1F,4BAA8BpmC,EAAc+xC,EAAMjlB,oBAIhEolB,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmByb,WACnBvyC,EAAc+xC,EAAM1kB,cACrD6kB,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmBga,SACnB9wC,EAAc,GAAGqK,EAAQa,sBAAsBn8D,EAAQyjG,WAEpFT,EAAMlqE,SACRqqE,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmBpuB,SACnB,MAG/BypC,GACFD,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmBwb,sBACnBzC,EAAsB/nC,qBAGzDoqC,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmB+Z,aACnB7wC,EAAcjxD,EAAQ0jG,iBACvDP,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmB8Z,gBACnB5wC,EAAcjxD,EAAQs3C,WAEnD2rD,GAAiBC,EAEnBC,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmB4b,cACnB,MACxBV,EAETE,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmB4b,cACnB,MACxBT,GAETC,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmB4b,cACnB,OAEnC,MAAMC,EAxGN,SAAyBC,GACvB,MAAMC,EAAax/D,KAAKrwB,IAAIpd,MAAM,KAAMgtG,GAAiB,EACzD,IAAIE,EAAU,EAEd,OADAF,EAActvF,SAASyvF,IAAUD,GAAW/C,EAAmBlsG,IAAIkvG,EAAI,IAChErsG,EAAUmsG,GAAcnsG,EAAUosG,EAC3C,CAmGmBE,CAAgB,CAACzrC,EAAqBqC,WACvDrC,EAAqBsC,WAAYtC,EAAqBuC,KACxDooC,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmBmc,oBACnBN,IAGjC,MAAMO,EAAe9tG,EAAY2sG,EAA8B,yBAAI,KAKnE,OAJAG,EAAGpZ,aAAa,IAAI1B,EAAa,EACDN,EAAmBqc,oBACnBD,IAEzBhB,CACT,CAYA,gBAAOjvB,CAAUD,EAAwB3sC,EAAUvQ,GACjD,MAAMosE,EAAK,IAAIxvB,EAAkB/E,EAAyBy1B,QAG1D,GAFkBlB,EAAGphG,UACXosE,WAAap3C,EACnBk9C,IAA2Bl1E,EAAuBihE,mBAAoB,CACxE,MAAMskC,GAAWh9D,GAAY,IAAI9yC,WAAWmE,OAAO,EAAG,KACtDwqG,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmBub,WACnBryC,EAAcqzC,IACjD,MAAO,GAAIrwB,IAA2Bl1E,EAAuBghE,YAAa,CACxE,MAAM76D,EACJyuE,EAAkBoE,mBAChBzwC,GACAw/B,GACE,IAAIxxE,EAAe,uBAAuBwxE,IACvBzxE,EAAa8E,0BACtC,GAAI+K,EACF,MAAMA,EAERi+F,EAAGpZ,aAAa,IAAI1B,EAAa,EACAN,EAAmByb,WACnBvyC,EAAc3pB,IACjD,CACA,OAAO67D,CACT,CAEA,yBAAOprB,CAAmBwsB,EAASv/F,GACjC,MAAMw/F,EAAe1+F,EAAkB7J,EAAgBgI,MAAOsgG,EAASv/F,GACvE,OAAIw/F,EAAat/F,MACRs/F,EAAat/F,MAGlBs/F,EAAajhG,MAAM5P,OAAS,IACvBqR,EAAiB,2CAEnB,IACT,EAIF/S,EAAOC,QAAQyhF,kBAAoBA,kBC1YnC,MAAM,YAAEqqB,GAAgB,EAAQ,OAC1B,UAAE9L,GAAc,EAAQ,OACxB,YAAExiB,GAAgB,EAAQ,MAShCz9E,EAAOC,QAAQqgF,iBAPf,cAA+ByrB,EAC7B,WAAAx3F,GACEuB,MAAM,IAAImqF,EAAUxiB,EAAYQ,YAAa,IAC7CzpE,KAAK2kD,WAAWiqC,OAAS,CAC3B,aCkFFpjG,EAAOC,QAAQggG,UArFf,MACE,WAAA1rF,CAAY6xE,EAAW,EAAGosB,EAAM,GAK9Bh+F,KAAKi6F,YAAc,GAGnBj6F,KAAK2uF,YAAc,EACnB3uF,KAAK4uF,OAAS,EACd5uF,KAAKzE,aAAeq2E,EACpB5xE,KAAKiqF,aAAe,EACpBjqF,KAAK6uF,QAAUmP,EACfh+F,KAAKi+F,WAAa,EAClBj+F,KAAK+uE,OAAS,EACd/uE,KAAKk+F,QAAU,EACfl+F,KAAK+pF,oBAAsB,EAC3B/pF,KAAK8pF,QAAU,EACf9pF,KAAKmpE,QAAU,EACfnpE,KAAKgqF,6BAA+B,EAGpChqF,KAAKmqF,YAAc,KACnBnqF,KAAKy2B,YAAc,EACnBz2B,KAAK42B,WAAa,KAClB52B,KAAKwvF,YAAc,KACnBxvF,KAAK0vF,YAAc,KACnB1vF,KAAK6oE,sBAAwB,KAC7B7oE,KAAKyuE,gBAAkB,KAEvBzuE,KAAKsqF,iBAAc15F,EACnBoP,KAAKuqF,qBAAkB35F,EACvBoP,KAAKoqF,gBAAkB,EACvBpqF,KAAKqqF,oBAAsB,EAC3BrqF,KAAK+qF,eAAYn6F,EACjBoP,KAAKstF,kBAAe18F,EACpBoP,KAAK+nE,aAAe,EACpB/nE,KAAKwqF,kBAAoB,EACzBxqF,KAAKyqF,qBAAuB,EAE5BzqF,KAAKmrF,mBAAqB,KAC1BnrF,KAAK0nE,WAAa,KAClB1nE,KAAKmvF,gBAAkB,EACvBnvF,KAAKivF,aAAe,EACpBjvF,KAAKwtF,gBAAkB,EACvBxtF,KAAKutF,aAAe,EACpBvtF,KAAKkqF,gBAAkB,KASvBlqF,KAAKwwF,uBAAyB,KAC9BxwF,KAAK0wF,iBAAmB,KACxB1wF,KAAK4wF,4BAA8B,KACnC5wF,KAAKgrF,wBAA0B,KAG/BhrF,KAAKm+F,kBAAmB,EACxBn+F,KAAKxE,cAAgB,EACrBwE,KAAK4pF,cAAgB,EACrB5pF,KAAK2pF,aAAe,EACpB3pF,KAAK2oF,QAAU,KAKf3oF,KAAKgpE,gBAAiB,CACxB,CAEA,eAAAooB,CAAgBzH,EAAcC,GAC5B5pF,KAAK2pF,aAAeA,EACpB3pF,KAAK4pF,cAAgBA,EACrB5pF,KAAKxE,cAAgBmuF,EAAeC,CACtC,CAEA,cAAAyH,CAAezH,GACb5pF,KAAK4pF,cAAgBA,CACvB,aCpCFp+F,EAAOC,QAAQm2F,aA7Cf,MAUE,WAAA7hF,CAAYgiF,EAAI7kF,EAAM3J,EAAO9C,EAAQ2tG,EAAOxuF,GAC1C5P,KAAKE,MAAQhD,EACb8C,KAAK6wD,OAASt9D,EACdyM,KAAKq+F,IAAMtc,EACX/hF,KAAK2nB,QAAUl3B,EACfuP,KAAKs+F,OAASF,EACdp+F,KAAK+P,KAAOH,CACd,CACA,OAAAlP,GACE,OAAOV,KAAKE,KACd,CACA,QAAA6qC,GACE,OAAI/qC,KAAK2nB,UAAY3nB,KAAK6wD,OACjB7wD,KAAK2nB,QAAQ55B,SAAS,SAAUiS,KAAKs+F,OAAQt+F,KAAK+P,MAEpD/P,KAAK6wD,MACd,CACA,KAAAyzB,GACE,OAAOtkF,KAAKq+F,GACd,CACA,SAAA5F,GACE,OAAOz4F,KAAK2nB,OACd,CACA,QAAA+wE,GACE,OAAO14F,KAAKs+F,MACd,CACA,MAAAC,GACE,OAAOv+F,KAAK+P,IACd,CAEA,QAAAhiB,GACE,MAAO,GAAGiS,KAAKq+F,SAASr+F,KAAKE,MAAMnS,SAAS,SAASiS,KAAK+qC,YAC5D,mBChDF,MAAM,KAAExtC,GAAS,EAAQ,MAOzB/R,EAAOC,QAAQ6lG,MAAQ/zF,EAAKE,IALd,CACZ26F,OAAQ,EACRa,OAAQ,oBCJV,MAAM,OAAE53F,GAAW,EAAQ,OACrB,YAAEk2F,GAAgB,EAAQ,OAC1B,YAAEnjG,EAAW,gBAAEsH,GAAoB,EAAQ,OAC3C,UAAE+vF,GAAc,EAAQ,OACxB,YAAExiB,GAAgB,EAAQ,OAC1B,kBAAEwY,GAAsB,EAAQ,OAChC,uBAAEC,GAA2B,EAAQ,MAO3C,MAAMrU,UAAmBkqB,EAOvB,WAAAx3F,GACEuB,MAAM,IAAImqF,EAAUxiB,EAAYK,IAAK,IAGrCtpE,KAAKm2B,QAAU,EAGfn2B,KAAKqiE,wBAA0B,KAC/BriE,KAAK+1F,qBAAuB,KAE5B/1F,KAAK61F,SAAY,EAAInU,EAAuB8c,mBAE5Cx+F,KAAKy+F,kBAAoB,KACzBz+F,KAAK0+F,mBAAqB,IAC5B,CAEA,MAAAC,CAAOC,GACL,OAAQ5+F,KAAK61F,SAAW+I,CAC1B,CAEA,OAAAC,CAAQD,EAAUrrG,GACZA,EACFyM,KAAK61F,UAAY+I,EAEjB5+F,KAAK61F,WAAc+I,CAEvB,CAEA,6BAAOtxB,CAAuBh9C,EAAgBiS,EAAO7xB,EAAK8vE,GACxDn/E,EAAOkhC,aAAiBnuC,EAAa,sDACrC,MAAM0qG,EAAM,IAAIzxB,EAahB,OAZAyxB,EAAI3oE,QAAUzlB,EACV+wE,EAAkB+T,gBAClB/T,EAAkBgU,gBACtBqJ,EAAIz8B,wBAA0B9/B,EAAM5hC,WACpCU,EAAOy9F,EAAIz8B,wBAAyB,yBACpCy8B,EAAID,QAAQnd,EAAuB8c,oBAAoB,GACnDhe,GACFse,EAAID,QAAQnd,EAAuBqd,2BAA2B,GAIhED,EAAIn6C,WAAW+iB,WAAap3C,EACrBwuE,CACT,CAEA,kCAAOxwB,CAA4Bh+C,EAAgBiS,EAAOQ,EAAOryB,GAC/DrP,EAAOkhC,aAAiBnuC,EAAa,sDACrC,MAAM0qG,EAAM,IAAIzxB,EAehB,OAdAyxB,EAAI3oE,QAAUzlB,EACV+wE,EAAkBiU,qBAClBjU,EAAkBkU,qBACtBmJ,EAAI/I,qBAAuBr6F,EAAgBqB,YAAYgmC,EAAMtiC,WAC7Dq+F,EAAIz8B,wBAA0B9/B,EAAM5hC,WACpCU,EAAOy9F,EAAIz8B,wBAAyB,yBACpChhE,EAAOy9F,EAAI/I,qBAAsB,yBACjC+I,EAAID,QAAQnd,EAAuB8c,oBAAoB,GACvDM,EAAID,QAAQnd,EAAuBqd,2BAA2B,GAE9DD,EAAID,QAAQnd,EAAuBsd,sBAAsB,GAGzDF,EAAIn6C,WAAW+iB,WAAap3C,EACrBwuE,CACT,EAMFtzG,EAAOC,QAAQ4hF,WAAaA,kBC1F5B,MAAM,YAAEkqB,GAAgB,EAAQ,MAwBhC/rG,EAAOC,QAAQwqG,oBAhBf,cAAkCsB,EAIhC,WAAAx3F,GACEuB,MAAM,KAAM,MACZtB,KAAK+hF,GAAK,EACV/hF,KAAKyqE,YAAc,KACnBzqE,KAAK+8D,UAAY,KACjB/8D,KAAK02F,UAAY,KACjB12F,KAAK2oF,QAAU,KACf3oF,KAAK4pF,cAAgB,EACrB5pF,KAAKu2F,eAAiB,CACxB,mBCrBF,MAAM,KAAEh5F,GAAS,EAAQ,MA0BzB/R,EAAOC,QAAQ2qC,yBAA2B74B,EAAKE,IApBd,CAC/BosC,YAAkB,EAGlB7B,UAAkB,EAClB3R,KAAkB,EAClBqC,OAAkB,EAClBmhE,YAAkB,EAClB3xD,aAAkB,EAClBlP,OAAkB,EAClBivB,OAAkB,EAElBg3C,gBAAkB,GAClBp9D,iBAAkB,GAElBq9D,OAAkB,GAClBj3D,WAAkB,qBCtBpB,MAAM,KAAE1qC,GAAS,EAAQ,MA8DzB/R,EAAOC,QAAQ41F,mBAAqB9jF,EAAKE,IAxDd,CACzBwnF,cAAyC,EACzCC,eAAyC,EACzCtB,OAAyC,EACzCub,mBAAyC,EACzC3Z,gBAAyC,EACzCf,OAAyC,EACzCkB,UAAyC,EACzCC,QAAyC,EACzCC,UAAyC,EACzCC,SAAyC,GACzCjC,WAAyC,GACzCC,WAAyC,GACzCvwB,SAAyC,GACzCmxB,iBAAyC,GACzC0a,cAAyC,GACzCja,kBAAyC,GACzCR,uBAAyC,GACzCZ,SAAyC,GACzCa,SAAyC,GACzCC,eAAyC,GACzCgU,oBAAyC,GACzC7U,gBAAyC,GACzCC,8BAAyC,GACzCc,sBAAyC,GACzCgB,wBAAyC,GACzCX,eAAyC,GACzClB,yBAAyC,GACzC8B,uCAAyC,GACzCC,oCAAyC,GACzCC,oCAAyC,GACzCC,QAAyC,GACzChC,uBAAyC,GACzCC,wBAAyC,GACzCG,aAAyC,GACzCS,aAAyC,GACzCoB,oBAAyC,GACzCiZ,qBAAyC,GACzC3rC,YAAyC,GACzC4rC,gBAAyC,GACzCC,gBAAyC,GACzCC,oBAAyC,GACzCnb,eAAyC,GACzCob,QAAyC,GACzC7G,YAAyC,GACzC8G,oBAAyC,GACzCC,sBAAyC,GACzCC,uBAAyC,GACzCC,UAAyC,GACzC9G,wCAAyC,GACzCzT,sBAAyC,GACzCD,kBAAyC,GACzC2T,kBAAyC,GACzCxU,mBAAyC,qBC3D3C,MAAM,KAAEjnF,GAAS,EAAQ,MAWzB/R,EAAOC,QAAQ08E,yBAA2B5qE,EAAKE,IALd,CAC/B2qE,MAAQ,EACRw1B,OAAQ,oBCRV,MAAM,KAAErgG,GAAS,EAAQ,MAsCzB/R,EAAOC,QAAQ4uG,sBAAwB98F,EAAKE,IALd,CAC5B60D,mBAAoB,IACpBG,OAAoB,OAItBjnE,EAAOC,QAAQ61F,mBAAqB/jF,EAAKE,IAjCd,CACzB29F,gBAA8B,EAC9BC,aAA8B,EAC9BC,SAA8B,EAC9BN,OAA8B,EAC9B6B,WAA8B,EAC9BE,WAA8B,EAC9BpC,WAA8B,EAC9BiC,qBAA8B,EAC9BnC,SAA8B,EAC9BS,oBAA8B,EAC9BL,SAA8B,GAC9BU,mBAA8B,GAC9BuE,oBAA8B,GAC9BC,mBAA8B,GAC9B7sC,SAA8B,GAC9B8sC,eAA8B,GAC9BlD,sBAA8B,GAC9BmD,gBAA8B,GAC9BC,6BAA8B,GAC9BC,mBAA8B,GAC9BjD,cAA8B,GAC9BO,oBAA8B,GAC9BE,oBAA8B,qBC7BhC,MAAM,KAAEpgG,GAAS,EAAQ,MAyDzB/R,EAAOC,QAAQ81F,iBAAmBhkF,EAAKE,IAnDd,CAEvB2iG,QAA0B,EAC1Bpb,aAA0B,EAC1BoL,gBAA0B,EAC1Bd,gBAA0B,EAC1BC,SAA0B,EAC1BE,SAA0B,EAC1BE,SAA0B,EAC1BC,SAA0B,EAC1BqF,YAA0B,GAC1BC,mBAA0B,GAC1BvN,kBAA0B,GAC1BkI,cAA0B,GAC1BC,mBAA0B,GAC1BC,uBAA0B,GAC1BE,yBAA0B,GAC1BI,wBAA0B,GAC1BL,eAA0B,GAC1BjB,aAA0B,GAC1BwG,wBAA0B,GAC1BrF,cAA0B,GAC1BkF,wBAA0B,GAC1BpE,qBAA0B,GAE1B0C,kBAA0B,GAC1BD,qBAA0B,GAC1BE,uBAA0B,GAC1BH,oBAA0B,GAG1BpE,kBAAyB,EACzBF,wBAAyB,EACzBF,wBAAyB,EACzBK,sBAAyB,IAkB3B7jG,EAAOC,QAAQ+1F,yBAA2BjkF,EAAKE,IAfd,CAO/BozF,yBAA0B,GAC1BF,cAA0B,GAC1BF,oBAA0B,GAC1B4P,mBAA0B,GAC1BvP,qBAA0B,qBCtD5B,MAAM,KAAEvzF,GAAS,EAAQ,MA+BzB/R,EAAOC,QAAQw9E,YAAc1rE,EAAKE,IAxBd,CAClB6iG,KAAoB,EACpBC,KAAoB,EACpBC,OAAoB,EACpBC,QAAoB,EACpBC,IAAoB,EACpBC,KAAoB,EACpBC,QAAoB,EACpBC,QAAoB,EACpBz3B,OAAoB,EACpBI,UAAoB,GACpBC,YAAoB,GACpBJ,WAAoB,GACpBH,MAAoB,GACpBrV,KAAoB,GACpByV,IAAoB,GACpBw3B,KAAoB,GACpBC,WAAoB,GACpBC,UAAoB,GACpBC,mBAAoB,GACpBz2B,SAAoB,qBC3BtB,MAAM,KAAEjtE,GAAS,EAAQ,MAczB/R,EAAOC,QAAQi2F,uBAAyBnkF,EAAKE,IARd,CAC7ByjG,YAA4B,EAC5BC,aAA4B,EAC5B3C,mBAA4B,EAC5BO,0BAA4B,EAC5BqC,2BAA4B,qBCX9B,MAAM,KAAE7jG,GAAS,EAAQ,MAezB/R,EAAOC,QAAQg2F,kBAAoBlkF,EAAKE,IATd,CACxB+3F,gBAA8B,EAC9BC,gBAA8B,EAC9BC,qBAA8B,EAC9BC,qBAA8B,EAC9B0L,6BAA8B,EAC9BC,6BAA8B,oBCZhC,MAAM,KAAE/jG,GAAS,EAAQ,MAgBzB/R,EAAOC,QAAQk2F,+BAAiCpkF,EAAKE,IAVd,CACrCu7B,OAAmB,EACnBw9D,YAAmB,EACnB+K,QAAmB,EACnBC,aAAmB,EACnBC,KAAmB,EACnBC,WAAmB,EACnBC,kBAAmB,oBCbrB,MAAM,YAAE9oG,GAAgB,EAAQ,OAC1B,aAAE+oG,GAAiB,EAAQ,OAC3B,oBAAE9oG,GAAwB,EAAQ,OAClC,aAAE+oG,GAAiB,EAAQ,OAC3B,mBAAE9oG,GAAuB,EAAQ,MACjC,gBAAEC,GAAoB,EAAQ,MAC9B,mBAAEC,GAAuB,EAAQ,OACjC,aAAEC,GAAiB,EAAQ,OAC3B,uBAAEC,GAA2B,EAAQ,MAE3C3N,EAAOC,QAAQoN,YAAcA,EAC7BrN,EAAOC,QAAQmvF,qBAAuBgnB,EAAahnB,qBACnDpvF,EAAOC,QAAQqN,oBAAsBA,EACrCtN,EAAOC,QAAQsN,mBAAqBA,EACpCvN,EAAOC,QAAQuN,gBAAkBA,EACjCxN,EAAOC,QAAQwN,mBAAqBA,EACpCzN,EAAOC,QAAQo2G,aAAeA,EAC9Br2G,EAAOC,QAAQyN,aAAeA,EAC9B1N,EAAOC,QAAQ0N,uBAAyBA,YC6CxC3N,EAAOC,QAAQoN,YAzCf,MAOE,WAAAkH,CAAY+hG,EAAiBzoC,GAM3Br5D,KAAK8hG,gBAAkBA,EAOvB9hG,KAAKq5D,WAAaA,CACpB,CAMA,WAAA0oC,GACE,OAAO/hG,KAAK8hG,eACd,CAMA,aAAAE,GACE,OAAOhiG,KAAKq5D,UACd,aCxCF7tE,EAAOC,QAAQm2G,aAfM,CAMnBhnB,qBAAsB,OAMtBqnB,0BAA2B,mBChB7B,MAAM,KAAE1kG,GAAS,EAAQ,MAWzB/R,EAAOC,QAAQy2G,mBAAqB3kG,EAAKE,IALd,CACzB0kG,QAAS,EACTjoE,GAAS,oBCRX,MAAM,mBAAEgoE,GAAuB,EAAQ,MAEjCliE,EAAW,CACf9G,UAAmB,KACnB2X,QAAmB,EACnBra,aAAmB0rE,EAAmBC,QACtC7gC,eAAmB,GACnB8gC,WAAmB,GACnBC,UAAmB,KACnBC,UAAmB,KACnBC,QAAmB,KACnBC,cAAmB,KACnBrpD,QAAmB,KACnBspD,cAAmB,KACnBC,kBAAmB,MAuCrBl3G,EAAOC,QAAQk3G,eAhCf,MAIE,WAAA5iG,CAAYqQ,EAAU4vB,GACpBtmC,OAAOC,OAAOqG,KAAMoQ,EACtB,CAEA,cAAAwyF,CAAe/Y,GACb7pF,KAAKk5B,UAAY2wD,EAAO1sC,UAAUpS,WAClC/qC,KAAK6wC,QAAUg5C,EAAO1sC,UAAUpS,WAChC/qC,KAAKw2B,aAAeqzD,EAAO1sC,UAAUpS,WACrC/qC,KAAKshE,eAAiBuoB,EAAO1sC,UAAUpS,WAGvC/qC,KAAKoiG,WAAavY,EAAO1sC,UAAUpS,WACnC/qC,KAAKqiG,UAAYxY,EAAO1sC,UAAUpS,WAClC/qC,KAAKsiG,UAAYzY,EAAO1sC,UAAUpS,WAClC/qC,KAAKuiG,QAAU1Y,EAAO1sC,UAAUpS,WAEhC/qC,KAAKwiG,cAAgB3Y,EAAO1sC,UAAUpS,WAElC8+C,EAAO3sC,YACTl9C,KAAKyiG,cAAgB5Y,EAAO1sC,UAAUpS,YAEpC8+C,EAAO3sC,YACTl9C,KAAK0iG,kBAAoB1iG,KAAKyiG,cAC9BziG,KAAKyiG,cAAgB5Y,EAAO1sC,UAAUpS,WAE1C,mBClDF,MAAM,KAAExtC,GAAS,EAAQ,MAiCzB/R,EAAOC,QAAQqN,oBAAsByE,EAAKE,IAvBd,CAM1BolG,QAAW,EAOX1lG,MAAW,EAOX2lG,UAAW,aCgDbt3G,EAAOC,QAAQsN,mBAnEf,MAoBE,WAAAgH,CAAYu8D,EAAIhxD,EAASi3B,EAAO9jC,GAC9BuB,KAAK+iG,YAAczmC,EACnBt8D,KAAKgjG,SAAW13F,EAChBtL,KAAKijG,OAAS1gE,EACdviC,KAAKc,OAASrC,CAChB,CAQA,aAAAykG,GACE,OAAOljG,KAAK+iG,WACd,CAQA,gBAAAI,GACE,OAAOnjG,KAAKgjG,QACd,CAOA,QAAAI,GACE,OAAOpjG,KAAKijG,MACd,CAQA,QAAAI,GACE,OAAOrjG,KAAKc,MACd,mBC3EF,MAAM,KAAEvD,GAAS,EAAQ,MA2CzB/R,EAAOC,QAAQ63G,iBAAmB/lG,EAAKE,IArCd,CACvB0kG,QAA+B,EAC/BoB,SAA+B,EAC/BC,iBAA+B,EAC/BC,kBAA+B,EAC/BC,kBAA+B,EAC/BC,mBAA+B,EAC/BC,aAA+B,EAC/BC,UAA+B,EAC/BC,eAA+B,EAC/BC,gBAA+B,EAC/BC,YAA+B,GAC/BC,aAA+B,GAC/BC,iBAA+B,GAC/BC,kBAA+B,GAC/BC,YAA+B,GAC/BC,aAA+B,GAC/BC,gBAA+B,GAC/BC,iBAA+B,GAC/BC,qBAA+B,GAC/BC,sBAA+B,GAC/BC,eAA+B,GAC/BC,iBAA+B,GAC/BC,kBAA+B,GAC/BC,2BAA+B,GAC/BC,4BAA+B,GAC/BC,yBAA+B,GAC/BC,8BAA+B,GAC/BC,uBAA+B,GAC/BC,wBAA+B,GAC/BC,aAA+B,GAC/BC,6BAA+B,GAC/BC,kBAA+B,GAC/BC,eAA+B,GAC/BC,gBAA+B,qBCxCjC,MAAM,aAAE3D,GAAiB,EAAQ,OAC3B,UAAExoF,GAAc,EAAQ,OAExB,qBAAEwhE,GAAyBgnB,EAKjC,MAAMC,EAYJ,WAAA9hG,CAAYylG,EAAcC,EAAkBC,EAAWC,EAAQC,EAAgBrjE,EAAOsjE,GACpF7lG,KAAKwlG,aAAeA,EACpBxlG,KAAKylG,iBAAmBA,EACxBzlG,KAAK0lG,UAAYA,EACjB1lG,KAAK2lG,OAASA,EACd3lG,KAAK4lG,eAAiBA,EACtB5lG,KAAKuiC,MAAQA,EACbviC,KAAK6lG,UAAYA,EAEjB7lG,KAAK8lG,oBAAsB,KAC3B9lG,KAAK+lG,eAAgB,EACrB/lG,KAAKgmG,cAAe,EACpBhmG,KAAKsiG,WAAY,EAEjBtiG,KAAKimG,cAAgB,GAAGrrB,IAAuBgnB,EAAaK,8BAE5DjiG,KAAKkmG,cAAgB,GACrBlmG,KAAKmmG,cAAgB,KAErBnmG,KAAKomG,eAAiB,GACtBpmG,KAAKqmG,mBAAoB,EAEzBrmG,KAAKsmG,cAAgB,IACvB,CAMA,cAAAC,GACE,OAAKvmG,KAAKmmG,cAGHnmG,KAAKmmG,cAAcI,iBAFjBvmG,IAGX,CAMA,QAAAwmG,CAASC,GACP,KAAMA,aAAmB5E,GACvB,MAAM,IAAI31G,MAAM,iBAAiBu6G,KAEnC,GAAIA,IAAYzmG,KACd,MAAM,IAAI9T,MAAM,yCAElB,MAAMw6G,EAAQD,EACdC,EAAMP,cAAgBnmG,KACtBA,KAAKkmG,cAAcptF,KAAK4tF,EAC1B,CAMA,WAAAC,CAAYF,GACV,GAAIA,IAAYzmG,KACd,MAAM,IAAI9T,MAAM,8DAElB,MAAMw6G,EAAQD,EACRG,EAAa5mG,KAAKkmG,cAAchkG,QAAQwkG,GAI9C1mG,KAAKkmG,cAAcz4F,OAAOm5F,EAAY,GACtCF,EAAMP,cAAgB,IACxB,CAKA,QAAAU,GACE,MAAMV,EAAgBnmG,KAAKmmG,cAC3BA,EAAc7D,UAAY6D,EAAc7D,WAAatiG,KAAKsiG,UAC1D6D,EAAcH,aAAeG,EAAcH,cAAgBhmG,KAAKgmG,aAChEG,EAAcQ,YAAY3mG,KAC5B,CAKA,MAAAmW,GAKE,IAJInW,KAAKmmG,eACPnmG,KAAK6mG,WAGA7mG,KAAKkmG,cAAch5G,QAAQ,CAChC,MAAMw5G,EAAQ1mG,KAAKkmG,cAAc33G,QAC7Bm4G,EAAMR,eACRQ,EAAMvwF,SAERnW,KAAK2mG,YAAYD,EACnB,CAEA1mG,KAAK8mG,qBACP,CAMA,YAAAC,GACE,OAAO/mG,KAAK0lG,SACd,CAOA,SAAAsB,GACE,OAAOhnG,KAAK2lG,MACd,CAMA,QAAAvC,GACE,OAAOpjG,KAAKuiC,KACd,CAOA,iBAAA0kE,GACE,OAAOjnG,KAAK4lG,cACd,CAOA,mBAAAsB,CAAoBC,EAAuBC,GACzCpnG,KAAKsmG,cAAgBzvF,YAAW,KAC9BswF,EAAsBnnG,KAAK,GAC1BonG,EACL,CAKA,mBAAAN,GAC6B,OAAvB9mG,KAAKsmG,oBAAiD11G,IAAvBoP,KAAKsmG,gBAKxCxvF,aAAa9W,KAAKsmG,eAClBtmG,KAAKsmG,cAAgB,KACvB,CAMA,QAAAv4G,GACE,MAAO,8BAA8BiS,KAAKimG,2BACxBjmG,KAAK0lG,uBACL1lG,KAAK6lG,mBACT7lG,KAAKuiC,MAAM9hC,YAC3B,EAOFohG,EAAawF,QAAU,EAKvBxF,EAAayF,yBAA2B,IAKxCzF,EAAa0F,iBAAmB1F,EAAayF,yBAE7C97G,EAAOC,QAAQo2G,aAAeA,iBC5M9B,MAAM,KAAEtkG,GAAS,EAAQ,MA8BzB/R,EAAOC,QAAQuN,gBAAkBuE,EAAKE,IAnBd,CAKtBy8B,GAAY,EAKZstE,KAAY,EAMZC,WAAY,oBC3Bd,MAAM,KAAElqG,GAAS,EAAQ,MAyEzB/R,EAAOC,QAAQwN,mBAAqBsE,EAAKE,IAjEd,CAMzBiqG,iBAA6B,EAM7BC,kBAA6B,EAM7BC,eAA6B,EAO7BC,gBAA6B,EAM7Bn8F,gBAA6B,EAO7Bo8F,4BAA6B,EAM7BC,QAA6B,EAM7BC,aAA6B,EAM7BC,uBAA6B,EAM7B5pE,mBAA6B,cC4F/B7yC,EAAOC,QAAQ0N,uBA1Jf,MAmBE,WAAA4G,CAAY8lG,EAAWqC,EAAWC,EAAaf,GAO7CpnG,KAAK6lG,UAAYA,EAUjB7lG,KAAKkoG,UAAYA,GAAa,EAU9BloG,KAAKmoG,YAAc,MAACA,EAAqD,EAAIA,EAU7EnoG,KAAKonG,YAAcA,GAAe,IAQlCpnG,KAAKooG,sBAAuB,EAK5BpoG,KAAKqoG,YAAc,iBACrB,CAQA,YAAAC,GACE,OAAOtoG,KAAK6lG,SACd,CAMA,YAAA0C,CAAah1G,GACXyM,KAAK6lG,UAAYtyG,CACnB,CAUA,mBAAAi1G,GACE,OAAOxoG,KAAKkoG,SACd,CAOA,mBAAAO,CAAoBl1G,GAClByM,KAAKkoG,UAAY30G,CACnB,CASA,cAAAm1G,GACE,OAAO1oG,KAAKmoG,WACd,CAQA,cAAAQ,CAAep1G,GACbyM,KAAKmoG,YAAc50G,CACrB,CASA,cAAAq1G,GACE,OAAO5oG,KAAKonG,WACd,CAOA,cAAAyB,CAAet1G,GACbyM,KAAKonG,YAAc7zG,CACrB,aC7IF/H,EAAOC,QAAQq9G,0BAVf,MACE,WAAA/oG,CAAYkmG,EAAe1jE,EAAOijE,GAChC9rG,OAAOC,OAAOqG,KAAM,CAClBimG,gBACA1jE,QACAijE,gBAEJ,mBCdF,MAAM7qB,EAAa,EAAQ,MACrBouB,EAAa,EAAQ,MACrB79E,EAAS,EAAQ,MACjB9xB,EAAW,EAAQ,OACnB,aACJxK,EAAY,eACZC,GACE,EAAQ,OACN,UACJgtB,EAAS,UACTzC,EAAS,SACT0S,EAAQ,SACR7wB,GACE,EAAQ,OACN,SACJpD,EAAQ,aACRC,EAAY,mBACZE,GACE,EAAQ,MACN,YAAEa,GAAgB,EAAQ,OAC1B,aAAE+oG,GAAiB,EAAQ,OAC3B,eAAEe,GAAmB,EAAQ,OAC7B,oBAAE7pG,GAAwB,EAAQ,OAClC,aAAE+oG,GAAiB,EAAQ,OAC3B,mBAAE9oG,GAAuB,EAAQ,MACjC,iBAAEuqG,GAAqB,EAAQ,OAC/B,gBAAEtqG,GAAoB,EAAQ,MAC9B,mBAAEC,GAAuB,EAAQ,OACjC,uBAAEE,GAA2B,EAAQ,OACrC,0BAAE2vG,GAA8B,EAAQ,OACxC,YAAE10G,EAAW,MACXqB,GAAU,EAAQ,OAEpB,qBAAEmlF,GAAyBgnB,EAE3BoH,EAAO,KAAe,EAiB5B,MAAM9vG,EAcJ,WAAA6G,CAAYkZ,EAAOqE,EAAS2rF,GAC1B/vG,EAAagwG,eAAejwF,GAC5B,MAAM2S,EAAa,IAAIzyB,EAAuB8f,EAAM4sF,UACN5sF,EAAMivF,UACNjvF,EAAMkvF,YACNlvF,EAAMmuF,aACpD1tG,OAAOC,OAAOqG,KACA,CACEmpG,qBAA+B,CAAC,EAChCC,gBAA+B,CAAC,EAChCluF,WAA+B,EAC/BmuF,yBAA+B,KAC/BC,8BAA+B,KAC/BluF,YAA+BwQ,EAC/BrO,SAA+BD,EAC/BisF,WAA+BN,IAE/CjpG,KAAKwpG,kBAAkBlsF,EACzB,CAMA,iBAAAksF,CAAkBlsF,GAChBtd,KAAKspG,8BAAgChsF,EAAQojE,iBAC7C1gF,KAAKqpG,yBAA2B/rF,EAAQujE,mBACxCvjE,EAAQwjE,iBAAiB,IAAIioB,EAAW1wG,iBAAgB,CAACnE,EAAGmX,KAC1DrL,KAAKypG,eAAep+F,EAAQ,GAC3BrL,OACHsd,EAAQqjE,eAAe3gF,KAAK0pG,uBAAuB1pG,KAAKspG,+BAC1D,CAUA,sBAAAI,CAAuBC,GACrB,OAAO,IAAIZ,EAAWvwG,oBAAmB,CAAC8kB,EAASuiD,EAAcxG,EAAYuwC,KAC3E5pG,KAAK6pG,oBAAoBF,EAAcrsF,EAASuiD,EAAcxG,EAAYuwC,EAAU,GACnF,KACL,CAUA,mBAAAC,CAAoBF,EAAcrsF,EAASuiD,GAEzC,IADkB7/D,KAAK8pG,qBAAqBxsF,EAASuiD,GAEnD,OAEF,MAAMkqC,EAAeJ,EAAatwC,WAC7B0wC,EAGHJ,EAAa5vC,uBAAuBz8C,EAASuiD,EAAckqC,GAF3DJ,EAAa5vC,uBAAuBz8C,EAASuiD,EAIjD,CAMA,mBAAAmqC,CAAoB3+F,GAClB,MAAM0+F,EAAe/pG,KAAKqpG,yBAAyBhwC,WAC9C0wC,EAGH/pG,KAAKqpG,yBAAyBjwC,oBAAoBp5D,KAAKud,SAAUlS,EAAS0+F,GAF1E/pG,KAAKqpG,yBAAyBjwC,oBAAoBp5D,KAAKud,SAAUlS,EAIrE,CAQA,oBAAAy+F,CAAqBxsF,EAAS/H,GAC5B,OAAQA,EAAMymD,kBACZ,KAAK+sC,EAAWtwG,iBAAiB4lC,mBACjC,KAAK0qE,EAAWtwG,iBAAiB2lC,gBAC/B,OAAOp+B,KAAKiqG,yBAAyB10F,GACvC,KAAKwzF,EAAWtwG,iBAAiB6wB,WAE/B,OADAtpB,KAAKkc,WACE,EACT,QAEE,OADsC3G,EAAMymD,kBACrC,EAEb,CAOA,wBAAAiuC,CAAyB10F,GAEvB,GAA8B,OAAzBA,EAAM3J,qBAAoDhb,IAAzB2kB,EAAM3J,kBACrC2J,EAAM3J,0BAA0Bk9F,IAClCvzF,EAAM3J,eAAe45F,eAAiBxlG,KACzC,OAAO,EAET,MAAM6pE,EAAU7pE,KAAKkqG,uBAAuB30F,EAAM3J,eAAeq6F,eACjE,OAAKp8B,EAIDt0D,EAAMymD,mBAAqB+sC,EAAWtwG,iBAAiB2lC,iBACzDp+B,KAAKmqG,2BAA2BtgC,EAASt0D,EAAM3J,eAAe22B,QACvD,IAETviC,KAAKoqG,yBAAyBvgC,EAASt0D,IAChC,IARLta,EAAS,gDAAgDsa,EAAM3J,eAAe22B,UACvE,EAQX,CAOA,0BAAA4nE,CAA2BE,GAEzB,MAAMxgC,EAAUwgC,EAChBxgC,EAAQi8B,oBAAsB,KAC9B9lG,KAAKsqG,mBAAmBzgC,EAC1B,CAMA,wBAAAugC,CAAyBvgC,GACvB7pE,KAAKuqG,kBAAkB1gC,EAAS7wE,EAAgBwuG,KAAMvuG,EAAmBolC,mBAC3E,CAMA,uBAAAmsE,CAAwB3gC,GACtB,GAAIA,EAAQq8B,cAAch5G,OAGxB,YADqC28E,EAAQq8B,cAAch5G,OAG7D,GAAI28E,EAAQi8B,oBAGV,OAEF,GAA8B,OAA1Bj8B,EAAQy8B,gBAA4Bz8B,EAAQk8B,cAE9C,OAEF,GAAIl8B,EAAQs8B,cAAe,CAEzB,MAAMsE,EAAS5gC,EAAQs8B,cAIvB,OAHAt8B,EAAQ1zD,SACRnW,KAAK0qG,mBAAmB7gC,QACxB7pE,KAAKwqG,wBAAwBC,EAE/B,CAGA,IAAIj0C,EACAlrD,EACJ,GAAIu+D,EAAQy4B,UACV9rC,EAAOx9D,EAAgByuG,WACvBn8F,EAAUrS,EAAmB+uG,kBACxB,GAAIn+B,EAAQm8B,aACjBxvC,EAAOx9D,EAAgBkhC,GAErB5uB,EADEu+D,EAAQw8B,kBACAptG,EAAmB0uG,kBAEnB1uG,EAAmByuG,qBAE1B,KAAI79B,EAAQk8B,cAIjB,MAAM,IAAI75G,MAAM,+BAHhBsqE,EAAOx9D,EAAgByuG,WACvBn8F,EAAUrS,EAAmB8uG,OAG/B,CACA/nG,KAAKuqG,kBAAkB1gC,EAASrT,EAAMlrD,EACxC,CAOA,aAAAq/F,CAAcxE,EAAeyE,GAC3B,MAAMC,EAAcD,EAAelI,kBAAkBvlD,UAAUpS,WAGzD+/D,EAAe,IAAIjJ,EAAa7hG,KACAsjG,EAAiBgB,gBACjB6B,EAAcT,UACd,IAAI7sG,EAAYmwG,EAAM,MACtB7C,EAAcP,eACdO,EAAc5jE,MACdsoE,GAEtC1E,EAAcK,SAASsE,GAEvB9qG,KAAK+qG,iBAAiBD,GACtBA,EAAa5D,oBAAoBhuG,EAAa8xG,2BACbhrG,KAAKob,YAAYgsF,aAClDpnG,KAAKsqG,mBAAmBQ,EACA,KACA,MACA,EAC1B,CAOA,YAAAG,CAAa9E,EAAeyE,GAI1B,MAAMM,EAAc,IAAIrJ,EAAa7hG,KACAsjG,EAAiBkB,qBACjB2B,EAAcT,UACd,IAAI7sG,EAAYmwG,EAAM,MACtB7C,EAAcP,eACdO,EAAc5jE,MACd4jE,EAAcN,WAEnDM,EAAcK,SAAS0E,GAEvBlrG,KAAK+qG,iBAAiBG,GACtBA,EAAYhE,oBAAoBhuG,EAAa8xG,2BACbhrG,KAAKob,YAAYgsF,aACjDpnG,KAAKsqG,mBAAmBY,EACAN,EAAevI,UACfuI,EAAezxD,QACzC,CAMA,cAAAswD,CAAep+F,GAEb,MAAM46F,EAAgB56F,EAAQsrC,mBACxBkzB,EAAUo8B,QACZ,KACAjmG,KAAKmpG,qBAAqBlD,GAG9B,IAAKp8B,EAIH,YAHI7pE,KAAKmrG,kBAAkB9/F,IACzBrL,KAAKgqG,oBAAoB3+F,IAQ7Bw+D,EAAQi9B,sBACR,MAAMsE,EAAc//F,EAAQsvC,kBACtBkvC,EAASuhB,GAAeA,EAAYrgE,WAc1C,GAbK8+C,IACH/9D,EACE,gEACAs/E,iBAA2BvhB,MAC7B7pF,KAAKuqG,kBAAkB1gC,EAAS7wE,EAAgBwuG,KAAMvuG,EAAmB2uG,iBAI3E5nG,KAAKqrG,SAASjyG,EAASmnF,qBACvB1W,EAAQk8B,eAAgB,EAIpBl8B,EAAQ08B,iBAAiBF,kBAG3B,OAFArmG,KAAKqrG,SAASjyG,EAASkyG,6CACvBtrG,KAAKwqG,wBAAwB3gC,GAI/B,GAAKggB,EAKL,IAEE,MAAM/4F,EAAS,IAAI6xG,EACnB7xG,EAAO8xG,eAAe/Y,GACtB/4F,EAAOqoD,QAAU9tC,EAAQ+tC,aACrBtoD,EAAOwwE,gBACsBxwE,EAAOwwE,eAEV,IAAxBxwE,EAAO0lC,cAA+C,mBAAzB1lC,EAAOwwE,iBACtCx1C,EAAS,+CAA+Ch7B,EAAOwwE,wBAAwBxwE,EAAO0lC,gBAC9Fx2B,KAAKuqG,kBAAkB1gC,EAAS7wE,EAAgBwuG,KAAMvuG,EAAmB4uG,kBAG7Eh+B,EAAQy4B,UAAYz4B,EAAQy4B,WAAaxxG,EAAOwxG,UAEhD,MAAM93D,EAAWtxC,EAAaqyG,qBAAqB1hC,EAAS/4E,GAQ5D,GANAkP,KAAKqrG,SAASjyG,EAASoyG,aAAchhE,EAASt9C,QAE1C4D,EAAOyxG,SACTviG,KAAKirG,aAAaphC,EAAS/4E,GAGzBA,EAAO4xG,kBAET,KAAO5xG,EAAO4xG,kBAAkBxlD,WAC9Bl9C,KAAK2qG,cAAc9gC,EAAS/4E,GAI5B05C,GACFA,EAAS18B,SAAS0gC,IAChBxuC,KAAKgqG,oBAAoBx7D,EAAE,IAG/BxuC,KAAKwqG,wBAAwB3gC,EAC/B,CAAE,MAAO4hC,GACP3/E,EAAS,8CAA8C2/E,EAAUp/F,SACjErM,KAAKuqG,kBAAkB1gC,EAAS7wE,EAAgBwuG,KAAMvuG,EAAmB2uG,eAC3E,MA3CE97E,EAAS,+EA4Cb,CAOA,iBAAAq/E,CAAkB9/F,GAGhB,OAAIA,EAAQsrC,qBACRtrC,EAAQsrC,mBAAmB35C,WAAW49E,IACpC56E,KAAKqpG,yBAAyBhwC,sBAAsBngE,EAQnDQ,OAAO8F,KAAKQ,KAAKmpG,sBAAsBh3F,OAAMu5F,GAClD1rG,KAAK2rG,uBAAuB3rG,KAAKmpG,qBAAqBuC,GAAWrgG,MARjEpQ,EAAS,mGAET+E,KAAKqrG,SAASjyG,EAASyuE,uBAChB,EAMX,CAQA,sBAAA8jC,CAAuBtB,EAAWh/F,GAChC,MAAMw+D,EAAUwgC,EAEhB,OADAxgC,EAAQm8B,cAAe,EACfn8B,EAAQ+7B,gBACd,KAAK9sG,EAAoBqE,MAEvB,OADA0sE,EAAQu8B,eAAettF,KAAKzN,IACrB,EAET,KAAKvS,EAAoB+pG,QAIvB,OAHKh5B,EAAQw8B,mBACXrmG,KAAK4rG,gBAAgB/hC,IAEhB,EAET,QACE,OAAO,EAEb,CAMA,eAAA+hC,CAAgBvB,GACd,MAAMxgC,EAAUwgC,EAChBxgC,EAAQw8B,mBAAoB,EAC5BrmG,KAAK6rG,sBAAsB7yG,EAAgBkhC,GAAIjhC,EAAmB0uG,mBAGlE9wF,YAAW,KACT3d,EAAa4yG,gBAAgBjiC,EACA7wE,EAAgBkhC,GAChBjhC,EAAmB0uG,kBACnB99B,EAAQu5B,WACR,KAAK,GACjC,EACL,CAcA,OAAAlnF,GACsBxiB,OAAO8F,KAAKQ,KAAKmpG,sBAClCz2G,KAAIuzG,GAAiBjmG,KAAKmpG,qBAAqBlD,KAC/C53F,QAAOw7D,GAAWA,aAAmBg4B,IAC5B/zF,SAAS+7D,IACnB7pE,KAAKuqG,kBAAkB1gC,EACA7wE,EAAgByuG,WAChBxuG,EAAmBgvG,uBAAuB,IAEnEjoG,KAAKmpG,qBAAuB,GAE5BnpG,KAAKud,SAASojE,eAAe3gF,KAAKspG,+BAClCtpG,KAAKud,SAASujE,iBAAiB9gF,KAAKqpG,0BAEpCrpG,KAAKkb,WAAY,CACnB,CAQA,aAAAyB,GACE,OAAO3c,KAAKob,WACd,CA4BA,gBAAA2wF,CAAiBrG,EAAWnjE,EAAO65C,EAAWwpB,EAAgBD,GAC5D,GAAyB,IAArBqG,UAAU9+G,OACZ,MAAM,IAAI2B,EAAe,gEACvBm9G,UAAU9+G,UAEd,GAAyB,kBAAdkvF,EACT,MAAM,IAAIvtF,EACR,uEAAuEutF,GAE3E,GAAyB,iBAAdspB,GAA0B5nE,OAAO9wC,MAAM04G,GAChD,MAAM,IAAI72G,EAAe,oBAAqBD,EAAa+a,uBAAwB,MAErF,GAAI3J,KAAKopG,gBAAgB1D,GACvB,MAAM,IAAI72G,EAAe,mDAE3B,KAAM0zC,aAAiBnuC,GACrB,MAAM,IAAIvF,EAAe,gBAAiBD,EAAa+a,8BAAgC44B,GAGzF,GADAA,EAAM1hC,WACA+kG,IAAmB9sG,EAAoBgqG,WAAa8C,IACtD9sG,EAAoB+pG,SAAW+C,IAAmB9sG,EAAoBqE,MACxE,MAAM,IAAItO,EAAe,2BAA4BD,EAAa8E,wBAEpE,GAAI6uC,EAAM3jC,gBAAkBgnG,IAAmB9sG,EAAoBgqG,UACjE,MAAM,IAAIj0G,EAAe,2DACvBD,EAAa8a,oBAEjB,KAAMi8F,aAAkB9sG,GACtB,MAAM,IAAIhK,EAAe,oDAE3B,GAAImR,KAAKkb,UAIP,YAHAhiB,EAAa+yG,qBAAqBtG,EAAQD,EAAW1sG,EAAgBwuG,KACnCvuG,EAAmBgvG,uBAAwB1lE,EAC3C,wDAGpC,GAAIviC,KAAKud,SAASrC,UAIhB,YAHAhiB,EAAa+yG,qBAAqBtG,EAAQD,EAAW1sG,EAAgBwuG,KACnCvuG,EAAmB4uG,gBAAiBtlE,EACpC,kDAIpC,MAAMsnC,EAAU,IAAIg4B,EAAa7hG,KAC/BsjG,EAAiBgB,gBACjBoB,EACAC,EACAC,EACArjE,EACAviC,KAAKob,YAAYyqF,WAEbqG,EAAsBxyG,OAAO8F,KAAKQ,KAAKmpG,sBAAsB96F,QAAOJ,GACxEjO,KAAKmpG,qBAAqBl7F,GAAKs0B,MAAM9hC,YAAc8hC,EAAM9hC,YAE3D,GAAIyrG,EAAoBh/G,OAAQ,CAE9B,MAAMi/G,EACJvG,IAAmB9sG,EAAoBgqG,UACnCoJ,EACAA,EAAoB79F,QAAOhe,GAC3B2P,KAAKmpG,qBAAqB94G,GAAGu1G,iBAAmB9sG,EAAoBgqG,YAC1E,GAAIqJ,EAAaj/G,OAAQ,CACvB,MAAMk/G,EAAkBpsG,KAAKmpG,qBAAqBgD,EAAa,IAO/D,OANAlxG,EAAS,oBAAoBmxG,kCAAgDviC,KAE7E7pE,KAAK+qG,iBAAiBlhC,QACtB7pE,KAAKuqG,kBAAkB1gC,EACA7wE,EAAgBwuG,KAChBvuG,EAAmB6uG,4BAE5C,CACF,CAKA,GAHA9nG,KAAK+qG,iBAAiBlhC,GACtBA,EAAQq9B,oBAAoBhuG,EAAa8xG,2BACbhrG,KAAKob,YAAYgsF,aACzChrB,EAAW,CACb,MAAMiwB,EAA0B,IAAIvD,EAA0Bj/B,EAAQo8B,cAAe1jE,EACnFviC,MAGF,OAFA6pE,EAAQyiC,qBAAuBD,OAC/BrsG,KAAKud,SAAS6+D,UAAU75C,GAAO,EAAM8pE,EAEvC,CACArsG,KAAKsqG,mBAAmBzgC,EAC1B,CAQA,yBAAA0iC,CAA0BjvF,EAASuiD,EAAcxG,GAC/Cr5D,KAAKuqG,kBAAkBlxC,EAAW0tC,eACX/tG,EAAgBwuG,KAChBvuG,EAAmB2uG,eAC5C,CAMA,gBAAAmD,CAAiBlhC,GACf7pE,KAAKmpG,qBAAqBt/B,EAAQo8B,eAAiBp8B,EAC9CA,EAAQs8B,gBACXnmG,KAAKopG,gBAAgBv/B,EAAQ67B,WAAa77B,EAE9C,CAOA,sBAAAqgC,CAAuBjE,GACrB,OAAOjmG,KAAKmpG,qBAAqBlD,EACnC,CAYA,kBAAAqE,CAAmBzgC,EAASw4B,EAAWpzE,EAAau9E,GAClD,MAAMnhG,EAAU,IAAIsvE,EAAWlmF,QAG/B4W,EAAQu0C,iBAAiBiqB,EAAQo8B,eAC7Bh3E,EACF5jB,EAAQ80C,eAAelxB,GAEvB5jB,EAAQ80C,eACN1qD,EAAMwG,eAAe+D,KAAKob,YAAYitF,YAAcx+B,EAAQg8B,YAEhEx6F,EAAQ03C,WAAWttD,EAAMwG,eAAe+D,KAAKud,SAASmgE,uBAAuBtE,gBAC7E/tE,EAAQ00C,gBAAgB8pB,EAAQ47B,mBAAqBnC,EAAiBgB,iBAGtE,MAAMza,EAAS,IAAI7xF,EACnB6xF,EAAO75B,SAASl4D,EAAa2zD,OAAQoe,EAAQ47B,kBAC7C5b,EAAO75B,SAASl4D,EAAa2zD,OAAQo2C,EAAawF,SAClDxd,EAAO75B,SAASl4D,EAAautD,OAAQwkB,EAAQtnC,MAAM9hC,WACnDopF,EAAO75B,SAASl4D,EAAa2zD,OAAQo2C,EAAa0F,kBAEzB,iBAAdlF,GAETxY,EAAO75B,SAASl4D,EAAa2zD,OAAQ42C,GAGvCxY,EAAO75B,SAASl4D,EAAa2zD,OAAQzrD,KAAKob,YAAY+sF,aACtDte,EAAO75B,SAASl4D,EAAa2zD,OAAQzrD,KAAKob,YAAY8sF,WAClDr+B,EAAQ47B,mBAAqBnC,EAAiBgB,iBAChDza,EAAO75B,SAASl4D,EAAamzD,KACbjrD,KAAKob,YAAYgtF,uBAA0BoE,GAG7D3iB,EAAO75B,SAASl4D,EAAamzD,MAAM,GAC/B4e,EAAQ47B,mBAAqBnC,EAAiBgB,iBAChDza,EAAO75B,SAASl4D,EAAa2zD,OAAQ5tB,KAAK4uE,MAAMzsG,KAAKob,YAAYgsF,YAAc,MAIjF/7F,EAAQ45C,gBAAgBptD,EAASm2D,OAAOl2D,EAAa8iD,OAAQivC,IAC7D,IAEE7pF,KAAKud,SAAS8gD,KAAKhzD,GAEdw+D,EAAQs8B,eACXnmG,KAAKqrG,SAASjyG,EAASszG,mBAE3B,CAAE,MAAO5sF,GACPgM,EAAS,2BAA2BhM,EAAEzU,WACtCrL,KAAKuqG,kBAAkB1gC,EAAS7wE,EAAgBwuG,KAAMvuG,EAAmB2uG,eAAgB9nF,EAC3F,CACF,CAQA,QAAAurF,CAASvuF,EAAUvpB,GACZyM,KAAKud,WAILvd,KAAKupG,WAIVvpG,KAAKupG,WAAWvsF,QAAQF,EAAUvpB,GAHhCu4B,EAAS,oDAIb,CAOA,kBAAA4+E,CAAmB7gC,UACV7pE,KAAKmpG,qBAAqBt/B,EAAQo8B,sBAClCjmG,KAAKopG,gBAAgBv/B,EAAQ67B,UACtC,CAOA,qBAAAmG,CAAsB/hE,EAAYx+B,GAChC,OAAQw+B,GACN,KAAK9wC,EAAgBkhC,GACnBl6B,KAAKqrG,SAASjyG,EAASuzG,2BACnBrhG,IAAYrS,EAAmB0uG,mBACjC3nG,KAAKqrG,SAASjyG,EAASwzG,iCAEzB,MACF,KAAK5zG,EAAgByuG,WACnBznG,KAAKqrG,SAASjyG,EAASyzG,mCACvB,MACF,KAAK7zG,EAAgBwuG,KACnBxnG,KAAKqrG,SAASjyG,EAAS0zG,6BACvB,MACF,QACE,MAAM,IAAI5gH,MAAM,mCAEtB,CASA,iBAAAq+G,CAAkBF,EAAWvgE,EAAYx+B,EAAS7M,GAChD,MAAMorE,EAAUwgC,EAAU9D,iBAC1B,IAAKvmG,KAAKmpG,qBAAqBt/B,EAAQo8B,eAErC,OAEF,MAAMN,EAAS97B,EAAQ87B,OACvB,IAAKA,EAEH,YADA1qG,EAAS,iCAAiC4uE,oBAI5C,IADiB87B,EAAO5D,cAGtB,YADA9mG,EAAS,4BAA4B4uE,oBAGvC,MAAMtnC,EAAQsnC,EAAQu5B,WACjB7gE,GACHtnC,EAAS,yBAAyB4uE,KAEpCA,EAAQu8B,eAAet4F,SAAQxe,GAAQ0Q,KAAKgqG,oBAAoB16G,KAIhEu6E,EAAQ1zD,SACRnW,KAAK0qG,mBAAmB7gC,GAEnBA,EAAQw8B,oBAEXrmG,KAAK6rG,sBAAsB/hE,EAAYx+B,GACvCpS,EAAa4yG,gBAAgBjiC,EAAS//B,EAAYx+B,EAASi3B,EAAO9jC,GAEtE,CAQA,2BAAO8sG,CAAqBlB,EAAWv5G,GACrC,IAAKA,EAAO2xG,cACV,MAAO,GAIT,MAAMj4D,EAAW,GACXq/B,EAAUwgC,EAChB,KAAOv5G,EAAO2xG,cAAcvlD,WAAW,CACrC2sB,EAAQm8B,cAAe,EACvB,MAAM12G,EAAOwB,EAAO2xG,cAActlD,UAAUpS,WACtCgiE,EAAe7hF,EAAOpwB,MAAMC,OAAOC,sBAAsB1L,EAAM,GACrE,IAAKy9G,EACH,SAEF,MAAMtqD,EAAc3xD,EAAOwxG,UACvB3nB,EAAW1kF,mBAAmBk/C,QAC9BwlC,EAAW1kF,mBAAmBi/C,OAClC63D,EAAavqD,gBAAgBC,GAC7BsqD,EAAattD,mBAAmBoqB,EAAQ67B,WACxCl7D,EAAS1xB,KAAKi0F,EAChB,CAEA,OADaviE,EAASt9C,OACfs9C,CACT,CAOA,iCAAOwgE,CAA2BgC,GAChC,MAAMl8E,EAAUk8E,EAAaxH,aACxB10E,EAAQo5E,uBAAuB8C,EAAa/G,gBAUjDn6E,EAAS,WAAWkhF,eACpBl8E,EAAQy5E,kBAAkByC,EAAazG,iBAAkBvtG,EAAgByuG,WAC/CxuG,EAAmByS,kBAX3CogB,EAAS,eAAekhF,mCAY5B,CAWA,sBAAOlB,CAAgBjiC,EAAS//B,EAAYx+B,EAASi3B,EAAO9jC,GAC1D,MAAMknG,EAAS97B,EAAQ87B,OACNA,EAAO5D,aACxBx5E,CAASshD,EAAQ67B,UACR,IAAI3sG,EAAmB+wC,EAAYx+B,EAASi3B,EAAO9jC,GACnDknG,EAAO3D,gBAClB,CAWA,2BAAOiK,CAAqBtG,EAAQD,EAAW57D,EAAYx+B,EAASi3B,EAAO9jC,GACxDknG,EAAO5D,aACxBx5E,CAASm9E,EACA,IAAI3sG,EAAmB+wC,EAAYx+B,EAASi3B,EAAO9jC,GACnDknG,EAAO3D,gBAClB,CAOA,qBAAOkH,CAAejwF,GACpB,GAAkC,iBAArBA,EAAe,UAC1B,MAAM,IAAIpqB,EAAe,uCAAwCD,EAAa+a,wBAKhF,GAAIlU,EAAMwG,eAAegd,EAAM4sF,WAAWjnG,eACxC,MAAM,IAAI/P,EACR,sBAAsBoqB,EAAM4sF,iDAC5Bj3G,EAAa8E,wBAEjB,GAAkC,iBAArBulB,EAAe,UAC1B,MAAM,IAAIpqB,EAAe,uCAAwCD,EAAa+a,wBAEhF,GAAIsP,EAAMivF,UAAY,EACpB,MAAM,IAAIr5G,EAAe,4CAA6CD,EAAa8E,wBAErF,GAAoC,iBAAvBulB,EAAiB,YAC5B,MAAM,IAAIpqB,EAAe,yCAA0CD,EAAa+a,wBAElF,GAAIsP,EAAMkvF,YAAc,EACtB,MAAM,IAAIt5G,EAAe,8CAA+CD,EAAa8E,wBAEvF,GAAoC,iBAAvBulB,EAAiB,YAC5B,MAAM,IAAIpqB,EAAe,yCAA0CD,EAAa+a,wBAElF,GAAIsP,EAAMmuF,YAAc,IACtB,MAAM,IAAIv4G,EAAe,iDAAkDD,EAAa8E,uBAE5F,EAIFlI,EAAOC,QAAQyN,aAAeA,kBC36B9B,MAAM,MAAEmhB,GAAU,EAAQ,OACpB,YAAEijD,GAAgB,EAAQ,OAC1B,SAAElkE,GAAa,EAAQ,MAE7B5N,EAAOC,QAAU,CACf4uB,QACAjhB,WACAkkE,+BCPF,MAAM,SAAElkE,GAAa,EAAQ,MAE7B5N,EAAOC,QAAU,CACf6xE,YAAa,CACXG,oBAAqB,CACnBrkE,EAAS4tE,eACT5tE,EAAS6tE,mBACT7tE,EAAS8tE,uBAEX1J,qBAAsB,CACpBpkE,EAASguE,gBACThuE,EAASiuE,oBACTjuE,EAASkuE,wBAEX1J,2BAA4B,CAC1BxkE,EAAS4tE,eACT5tE,EAAS6zG,0BACT7zG,EAAS8zG,8BAEXrvC,iCAAkC,CAChCzkE,EAASguE,gBACThuE,EAAS+zG,gCACT/zG,EAASg0G,oCAEXzvC,oBAAqB,CACnBvkE,EAASi0G,eACTj0G,EAASk0G,mBACTl0G,EAASm0G,uBAEX7vC,qBAAsB,CACpBtkE,EAASo0G,gBACTp0G,EAASq0G,oBACTr0G,EAASs0G,0CChCf,MAAM,KAAEnwG,GAAS,EAAQ,MA4NzB/R,EAAOC,QAAQ2N,SAAWmE,EAAKE,IAnNd,CAOf0pE,oBAAgC,EAIhCJ,mBAAgC,EAIhCK,gBAAgC,EAIhCJ,eAAgC,EAIhCqI,iBAAgC,EAIhCD,gBAAgC,EAIhCD,gBAAgC,EAIhC8Q,mBAAgC,EAIhCnR,oBAAgC,EAIhCD,mBAAgC,EAIhC2+B,gBAAgC,GAIhCH,eAAgC,GAIhCn+B,iBAAgC,GAIhCD,gBAAgC,GAIhCD,0BAAgC,GAIhCuR,oBAAgC,GAIhC1Y,qBAAgC,GAMhCnxC,+BAAgC,GAShCg2E,mBAAwC,GAKxCC,0BAAwC,GAKxCG,4BAAwC,GAKxCxB,uCAAwC,GAKxCE,aAAwC,GAKxCqB,kCAAwC,GAKxCD,gCAAwC,GAOxCvlC,oBAAoC,GAIpCJ,mBAAoC,GAIpCK,uBAAoC,GAIpCJ,sBAAoC,GAIpCimC,gCAAoC,GAIpCF,0BAAoC,GAIpCG,mCAAoC,GAIpCF,6BAAoC,GAIpCr/D,aAAoC,GAIpC8/D,gBAAoC,GAIpC5+D,eAAoC,GAIpC0+D,oBAAoC,GAIpCH,mBAAoC,GAIpCI,uBAAoC,GAIpCH,sBAAoC,GAKpClyE,SAAoC,GAIpCjB,qBAAoC,GAIpCd,gCAAoC,GAIpCqB,wBAAoC,GAIpCQ,mBAA0B,GAI1BD,iBAA0B,GAI1BE,mBAA0B,qBCzN5B,MAAM,aAAE7oB,GAAiB,EAAQ,OAC3B,SAAEnZ,GAAa,EAAQ,MAqC7B5N,EAAOC,QAAQ4uB,MAhCf,cAAoB9H,EAClB,WAAAxS,CAAY0qG,GACVnpG,QAEAtB,KAAK4tG,QAAUnD,EACfzqG,KAAK6tG,UAAY,GACjBz0G,EAASkV,OAAOR,SAASva,IACvByM,KAAK6tG,UAAUt6G,GAAS,CAAC,GAE7B,CAEA,UAAAwoB,GACE/b,KAAKuT,KAAK,SAGVvT,KAAK6tG,UAAY7tG,KAAK6tG,UAAUn7G,KAAI,IAAM,GAC5C,CAEA,OAAAsqB,CAAQF,EAAUvpB,EAAQ,GAExByM,KAAK6tG,UAAU/wF,IAAavpB,EACxByM,KAAK4tG,SACP5tG,KAAK4tG,QAAQ5wF,QAAQF,EAAUvpB,EAEnC,CAEA,OAAAspB,CAAQC,GACN,OAAO9c,KAAK6tG,UAAU/wF,EACxB,mBClCF,MAAM,UAAEurD,GAAc,EAAQ,OACxB,sBAAEhiC,GAA0B,EAAQ,OACpC,eAAEhtC,GAAmB,EAAQ,OAC7B,iBAAEyxE,GAAqB,EAAQ,OAC/B,kBAAExxE,GAAsB,EAAQ,OAChC,oBAAEsvC,GAAwB,EAAQ,OAClC,0BAAEuhC,GAA8B,EAAQ,OACxC,uBAAE2jC,GAA2B,EAAQ,MAG3CtiH,EAAOC,QAAQ48E,UAAYA,EAC3B78E,EAAOC,QAAQ46C,sBAAwBA,EACvC76C,EAAOC,QAAQ4N,eAAiBA,EAChC7N,EAAOC,QAAQq/E,iBAAmBA,EAClCt/E,EAAOC,QAAQ6N,kBAAoBA,EACnC9N,EAAOC,QAAQm9C,oBAAsBA,EACrCp9C,EAAOC,QAAQ0+E,0BAA4BA,EAC3C3+E,EAAOC,QAAQqiH,uBAAyBA,WCjBxC,MAAMC,EACJ,WAAAhuG,CAAYiuG,EAASC,EAAkB3wF,GACrCtd,KAAKqZ,QACLrZ,KAAKkuG,SAAWF,EAChBhuG,KAAKmuG,kBAAoBF,EACzBjuG,KAAKud,SAAWD,CAClB,CAEA,KAAAjE,GACErZ,KAAKouG,oBAAsB,CAC7B,CAEA,kBAAAtnC,GAME,QAJM9mE,KAAKouG,qBAAuBL,EAAcM,sBAC9CruG,KAAKouG,oBAAsB,GAGtBpuG,KAAKouG,oBAAsBpuG,KAAKouG,oBAAsB,CAC/D,EAGFL,EAAcM,oBAAsB,SAGpC7iH,EAAOC,QAAQsiH,cAAgBA,kBCxB/B,MAAMj/G,EAAa,cAGnB,SAASw/G,EAAWhgE,EAAMxgD,EAAMZ,GAC9B,MAAMuD,EAAS3B,EAAWy/G,YAAYrhH,GACtC,IACIX,EADA4O,EAAM,EAEV,MAAMqzG,EAAOlgE,EAAK,GAElB,IADAnzC,GAAOqzG,EAAKC,KAAKh+G,EAAQ,EAAG3C,EAAM0gH,EAAKthH,QAClCX,EAAI,EAAGA,EAAI+hD,EAAKphD,QAAUiO,EAAMjO,EAAQX,IAAK,CAChD,MAAM69D,EAAM9b,EAAK/hD,GACjB4O,GAAOivD,EAAIqkD,KAAKh+G,EAAQ0K,EAAK,EAAGivD,EAAIl9D,OACtC,CACA,OAAOuD,CACT,CAGA,SAASi+G,EAAiBC,EAASC,EAAiBC,GAClD,IAAIC,EAAaF,EACbG,EAAYF,EAChB,MAAM/xG,EAAQ,GACd,IAAIvQ,EAAI,EACR,IAAKA,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACtB,KAAOoiH,EAAQG,GAAY5hH,QAAU6hH,GAGnC,GAFAA,GAAaJ,EAAQG,GAAY5hH,OACjC4hH,IACIA,GAAcH,EAAQzhH,OAAU,OAAO,KAE7C4P,EAAMvQ,GAAKoiH,EAAQG,GAAYhhD,UAAUihD,GACzCA,GACF,CAEA,OAAQjyG,EAAM,IAAM,KAAOA,EAAM,IAAM,KAAOA,EAAM,IAAM,GAAKA,EAAM,EACvE,CAUA,MAAMkyG,EACJ,WAAAjvG,CAAYkvG,GACV,IAAIC,EAAS,GACb,MAAMC,EAAWF,EACjB,IAAIxnF,EAAQ,EACRrnB,EAAU,EAWdJ,KAAKovG,SAAW,SAAkB5nF,GAChC,MAAM12B,EAAS,GACf,OAAIo+G,EAAOhiH,OAAS,GAAKs6B,EAAOC,EAAgB,MAC5CynF,EAAO,GAAGhiH,QAAUs6B,EAAOpnB,GAC7BtP,EAAO,GAAKo+G,EAAO,GACnBp+G,EAAO,GAAKsP,IAEZtP,EAAO,GAAKw9G,EAAWY,EAAQ9uG,EAASonB,GACxC12B,EAAO,GAAK,GAEPA,EACT,EAEAkP,KAAK8tD,UAAY,SAAmBnsD,GAClC,GAAIA,GAAS8lB,EAAS,OAAO,KAC7B,MAAM4nF,EAAS1tG,EAAQvB,EACvB,GAAIivG,EAASH,EAAO,GAAGhiH,OACrB,OAAOgiH,EAAO,GAAGphD,UAAUuhD,GAE7B,IAAIl0G,EAAM+zG,EAAO,GAAGhiH,OAChBX,EAAI,EACR,KAAO4O,EAAM+zG,EAAO3iH,GAAGW,QAAUmiH,GAC/Bl0G,GAAO+zG,EAAO3iH,GAAGW,OACjBX,IAEF,OAAO2iH,EAAO3iH,GAAGuhE,UAAUuhD,EAASl0G,EACtC,EAEA6E,KAAKmnD,aAAe,SAAsBxlD,GACxC,GAAIA,EAAQ,GAAK8lB,EAAS,OAAO,KACjC,MAAM4nF,EAAS1tG,EAAQvB,EACvB,GAAIivG,EAAS,EAAIH,EAAO,GAAGhiH,OACzB,OAAOgiH,EAAO,GAAG/nD,aAAakoD,GAEhC,GAAIA,EAASH,EAAO,GAAGhiH,OACrB,OAAOwhH,EAAiBQ,EAAQ,EAAGG,GAGrC,IAAIl0G,EAAM+zG,EAAO,GAAGhiH,OAChBX,EAAI,EACR,KAAO4O,EAAM+zG,EAAO3iH,GAAGW,QAAUmiH,GAC/Bl0G,GAAO+zG,EAAO3iH,GAAGW,OACjBX,IAEF,OAAI8iH,EAASl0G,EAAM,EAAI+zG,EAAO3iH,GAAGW,OACxBgiH,EAAO3iH,GAAG46D,aAAakoD,EAASl0G,GAElCuzG,EAAiBQ,EAAQ3iH,EAAG8iH,EAASl0G,EAC9C,EASA6E,KAAKsvG,IAAM,SAAa5gH,GACtB,MAAM+B,EAASu+G,EAAYO,UAAU7gH,GAC/B84B,EAAO/2B,EAAOvD,OACpB,OAAa,IAATs6B,KAEAC,EAAQD,GAAQ2nF,KAEpBD,EAAOp2F,KAAKroB,GACZg3B,GAASD,GAEF,EACT,EAEAxnB,KAAKwvG,QAAU,SAAiBhoF,GAC9B,GAAIA,EAAO,EACT,OAEF,GAAIA,GAAQC,EAEV,YADAznB,KAAKqZ,QAGP,IAAIo2F,EAAO,EACX,KAAOA,EAAOjoF,GAAM,CAClB,KAAI0nF,EAAO,GAAGhiH,OAASkT,GAAWonB,EAAOioF,GAMlC,CACLrvG,GAAYonB,EAAOioF,EACnBhoF,GAAUD,EAAOioF,EACjB,KACF,CAV+C,CAC7C,MAAMC,EAAQR,EAAO,GAAGhiH,OAASkT,EACjC8uG,EAAO3gH,QACPkhH,GAAQC,EACRjoF,GAASioF,EACTtvG,EAAU,CACZ,CAKF,CACF,EAEAJ,KAAKqZ,MAAQ,WACX61F,EAAS,GACTznF,EAAQ,EACRrnB,EAAU,CACZ,EAEAJ,KAAK6zF,UAAY,WACf,OAAOpsE,CACT,EAEAznB,KAAK7F,QAAU,WACb,OAAiB,IAAVstB,CACT,CACF,CAOA,gBAAO8nF,CAAUjgH,GACf,OAAIA,aAAgBR,EAAmBQ,EAChCR,EAAWhB,KAAKwB,EACzB,EAGF9D,EAAOC,QAAQujH,YAAcA,EAC7BxjH,EAAOC,QAAQ6iH,WAAaA,kBCrL5B,MAAM74D,EAAW,EAAQ,KACnBvqB,EAAS,EAAQ,OACjB,cAAE6iF,GAAkB,EAAQ,MAC5B,YAAEiB,GAAgB,EAAQ,OAC1B,QAAEpjH,EAAO,IAAEC,GAAQ,EAAQ,OAC3B,aAAEuuB,GAAiB,EAAQ,MAE3BtrB,EAAa,eAEb,mBAAEO,GAAuBzD,GACzB,gBAAEkI,GAAoBjI,GAItB,UAAEqP,GAAc,IAAIkf,EAAa,uBAEvC,SAASu1F,EAAcl/G,GACrB,MAAMm/G,EAAUn/G,EAAO2+G,SAASvxE,KAAKtwB,IAAI9c,EAAOojG,YAAa,KAC7D34F,EAAU,mDACRu6C,EAASthD,MAAM2F,gBAAgB81G,EAAQ,GAAG7hH,SAAS,SAAU6hH,EAAQ,KAAK,EAAM,KACpF,CAkHApkH,EAAOC,QAAQ,EA5Gf,cAA8BsiH,EAQ5B,WAAAhuG,CAAYiuG,EAASC,EAAkB3wF,GACrChc,MAAM0sG,EAASC,EAAkB3wF,GACjCtd,KAAK6vG,gBAAkB,IAAIb,EAxBI,IAyBjC,CAEA,KAAA31F,GACE/X,MAAM+X,QAEFrZ,KAAK6vG,iBAAiB7vG,KAAK6vG,gBAAgBx2F,OACjD,CAKA,YAAAy2F,CAAaxgH,GACX0Q,KAAK+vG,UAAUjhH,EAAWhB,KAAKuB,EAAmBC,IACpD,CAKA,iBAAA0gH,CAAkB1gH,GAChB0Q,KAAK+vG,UAAUjhH,EAAWhB,KAAKwB,GACjC,CAKA,YAAA2gH,CAAa3gH,GACX0Q,KAAK+vG,UAAUzgH,EACjB,CAOA,SAAAygH,CAAUzgH,GACJ0Q,KAAKud,UAEPvd,KAAKud,SAAS0nD,wBAEhB,MAAMx0E,EAASuP,KAAK6vG,gBACdK,EAAaz/G,EAAO6+G,IAAIhgH,GAC9B,IAAIukG,EAAYpjG,EAAOojG,YASvB,IAPKqc,IAEHP,EAAcl/G,GACduP,KAAKmuG,kBAAkB,4BAA4Bta,MACnD7zF,KAAK6vG,gBAAgBx2F,SAGhBw6E,EAAY,IAAI,CACrB,MAAMhjD,EAAgC,EAAtBpgD,EAAOq9D,UAAU,GACjC,GAAgB,IAAZjd,EAOF,OANA31C,EAAU,8CAA8C21C,KAExD31C,EAAU,kFACVy0G,EAAcl/G,GACduP,KAAK6vG,gBAAgBx2F,aACrBrZ,KAAKmuG,kBAAkB,4DAIzB,MAAMgC,EAAa1/G,EAAO02D,aAAa,GACvC,GAAIgpD,EAAa1/G,EAAOojG,YACtB,MAEF,MAAMuc,EAAY3/G,EAAO2+G,SAASe,GAG5B/0G,EAAc8vB,EAAOpwB,MAAMC,OAAOC,sBAAsBo1G,EAAU,GAAIA,EAAU,IACtF,IAAIh1G,IAAeA,EAAYE,UAGxB,CAGL,MAAMyhE,EAAY/8D,KAAKud,SAAWvd,KAAKud,SAAS8yF,WAAa,KACvDx1F,EAAekiD,EAAYjpE,EAAgBipE,GAAa,MAK9D,OAJA7hE,EAAU,mEAAmE2f,MAC7E80F,EAAcl/G,GACduP,KAAK6vG,gBAAgBx2F,aACrBrZ,KAAKmuG,kBAAkB,6BAEzB,CAZE19G,EAAO++G,QAAQp0G,EAAYE,UAAUE,eACrCwE,KAAKkuG,SAAS9yG,GAYhBy4F,EAAYpjG,EAAOojG,WACrB,CAEIA,GAKF7zF,KAAK6vG,gBAAgBx2F,OAEzB,mBCnIF,MAAMi3F,EAAK,EAAQ,MACbC,EAAsB,EAAQ,OAC9B,aAAE3hH,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,UAAEgtB,EAAS,UAAEzC,EAAS,SAAEne,GAAa,EAAQ,OAC7C,SAAE46D,GAAa,EAAQ,KAiJ7BrqE,EAAOC,QAAQ+kH,iBAzIf,MAUE,mBAAAC,CAAoBt6C,EAAMu6C,GACxB,GAAI1wG,KAAK2wG,OAAO76B,0BAA4B91E,KAAK2wG,OAAO76B,yBAAyB5oF,OAAS,EAAG,CAG3F,MAAM0gF,EAAU8iC,EAAc,QAC9B,IAAIE,GAAQ,EACZ,GAAIhjC,EAAS,CACX,MAAMijC,EAAKjjC,EAAY,GACvBgjC,EAAQ5wG,KAAK2wG,OAAO76B,yBAAyBr2E,MAAK5C,GAChDA,EAAK9L,gBAAkB8/G,EAAG9/G,eAE9B,CACA,IAAK6/G,EAAO,CACV,MAAMnyG,EAAQ,IAAIvS,MAAM,yDAIxB,OAHAuS,EAAM8M,OAAS,wDACf9M,EAAM03D,KAAOA,EACb13D,EAAMiyG,KAAOA,EACNjyG,CACT,CACF,CAEF,CAQA,gBAAAqyG,GAEE,MAAM73F,EAAQjZ,KAAK2wG,OACbvgG,EAAU,CAAC,EACXmjE,EACJt6D,EAAMu6D,uBAAyB+8B,EAAoBp4G,qBAAqBm6D,mBAQ1EliD,EAAwB,eAAI,gBAC5B,MAAM2gG,EAAWR,EAAoB73G,kBAAkB4hF,8BAMvD,GALAlqE,EAAuB,cAAI2gG,EAAgB,MAAIA,EAAgB,OAC9D93F,EAAMo8D,sBAAwB,IAAIvnE,SAAS8jE,IAC1CxhE,EAAuB,eAAK2gG,EAASn/B,EAAS7gF,cAAc,IAG1DkoB,EAAMs8D,gBAAiB,CACzB,MACMy7B,EADU/3F,EAAMs8D,gBAAgB3iF,MAAM,KACpBF,KAAIy/E,GAAUA,EAAOnhE,SAC7CZ,EAAiB,QAAI4gG,EAAQ/8G,KAAK,IACpC,MACEmc,EAAiB,QAAI6I,EAAMs8D,gBAY7B,GATAnlE,EAA4B,mBAAI6I,EAAM46D,uBAGlCzjE,EAA4B,oBAAK5d,MAAMwB,QAAQilB,EAAM68D,4BACvD1lE,EAA6B,oBAAIpQ,KAAKywG,oBAAoBjyG,KAAKwB,QAK5DoQ,EAA4B,oBAAKmjE,IACpCt6D,EAAM28D,gBAAkB38D,EAAM28D,eAAe1oF,OAAQ,CACrD,MAAM+jH,EAAa,GACnBh4F,EAAM28D,eAAe9nE,SAASojG,IAC5B,IACED,EAAWn4F,KAAKw3F,EAAGa,aAAaD,GAClC,CAAE,MAAOpxF,GAGP,MAFA7kB,EAAS,8BAA8Bi2G,IAAUpxF,EAAEzU,SACvByU,EAAEzT,MACxB,IAAIxd,EAAe,8BAA8BqiH,IACrDtiH,EAAakc,0BACbgV,EACJ,KAEF1P,EAAY,GAAI6gG,CAClB,CAGA,GAAI19B,EAAe,CACjB,GAAIt6D,EAAM86D,OACR,IACE3jE,EAAa,IAAIkgG,EAAGa,aAAal4F,EAAM86D,QACvC3jE,EAAoB,WAAI6I,EAAMg9D,cAChC,CAAE,MAAOn2D,GAGP,MAFA7kB,EAAS,2BAA2Bge,EAAM86D,SAAUj0D,EAAEzU,SAC1ByU,EAAEzT,MACxB,IAAIxd,EAAe,sBAAsBoqB,EAAM86D,SACnDnlF,EAAamc,mCAAoC+U,EACrD,CAEF,GAAI7G,EAAMg7D,cACR,IACE7jE,EAAa,IAAIkgG,EAAGa,aAAal4F,EAAMg7D,eACvC7jE,EAAoB,WAAI6I,EAAMm9D,qBAChC,CAAE,MAAOt2D,GAGP,MAFA7kB,EAAS,8BAA8Bge,EAAMg7D,gBAAiBn0D,EAAEzU,SACpCyU,EAAEzT,MACxB,IAAIxd,EAAe,8BAA8BoqB,EAAMg7D,gBAC3DrlF,EAAamc,mCAAoC+U,EACrD,CAEF,GAAI7G,EAAMk7D,eACR,IACE/jE,EAAc,KAAIkgG,EAAGa,aAAal4F,EAAMk7D,eAC1C,CAAE,MAAOr0D,GAGP,MAFA7kB,EAAS,mCAAmCge,EAAMk7D,iBAAkBr0D,EAAEzU,SAC1CyU,EAAEzT,MACxB,IAAIxd,EAAe,8BAA8BoqB,EAAMk7D,iBAC3DvlF,EAAamc,mCAAoC+U,EACrD,CAEJ,CAEA,MAAMs2C,EAAWP,EAAS71D,KAAKw3E,MAAMphB,SAErC,OADAhmD,EAAoB,WAAIgmD,EACjBhmD,CAET,mBChJF,MAAM,cAAE29F,GAAkB,EAAQ,KAM5B1lC,EAGG,UAGTA,EAAUC,yCAA2CylC,EAAcM,oBAEnE7iH,EAAOC,QAAQ48E,UAAYA,kBCf3B,MAAM,oBAAE+oC,GAAwB,EAAQ,OAClC,gBAAEC,GAAoB,EAAQ,OAC9B,gBAAEC,GAAoB,EAAQ,OAC9B,iBAAEC,GAAqB,EAAQ,MAErC/lH,EAAOC,QAAQ4lH,gBAAkBA,EACjC7lH,EAAOC,QAAQ2lH,oBAAsBA,EACrC5lH,EAAOC,QAAQ8lH,iBAAmBA,EAClC/lH,EAAOC,QAAQ6lH,gBAAkBA,kBCRjC,MAAM,OAAEE,GAAW,EAAQ,OACrB,SAAEv2G,EAAQ,UAAE4gB,GAAc,EAAQ,OAClC,oBAAE+sB,GAAwB,EAAQ,OAClC,0BAAEuhC,GAA8B,EAAQ,MA+L9C3+E,EAAOC,QAAQgmH,mBAlKf,cAAiCD,EAC/B,WAAAzxG,CAAYqQ,GACV9O,MAAM8O,GACNpQ,KAAK0xG,UAAW,EAChB1xG,KAAK2xG,UAAW,EAChB3xG,KAAK4xG,qBAAuBxhG,EAAQyhG,oBAGpC7xG,KAAK8xG,eAAiB,GACtB9xG,KAAK+xG,mBAAoB,EACzB/xG,KAAKgyG,YAAa,CACpB,CAEA,KAAAC,GACEjyG,KAAK0xG,UAAW,CAClB,CAEA,OAAAQ,GACElyG,KAAK2xG,UAAW,CAClB,CAEA,MAAAQ,CAAOzC,EAAOnuG,EAAUgnB,GACtB,IAAKvoB,KAAK0xG,SAAU,CAClB,IAAK1xG,KAAK+xG,oBAAsB/xG,KAAKgyG,WAEnC,YADAhyG,KAAK8xG,eAAeh5F,KAAK,CAAC42F,EAAOnnF,IAGnC,MAAM+zC,EAAKt8D,KAAK4xG,qBAAqBvzC,KAAKqxC,GAC1C,OAAQpzC,GACN,KAAK1zB,EAAoB1O,GACvBl6B,KAAK+xG,mBAAoB,EACzBxpF,IACA,MACF,KAAKqgB,EAAoB6E,SACvBztC,KAAK+xG,mBAAoB,EACzB/xG,KAAK8xG,eAAeh5F,KAAK,CAAC42F,EAAOnnF,IACjC,MACF,KAAKqgB,EAAoBwpE,4BACvBpyG,KAAKuT,KAAK,QACA,mDACV,MACF,QACEtY,EAAS,gDAAgDqhE,KAE/D,CACF,CAGA,KAAA+1C,GACOryG,KAAK0xG,UACR1xG,KAAK4xG,qBAAqBU,SAE9B,CAEA,YAAArC,CAAa3gH,GACX,IAAK0Q,KAAK0xG,SAAU,CACF1xG,KAAK8Y,KAAKxpB,IAExB0Q,KAAK4xG,qBAAqBW,OAE9B,CACF,CAGA,OAAAC,CAAQvoC,GACN,OAAQA,EAAeC,yBACrB,KAAKC,EAA0BnQ,UAC7Bh6D,KAAKyyG,YACL,MACF,KAAKtoC,EAA0B3O,WAC7Bx7D,KAAK0yG,QAAQzoC,GACb,MACF,KAAKE,EAA0BE,iBAC7BrqE,KAAK2yG,QAAQ1oC,GACb,MACF,KAAKE,EAA0B/P,gBAC7Bp6D,KAAK4yG,UACL,MACF,QACE33G,EAAS,mCAAmCgvE,EAAeC,yBAEjE,CACA,OAAAwoC,CAAQzoC,GACDjqE,KAAK0xG,UACR1xG,KAAKuT,KAAK,QAAS02D,EAAezC,aAEtC,CAEA,OAAAmrC,CAAQ1oC,GACNjqE,KAAKgyG,YAAa,EACbhyG,KAAK0xG,UAER1xG,KAAKuT,KAAK,QAEd,CAEA,OAAAq/F,GACE,IAAK5yG,KAAK0xG,SAAU,CAElB,GADA1xG,KAAK+xG,mBAAoB,EACrB/xG,KAAK8xG,gBAAkB9xG,KAAK8xG,eAAe5kH,OAAS,EAAG,CACzD,MAAM2lH,EAAe7yG,KAAK8xG,eAC1B9xG,KAAK8xG,eAAiB,GACtBe,EAAa/kG,SAAQ,EAAExe,EAAMi5B,KAAcvoB,KAAKmyG,OAAO7iH,EAAM,KAAMi5B,IACrE,CACA,IAAKvoB,KAAK+xG,kBACR,OAEF/xG,KAAKuT,KAAK,QACZ,CACF,CAEA,SAAAk/F,GACEzyG,KAAKgyG,YAAa,EACbhyG,KAAK0xG,WACR1xG,KAAK4yG,UACL5yG,KAAKuT,KAAK,WAEd,CAEA,GAAA3D,CAAI8/F,EAAOnuG,EAAUgnB,GACnB,GAAKvoB,KAAK0xG,UAAa1xG,KAAK2xG,SAQhB3xG,KAAK0xG,WACM,mBAAVhC,EACT1vG,KAAKmyG,OAAOzC,EAAOnuG,EAAUgnB,GAE7BmnF,UAXF,GAAqB,mBAAVA,EACT1vG,KAAK4xG,qBAAqB7rC,QAAQ,gBAClC2pC,QACK,CACL,MAAM94C,EAAK,KAAQ52D,KAAK4xG,qBAAqB7rC,QAAQ,gBAAiBx9C,GAAU,EAChFvoB,KAAKmyG,OAAOzC,EAAOnuG,EAAUq1D,EAC/B,CAQJ,CAEA,OAAAmP,CAAQtnE,GACDuB,KAAK0xG,UAAa1xG,KAAK2xG,UAC1B3xG,KAAK4xG,qBAAqB7rC,QAAQtnE,EAEtC,CAQA,YAAAq0G,CAAaziF,GACX,IAAKrwB,KAAK0xG,WAAa1xG,KAAK2xG,UAAY3xG,KAAK4xG,qBAC3C,OAAO5xG,KAAK4xG,qBAAqBkB,aAAaziF,EAElD,CAEA,UAAA0iF,CAAWC,GACJhzG,KAAKizG,OAGZ,mBC/LF,MAAMC,EAAO,EAAQ,OACf,aAAEtkH,GAAiB,EAAQ,OAC3B,IAAE/C,GAAQ,EAAQ,OAClB,UAAEgwB,EAAS,UAAEzC,EAAS,SAAE0S,EAAQ,SAAE7wB,GAAa,EAAQ,OACvD,cAAEk4G,GAAkB,EAAQ,OAC5B,eAAE95G,GAAmB,EAAQ,OAC7B,oBAAEuvC,GAAwB,EAAQ,OAClC,sBAAEwqE,GAA0B,EAAQ,OACpC,0BAAEjpC,GAA8B,EAAQ,OACxC,sBAAEkpC,GAA0B,EAAQ,OAEpC,gBACJv/G,GACEjI,EAgeJL,EAAOC,QAAQ2lH,oBArdf,cAAkC+B,EAEhC,WAAApzG,CAAYyyG,EAASc,EAAQr6F,GAE3B3X,MAAM,UAAWkxG,EAASc,EAAQr6F,GAMlCjZ,KAAKuzG,aAAe,KACpBvzG,KAAK4xG,qBAAuB,KAW5B5xG,KAAKk6E,mBAAqBjhE,EAAMghE,kBAQhCj6E,KAAKwzG,qBAAsB,EAC3BxzG,KAAKyzG,yBAA0B,EAO/BzzG,KAAK0zG,eAAiB,KAWtB1zG,KAAK2zG,gBAAiB,EACtB3zG,KAAK4zG,oBAAqB,EAC1B5zG,KAAK8xG,eAAiB,GAMtB9xG,KAAK6zG,OAASR,EAAsBhqF,KAUpCrpB,KAAK8zG,aAAe,KAMpB9zG,KAAKqwG,YAAa,IAAItrF,MAAOkzB,UAG7Bj4C,KAAK+zG,kBAAoB/zG,KAEzBA,KAAK2wG,OAAOl+B,kBAAoB,KAEhCzyE,KAAKg0G,YAAc,KACnBh0G,KAAKi0G,cAAgB,KAErBj0G,KAAKy2E,kBAAoBx9D,EAAM4zD,gBACjC,CAKA,cAAArB,GACE,OAAOxrE,KAAKuzG,YACd,CAEA,cAAAW,CAAe3gH,GACbyM,KAAKuzG,aAAehgH,CACtB,CAEA,sBAAA4gH,CAAuBC,GACrBp0G,KAAK4xG,qBAAuBwC,CAC9B,CAGA,YAAAnE,CAAa3gH,GAEP0Q,KAAK6zG,SAAWR,EAAsBgB,sBAI1Cr0G,KAAKi0G,cAAcK,MAAMhlH,GACzB0Q,KAAKi0G,cAAcptC,QACrB,CAOA,MAAA0tC,CAAOjlH,GAED0Q,KAAK6zG,SAAWR,EAAsBgB,qBAItCr0G,KAAKw0G,SACPx0G,KAAKw0G,QAAQvE,aAAa3gH,EAE9B,CAOA,OAAAojH,CAAQzoC,GAEN,GAAIjqE,KAAK6zG,SAAWR,EAAsBgB,oBAExC,OAEFr0G,KAAK6zG,OAASR,EAAsBgB,oBAYpCr0G,KAAKi0G,cAAcptC,MAAMqsC,EAAKuB,cAVR,KAChBz0G,KAAK00G,UAEP10G,KAAK00G,SAASzqC,EAGhB,GAKJ,CAQA,WAAA0qC,CAAYl2G,GACVuB,KAAK8zG,aAAer1G,EACpBuB,KAAK4xG,qBAAqB7rC,QAAQ,4CAA4CtnE,IAC5C7P,EAAamb,oBACjD,CAMA,OAAA4oG,CAAQ1oC,GACN,GAAIjqE,KAAK6zG,SAAWR,EAAsBgB,oBACxCr0G,KAAK40G,SAAS3qC,OACT,CACLjqE,KAAK6zG,OAASR,EAAsBwB,kBAEpC,MAAMC,EAAgB,IAAM90G,KAAK40G,SAAS3qC,GAC1CjqE,KAAKi0G,cAAcptC,MAAMqsC,EAAKuB,aAAcK,EAC9C,CACF,CAOA,MAAAC,CAAO9qC,GACDjqE,KAAK6zG,SAAWR,EAAsB2B,oBAI1Ch1G,KAAK6zG,OAASR,EAAsB1pF,WAEpC3pB,KAAK00G,SAASzqC,IALZn+C,EAAS,yCAAyC9rB,KAAK6zG,oBAM3D,CAOA,OAAA73F,GAEE,IAAIsgD,EAAK1zB,EAAoB1O,GAC7B,GAAIl6B,KAAK6zG,SAAWR,EAAsBhqF,KAExC,OADAyC,EAAS,gCAAgCunF,EAAsBlkG,OAAOnP,KAAK6zG,WACpEjrE,EAAoBwpE,4BAE7BpyG,KAAK6zG,OAASR,EAAsB2B,mBAChCh1G,KAAK4xG,qBAAqBiC,SAAWR,EAAsBhqF,KAC7DizC,EAAKt8D,KAAK4xG,qBAAqB51F,UAE/Bhc,KAAK6zG,OAASR,EAAsB1pF,WAEtC,IAEE,MAAMvZ,EAAU,CACd6kG,cAAej1G,KAAKk6E,mBACpB1zD,MAAexmB,KAAKy2E,kBACpB5P,MAAeqsC,EAAKuB,cAEtBz0G,KAAKg0G,YACHd,EAAKgC,iBAAiB9kG,GACxBpQ,KAAKi0G,cAAgBf,EAAKiC,iBAAiB,CAAEtuC,MAAOqsC,EAAKuB,eAEzDz0G,KAAKi0G,cAAc5/F,GAAG,OAAQrU,KAAKu0G,OAAO/1G,KAAKwB,OAC/CA,KAAKi0G,cAAc5/F,GAAG,QAASrU,KAAK20G,YAAYn2G,KAAKwB,OACrDA,KAAKg0G,YAAY3/F,GAAG,QAASrU,KAAK20G,YAAYn2G,KAAKwB,OACnDA,KAAKg0G,YAAY3/F,GAAG,OAAQrU,KAAKo1G,eAAe52G,KAAKwB,OACrDA,KAAKg0G,YAAY3/F,GAAG,QAASrU,KAAKq1G,kBAAkB72G,KAAKwB,MAC3D,CAAE,MAAOvB,GAGP,MADAuB,KAAK6zG,OAASR,EAAsBwB,kBAC9B,IAAIx7G,EAAe,oCAAoCoF,EAAM4M,UACjE5M,EAAM6M,SAAW1c,EAAa0b,iBAClC,CACA,OAAOgyD,CACT,CAWA,OAAAyJ,CAAQ11C,EAAK/kB,GAEX,OADAtL,KAAK6zG,OAASR,EAAsBgB,oBAC7Br0G,KAAK4xG,qBAAqB7rC,QAAQ11C,EAAK/kB,EAChD,CAKA,QAAAspG,CAAS3qC,GACP,GAAIjqE,KAAK6zG,SAAWR,EAAsBhqF,KAAM,CAC9CrpB,KAAK6zG,OAASR,EAAsBhqF,KACpC,MAAMisF,EAAc,WAAyB,EAC7Ct1G,KAAKwzG,qBAAsB,EAC3BxzG,KAAK0zG,eAAiB,KACtB1zG,KAAK2zG,gBAAiB,EACtB3zG,KAAKw0G,QAAU,KACfx0G,KAAKg0G,YAAYj/F,qBACjB/U,KAAKg0G,YAAY3/F,GAAG,QAASihG,GAC7Bt1G,KAAKi0G,cAAcl/F,qBACnB/U,KAAKi0G,cAAc5/F,GAAG,QAASihG,GAC/Bt1G,KAAKg0G,YAAYuB,SAEjBv1G,KAAKg0G,YAAYwB,WAAY,EAC7Bx1G,KAAKg0G,YAAYyB,QACjBz1G,KAAKg0G,YAAc,KACnBh0G,KAAKi0G,cAAcwB,QACnBz1G,KAAKi0G,cAAgB,IACvB,CASA,OALIj0G,KAAK00G,WACP10G,KAAK00G,SAASzqC,GAEdjqE,KAAK00G,SAAW,MAEX9rE,EAAoB1O,EAC7B,CASA,YAAA44E,CAAaziF,GACX,OAAIrwB,KAAK4xG,qBACA5xG,KAAK4xG,qBAAqBkB,aAAaziF,GAEzCuY,EAAoB1O,EAC7B,CAGA,OAAAs4E,CAAQvoC,GACN,OAAQA,EAAeC,yBACrB,KAAKC,EAA0BnQ,UAC7Bh6D,KAAK+0G,OAAO9qC,GACZ,MACF,KAAKE,EAA0B3O,WAC7Bx7D,KAAK0yG,QAAQzoC,GACb,MACF,KAAKE,EAA0BE,iBAC7BrqE,KAAK2yG,QAAQ1oC,GACb,MACF,KAAKE,EAA0B/P,gBAC7Bp6D,KAAK4yG,QAAQ3oC,GACb,MACF,QACEhvE,EACE,qDAAGgvE,EAAeC,yBAE1B,CASA,KAAArD,CAAMt+C,GAGJ,OADAvoB,KAAKg0G,YAAYntC,OADG,IAAM7mE,KAAK4xG,qBAAqB/qC,MAAMt+C,KAEnDqgB,EAAoB1O,EAC7B,CAUA,IAAAmkC,CAAKhzD,EAASohE,GAAoB,GAChC,OAAIzsE,KAAK6zG,SAAWR,EAAsB1pF,YAIxCmC,EAAS,6CAA6C9rB,KAAK6zG,UACpDjrE,EAAoBwpE,6BAKzB3lC,GACEzsE,KAAK2zG,gBAAkB3zG,KAAK4zG,oBAC5B5zG,KAAK8xG,eAAe5kH,OAAS,GAC/B+N,EAAS,uCAAuC+E,KAAK8xG,eAAe5kH,UAEtE8S,KAAK4zG,mBAAqB5zG,KAAKg0G,YAAYM,MAAMjpG,EAAS,SAC1DrL,KAAKg0G,YAAYntC,QACjB7mE,KAAKuzG,aAAa3nC,cAAgBvgE,EAAQne,SACxC8S,KAAKuzG,aAAa7nC,WACb9iC,EAAoB1O,KAGxBl6B,KAAK2zG,iBACR3zG,KAAKwzG,qBAAsB,GAExBxzG,KAAK4zG,qBACR5zG,KAAKyzG,yBAA0B,GAE1B7qE,EAAoB6E,SAC7B,CAEA,cAAA2nE,CAAe9lH,GACb,IAAK0Q,KAAK2zG,eAGR,OAFA3zG,KAAK8xG,eAAeh5F,KAAKxpB,QACzB0Q,KAAKg0G,YAAYzB,QAGnB,MAAMj2C,EAAKt8D,KAAK4xG,qBAAqBvzC,KAAK/uE,GAC1C,OAAQgtE,GACN,KAAK1zB,EAAoB1O,GACvBl6B,KAAK2zG,gBAAiB,EACtB,MACF,KAAK/qE,EAAoB6E,SACvBztC,KAAK2zG,gBAAiB,EACtB3zG,KAAK8xG,eAAeh5F,KAAKxpB,GACzB0Q,KAAKg0G,YAAYzB,QACjB,MACF,KAAK3pE,EAAoBwpE,4BACvBpyG,KAAK0yG,QAAQ,IAAIU,EACbjpC,EAA0B3O,WAC1B,kDACA,KACA5sE,EAAa0b,iBAAkB,OACnC,MACF,QACErP,EAAS,gDAAgDqhE,KAE/D,CAQA,OAAAs2C,GAEE,GADA5yG,KAAK2zG,gBAAiB,EAClB3zG,KAAK8xG,gBAAkB9xG,KAAK8xG,eAAe5kH,OAAS,EAAG,CACzD,MAAM2lH,EAAe7yG,KAAK8xG,eAC1B9xG,KAAK8xG,eAAiB,GACtBe,EAAa/kG,SAAQxe,GAAQ0Q,KAAKo1G,eAAe9lH,IACnD,CACA,GAAK0Q,KAAK2zG,eAAV,CAIA,GADA3zG,KAAKg0G,YAAY0B,SACb11G,KAAK0zG,eAAgB,CAEvB,MAAMiC,EAAe31G,KAAK0zG,eAC1B1zG,KAAK0zG,eAAiB,KACtBiC,GACF,CAEI31G,KAAKwzG,sBACPxzG,KAAKwzG,qBAAsB,EACtBxzG,KAAKyzG,yBACRzzG,KAAK00G,SACH,IAAItB,EAAsBjpC,EAA0B/P,gBAC1B,GAAI,KAAM,EAAGp6D,KAAKqwG,aAdlD,CAiBF,CAEA,iBAAAgF,GACEr1G,KAAK4zG,oBAAqB,EACtB5zG,KAAKyzG,0BACPzzG,KAAKyzG,yBAA0B,EAC1BzzG,KAAKwzG,qBACRxzG,KAAK00G,SACH,IAAItB,EAAsBjpC,EAA0B/P,gBAC1B,GAAI,KAAM,EAAGp6D,KAAKqwG,aAGpD,CAKA,UAAA7oC,GAEE,MADY,4BAA4B1zE,EAAgBkM,KAAKqwG,aAE/D,CAEA,KAAAkC,GACEvyG,KAAK4xG,qBAAqBW,QAC1BvyG,KAAKi0G,cAAc1B,OACrB,CAEA,OAAAD,GACEtyG,KAAK4xG,qBAAqBU,UAC1BtyG,KAAKi0G,cAAcyB,QACrB,mBCzeF,MAAME,EAAM,EAAQ,OACd,aAAEhnH,GAAiB,EAAQ,OAC3B,IAAE/C,GAAQ,EAAQ,OAClB,UAAEgwB,EAAS,UAAEzC,EAAS,SAAEne,EAAQ,UAAEC,GAAc,EAAQ,OACxD,SAAE26D,GAAa,EAAQ,MACvB,cAAEs9C,GAAkB,EAAQ,OAC5B,qBAAE0C,GAAyB,EAAQ,OACnC,eAAEx8G,GAAmB,EAAQ,OAC7B,oBAAEuvC,GAAwB,EAAQ,OAClC,sBAAEwqE,GAA0B,EAAQ,OACpC,0BAAEjpC,GAA8B,EAAQ,OACxC,sBAAEkpC,GAA0B,EAAQ,OAEpC,gBACJv/G,GACEjI,EAmeJL,EAAOC,QAAQ4lH,gBA5df,cAA8B8B,EAE5B,WAAApzG,CAAYk2D,EAAKu8C,EAASc,EAAQr6F,GAEhC3X,MAAM20D,EAAKu8C,EAASc,EAAQr6F,GAM5BjZ,KAAKuzG,aAAe,IAAIsC,EAWxB71G,KAAKk6E,mBAAqBjhE,EAAMghE,kBAQhCj6E,KAAK81G,gBAAiB,EAOtB91G,KAAK0zG,eAAiB,KAWtB1zG,KAAK+1G,UAAW,EAMhB/1G,KAAK6zG,OAASR,EAAsBhqF,KAOpCrpB,KAAKg2G,WAAa,KAUlBh2G,KAAK8zG,aAAe,KAMpB9zG,KAAKqwG,YAAa,IAAItrF,MAAOkzB,UAG7Bj4C,KAAK+zG,kBAAoB/zG,KACzBA,KAAK2wG,OAAOl+B,kBAAoB,IAClC,CAKA,cAAAjH,GACE,OAAOxrE,KAAKuzG,YACd,CACA,cAAAW,CAAe3gH,GACbyM,KAAKuzG,aAAehgH,CACtB,CAEA,MAAA0iH,CAAOzD,EAASc,GACdtzG,KAAK00G,SAAWlC,EAChBxyG,KAAKw0G,QAAUlB,CACjB,CAQA,aAAA4C,CAAcC,GACZ,IAAIC,EAAO,KACX,MAAMC,EAAYxgD,EAASsgD,GACA,SAAvBE,EAAUzkC,UAA8C,UAAvBykC,EAAUzkC,UAE7C12E,EAAU,8CAA8Cm7G,EAAUzkC,YAEpE,MAAMzb,EAAOkgD,EAAUjgD,SAWvB,OAVAggD,EAAOC,EAAUD,KACJ,OAATA,IAEAA,EADEp2G,KAAKs2G,KACA,MAEAt2G,KAAK2wG,OAAOl6B,kBAAoB,EAAI,MAAQ,OAKhD,CAAEtgB,OAAMigD,OACjB,CAWA,MAAA7B,CAAOgC,EAAgBjnH,GAEjB0Q,KAAK6zG,SAAWR,EAAsBgB,qBACxCkC,IAAmBv2G,KAAKg2G,YAItBh2G,KAAKw0G,SACPx0G,KAAKw0G,QAAQvE,aAAa3gH,EAE9B,CAUA,OAAAojH,CAAQ6D,EAAgB93G,GAClB83G,IAAmBv2G,KAAKg2G,YAKxBh2G,KAAK6zG,SAAWR,EAAsBgB,sBAUtCr0G,KAAK6zG,SAAWR,EAAsB1pF,WACpC3pB,KAAK6zG,SAAWR,EAAsB2B,oBAGxCh1G,KAAK6zG,OAASR,EAAsBwB,kBACpC70G,KAAK40G,SAAS2B,EAAgB,8BAA8B93G,EAAM4M,UAAWzc,EAAa0b,mBAE1FtK,KAAK00G,SACH,IAAItB,EACFjpC,EAA0B3O,WAC1B,mBAAmB/8D,IACnB,KACA7P,EAAa0b,iBAAkB,OAGrCtK,KAAK8zG,aAAer1G,EAExB,CAUA,OAAAk0G,CAAQ4D,EAAgBC,GACtB,GAAID,IAAmBv2G,KAAKg2G,WAE1B,OAGF,GAAIh2G,KAAK6zG,SAAWR,EAAsBgB,oBAExC,OAEF,MAAMhkF,EAAMmmF,EAAW,aAAe,UAChCC,EAAWz2G,KAAK8zG,cAAgB9zG,KAAK8zG,aAAazoG,QACxDrL,KAAK8zG,aAAe,KAEpB9zG,KAAK6zG,OAASR,EAAsBwB,kBAEpC70G,KAAK40G,SAAS50G,KAAKg2G,WAAY,qBAAqB3lF,cAAgBomF,IACtD7nH,EAAamb,oBAC7B,CASA,MAAAgrG,CAAOwB,GAEDA,IAAmBv2G,KAAKg2G,aAIxBh2G,KAAK6zG,SAAWR,EAAsB2B,oBAK1Ch1G,KAAK6zG,OAASR,EAAsB1pF,WAEpC3pB,KAAK00G,SACC,IAAItB,EACAjpC,EAA0BnQ,UAC1B,YACA,EACA,KACAh6D,KAAKqwG,cAZ+CrwG,KAAK6zG,OAarE,CAOA,OAAA73F,GACE,GAAIhc,KAAK6zG,SAAWR,EAAsBhqF,KAExC,OADAnuB,EAAU,gCAAgCm4G,EAAsBlkG,OAAOnP,KAAK6zG,WACrEjrE,EAAoBwpE,4BAE7B,GAAIpyG,KAAKg2G,WAEP,OADA96G,EAAU,yDACH0tC,EAAoBwpE,4BAE7B,IAAKpyG,KAAKw3E,KAER,OADAv8E,EAAS,8BACF2tC,EAAoBt+B,iBAI7B,IACEtK,KAAK6zG,OAASR,EAAsB2B,mBACpC,MAAM,KAAE7+C,EAAI,KAAEigD,GAASp2G,KAAKk2G,cAAcl2G,KAAKw3E,MAG/Cx3E,KAAKg2G,WAAa,IAAIJ,EAAIc,OAC1B12G,KAAKg2G,WAAW3hG,GAAG,UAAWrU,KAAK+0G,OAAOv2G,KAAKwB,KAAMA,KAAKg2G,aAE1Dh2G,KAAKg2G,WAAWh6F,QAAQo6F,EAAMjgD,GAQ9Bn2D,KAAKg2G,WAAW3hG,GAAG,OAAQrU,KAAKu0G,OAAO/1G,KAAKwB,KAAMA,KAAKg2G,aACvDh2G,KAAKg2G,WAAW3hG,GAAG,QAASrU,KAAK0yG,QAAQl0G,KAAKwB,KAAMA,KAAKg2G,aACzDh2G,KAAKg2G,WAAW3hG,GAAG,QAASrU,KAAK2yG,QAAQn0G,KAAKwB,KAAMA,KAAKg2G,aACzDh2G,KAAKg2G,WAAW3hG,GAAG,QAASrU,KAAK4yG,QAAQp0G,KAAKwB,KAAMA,KAAKg2G,aACzDh2G,KAAKg2G,WAAWjD,YAAW,EAG7B,CAAE,MAAOt0G,GAGP,MADAuB,KAAK6zG,OAASR,EAAsBwB,kBAC9B,IAAIx7G,EAAe,gCAAgCoF,EAAM4M,UAC7D5M,EAAM6M,SAAW1c,EAAa0b,iBAClC,CAGA,OAAOs+B,EAAoB1O,EAC7B,CAUA,OAAA6rC,CAAQ11C,EAAK/kB,GAGX,OAAOtL,KAAK40G,SAAS50G,KAAKg2G,WAAY3lF,EAAK/kB,EAC7C,CAEA,QAAAspG,CAAS2B,EAAgBlmF,EAAK/kB,GAC5B,GAAIirG,IAAmBv2G,KAAKg2G,WAE1B,OAAOptE,EAAoB1O,GAE7B,GAAIl6B,KAAK6zG,SAAWR,EAAsBhqF,KAAM,CAG9CrpB,KAAK6zG,OAASR,EAAsBgB,oBAEpC,MAAMiB,EAAc,WAAyB,EACzCt1G,KAAKg2G,aACPh2G,KAAKg2G,WAAWjhG,qBAChB/U,KAAKg2G,WAAW3hG,GAAG,QAASihG,GAI5Bt1G,KAAKg2G,WAAWjwC,UAChB/lE,KAAKg2G,WAAa,MAGpBh2G,KAAK81G,gBAAiB,EACtB91G,KAAK0zG,eAAiB,KACtB1zG,KAAK+1G,UAAW,EAChB/1G,KAAK6zG,OAASR,EAAsBhqF,KACpCrpB,KAAKw0G,QAAU,IACjB,CAcA,OATIx0G,KAAK00G,WACP10G,KAAK00G,SAAS,IAAItB,EAAsBjpC,EAA0BE,iBAC1Bh6C,GAAO,uBACP,KACA/kB,GAAW,EACXtL,KAAKqwG,aAE7CrwG,KAAK00G,SAAW,MAEX9rE,EAAoB1O,EAC7B,CASA,YAAA44E,CAAaziF,GACX,GAAIrwB,KAAK6zG,SAAWR,EAAsBhqF,KAAM,CAC9C,MAAMotF,EAAW,MAACpmF,EAAqCA,EAAM,GAEzDrwB,KAAKg2G,YACPh2G,KAAKg2G,WAAWjwC,QAAQ,IAAI75E,MAAMuqH,GAEtC,CACA,OAAO7tE,EAAoB1O,EAC7B,CAQA,KAAA2sC,CAAMt+C,GAOJ,OANIvoB,KAAK+1G,SAEPxtF,IACSA,IACTvoB,KAAK0zG,eAAiBnrF,GAEjBqgB,EAAoB1O,EAC7B,CAUA,IAAAmkC,CAAKhzD,EAASohE,GAAoB,GAChC,OAAIzsE,KAAK6zG,SAAWR,EAAsB1pF,YACxCzuB,EAAU,0CACH0tC,EAAoBwpE,6BAKzB3lC,GACCzsE,KAAK+1G,UACL1qG,EAAQne,OAAU8S,KAAKk6E,mBAAqBl6E,KAAKg2G,WAAWW,YAG/D32G,KAAK+1G,SAAW/1G,KAAKg2G,WAAW1B,MAAMjpG,EAAS,SAC3CrL,KAAKuzG,eACPvzG,KAAKuzG,aAAa3nC,cAAgBvgE,EAAQne,SACxC8S,KAAKuzG,aAAa7nC,YAEf9iC,EAAoB1O,KAG7Bl6B,KAAK81G,gBAAiB,EACfltE,EAAoB6E,SAC7B,CASA,OAAAmlE,CAAQ2D,GACN,GAAIA,IAAmBv2G,KAAKg2G,WAA5B,CAMA,GAFAh2G,KAAK+1G,UAAW,EAEZ/1G,KAAK0zG,eAAgB,CAEvB,MAAMiC,EAAe31G,KAAK0zG,eAC1B1zG,KAAK0zG,eAAiB,KACtBiC,GACF,CAEI31G,KAAK81G,iBAEP91G,KAAK81G,gBAAiB,EACtB91G,KAAK00G,SACH,IAAItB,EAAsBjpC,EAA0B/P,gBAC1B,GAAI,KAAM,EAAGp6D,KAAKqwG,aAfhD,CAiBF,CAKA,UAAA7oC,GAEE,MADY,4BAA4B1zE,EAAgBkM,KAAKqwG,aAE/D,CAEA,KAAAkC,GACMvyG,KAAKg2G,YACPh2G,KAAKg2G,WAAWzD,OAEpB,CAEA,OAAAD,GACMtyG,KAAKg2G,YACPh2G,KAAKg2G,WAAWN,QAEpB,mBC9eF,MAAME,EAAM,EAAQ,MACdgB,EAAM,EAAQ,OACd,aAAEhoH,GAAiB,EAAQ,OAC3B,IAAE/C,GAAQ,EAAQ,OAClB,UAAEgwB,EAAS,UAAEzC,EAAS,SAAEne,EAAQ,UAAEC,GAAc,EAAQ,OACxD,MAAE2R,GAAU,EAAQ,OACpB,iBAAE2jG,GAAqB,EAAQ,OAC/B,SAAE36C,GAAa,EAAQ,MACvB,cAAEs9C,GAAkB,EAAQ,OAC5B,qBAAE0C,GAAyB,EAAQ,OACnC,eAAEx8G,GAAmB,EAAQ,OAC7B,oBAAEuvC,GAAwB,EAAQ,OAClC,sBAAEwqE,GAA0B,EAAQ,OACpC,0BAAEjpC,GAA8B,EAAQ,OACxC,sBAAEkpC,GAA0B,EAAQ,OAEpC,gBACJv/G,GACEjI,EAcJ,MAAMylH,UAAwB6B,EAE5B,WAAApzG,CAAYk2D,EAAKu8C,EAASc,EAAQr6F,GAEhC3X,MAAM20D,EAAKu8C,EAASc,EAAQr6F,GAM5BjZ,KAAKuzG,aAAe,IAAIsC,EAWxB71G,KAAKk6E,mBAAqBjhE,EAAMghE,kBAQhCj6E,KAAK81G,gBAAiB,EAOtB91G,KAAK0zG,eAAiB,KAWtB1zG,KAAK+1G,UAAW,EAMhB/1G,KAAK6zG,OAASR,EAAsBhqF,KAQpCrpB,KAAK62G,WAAa,KAGlB72G,KAAKoxD,UAAY,KAUjBpxD,KAAK8zG,aAAe,KAMpB9zG,KAAKqwG,YAAa,IAAItrF,MAAOkzB,UAG7Bj4C,KAAK+zG,kBAAoB/zG,KAEzBA,KAAK2wG,OAAOl+B,kBAAoB,IAClC,CAKA,cAAAjH,GACE,OAAOxrE,KAAKuzG,YACd,CAEA,cAAAW,CAAerzE,GACb7gC,KAAKuzG,aAAe1yE,CACtB,CAEA,MAAAo1E,CAAOzD,EAASc,GACdtzG,KAAK00G,SAAWlC,EAChBxyG,KAAKw0G,QAAUlB,CACjB,CAOA,aAAA4C,CAAcC,GACZ,IAAIC,EAAO,KACX,MAAMC,EAAYxgD,EAASsgD,GACA,SAAvBE,EAAUzkC,UAA8C,UAAvBykC,EAAUzkC,UAE7C12E,EAAU,8CAA8Cm7G,EAAUzkC,YAEpE,MAAMzb,EAAOkgD,EAAUjgD,SAWvB,OAVAggD,EAAOC,EAAUD,KACJ,OAATA,IAEAA,EADEp2G,KAAKs2G,KACA,MAEAt2G,KAAKy2E,kBAAoB,EAAI,MAAQ,OAKzC,CAAEtgB,OAAMigD,OACjB,CAUA,MAAA7B,CAAOgC,EAAgBjnH,GAEjB0Q,KAAK6zG,SAAWR,EAAsBgB,qBACxCkC,IAAmBv2G,KAAKg2G,YAItBh2G,KAAKw0G,SACPx0G,KAAKw0G,QAAQvE,aAAa3gH,EAE9B,CAUA,OAAAojH,CAAQ6D,EAAgB93G,GAClB83G,IAAmBv2G,KAAKg2G,YAKxBh2G,KAAK6zG,SAAWR,EAAsBgB,sBAStCr0G,KAAK6zG,SAAWR,EAAsB1pF,WACpC3pB,KAAK6zG,SAAWR,EAAsB2B,oBAGxCh1G,KAAK6zG,OAASR,EAAsBwB,kBACpC70G,KAAK40G,SAAS2B,EAAgB,8BAA8B93G,EAAM4M,UAAWzc,EAAa0b,mBAE1FtK,KAAK00G,SACH,IAAItB,EACFjpC,EAA0B3O,WAC1B,mBAAmB/8D,IACnB,KACA7P,EAAa0b,iBAAkB,OAGrCtK,KAAK8zG,aAAer1G,EAExB,CAUA,OAAAk0G,CAAQ4D,EAAgBC,GACtB,GAAID,IAAmBv2G,KAAKg2G,WAE1B,OAGF,GAAIh2G,KAAK6zG,SAAWR,EAAsBgB,oBAExC,OAEF,MAAMhkF,EAAMmmF,EAAW,aAAe,UAChCC,EAAWz2G,KAAK8zG,cAAgB9zG,KAAK8zG,aAAazoG,QACxDrL,KAAK8zG,aAAe,KAEpB9zG,KAAK6zG,OAASR,EAAsBwB,kBACpC70G,KAAK40G,SAAS50G,KAAKg2G,WAAY,qBAAqB3lF,cAAgBomF,IACtD7nH,EAAamb,oBAC7B,CASA,MAAAgrG,CAAOwB,GAEDA,IAAmBv2G,KAAKg2G,aAIxBh2G,KAAK6zG,SAAWR,EAAsB2B,oBAK1Ch1G,KAAK6zG,OAASR,EAAsB1pF,WAEpC3pB,KAAK00G,SACC,IAAItB,EACAjpC,EAA0BnQ,UAC1B,YACA,EACA,KACAh6D,KAAKqwG,cAZ+CrwG,KAAK6zG,OAarE,CAOA,OAAA73F,GACE,GAAIhc,KAAK6zG,SAAWR,EAAsBhqF,KAExC,OADAnuB,EAAU,gCAAgCm4G,EAAsBlkG,OAAOnP,KAAK6zG,WACrEjrE,EAAoBwpE,4BAE7B,GAAIpyG,KAAKg2G,WAEP,OADA96G,EAAU,yDACH0tC,EAAoBwpE,4BAE7B,IAAKpyG,KAAKw3E,KAER,OADAv8E,EAAS,8BACF2tC,EAAoBt+B,iBAI7B,IACEtK,KAAK6zG,OAASR,EAAsB2B,mBACpC,MAAM,KAAE7+C,EAAI,KAAEigD,GAASp2G,KAAKk2G,cAAcl2G,KAAKw3E,MAG/Cx3E,KAAKg2G,WAAa,IAAIJ,EAAIc,OAC1B12G,KAAKg2G,WAAWh6F,QAAQo6F,EAAMjgD,GAC9B,MAAM2gD,EAAa92G,KAAK8wG,mBACxBgG,EAAWC,OAAS/2G,KAAKg2G,WACzBh2G,KAAK62G,WAAaD,EAAI56F,QAAQ86F,GAC9B92G,KAAK62G,WAAWxiG,GAAG,gBAAiBrU,KAAK+0G,OAAOv2G,KAAKwB,KAAMA,KAAKg2G,aAChEh2G,KAAKoxD,UAAYpxD,KAAK62G,WAQtB72G,KAAKoxD,UAAU/8C,GAAG,OAAQrU,KAAKu0G,OAAO/1G,KAAKwB,KAAMA,KAAKg2G,aACtDh2G,KAAKoxD,UAAU/8C,GAAG,QAASrU,KAAK0yG,QAAQl0G,KAAKwB,KAAMA,KAAKg2G,aACxDh2G,KAAKoxD,UAAU/8C,GAAG,QAASrU,KAAK2yG,QAAQn0G,KAAKwB,KAAMA,KAAKg2G,aACxDh2G,KAAKoxD,UAAU/8C,GAAG,QAASrU,KAAK4yG,QAAQp0G,KAAKwB,KAAMA,KAAKg2G,aACxDh2G,KAAKoxD,UAAU2hD,YAAW,EAG5B,CAAE,MAAOt0G,GAGP,MADAuB,KAAK6zG,OAASR,EAAsBwB,kBAC9B,IAAIx7G,EAAe,gCAAgCoF,EAAM4M,UAC7D5M,EAAM6M,SAAW1c,EAAa0b,iBAClC,CAGA,OAAOs+B,EAAoB1O,EAC7B,CAUA,OAAA6rC,CAAQ11C,EAAK/kB,GAGX,OAAOtL,KAAK40G,SAAS50G,KAAKg2G,WAAY3lF,EAAK/kB,EAC7C,CAEA,QAAAspG,CAAS2B,EAAgBlmF,EAAK/kB,GAC5B,GAAIirG,IAAmBv2G,KAAKg2G,WAE1B,OAAOptE,EAAoB1O,GAE7B,GAAIl6B,KAAK6zG,SAAWR,EAAsBhqF,KAAM,CAG9CrpB,KAAK6zG,OAASR,EAAsBgB,oBAEpC,MAAMiB,EAAc,WAAyB,EACzCt1G,KAAKoxD,YACPpxD,KAAKoxD,UAAUr8C,qBACf/U,KAAKoxD,UAAU/8C,GAAG,QAASihG,GAI3Bt1G,KAAKoxD,UAAU2U,UACf/lE,KAAKg2G,WAAa,KAClBh2G,KAAKoxD,UAAY,MAGnBpxD,KAAK81G,gBAAiB,EACtB91G,KAAK0zG,eAAiB,KACtB1zG,KAAK+1G,UAAW,EAChB/1G,KAAK6zG,OAASR,EAAsBhqF,KACpCrpB,KAAKw0G,QAAU,IACjB,CAcA,OATIx0G,KAAK00G,WACP10G,KAAK00G,SAAS,IAAItB,EAAsBjpC,EAA0BE,iBAC1Bh6C,GAAO,uBACP,KACA/kB,GAAW,EACXtL,KAAKqwG,aAE7CrwG,KAAK00G,SAAW,MAEX9rE,EAAoB1O,EAC7B,CASA,YAAA44E,CAAaziF,GACX,GAAIrwB,KAAK6zG,SAAWR,EAAsBhqF,KAAM,CAC9C,MAAMotF,EAAW,MAACpmF,EAAqCA,EAAM,GAEzDrwB,KAAKg2G,aAAeh2G,KAAK62G,WAC3B72G,KAAKg2G,WAAWjwC,QAAQ,IAAI75E,MAAMuqH,IACzBz2G,KAAKoxD,WAEdpxD,KAAKoxD,UAAU2U,QAAQ,IAAI75E,MAAMuqH,GAErC,CACA,OAAO7tE,EAAoB1O,EAC7B,CAQA,KAAA2sC,CAAMt+C,GAOJ,OANIvoB,KAAK+1G,SAEPxtF,IACSA,IACTvoB,KAAK0zG,eAAiBnrF,GAEjBqgB,EAAoB1O,EAC7B,CAUA,IAAAmkC,CAAKhzD,EAASohE,GAAoB,GAChC,OAAIzsE,KAAK6zG,SAAWR,EAAsB1pF,WACjCif,EAAoBwpE,4BAKzB3lC,GACCzsE,KAAK+1G,UACL1qG,EAAQne,OAAS8S,KAAKk6E,mBAAqBl6E,KAAKoxD,UAAUulD,YAG7D32G,KAAK+1G,SAAW/1G,KAAKoxD,UAAUkjD,MAAMjpG,EAAS,SAC1CrL,KAAKuzG,eACPvzG,KAAKuzG,aAAa3nC,cAAgBvgE,EAAQne,SACxC8S,KAAKuzG,aAAa7nC,YAEf9iC,EAAoB1O,KAG7Bl6B,KAAK81G,gBAAiB,EACfltE,EAAoB6E,SAC7B,CASA,OAAAmlE,CAAQ2D,GACN,GAAIA,IAAmBv2G,KAAKg2G,WAA5B,CAMA,GAFAh2G,KAAK+1G,UAAW,EAEZ/1G,KAAK0zG,eAAgB,CAEvB,MAAMiC,EAAe31G,KAAK0zG,eAC1B1zG,KAAK0zG,eAAiB,KACtBiC,GACF,CAEI31G,KAAK81G,iBAEP91G,KAAK81G,gBAAiB,EACtB91G,KAAK00G,SACH,IAAItB,EAAsBjpC,EAA0B/P,gBAC1B,GAAI,KAAM,EAAGp6D,KAAKqwG,aAfhD,CAiBF,CAKA,UAAA7oC,GAEE,MADY,4BAA4B1zE,EAAgBkM,KAAKqwG,aAE/D,EAIFxjG,EAAMykG,EAAiBd,GAEvBhlH,EAAOC,QAAQ6lH,gBAAkBA,kBC1fjC,MAAMsF,EAAM,EAAQ,OACd,aAAEhoH,GAAiB,EAAQ,OAC3B,IAAE/C,GAAQ,EAAQ,OAClB,UAAEgwB,EAAS,UAAEzC,EAAS,UAAEle,GAAc,EAAQ,OAC9C,MAAE2R,GAAU,EAAQ,OACpB,iBAAE2jG,GAAqB,EAAQ,OAC/B,mBAAEiB,GAAuB,EAAQ,OACjC,cAAE0B,GAAkB,EAAQ,OAC5B,eAAE95G,GAAmB,EAAQ,OAC7B,oBAAEuvC,GAAwB,EAAQ,OAClC,sBAAEwqE,GAA0B,EAAQ,OACpC,0BAAEjpC,GAA8B,EAAQ,OACxC,sBAAEkpC,GAA0B,EAAQ,OAEpC,gBACJv/G,GACEjI,EAaJ,MAAM0lH,UAAyB4B,EAE7B,WAAApzG,CAAYk2D,EAAKu8C,EAASc,EAAQr6F,GAEhC3X,MAAM20D,EAAKu8C,EAASc,EAAQr6F,GAM5BjZ,KAAKuzG,aAAe,KACpBvzG,KAAK4xG,qBAAuB,KAW5B5xG,KAAKk6E,mBAAqBjhE,EAAMghE,kBAQhCj6E,KAAK81G,gBAAiB,EAOtB91G,KAAK0zG,eAAiB,KAWtB1zG,KAAK+1G,UAAW,EAMhB/1G,KAAK6zG,OAASR,EAAsBhqF,KAMpCrpB,KAAK62G,WAAa,KAUlB72G,KAAK8zG,aAAe,KAMpB9zG,KAAKqwG,YAAa,IAAItrF,MAAOkzB,UAG7Bj4C,KAAK+zG,kBAAoB/zG,KAEzBA,KAAK2wG,OAAOl+B,kBAAoB,IAClC,CAKA,cAAAjH,GACE,OAAOxrE,KAAKuzG,YACd,CAEA,cAAAW,CAAe3gH,GACbyM,KAAKuzG,aAAehgH,CACtB,CAEA,sBAAA4gH,CAAuBC,GACrBp0G,KAAK4xG,qBAAuBwC,CAC9B,CAEA,sBAAA4C,GACE,OAAOh3G,KAAK4xG,oBACd,CAEA,MAAAqE,CAAOzD,EAASc,GACdtzG,KAAK00G,SAAWlC,EAChBxyG,KAAKw0G,QAAUlB,CACjB,CAIA,OAAAd,CAAQvoC,GACNjqE,KAAKi3G,oBAAoBzE,QAAQvoC,EACnC,CAEA,YAAAgmC,CAAa3gH,GACX0Q,KAAKi3G,oBAAoBhH,aAAa3gH,EACxC,CAUA,MAAAilH,CAAOgC,EAAgBjnH,GAEjB0Q,KAAK6zG,SAAWR,EAAsBgB,qBACxCkC,IAAmBv2G,KAAK62G,YAItB72G,KAAKw0G,SACPx0G,KAAKw0G,QAAQvE,aAAa3gH,EAE9B,CAUA,OAAAojH,CAAQ6D,EAAgB93G,GAClB83G,IAAmBv2G,KAAK62G,YAKxB72G,KAAK6zG,SAAWR,EAAsBgB,sBAStCr0G,KAAK6zG,SAAWR,EAAsB1pF,WACxC3pB,KAAK00G,SACH,IAAItB,EACFjpC,EAA0B3O,WAC1B,mBAAmB/8D,IACnB,KACA7P,EAAa0b,iBAAkB,OAEnCtK,KAAK8zG,aAAer1G,EAExB,CAUA,OAAAk0G,CAAQ4D,EAAgBC,GACtB,GAAID,IAAmBv2G,KAAK62G,WAE1B,OAGF,GAAI72G,KAAK6zG,SAAWR,EAAsBgB,oBAExC,OAEF,MAAMhkF,EAAMmmF,EAAW,aAAe,UAChCC,EAAWz2G,KAAK8zG,cAAgB9zG,KAAK8zG,aAAazoG,QACxDrL,KAAK8zG,aAAe,KAEpB9zG,KAAK6zG,OAASR,EAAsBwB,kBACpC70G,KAAK40G,SAAS50G,KAAK62G,WAAY,qBAAqBxmF,cAAgBomF,IACtD7nH,EAAamb,oBAC7B,CASA,MAAAgrG,CAAOwB,GAEDA,IAAmBv2G,KAAK62G,aAIxB72G,KAAK6zG,SAAWR,EAAsB2B,oBAK1Ch1G,KAAK6zG,OAASR,EAAsB1pF,WAEpC3pB,KAAK00G,SACC,IAAItB,EACAjpC,EAA0BnQ,UAC1B,YACA,EACA,KACAh6D,KAAKqwG,cAZ+CrwG,KAAK6zG,OAarE,CAOA,OAAA73F,GACE,GAAIhc,KAAK6zG,SAAWR,EAAsBhqF,KAExC,OADAnuB,EAAU,gCAAgCm4G,EAAsBlkG,OAAOnP,KAAK6zG,WACrEjrE,EAAoBwpE,4BAE7B,GAAIpyG,KAAK62G,WAEP,OADA37G,EAAU,yDACH0tC,EAAoBwpE,4BAI7BpyG,KAAK6zG,OAASR,EAAsB2B,mBACpC,IACE,MAAMkC,EAAgB,CAAErF,oBAAqB7xG,KAAK4xG,sBAClD5xG,KAAKi3G,oBAAsB,IAAIxF,EAAmByF,GAClDl3G,KAAK4xG,qBAAqB51F,UAC1B,MAAM86F,EAAa92G,KAAK8wG,mBACxBgG,EAAWC,OAAS/2G,KAAKi3G,oBAEzBj3G,KAAK62G,WAAaD,EAAI56F,QAAQ86F,GAC9B92G,KAAK62G,WAAWxiG,GAAG,gBAAiBrU,KAAK+0G,OAAOv2G,KAAKwB,KAAMA,KAAK62G,aAQhE72G,KAAK62G,WAAWxiG,GAAG,OAAQrU,KAAKu0G,OAAO/1G,KAAKwB,KAAMA,KAAK62G,aACvD72G,KAAK62G,WAAWxiG,GAAG,QAASrU,KAAK0yG,QAAQl0G,KAAKwB,KAAMA,KAAK62G,aACzD72G,KAAK62G,WAAWxiG,GAAG,QAASrU,KAAK2yG,QAAQn0G,KAAKwB,KAAMA,KAAK62G,aACzD72G,KAAK62G,WAAWxiG,GAAG,QAASrU,KAAK4yG,QAAQp0G,KAAKwB,KAAMA,KAAK62G,aACzD72G,KAAK62G,WAAW9D,YAAW,EAG7B,CAAE,MAAOt0G,GAGP,MADAuB,KAAK6zG,OAASR,EAAsBwB,kBAC9B,IAAIx7G,EAAe,gCAAgCoF,EAAM4M,UAC7D5M,EAAM6M,SAAW1c,EAAa0b,iBAClC,CAGA,OAAOs+B,EAAoB1O,EAC7B,CAUA,OAAA6rC,CAAQ11C,EAAK/kB,GAEX,OAAOtL,KAAK40G,SAAS50G,KAAK62G,WAAYxmF,EAAK/kB,EAC7C,CAEA,QAAAspG,CAAS2B,EAAgBlmF,EAAK/kB,GAC5B,GAAIirG,IAAmBv2G,KAAK62G,WAE1B,OAAOjuE,EAAoB1O,GAE7B,GAAIl6B,KAAK6zG,SAAWR,EAAsBhqF,KAAM,CAG9CrpB,KAAK6zG,OAASR,EAAsBgB,oBAEpC,MAAMiB,EAAc,WAAyB,EACzCt1G,KAAK62G,aACP72G,KAAK62G,WAAW9hG,qBAChB/U,KAAK62G,WAAWxiG,GAAG,QAASihG,GAI5Bt1G,KAAK62G,WAAW9wC,UAChB/lE,KAAK62G,WAAa,MAGhB72G,KAAK4xG,uBACP5xG,KAAK4xG,qBAAqB7rC,QAAQ11C,EAAK/kB,GACvCtL,KAAK4xG,qBAAuB,MAG9B5xG,KAAK81G,gBAAiB,EACtB91G,KAAK0zG,eAAiB,KACtB1zG,KAAK+1G,UAAW,EAChB/1G,KAAK6zG,OAASR,EAAsBhqF,KACpCrpB,KAAKw0G,QAAU,IACjB,CAcA,OATIx0G,KAAK00G,WACP10G,KAAK00G,SAAS,IAAItB,EAAsBjpC,EAA0BE,iBAC1Bh6C,GAAO,uBACP,KACA/kB,GAAW,EACXtL,KAAKqwG,aAE7CrwG,KAAK00G,SAAW,MAEX9rE,EAAoB1O,EAC7B,CASA,YAAA44E,CAAaziF,GACX,GAAIrwB,KAAK6zG,SAAWR,EAAsBhqF,KAAM,CAC9C,MAAMotF,EAAW,MAACpmF,EAAqCA,EAAM,GAEzDrwB,KAAK62G,YACP72G,KAAK62G,WAAW9wC,QAAQ,IAAI75E,MAAMuqH,IAGhCz2G,KAAK4xG,sBACP5xG,KAAK4xG,qBAAqBkB,aAAa2D,EAE3C,CACA,OAAO7tE,EAAoB1O,EAC7B,CAQA,KAAA2sC,CAAMt+C,GAOJ,OANIvoB,KAAK+1G,SAEPxtF,IACSA,IACTvoB,KAAK0zG,eAAiBnrF,GAEjBqgB,EAAoB1O,EAC7B,CAUA,IAAAmkC,CAAKhzD,EAASohE,GAAoB,GAChC,OAAIzsE,KAAK6zG,SAAWR,EAAsB1pF,WACjCif,EAAoBwpE,4BAKzB3lC,GACCzsE,KAAK+1G,UACL1qG,EAAQne,OAAS8S,KAAKk6E,mBAAqBl6E,KAAK62G,WAAWF,YAG9D32G,KAAK+1G,SAAW/1G,KAAK62G,WAAWvC,MAAMjpG,EAAS,SAC3CrL,KAAKuzG,eACPvzG,KAAKuzG,aAAa3nC,cAAgBvgE,EAAQne,SACxC8S,KAAKuzG,aAAa7nC,YAEf9iC,EAAoB1O,KAG7Bl6B,KAAK81G,gBAAiB,EACfltE,EAAoB6E,SAC7B,CASA,OAAAmlE,CAAQ2D,GACN,GAAIA,IAAmBv2G,KAAK62G,WAA5B,CAMA,GAFA72G,KAAK+1G,UAAW,EAEZ/1G,KAAK0zG,eAAgB,CAEvB,MAAMiC,EAAe31G,KAAK0zG,eAC1B1zG,KAAK0zG,eAAiB,KACtBiC,GACF,CAEI31G,KAAK81G,iBAEP91G,KAAK81G,gBAAiB,EACtB91G,KAAK00G,SACH,IAAItB,EAAsBjpC,EAA0B/P,gBAC1B,GAAI,KAAM,EAAGp6D,KAAKqwG,aAfhD,CAiBF,CAKA,UAAA7oC,GAEE,MADY,4BAA4B1zE,EAAgBkM,KAAKqwG,aAE/D,CAEA,WAAA8G,CAAY5uF,GACVvoB,KAAK62G,WAAW9hG,mBAAmB,SACnC/U,KAAK62G,WAAWxiG,GAAG,QAASrU,KAAKo3G,kBAAkB54G,KAAKwB,KAAMuoB,IAC9DvoB,KAAKi3G,oBAAoB/E,UACzBlyG,KAAK62G,WAAWjnG,KAClB,CAEA,iBAAAwnG,CAAkB7uF,GAChBvoB,KAAKi3G,oBAAoBhF,QACzBjyG,KAAK62G,WAAW9hG,qBAChB/U,KAAK62G,WAAa,KAClB72G,KAAKi3G,oBAAsB,KAC3Bj3G,KAAK4xG,qBAAqBqE,OAAOj2G,KAAK00G,SAAU10G,KAAKw0G,SACrDx0G,KAAK4xG,qBAAqBsC,eAAel0G,KAAKwrE,kBAC9CxrE,KAAKk0G,eAAe,MACpBl0G,KAAK00G,SAAW,KAChB10G,KAAKw0G,QAAU,KACfjsF,EAASvoB,KAAK4xG,qBAChB,EAGF/kG,EAAM0kG,EAAkBf,GAExBhlH,EAAOC,QAAQ8lH,iBAAmBA,kBCrflC,MAAM,aAAE3iH,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,oBAAE+5C,GAAwB,EAAQ,MAYxC,MAAMuqE,EASJ,WAAApzG,CAAYk2D,EAAKu8C,EAASc,EAAQ+D,EAAgBnsC,EAAc,MAC9DlrE,KAAKw3E,KAAOvhB,EACZj2D,KAAKs2G,KAAOnD,EAAcngC,OAAO/c,GACjCj2D,KAAKw0G,QAAUlB,EACftzG,KAAK00G,SAAWlC,EAChBxyG,KAAK2wG,OAAS0G,EACdr3G,KAAKmrE,eAAeD,EACtB,CAOA,OAAAlvD,GAAY,OAAO4sB,EAAoB1O,EAAI,CAU3C,OAAA6rC,CAAQuxC,EAAWjnF,EAAK/kB,GAAW,OAAOs9B,EAAoB1O,EAAI,CAQlE,YAAA44E,CAAaziF,GAAO,OAAOuY,EAAoB1O,EAAI,CAEnD,KAAA2sC,CAAMt+C,GAEJ,OADAA,IACOqgB,EAAoB1O,EAC7B,CASA,IAAAmkC,CAAKhzD,EAASohE,GAAoB,GAAS,OAAO7jC,EAAoB1O,EAAI,CAK1E,oBAAAokD,GACE,OAAOt+E,KAAK2wG,OAAOl+B,iBACrB,CAKA,UAAAjL,GAAe,OAAO,IAAM,CAK5B,cAAAgE,GAAmB,OAAO,IAAM,CAUhC,cAAA+rC,CAAelnF,EAAK/kB,GAAW,OAAO,CAAO,CAS7C,cAAA6/D,CAAeD,GACTlrE,KAAKw3G,cAEHx3G,KAAKw3G,aAAaC,SAASz3G,KAAKw3G,aAAaC,QAAQz3G,MAE3DA,KAAKw3G,aAAetsC,EAChBA,GACEA,EAAYwsC,WAAWxsC,EAAYwsC,UAAU13G,KAErD,CAEA,QAAAjS,GACE,MAAO,GAAGiS,KAAKs+E,yBAAyBt+E,KAAKs2G,KAAO,SAAW,IACjE,CAOA,aAAOtjC,CAAO/c,GACZ,MAAM0hD,GAAY1hD,GAAO,IAAIrjE,MAAM,OACnC,GAAwB,IAApB+kH,EAASzqH,QAAgBimH,EAAcyE,aAAa11G,QAAQy1G,EAAS,IAAM,EAC7E,MAAM,IAAI9oH,EAAe,gBAAgBonE,aAChBk9C,EAAcyE,aAAa3jH,KAAK,mCAChCrF,EAAa8E,wBAIxC,MADgC,UAAhBikH,EAAS,IAAkC,QAAhBA,EAAS,IAAgC,SAAhBA,EAAS,EAE/E,EAOFxE,EAAcyE,aAAe,CAAC,OAAQ,QAAS,KAAM,MAAO,MAAO,QAEnEpsH,EAAOC,QAAQ0nH,cAAgBA,kBC/I/B,MAAM,yBAAE0E,GAA6B,EAAQ,MAEvCxxE,EAAwB,CAC5BI,IAAKoxE,GAGPrsH,EAAOC,QAAQ46C,sBAAwBA,YCKvC76C,EAAOC,QAAQoqH,qBAPf,MACE,WAAA91G,GACEC,KAAK4rE,aAAe,EACpB5rE,KAAK0rE,WAAa,CACpB,mBCRF,MAAM,YAAEroE,GAAgB,EAAQ,MA6BhC7X,EAAOC,QAAQ4N,eAlBf,cAA6BgK,EAQ3B,WAAAtD,CAAYsL,EAASC,GACnBhK,MAAM,iBAAkB+J,GACxBrL,KAAKsL,QAAUA,CACjB,CAEA,QAAAvd,GACE,MAAO,GAAGuT,MAAMvT,uBAAuBiS,KAAKsL,SAC9C,mBC1BF,MAAM,UAAEuQ,GAAc,EAAQ,OACxB,gBAAEw1F,EAAe,oBAAED,EAAmB,iBAAEG,EAAgB,gBAAED,GAA4C,EAAQ,OAC9G,aAAEwG,GAAiB,EAAQ,MAE3BhtC,EAAmB,CACvB,eAAAC,CAAgB5U,EAAMq8C,EAASc,EAAQr6F,EAAO8+F,GAC5C,MAAM9hD,EAAME,EAMZ,GALAz8D,OAAOC,OAAOsf,EAAO,CACnB4X,sBAAuB,MAIrBwgF,GAAmBp7C,EAAIjlD,OAAOhU,WAAW,OAAQ,CACnD,IAAKi5D,EAAIjlD,OAAOhU,WAAW,QAAS,CAClC,GAA+B,IAA3Bic,EAAM4zD,iBAER,OAAO,IAAIwkC,EAAgBp7C,EAAKu8C,EAASc,EAAQr6F,GAGnD,MAAM++F,EAAmB,IAAI5G,EAAoBoB,EAASc,EAAQr6F,GAC5Dg/F,EACJ,IAAI5G,EAAgBp7C,EACA+hD,EAAiBxF,QAAQh0G,KAAKw5G,GAC9BA,EAAkB/+F,GAIxC,OAHA++F,EAAiB9D,eAAe+D,EAAmBzsC,kBACnDysC,EAAmB/D,eAAe,MAClC8D,EAAiB7D,uBAAuB8D,GACjCD,CACT,CACA,GAAuC,eAAnC/+F,EAAM+zD,yBAER,OAAO,IAAIskC,EAAgBr7C,EAAKu8C,EAASc,EAAQr6F,GAInD,MAAMi/F,EAAW,IAAI3G,EAAiBt7C,EAAKu8C,EAASc,EAAQr6F,GACtDg/F,EACJ,IAAI5G,EAAgBp7C,EACAiiD,EAAS1F,QAAQh0G,KAAK05G,GACtBA,EAAUj/F,GAIhC,OAHAi/F,EAAShE,eAAe+D,EAAmBzsC,kBAC3CysC,EAAmB/D,eAAe,MAClCgE,EAAS/D,uBAAuB8D,GACzBC,CACT,CAEA,OAAO,IAAIJ,EAAa7hD,EAAKu8C,EAASc,EAAQr6F,EAAO8+F,EACvD,EAEA,gBAAAvnC,CAAiB2nC,GACf,MAAM3F,EAAU2F,EAAsBzD,SAChCpB,EAAS6E,EAAsB3D,QAC/Bv7F,EAAQk/F,EAAsBxH,OAE9BqH,EAAmB,IAAI5G,EAAoBoB,EAASc,EAAQr6F,GAOlE,OANAk/F,EAAsBlC,OAAO+B,EAAiBxF,QAAQh0G,KAAKw5G,GAC9BA,GAC7BA,EAAiB9D,eAAeiE,EAAsB3sC,kBACtD2sC,EAAsBjE,eAAe,MACrC8D,EAAiB7D,uBAAuBgE,GACxCH,EAAiBh8F,UACVg8F,CACT,EAEA,QAAAznC,CAAS6nC,EAAoBC,EAAU9vF,GACrC,GAAK8vF,EAEE,CACL,MAAMC,EAAcL,GAAsB1vF,EAASvoB,KAAKwwE,iBAAiBynC,IAEzEG,EAAmBjB,YAAYmB,EACjC,MALEF,EAAmBjB,YAAY5uF,EAMnC,GAGF/8B,EAAOC,QAAQq/E,iBAAmBA,kBC3ElC,MAAMytC,EAAmB,EAAQ,OAC3B,KAAE9rG,GAAS,EAAQ,OACnB,UAAEoP,GAAc,EAAQ,OACxB,cAAEs3F,GAAkB,EAAQ,OAC5B,kBAAE75G,GAAsB,EAAQ,OAEhC,UAAEkX,GAAc/D,EAGhB+rG,EAAwBhoG,GAAU,KACpB,CAChB,CAAClX,EAAkBu5E,aAAwB0lC,EAAiBE,YAC5D,CAACn/G,EAAkBs5E,aAAwB2lC,EAAiBG,YAC5D,CAACp/G,EAAkBq5E,uBAAwB4lC,EAAiBI,wBAC5D,CAACr/G,EAAkBs6E,WAAwB2kC,EAAiBK,yBAiDhEptH,EAAOC,QAAQotH,yBArCf,MACE,WAAA94G,CAAYk2D,EAAKqd,GACf,MAAMwlC,EAAS3F,EAAcngC,OAAO/c,GACpC,IAAI8iD,EAAY,KACZC,EAAqB,KACzB1lC,EAAyBjhF,QAAQwb,UAAUC,SAAS+F,IAClD,MAAMolG,EAAuBT,EAAsBjlH,MAAMsgB,GACzDklG,EAAY,IAAIE,EAAqBH,EAAQ94G,KAAKk5G,YAAY16G,KAAKwB,MAAOg5G,GAC1EA,EAAqBD,CAAS,IAEhC/4G,KAAK0gE,WAAaq4C,EAClB/4G,KAAK0gE,WAAWy4C,SAClB,CAEA,oBAAA76B,GACE,OAAOt+E,KAAK0gE,WAAW4d,sBACzB,CAEA,iBAAA86B,CAAkB3jG,GAChB,OAAOzV,KAAK0gE,WAAW04C,kBAAkB3jG,EAC3C,CAEA,oBAAA4jG,GACE,OAA2C,OAAnCr5G,KAAK0gE,WAAW44C,cAC1B,CAEA,QAAAvrH,GACE,OAAOiS,KAAK0gE,WAAW3yE,UACzB,CAEA,WAAAmrH,CAAYK,EAAUhuG,GACGvL,KAAK0gE,WAC5B1gE,KAAK0gE,WAAa64C,EAClBA,EAASJ,SACX,mBC5DF,MAAM,KAAE57G,GAAS,EAAQ,MAqEzB/R,EAAOC,QAAQ6N,kBAAoBiE,EAAKE,IAzDd,CAaxBo1E,YAAa,cAabD,YAAa,cAebD,sBAAuB,wBAYvBiB,UAAW,8BCjEb,MAAM,KAAEr2E,GAAS,EAAQ,MAMnBqrC,EAAsB,CAC1B1O,GAA6B,EAC7BstE,KAA6B,EAC7B/5D,SAA6B,EAC7BljC,kBAA6B,EAC7B6nG,4BAA6B,EAC7B9nG,iBAA6B,GAG/B9e,EAAOC,QAAQm9C,oBAAsBrrC,EAAKE,IAAImrC,GAI9Cp9C,EAAOC,QAAQm9C,oBAAoBlrC,cAAc,CAC/C,GAA+BkrC,EAAoB1O,GACnD,KAA+B0O,EAAoB4+D,KACnD,SAA+B5+D,EAAoB6E,SACnD,kBAA+B7E,EAAoBr+B,kBACnD,4BAA+Bq+B,EAAoBwpE,4BACnD,iBAA8BxpE,EAAoBt+B,mCCzBpD,MAAM,KAAE/M,GAAS,EAAQ,MA4BzB/R,EAAOC,QAAQ0+E,0BAA4B5sE,EAAKE,IArBd,CAEhCu8D,UAAqB,EAErBqQ,iBAAqB,EAErBjQ,gBAAqB,EAErB7vD,kBAAqB,EAErBggE,cAAqB,EAErB3P,gBAAqB,EAErBY,WAAqB,EAErBg+C,iBAAqB,GAErBC,oBAAqB,2CCzBvB,MAAM,aAAE7qH,GAAiB,EAAQ,OAC3B,IAAE/C,GAAQ,EAAQ,OAClB,0BAAEs+E,GAA8B,EAAQ,OAExC,gBAAEr2E,GAAoBjI,EAQ5B,MAAMunH,EAWJ,WAAArzG,CAAY25G,EAAavtG,EAASqqB,EAAclrB,EAASyxD,GACvD/8D,KAAK25G,oBAAsBD,EAC3B15G,KAAKw+B,SAAWryB,EAChBnM,KAAKy+B,cAAgBjI,EACrBx2B,KAAK0+B,cAAgBpzB,EACrBtL,KAAK45G,KAAO78C,CACd,CAIA,qBAAAmN,GACE,OAAOlqE,KAAK25G,mBACd,CAEA,sBAAIE,GACF,OAAO75G,KAAK25G,mBACd,CAEA,UAAAnyC,GACE,OAAOxnE,KAAKmM,OACd,CAEA,WAAIA,GACF,OAAOnM,KAAKw+B,QACd,CAEA,eAAAs7E,GACE,OAAO95G,KAAKw2B,YACd,CAEA,gBAAIA,GACF,OAAOx2B,KAAKy+B,aACd,CAEA,UAAA4d,GACE,OAAOr8C,KAAKiM,YACd,CAEA,gBAAIA,GACF,OAAOjM,KAAK0+B,aACd,CAEA,YAAA0rC,GACE,OAAOpqE,KAAK+8D,SACd,CAEA,aAAIA,GACF,OAAO/8D,KAAK45G,IACd,CAEA,CAAC,4CACC,MAAO,CACL,mBAAsBzvC,EAA0B/qE,SAASY,KAAK65G,oBAC9D,QAAsB75G,KAAKmM,QAC3B,aAAsBnM,KAAKw2B,aAC3B,aAAsB5nC,EAAawQ,SAASY,KAAKiM,cACjD,IAAsBjM,KAAKk3F,KAAOpjG,EAAgBkM,KAAKk3F,MAAQ,MAEnE,CAEA,QAAAnpG,GACE,OAAOiT,EAAahB,KACtB,EAIFxU,EAAOC,QAAQ2nH,sBAAwBA,kBCzFvC,MAAM,KAAE71G,GAAS,EAAQ,MAezB/R,EAAOC,QAAQ4nH,sBAAwB91G,EAAKE,IARd,CAC5B4rB,KAAqB,EACrB2rF,mBAAqB,EACrBrrF,WAAqB,EACrB0qF,oBAAqB,EACrBQ,kBAAqB,oBCZvB,MAAM,SACJ/oF,EAAQ,SACR7wB,GACE,EAAQ,OACN,QAAE45D,GAAY,EAAQ,KAwE5BrpE,EAAOC,QAAQsuH,SAhEf,MAQE,WAAAh6G,CAAYizE,EAAQgnC,EAAYC,EAAcC,GAC5Cl6G,KAAKs2G,OAAStjC,EACdhzE,KAAKm6G,mBAAqBH,EAC1Bh6G,KAAKo6G,cAAgBH,EACrBj6G,KAAKq6G,WAAaH,EAClBl6G,KAAKs6G,2BACH,GAAGt6G,KAAKm6G,qDAAqDtlD,EAAQ0lD,WACzE,CAEA,YAAAjB,GACE,OAAOt5G,KAAKq6G,UACd,CAEA,YAAAG,CAAaN,GACXl6G,KAAKq6G,WAAaH,CACpB,CAEA,oBAAA57B,GACE,OAAOt+E,KAAKm6G,kBACd,CAEA,SAAAM,GACE,OAAOz6G,KAAKs2G,IACd,CAGA,aAAAoE,GACE,OAAO,CACT,CAEA,OAAAvB,GACOn5G,KAAK06G,kBACJ16G,KAAKq6G,YAAcr6G,KAAKo6G,cAC1Bp6G,KAAKo6G,cAAcp6G,KAAKq6G,WAAYr6G,KAAKs6G,4BAEzCr/G,EAAS,GAAG+E,KAAKs6G,8CAGvB,CAEA,iBAAAlB,CAAkB3jG,GAChB,OAAIzV,KAAKq6G,YAAcr6G,KAAKo6G,eAC1BtuF,EAAS,mBAAmBrW,uBAC5BzV,KAAKo6G,cAAcp6G,KAAKq6G,WAAY,mBAC7B,IAETp/G,EAAS,mBAAmBwa,uBACrB,EACT,CAEA,QAAA1nB,GACE,OAAOiS,KAAKm6G,oBAAsBn6G,KAAKs2G,KAAO,SAAW,GAC3D,mBCxEF,MAAMqE,EAAU,EAAQ,OAClB,YAAElC,GAAgB,EAAQ,OAC1B,YAAEC,GAAgB,EAAQ,OAC1B,wBAAEC,GAA4B,EAAQ,OACtC,qBAAEC,GAAyB,EAAQ,OACnC,aAAEd,GAAiB,EAAQ,OAC3B,yBAAED,GAA6B,EAAQ,MAEvC,eAAE+C,EAAc,qBAAEC,GAAyBF,EAEjDnvH,EAAOC,QAAQmvH,eAAiBA,EAChCpvH,EAAOC,QAAQovH,qBAAuBA,EACtCrvH,EAAOC,QAAQgtH,YAAcA,EAC7BjtH,EAAOC,QAAQitH,YAAcA,EAC7BltH,EAAOC,QAAQktH,wBAA0BA,EACzCntH,EAAOC,QAAQmtH,qBAAuBA,EACtCptH,EAAOC,QAAQqsH,aAAeA,EAC9BtsH,EAAOC,QAAQosH,yBAA2BA,kBCjB1C,MAAM,eAAE+C,GAAmB,EAAQ,OAC7B,qBAAEC,GAAyB,EAAQ,sBCDzC,MAAMplE,EAAW,EAAQ,MACnB,QACJ7pD,EAAO,OACPF,GACE,EAAQ,OACN,UACJ0tB,EAAS,SACT0S,EAAQ,SACR7wB,EAAQ,UACRC,GACE,EAAQ,OACN,cACJ4/G,EAAa,YACbC,GACE,EAAQ,OACN,aAAE9gH,EAAY,aAAE+gH,GAAiB,EAAQ,MACzC,oBAAEpyE,GAAwB,EAAQ,OAClC,WAAEqyE,GAAe,EAAQ,OAEzB,oBAAElrH,GAAwBnE,EAchC,SAASsvH,EAAcjlD,GACrB,OAAKA,EAAI6W,MAAM,qBAAuBv/E,OAAO4tH,UAAY5tH,OAAO4tH,SAASC,OAChE7tH,OAAO4tH,SAASC,QAA6B,MAAlBnlD,EAAIhpE,OAAO,GAAc,IAAM,IAAMgpE,EAElEA,CACT,CAMA,MAAM57C,EACJ,WAAAta,GACEC,KAAKq7G,YAAc,IAAIL,EAAa,cAAe,KACnDh7G,KAAKs7G,SAAW,IAAIN,EAAa,WAAY,KAC7Ch7G,KAAKu7G,cAAgB,IAAIP,EAAa,gBAAiB,IACzD,CACA,QAAAjtH,GACE,IAAI8F,EAAI,GAMR,MALA,CAACmM,KAAKq7G,YAAar7G,KAAKs7G,SAAUt7G,KAAKu7G,eAAeztG,SAAS7f,IACzDA,GAAKA,EAAEutH,cAAgB,IACzB3nH,GAAK,GAAG5F,EAAE4O,WAAW5O,MACvB,IAEK4F,CACT,EASF,MAAM+mH,EACJ,WAAA76G,CAAYk2D,EAAKwlD,EAAWC,EAAsBC,EACtCC,EAAmBC,EAAaC,GAC1C97G,KAAK+7G,QAAU,CACb9lD,IAAKilD,EAAcjlD,GACnB4lD,cACAJ,YACAC,uBACAI,mBAGF97G,KAAKg8G,qBAAuB,EAC5Bh8G,KAAKi8G,KAAO,KACZj8G,KAAKk8G,UAAYP,EACjB37G,KAAKm8G,aAAeP,EACpB57G,KAAKo8G,YAAa,EAClBp8G,KAAKq8G,YAAc,EACnBr8G,KAAKs8G,SAAWz+E,KAAKgsB,MAAsB,IAAhBhsB,KAAKu3B,UAEhCp1D,KAAKi8G,KAAOhB,EAAWjtD,SAEvBhuD,KAAKu8G,mBAAqB3B,EAAe4B,2BAEzCx8G,KAAK+9D,MAAQ,IAAI1jD,CACnB,CAEA,OAAAoiG,CAAQ5oH,GA8BR,CAKA,IAAAwqE,CAAK/uE,EAAMotH,EAAU,EAAGC,EAAW,GAC7BD,EAAU,IACZ18G,KAAKi8G,KAAKW,QACV58G,KAAKi8G,KAAOhB,EAAWjtD,UAEzBhuD,KAAKi8G,KAAKY,KAAK,OAAQ78G,KAAK+7G,QAAQ9lD,KAAK,GAEzCj2D,KAAKg8G,qBAAuB,EAE5Bh8G,KAAKi8G,KAAKa,mBAAqB,IAAM98G,KAAK+8G,eAAeztH,EAAMotH,EAASC,GAExE38G,KAAKo8G,YAAa,EAMdp8G,KAAK+7G,QAAQN,UACfV,EAAY/6G,KAAKi8G,KAAM3sH,EAAM0Q,KAAK+7G,QAAQF,YAAa77G,KAAK+7G,QAAQD,iBAEpEhB,EAAc96G,KAAKi8G,KAAM3sH,EAAM0Q,KAAK+7G,QAAQF,YAAa77G,KAAK+7G,QAAQD,iBAExE97G,KAAKy8G,QAAQ,UACf,CAIA,cAAAM,CAAeC,EAAUN,EAASC,GAChC,MAAMM,EAAaj9G,KAAKi8G,KAAKgB,WACvBC,EAAal9G,KAAKi8G,KAAKkB,QACvBC,EAAUp9G,KAAKi8G,KAAKoB,KAE1B,KAAOr9G,KAAK+7G,QAAQL,sBAAwBuB,IAAeC,GAClDD,IAAeG,GAGtB,OAGF,IAAKp9G,KAAKo8G,WAER,OAGF,IAAIkB,EAAS,KACb,GAAIt9G,KAAKu8G,kBAQP,IACEe,EAASt9G,KAAKi8G,KAAKqB,MACrB,CAAE,MAAOx9F,GAEP,YADAgM,EAAS,gEAAgEhM,EAAEzU,UAE7E,MAEAiyG,EAASt9G,KAAKi8G,KAAKqB,OAGrB,GAAe,MAAXA,GAA6B,MAAXA,EAAgB,CAEpC,IAAIhuH,EAAO,KASX,GAPEA,EADE0Q,KAAKi8G,KAAKsB,cAA2C,gBAA3Bv9G,KAAKi8G,KAAKsB,aAC/BxtH,EAAoBiQ,KAAKi8G,KAAK1jF,UAE9Bv4B,KAAKi8G,KAAKuB,aAEnBluH,EAAOA,EAAK6S,UAAUnC,KAAKg8G,qBAAsB1sH,EAAKpC,QACtD8S,KAAKg8G,sBAAwB1sH,EAAKpC,OAEd,IAAhBoC,EAAKpC,QAAgB+vH,IAAeC,EAEtC,OAGF,GAAIl9G,KAAK+7G,QAAQN,UACf,IACEnsH,EAAO5D,EAAO0C,OAAOkB,EACvB,CAAE,MAAOwwB,GAKP,OAHA5kB,EAAU,yBAAyB5L,KACnC4L,EAAU,yBAAyB4kB,EAAEzU,gBACrCrL,KAAKk8G,UAAUtzE,EAAoBr+B,kBAAmBjb,EAExD,KACK,CAEL,MAAMmuH,EAAc,GACdluH,EAAaD,EAAKpC,OACxB,IAAK,IAAIX,EAAI,EAAGA,EAAIgD,EAAYhD,IAC9BkxH,EAAY3kG,KAAK1rB,OAAOC,aAAkC,IAArBiC,EAAK7C,WAAWF,KAEvD+C,EAAOmuH,EAAYxpH,KAAK,GAC1B,CAUA,OATIgpH,IAAeG,IAEjBp9G,KAAKo8G,YAAa,GAEpBp8G,KAAKk8G,UAAUtzE,EAAoB1O,GAAI5qC,QACnC2tH,IAAeG,GAAW9tH,EAAKpC,OAAS,GAC1C8S,KAAKk8G,UAAUtzE,EAAoB1O,GAAI,IAI3C,CAGA,MAAMwjF,EAAa19G,KAAKi8G,KAAKyB,WAC7B,IAAIF,EAAe,GAEjBA,EADEx9G,KAAKi8G,KAAKsB,cAA2C,gBAA3Bv9G,KAAKi8G,KAAKsB,aACvBxtH,EAAoBiQ,KAAKi8G,KAAK1jF,UAE9Bv4B,KAAKi8G,KAAKuB,cAAgB,GAG3C,MAAMG,EAAkBH,EAAatwH,OAE/B0wH,GADa59G,KAAK+7G,QAAQ9lD,IACZ+mD,EAAWA,EAAS9vH,OAAS,IAC3C,gBAAE4M,GAAoB27C,EAASthD,MAC/B0pH,EAAmB/jH,EACvB0jH,EAAatrH,OAAO,EAAG2rC,KAAKtwB,IAAIowG,EAAiB,MAAM,EAAM,GAC1C7jH,GAClBkjH,GAAY,IAAI9qH,OAAO,EAAG2rC,KAAKtwB,IAAIqwG,EAAa,OAAO,EAAM,GAehE,MAAME,EAAenB,EACjB38G,KAAKo8G,YACW,MAAXkB,GACwB,IAAxBE,EAAatwH,SACA,IAAZwvH,GAAiBA,EAAUoB,IACnChyF,EAAS,2DAA2D4wF,EAAU,KAE9E18G,KAAKq+D,KAAK2+C,EAAUN,EAAU,EAAGoB,KAEjC99G,KAAKo8G,YAAa,EAClBp8G,KAAKm8G,aACDmB,EACA,IAAIrjH,EACF,8BAA8BqjH,gBAAqBI,MACnD,uBAAuBC,4BACvBE,EACA,iBAAiB79G,KAAKi8G,KAAKn7G,OAASd,KAAKi8G,KAAKn7G,OAAO01D,KAAO,OAAOzoE,YAE7E,CAEA,aAAAgwH,GACE,OAAO/9G,KAAK+7G,QAAQN,SACtB,CAGA,KAAAmB,GAEE58G,KAAKo8G,YAAa,EACdp8G,KAAKi8G,MAAQj8G,KAAKi8G,KAAKW,OACzB58G,KAAKi8G,KAAKW,OAEd,CAOA,+BAAOJ,GACL,OAAO1B,IAAkBC,CAC3B,CAOA,uCAAOiD,GACL,MAAMC,EAAMhD,EAAWjtD,SAIjBkwD,EAAQD,GAA0B,OAAnBA,EAAIE,WAEzB,OADAryF,EAAS,mGAAmGoyF,KACrGA,CACT,EAGF1yH,EAAOC,QAAQmvH,eAAiBA,kBCvUhC,MAAMnlE,EAAW,EAAQ,KACnBvqB,EAAS,EAAQ,OACjB,MAAEnT,GAAU,EAAQ,MACpB,QAAEnsB,EAAO,IAAEC,GAAQ,EAAQ,OAC3B,aAAE+C,EAAY,eAAEC,GAAmB,EAAQ,OAC3C,eAAE+rH,GAAmB,EAAQ,OAC7B,aAAExgG,GAAiB,EAAQ,OAC3B,UAAEiuD,GAAc,EAAQ,OACxB,eAAEhvE,GAAmB,EAAQ,OAC7B,kBAAEC,GAAsB,EAAQ,OAChC,oBAAEsvC,GAAwB,EAAQ,OAClC,sBAAEwqE,GAA0B,EAAQ,OACpC,0BAAEjpC,GAA8B,EAAQ,OACxC,sBAAEkpC,GAA0B,EAAQ,OACpC,wBAAE+K,GAA4B,EAAQ,OAEtC,WAAExuH,EAAU,eAAE0C,EAAc,cAAEC,GAAkB3G,GAChD,gBAAEkI,GAAoBjI,GAEtB,UACJgwB,EAAS,UACTzC,EAAS,UACTle,EAAS,SACT4wB,GACE,IAAI1R,EAAa,4BAMfikG,EACY,EADZA,EAEY,EAIZvvH,EAAa,cAy4BnBtD,EAAOC,QAAQovH,qBAp3Bf,cAAmCuD,EACjC,WAAAr+G,CAAYu+G,EAAS9L,EAASc,EAAQr6F,GAkDpC,GA/CA3X,MAAMg9G,EACA9L,EACAc,EACAr6F,GAQNjZ,KAAKu+G,YAAa,EAGlBv+G,KAAKw+G,mBAAqBvlG,EAAMmhE,cAChCp6E,KAAKy+G,iBAAmB,EAGxBz+G,KAAK0+G,cAAgB,KACrB1+G,KAAK2+G,gBAAkB1lG,EAAM4X,sBAG7B7wB,KAAK4+G,WAtCA,OAsCsBN,EAvCfxxC,MAAM,wBACJ,KA0Cd9sE,KAAK6+G,WAAa7+G,KAAK4+G,WAGvB5+G,KAAK8+G,iBAAmB,KAExB9+G,KAAK++G,cAAgB,KAGrB/+G,KAAKg/G,iBAAmB,KAIxBh/G,KAAKi/G,sBAAwB,KAG7Bj/G,KAAKk/G,WAAa,GAIlBl/G,KAAK45G,KAAO,KAEoB,OAA5B3gG,EAAMw5D,wBAA0D7hF,IAA5BqoB,EAAMw5D,kBAC5C,MAAM,IAAI5jF,EAAe,+BAAgCD,EAAa8E,wBAGxEsM,KAAKm6G,mBAAqBlhG,EAAMw5D,kBAChCzyE,KAAKm/G,qBAAsB,EAC3Bn/G,KAAKo/G,wBAAyB,EAC9Bp/G,KAAKq/G,2BAA6B,EAElCr/G,KAAKm/G,oBAAuBlmG,EAAMw5D,oBAAsBn5E,EAAkBu5E,YAC1E7yE,KAAKo/G,uBAA0BnmG,EAAMw5D,oBACNn5E,EAAkBq5E,sBAGjD3yE,KAAK6vG,gBAAkB,GACvB7vG,KAAKs/G,iBAAmBjB,EAExB,MAAMkB,EAAQC,UAAUjF,WAAa,GAKrC,IAJIgF,EAAMzyC,MAAM,aAAeyyC,EAAMzyC,MAAM,YACzC9sE,KAAKq/G,2BAtFoB,KAyFQ,OAA/BpmG,EAAMk8D,2BAAgEvkF,IAA/BqoB,EAAMk8D,qBAC/C,MAAM,IAAItmF,EAAe,kCAAmCD,EAAa8E,wBAE3EsM,KAAKy/G,aAAexmG,EAAMk8D,oBAC5B,CAKA,kBAAAuqC,GACE5zF,EAAS,kCACT9rB,KAAK2/G,eAAe,iCAAkC/wH,EAAa6a,QACrE,CAEA,gBAAIoR,GACF,OAAQ7a,KAAS,KAAIlM,EAAgBkM,KAAK45G,MAAQ,EACpD,CAEA,mBAAAgG,GAEE,MAAMC,EAAiB7/G,KAAKw+G,mBAAqB,GAEjDx+G,KAAKy+G,iBAAmBz+G,KAAKm/G,oBACzBU,EACAhiF,KAAKgsB,MAAuB,IAAjBg2D,EACjB,CAMA,OAAA7jG,GAEE,OAAIhc,KAAK6zG,SAAWR,EAAsBhqF,KACjCuf,EAAoBwpE,4BAGtBpyG,KAAK8/G,iBACd,CAEA,eAAAA,GAEE9/G,KAAK+/G,WAAa,KAClB,IACE//G,KAAKggH,YAAc,IAAIpF,EAAe56G,KAAK4+G,YACH5+G,KAAwB,qBAC1B,GACA,CAACs8D,EAAIhtE,IAAS0Q,KAAK+4B,qBAAqBujC,EAAIhtE,KAC5C,CAACgtE,EAAIhtE,IAAS0Q,KAAKigH,wBAAwB3jD,EAAIhtE,IAC/C0Q,KAAKy/G,aAC7C,CAAE,MAAO3/F,GAGP,OAFAgM,EAAS,0CAA0ChM,EAAEzU,WACrDrL,KAAK+/G,WAAajgG,EACX8oB,EAAoBt+B,gBAC7B,CACA,GAAIyN,EAAM2kC,QAAQ18C,KAAKggH,aAErB,OADAl0F,EAAS,yCACF8c,EAAoBt+B,iBAI7B,MAAM41G,EAAYh1F,EAAOpwB,MAAM7F,UAAU+hG,oBAErCh3F,KAAK6zG,SAAWR,EAAsB2B,qBAIxCh1G,KAAKmgH,uBAELngH,KAAK6zG,OAASR,EAAsB2B,oBAKtC,IACEh1G,KAAKggH,YAAY3hD,KAAK6hD,EACxB,CAAE,MAAOE,GAYP,OAXAt0F,EAAS,qBAAqBs0F,EAAU/0G,WACZ+0G,EAAU/zG,MACtCrM,KAAK6zG,OAASR,EAAsBwB,kBACpC70G,KAAKqgH,uBAEHrgH,KAAK+/G,WADHK,aAAqB/mH,EACL+mH,EAEA,IAAI/mH,EACpB,4CAA4C+mH,EAAU/0G,UACtD+0G,EAAU90G,SAAW1c,EAAa0b,kBAE/Bs+B,EAAoBt+B,gBAC7B,CAEA,OAAOs+B,EAAoB1O,EAC7B,CAQA,OAAA6rC,CAAQ11C,EAAK/kB,GAEX,GADqDtL,KAAK6zG,OACtD7zG,KAAK6zG,SAAWR,EAAsBgB,qBACtCr0G,KAAK6zG,SAAWR,EAAsBhqF,KAExC,OAAOuf,EAAoB1O,GAG7B,GAAIl6B,KAAK6zG,SAAWR,EAAsBwB,mBACtC70G,KAAK6zG,SAAWR,EAAsB2B,mBAKxC,OAFAlpF,EAAS,0DACT9rB,KAAK2/G,eAAetvF,EAAK/kB,GAAS,GAC3Bs9B,EAAoB1O,GAG7BpO,EAAS,yCAET9rB,KAAK6zG,OAASR,EAAsBgB,oBAGT,OAAvBr0G,KAAK++G,gBACPjzF,EAAS,6CACT9rB,KAAK++G,cAAcnC,SAES,OAA1B58G,KAAKg/G,mBACPlzF,EAAS,gDACT9rB,KAAKg/G,iBAAiBpC,SAIxB58G,KAAK0+G,cAAgB7nG,YAAW,KAC9B7W,KAAKsgH,oBAAoB,GACxBtgH,KAAK2+G,iBAKR3+G,KAAK++G,cAAgB,IAAInE,EACrB56G,KAAK6+G,YACH7+G,KAAwB,qBAAG,GAC7B,CAACs8D,EAAIhtE,IAAS0Q,KAAKugH,kBAAkBjkD,EAAIhtE,KACzC,CAACgtE,EAAIhtE,IAAS0Q,KAAKwgH,kBAAkBlkD,EAAIhtE,IACzC0Q,KAAKy/G,cACL,GAGJ,MAAMgB,EAAav1F,EAAOpwB,MAAM7F,UAAUgiG,mBAAmBj3F,KAAK45G,MAKlE,OAH8BrnH,EAAckuH,GAC5CzgH,KAAK++G,cAAc1gD,KAAKoiD,GAEjB73E,EAAoB1O,EAC7B,CAQA,IAAAmkC,CAAK3vE,EAAQ+9E,GAAoB,GAC/B,IAAIn9E,EAAOZ,EAEX,GAAIsR,KAAK6zG,SAAWR,EAAsB1pF,WACxC,OAAOif,EAAoBwpE,4BAI7B,GAAKpyG,KAAK0gH,YAAYxzH,OAAS,IAAQ8S,KAAKu+G,WAC1C,OAAOv+G,KAAK2gH,YAAYrxH,EAAMm9E,GAIhC,IAAIm0C,EAAY,KAChB,GAAItxH,EAAKpC,OAAS8S,KAAKy+G,mBACrBmC,EAAYtxH,EAAK4C,OAAO8N,KAAKy+G,kBAC7BnvH,EAAOA,EAAK4C,OAAO,EAAG8N,KAAKy+G,mBAGtBz+G,KAAK6gH,aAAaD,EAAU1zH,SAC/B,OAAO8S,KAAK8gH,qBAOhB9gH,KAAKu+G,YAAa,EAElB,MAAMwC,EAAsB/gH,KAAKghH,sBAAsB,GAAG9zH,OAAS,EACvC8S,KAAKghH,sBAAsB,GAAG9zH,OAASoC,EAAKpC,OAQxE,OANA8S,KAAK++G,cAAc1gD,KAAKr+D,KAAKghH,sBAAsB,GAC3BpxH,EAAWmxH,GACX/gH,KAAKghH,sBAAsB,GAC3B1xH,GACxB0Q,KAAKuzG,aAAa3nC,cAAgBt8E,EAAKpC,OAEnC0zH,EAGK5gH,KAAK2gH,YAAYC,EAAW,OAIrC5gH,KAAKuzG,aAAa7nC,aACX9iC,EAAoB1O,GAC7B,CASA,WAAAymF,CAAYrxH,EAAMm9E,GAAoB,GACpC,MAAMhyE,EAAUnL,EAAKpC,OAGrB,OAAIu/E,GAAqBzsE,KAAK6gH,aAAapmH,IACzCuF,KAAKihH,iBAAmBxmH,EACxBuF,KAAK0gH,YAAY5nG,KAAKxpB,GAKjBs5C,EAAoB1O,IAHlBl6B,KAAK8gH,oBAIhB,CAOA,uBAAAI,CAAwBhqB,GAGtBl3F,KAAKghH,sBAAwB91F,EAAOpwB,MAAM7F,UAAUqiG,wBAAwBJ,GAGxEl3F,KAAKo/G,uBACPp/G,KAAKi/G,sBAAwB/zF,EAAOpwB,MAAM7F,UAAUmiG,wBAClDF,EACAl3F,KAAKq/G,4BAEPr/G,KAAKi/G,sBAAwB/zF,EAAOpwB,MAAM7F,UAAUkiG,kBAAkBD,EAE1E,CAKA,KAAArwB,CAAMt+C,GACAvoB,KAAKihH,gBACPjhH,KAAK0zG,eAAiBnrF,EAEtBA,GAEJ,CAMA,cAAA44F,GACE,GAA6B,IAAzBnhH,KAAKihH,gBACP,OAEFjhH,KAAKu+G,YAAa,EAClB,MAAMjvH,EAAO0Q,KAAKohH,sBACZL,EAAqB/gH,KAAKghH,sBAAsB,GAAG9zH,OAAS,EACvC8S,KAAKghH,sBAAsB,GAAG9zH,OAASoC,EAAKpC,OAmBvE,GAjBA8S,KAAK++G,cAAc1gD,KAAKr+D,KAAKghH,sBAAsB,GAC3BpxH,EAAWmxH,GACX/gH,KAAKghH,sBAAsB,GAC3B1xH,GACxB0Q,KAAKuzG,aAAa3nC,cAAgBt8E,EAAKpC,OAGnC8S,KAAK81G,iBACP91G,KAAK81G,gBAAiB,EACtB91G,KAAK00G,SACH,IAAItB,EAAsBjpC,EAA0B/P,gBAC1B,GACA,KACA,EACAp6D,KAAK45G,QAG/B55G,KAAK0zG,eAAgB,CACvB,MAAM98C,EAAK52D,KAAK0zG,eAChB1zG,KAAK0zG,eAAiB,KACtB98C,GACF,CACF,CAKA,oBAAA79B,CAAqBsoF,EAAM9oF,GACzB,GAAIv4B,KAAK6zG,SAAWR,EAAsBgB,qBACtCr0G,KAAK6zG,SAAWR,EAAsBhqF,KAExC,OASF,GAFArpB,KAAK4/G,sBAEDyB,IAASz4E,EAAoB1O,GAO/B,OANApO,EAAS,6CAA6C8c,EAAoBxpC,SAASiiH,WAC/EA,IAASz4E,EAAoBr+B,kBAC/BvK,KAAK2/G,eAAe,wDAAyD/wH,EAAa2b,mBAE1FvK,KAAK2/G,eAAe,2CAA4C/wH,EAAa0b,mBAKjF,GAAwB,IAApBiuB,EAASrrC,OACX,OAIF,MAAM6nG,EAAiB7pE,EAAOpwB,MAAMC,OAAOC,sBAAsBlM,EAAWhB,KAAKyqC,EAAU,UAAW,GACtG,IAAKw8D,EAGH,OAFA75F,EAAU,qEACV8E,KAAK2/G,eAAe,0CAA2C/wH,EAAa0b,kBAI9E,MAAMg3G,EAAcvsB,EAAe/zB,cACnC,GAAiC,MAA7BsgD,EAAY9qF,aAGd,YAFAx2B,KAAK2/G,eAAe,oCAAoC2B,EAAY9qF,iBAAiB8qF,EAAYhgD,kBAC7E1yE,EAAa0b,kBAInCtK,KAAKqgH,uBACLrgH,KAAKggH,YAAYpD,QACjB58G,KAAKggH,YAAc,KACnBhgH,KAAK6zG,OAASR,EAAsB1pF,WACpC3pB,KAAK45G,KAAO7kB,EAAeh4B,UAC3B/8D,KAAKk/G,WAAanqB,EAAe2B,UAGjC12F,KAAK6+G,WAAa7+G,KAAK4+G,WAAW91C,QAAQ,OAAQ,IAC1B,KAApB9oE,KAAKk/G,aACPl/G,KAAK6+G,WAAa7+G,KAAK6+G,WAAa7+G,KAAKk/G,YAG3Cl/G,KAAKkhH,wBAAwBlhH,KAAK45G,MAClC,MAAM2H,GAAavhH,KAAKm/G,oBAClBqC,EAAexhH,KAAKo/G,uBAI1Bp/G,KAAK++G,cAAgB,IAAInE,EAAe56G,KAAK6+G,WAAY0C,GAAW,GAChE,CAACjlD,EAAIhtE,IAAS0Q,KAAKugH,kBAAkBjkD,EAAIhtE,KACzC,CAACgtE,EAAIhtE,IAAS0Q,KAAKwgH,kBAAkBlkD,EAAIhtE,IACzC0Q,KAAKy/G,cACLz/G,KAAKo/G,uBAMPp/G,KAAKg/G,iBAAmB,IAAIpE,EAAe56G,KAAK6+G,WAAY0C,EAAWC,GACjE,CAACllD,EAAIhtE,IAAS0Q,KAAKyhH,kBAAkBnlD,EAAIhtE,KACzC,CAACgtE,EAAIhtE,IAAS0Q,KAAKwgH,kBAAkBlkD,EAAIhtE,IACzC0Q,KAAKy/G,cACL,IAMNz/G,KAAK8+G,iBAAmB,IAAIz2C,GACtBuC,GAAU5qE,KAAK0hH,iBAAiB92C,KAChCC,GAAW7qE,KAAK2hH,oBAAoB92C,IACpC,MACN7qE,KAAKg/G,iBAAmB,IAAIpE,EAAe56G,KAAK6+G,WAAY0C,EAAWC,GACjE,CAACllD,EAAIhtE,IAAS0Q,KAAK4hH,aAAatlD,EAAIhtE,KACpC,CAACgtE,EAAIhtE,IAAS0Q,KAAKwgH,kBAAkBlkD,EAAIhtE,IACzC0Q,KAAKy/G,eAIbz/G,KAAKg/G,iBAAiB3gD,KAAKr+D,KAAKi/G,uBAGhCj/G,KAAK00G,SACH,IAAItB,EAAsBjpC,EAA0BnQ,UAC1BsnD,EAAYhgD,eACZggD,EAAY9qF,aACZ,EACAu+D,EAAeh4B,WAC7C,CAGA,qBAAA8kD,CAAsBtpF,GAGpBv4B,KAAK8hH,uBACL,MAAMC,EAAgBxpF,EAASyoC,cACzBM,EAAiBygD,EAAgBA,EAAczgD,eAAiB,GACtEthE,KAAK2/G,eACH,GAAGr+C,mDACHxtE,EAAgBykC,EAASwkC,0BAA0BjpE,EAAgBkM,KAAK45G,QACxE,EACJ,CAEA,gBAAA8H,CAAiBM,GACf,MAAM1mH,EAAY0mH,EAAM1mH,UACxB,GAAIA,EAAUC,eAAiB2vB,EAAO+9C,YAAYuB,SAEhD,YADAxqE,KAAK2hH,oBAAoB,iCAAiCrmH,EAAUC,2CAKtE,MAAMjM,EAAO0yH,EAAMr5B,QACbs5B,EAAqBD,EAAMp4B,cAEjC,OAAQo4B,EAAMv3C,aACZ,KAAKv/C,EAAOy2D,+BAA+B6f,aAEzC,YADAxhG,KAAK6hH,sBAAsBG,GAG7B,KAAK92F,EAAOy2D,+BAA+B8f,KACzC,GAAIugB,EAAMjlD,YAAc/8D,KAAK45G,KAAM,CAEjC,MAAMsI,EAAiBF,EAAMhhD,cACvBmhD,EAAiBD,EACjB,KAAMA,EAAe1rF,gBAAgB0rF,EAAe5gD,kBACpD,GACA9qC,EAAe0rF,EAAiBA,EAAe1rF,aAAe,KAWpE,OATwElkC,EAAe0N,KAAK45G,MAC/DtnH,EAAe0vH,EAAMjlD,WAElD/8D,KAAK6zG,OAASR,EAAsBwB,uBACpC70G,KAAK00G,SAAS,IAAItB,EAAsBjpC,EAA0BI,cACpD,kDAAkDz2E,EAAgBkM,KAAK45G,eACvE9lH,EAAgBkuH,EAAMjlD,eAAeolD,IACrC3rF,EACA5nC,EAAakb,eAAgB9J,KAAK45G,MAElD,CAGIqI,EAAqB,GACvBjiH,KAAKw0G,QAAQvE,aAAa3gH,GAE5B,MACF,QAEE0Q,KAAK2hH,oBAAoB,4BACbK,EAAMv3C,0CAExB,CAEA,mBAAAk3C,GACE3hH,KAAK00G,SAAS,IAAItB,EAAsBjpC,EAA0B5/D,kBAC9D,6BAA8B,KAC9B3b,EAAa2b,kBAAmBvK,KAAK45G,MAC3C,CAGA,YAAAgI,CAAaP,EAAM/xH,GACa,OAA1B0Q,KAAKg/G,kBAAuD,OAA1Bh/G,KAAK8+G,iBASvC9+G,KAAK6zG,SAAWR,EAAsBgB,qBAO1Cr0G,KAAKg/G,iBAAiBvC,QAAQ,WAC1B4E,IAASz4E,EAAoB1O,GAKb,IAAhB5qC,EAAKpC,OAEP8S,KAAKg/G,iBAAiB3gD,KAAKr+D,KAAKi/G,uBAEhCj/G,KAAK8+G,iBAAiBhP,aAAaxgH,GARnC0Q,KAAKoiH,cAAcf,EAAM/xH,IANdmmD,EAASthD,MAAM2F,gBAAgBxK,EAAK6S,UAAU,EAAG,KAAK,EAAM,GAXnEnC,KAAK6zG,SAAWR,EAAsBhqF,KACxCyC,EAAS,kEAET5wB,EAAU,qDAAqD8E,KAAK6zG,SAwB1E,CAGA,iBAAA4N,CAAkBJ,EAAM/xH,GACtB,GAA8B,OAA1B0Q,KAAKg/G,iBAMP,YALIh/G,KAAK6zG,SAAWR,EAAsBhqF,MAGxCnuB,EAAU,qDAAqD8E,KAAK6zG,WAKxE,GAAI7zG,KAAK6zG,SAAWR,EAAsBgB,oBAIxC,YADS5+D,EAASthD,MAAM2F,gBAAgBxK,EAAK6S,UAAU,EAAG,KAAK,EAAM,GAKvE,GADAnC,KAAKg/G,iBAAiBvC,QAAQ,WAC1B4E,IAASz4E,EAAoB1O,GAE/B,YADAl6B,KAAKoiH,cAAcf,EAAM/xH,GAI3B,GAAoB,IAAhBA,EAAKpC,OAIP,OAFA8S,KAAKs/G,iBAAmBjB,OACxBr+G,KAAKg/G,iBAAiB3gD,KAAKr+D,KAAKi/G,uBAKlC,GAAIj/G,KAAKs/G,mBAAqBjB,EAE5B,YADAr+G,KAAKw0G,QAAQ1E,aAAaxgH,GAI5B0Q,KAAK6vG,iBAAmBvgH,EACxB,MAAM8mG,EAAYlrE,EAAOpwB,MAAM6rF,SAASuB,WAAWp5F,EAAWhB,KAAKkS,KAAK6vG,gBAAiB,UACtC,GAAG,GACtD,GAAIzZ,EAAW,CAEb,MAAM4rB,EAAQ92F,EAAOpwB,MAAM7F,UAAUkhG,gBAAgBrnG,EAAWhB,KAAKkS,KAAK6vG,gBAAiB,UACtCzZ,EAAUzM,aACVyM,GACrD,IAAK4rB,EAEH,OAKF,OAAQA,EAAMv3C,aACZ,KAAKv/C,EAAOy2D,+BAA+B6f,aAEzC,YADAxhG,KAAK6hH,sBAAsBG,GAG7B,KAAK92F,EAAOy2D,+BAA+B8f,KACzC,GAAIugB,EAAMjlD,YAAc/8D,KAAK45G,KAAM,CAEjC,MAAMsI,EAAiBF,EAAMhhD,cACvBmhD,EAAiBD,EACjB,KAAMA,EAAe1rF,gBAAgB0rF,EAAe5gD,kBACpD,GACA9qC,EAAe0rF,EAAiBA,EAAe1rF,aAAe,KAapE,OAXyElkC,EAAe0N,KAAK45G,MAClEtnH,EAAe0vH,EAAMjlD,WACGzqE,EAAehD,EAAK4C,OAAO,EAAG,KAEjF8N,KAAK6zG,OAASR,EAAsBwB,uBACpC70G,KAAK00G,SACH,IAAItB,EAAsBjpC,EAA0BI,cAC1B,kDAAkDz2E,EAAgBkM,KAAK45G,eACvE9lH,EAAgBkuH,EAAMjlD,eAAeolD,IACrC3rF,EACA5nC,EAAakb,eAAgB9J,KAAK45G,MAEhE,CASA,OAPA55G,KAAKs/G,iBAAmBjB,EAEpBr+G,KAAK6vG,gBAAgB3iH,OAAUkpG,EAAUzM,aAAeq4B,EAAMzrB,gBAChEv2F,KAAKw0G,QAAQ1E,aACX9vG,KAAK6vG,gBAAgB39G,OAAOkkG,EAAUzM,aAAeq4B,EAAMzrB,sBAE/Dv2F,KAAK6vG,gBAAkB,IAGzB,QAEE,MAAM,IAAIx2G,EAAe,4BAA4B2oH,EAAMv3C,yCAA0C,GAE3G,MAAO,GAAIv/C,EAAOpwB,MAAM6rF,SAASwM,qBAAqBrkG,EAAWhB,KAAKkS,KAAK6vG,gBAAiB,UAAW,KAC3F3kF,EAAOpwB,MAAM6rF,SAASyM,iBAAiBtkG,EAAWhB,KAAKkS,KAAK6vG,gBAAiB,UAAW,GAAI,CAEtG30G,EAAU,yGACCu6C,EAASthD,MAAM2F,gBAAgBkG,KAAK6vG,gBAAgB1tG,UAAU,EAAG,KAAK,EAAM,MAEvF,MAAMkgH,EAAY,+DAClBriH,KAAK6zG,OAASR,EAAsBwB,kBACpC70G,KAAK00G,SACH,IAAItB,EAAsBjpC,EAA0BI,cAC1B83C,EAAW,KACXzzH,EAAakb,eACb,MAC9B,CACF,CAGA,iBAAAy2G,CAAkBc,EAAM/xH,GACtB,GAAI+xH,IAASz4E,EAAoB1O,GAE/B,YADAl6B,KAAKoiH,cAAcf,EAAM/xH,GAI3B,GAAoB,IAAhBA,EAAKpC,OACP,OAGF,MAAM6nG,EAAiB7pE,EAAOpwB,MAAMC,OAAOC,sBAAsBlM,EAAWhB,KAAKwB,EAAM,UAAW,GAClG,GAAKylG,EAYL,GAAIA,EAAetqB,cAAgBv/C,EAAOy2D,+BAA+B6f,aAAzE,CAKA,GAAIzM,EAAeh4B,YAAc/8D,KAAK45G,KAAM,CAE1C,MAAMsI,EAAiBntB,EAAe/zB,cAChCmhD,EAAiBD,EACjB,KAAMA,EAAe1rF,gBAAgB0rF,EAAe5gD,kBACpD,GACA9qC,EAAe0rF,EAAiBA,EAAe1rF,aAAe,KAcpE,OAZuElkC,EAAe0N,KAAK45G,MACtEtnH,EAAeyiG,EAAeh4B,WACAzqE,EAAehD,EAAK4C,OAAO,EAAG,UAE7E8N,KAAK6zG,SAAWR,EAAsBgB,qBACxCr0G,KAAK6zG,OAASR,EAAsBwB,kBACpC70G,KAAK00G,SAAS,IAAItB,EAAsBjpC,EAA0BI,cAC1D,sDAAsDz2E,EAAgBkM,KAAK45G,eAAe9lH,EAAgBihG,EAAeh4B,eAAeolD,IACxI3rF,EAAc5nC,EAAakb,eAAgB9J,KAAK45G,QAExD55G,KAAK2/G,eAAe,0CAA2C/wH,EAAakb,gBAGhF,CAEA,GAAIirF,EAAetqB,cACfv/C,EAAOy2D,+BAA+B+f,YACtC3M,EAAetqB,cACfv/C,EAAOy2D,+BAA+BggB,kBAQxC,MAAM,IAAKtoG,EAAe,4BACpB07F,EAAetqB,sCAAuC,GAR5DzqE,KAAKu+G,YAAa,EAClBv+G,KAAK++G,cAActC,QAAQ,YAG3Bz8G,KAAKmhH,gBAjCP,MAFEnhH,KAAK6hH,sBAAsB9sB,QAZvB/0F,KAAK6zG,SAAWR,EAAsBgB,qBACxCr0G,KAAK6zG,OAASR,EAAsBwB,kBACpC70G,KAAK00G,SAAS,IAAItB,EAAsBjpC,EAA0BI,cAC1D,wCAAyC,KACzC37E,EAAakb,eAAgB9J,KAAK45G,QAE1C55G,KAAK2/G,eAAe,wCAAyC/wH,EAAakb,eA+ChF,CAEA,aAAAs4G,CAAcf,GACZv1F,EAAS,wCAAwC8c,EAAoB/rC,KAAKwkH,MAC1ErhH,KAAK6zG,OAASR,EAAsBwB,kBAChCwM,IAASz4E,EAAoBr+B,kBAC/BvK,KAAK00G,SAAS,IAAItB,EAAsBjpC,EAA0B5/D,kBAC5D,6BAA8B,KAC9B3b,EAAa2b,kBAAmBvK,KAAK45G,OAE3C55G,KAAK00G,SAAS,IAAItB,EAAsBjpC,EAA0B3O,WAC5D,mBACA5sE,EAAa0b,iBAAkBtK,KAAK45G,MAE9C,CAGA,iBAAA4G,CAAkBlD,EAAQjtF,GAEpBrwB,KAAK6zG,SAAWR,EAAsBgB,qBACxCvoF,EAAS,+BAA+BuE,qBAAuBrwB,KAAK6zG,UACpE7zG,KAAK2/G,eAAe,+BAA+BtvF,IAAOzhC,EAAa0b,oBAGvEwhB,EAAS,uBAAuBuE,qBAAuBrwB,KAAK6zG,UAC5D7zG,KAAK00G,SAAS,IAAItB,EAAsBjpC,EAA0B3O,WAC5D,qBAAqBnrC,IAAOitF,EAC5B1uH,EAAa0b,iBAAkBtK,KAAK45G,OAE9C,CAGA,uBAAAqG,CAAwB3C,EAAQjtF,GAC1BrwB,KAAK6zG,SAAWR,EAAsBhqF,OAI1CyC,EAAS,8BAA8BuE,qBAAuBrwB,KAAK6zG,UACnE7zG,KAAK2/G,eAAe,8BAA8BtvF,IAAOzhC,EAAa0b,kBACxE,CAGA,kBAAAg2G,GACEtgH,KAAK2/G,eAAe,0BAA2B/wH,EAAa0b,iBAC9D,CAEA,oBAAAw3G,GACM9hH,KAAK0+G,gBACP5nG,aAAa9W,KAAK0+G,eAClB1+G,KAAK0+G,cAAgB,KAEzB,CAQA,cAAAiB,CAAexzG,EAASb,EAASg3G,GAI3BtiH,KAAKggH,aAEPhgH,KAAKggH,YAAYpD,QAEf58G,KAAK++G,eAEP/+G,KAAK++G,cAAcnC,QAEjB58G,KAAKg/G,kBAEPh/G,KAAKg/G,iBAAiBpC,QAIxB58G,KAAK4+G,WAAa,KAClB5+G,KAAK6+G,WAAa,KAClB7+G,KAAKggH,YAAc,KACnBhgH,KAAK++G,cAAgB,KACrB/+G,KAAKg/G,iBAAmB,KACxBh/G,KAAKi/G,sBAAwB,KAC7Bj/G,KAAK8+G,iBAAmB,KACxB9+G,KAAKk/G,WAAa,GAClBl/G,KAAK0gH,YAAc,GACnB1gH,KAAKihH,gBAAkB,EACvBjhH,KAAK81G,gBAAiB,EAGtB91G,KAAK8hH,uBACL9hH,KAAKqgH,uBAGLrgH,KAAK6zG,OAASR,EAAsBhqF,KAGpC,MAAMk5F,EAAW,KAEXviH,KAAK00G,UACP10G,KAAK00G,SACD,IAAItB,EAAsBjpC,EAA0BE,iBAC1Bl+D,GAAW,uBACX,KACAb,GAAW,EACXtL,KAAK45G,OAIrC55G,KAAKw0G,QAAU,KAEfx0G,KAAK00G,SAAW,IAAI,EAGlB4N,EACFzrG,WAAW0rG,EAAU,GAErBA,GAEJ,CAEA,UAAA/6C,GAIE,MAHY,6BACR1zE,EAAgBkM,KAAK45G,oBACN55G,KAAKk/G,YAE1B,mBCz6BF,MAAM,OAAExzH,EAAM,QAAEE,GAAY,EAAQ,OAC9B,WAAEqvH,GAAe,EAAQ,OAEvB9sH,OAAQu9F,GAAiBhgG,GAC3B,mBAAE2D,GAAuBzD,EAE/B,SAAS42H,EAAoBvE,EAAK3uH,EAAMusH,GACtCoC,EAAIV,aAAe,cACnBU,EAAIwE,iBAAiB,GAAG5G,6BACxBoC,EAAIyE,iBAAiB,eAAgB,GAAG7G,6BACxCoC,EAAI5/C,KAAKhvE,EAAmBC,GAC9B,CAEA,SAASqzH,EAAkB1E,EAAK3uH,EAAMusH,GACpCoC,EAAIwE,iBAAiB,GAAG5G,6BACxBoC,EAAIyE,iBAAiB,eAAgB,GAAG7G,6BACxCoC,EAAI5/C,KAAKhvE,EAAmBC,GAAMmB,OACpC,CAEA,SAASsqH,EAAYkD,EAAK3uH,EAAMusH,EAAa+G,GAC3C3E,EAAIyE,iBAAiB,eAAgB,GAAG7G,6BACxCoC,EAAI5/C,KAAK/uE,QAAsCA,EAAOo8F,EAAap8F,GAAOszH,EAC5E,CAEA,MAAM9H,EAAgB,MAIpB,GAAsB,oBAAXvtH,QAA0BA,OAAOoC,YAAcpC,OAAOI,KAAiB,CAEhF,OADYstH,EAAWjtD,QAAO,GACtBuvD,aACCiF,EAEFG,CACT,CACA,OAAO5H,CACR,EAZqB,GActBvvH,EAAOC,QAAQqvH,cAAgBA,EAC/BtvH,EAAOC,QAAQsvH,YAAcA,kBCvC7B,MAAM,aAAEnsH,GAAiB,EAAQ,OAC3B,eAAEyK,GAAmB,EAAQ,MAG7B4hH,EAAa,CAQjB,MAAAjtD,CAAO60D,GAAY,GACjB,MAAM5E,EAAgC,oBAAnB6E,eAAiC,IAAIA,eAAmB,KAC3E,IAAKD,IAAc5E,EACjB,MAAM,IAAI5kH,EAAe,qCACEzK,EAAayb,mBAE1C,OAAO4zG,CACT,GAGFzyH,EAAOC,QAAQwvH,WAAaA,kBCtB5B,MAAM,kBAAE3hH,GAAsB,EAAQ,OAChC,SAAEygH,GAAa,EAAQ,MAqB7BvuH,EAAOC,QAAQgtH,YAbf,cAA0BsB,EAQxB,WAAAh6G,CAAYizE,EAAQ+vC,EAAQ7I,GAC1B54G,MAAM0xE,EAAQ15E,EAAkBu5E,YAAakwC,EAAQ7I,EACvD,mBCnBF,MAAM,kBAAE5gH,GAAsB,EAAQ,OAChC,SAAEygH,GAAa,EAAQ,OACvB,yBAAElC,GAA6B,EAAQ,KAyB7CrsH,EAAOC,QAAQitH,YAjBf,cAA0BqB,EAQxB,WAAAh6G,CAAYizE,EAAQ+vC,EAAQ7I,GAC1B54G,MAAM0xE,EAAQ15E,EAAkBs5E,YAAamwC,EAAQ7I,EACvD,CAEA,aAAAQ,GACE,OAAO7C,EAAyBmL,WAClC,mBCxBF,MAAM,kBAAE1pH,GAAsB,EAAQ,OAChC,SAAEygH,GAAa,EAAQ,OACvB,yBAAElC,GAA6B,EAAQ,KAyB7CrsH,EAAOC,QAAQktH,wBAjBf,cAAsCoB,EAQpC,WAAAh6G,CAAYizE,EAAQ+vC,EAAQ7I,GAC1B54G,MAAM0xE,EAAQ15E,EAAkBq5E,sBAAuBowC,EAAQ7I,EACjE,CAEA,aAAAQ,GACE,OAAO7C,EAAyBoL,aAAepL,EAAyBmL,WAC1E,mBCxBF,MAAM,kBAAE1pH,GAAsB,EAAQ,OAChC,SAAEygH,GAAa,EAAQ,OACvB,yBAAElC,GAA6B,EAAQ,KAyB7CrsH,EAAOC,QAAQmtH,qBAjBf,cAAmCmB,EAQjC,WAAAh6G,CAAYizE,EAAQ+vC,EAAQ7I,GAC1B54G,MAAM0xE,EAAQ15E,EAAkBs6E,UAAWmvC,EAAQ7I,EACrD,CAEA,aAAAQ,GACE,OAAO7C,EAAyBnxE,WAClC,kBCxBF,MAAMi0E,EAAU,EAAQ,OAClB,0BAAEuI,GAA8B,EAAQ,OAExC,eAAEtI,GAAmBD,EAErB9C,EAA2B,CAC/BnxE,UAAS,IAAYw8E,EAA0BC,kCAC/CH,UAAS,IAAYpI,EAAe4B,2BACpCyG,UAAS,IAAYrI,EAAeoD,oCAGtCxyH,EAAOC,QAAQosH,yBAA2BA,kBCX1C,MAAM,KAAEt6G,GAAS,EAAQ,MA4CzB/R,EAAOC,QAAQ23H,kBAAoB7lH,EAAKE,IAnCd,CAIxBkc,QAAkB,UAIlB4nF,QAAkB,UAIlB8hB,UAAkB,YAMlBh5C,iBAAkB,kBAMlBzP,gBAAkB,iBAIlBZ,UAAkB,WAIlBwB,WAAkB,8BCxCpB,MAAM,aAAE5sE,GAAiB,EAAQ,OAC3B,SAAEgvB,EAAQ,MAAEC,EAAK,aAAEC,GAAiB,EAAQ,OAC5C,aAAE1D,GAAiB,EAAQ,OAC3B,oBAAEwuB,GAAwB,EAAQ,OAClC,sBAAEwqE,GAA0B,EAAQ,OACpC,0BAAEjpC,GAA8B,EAAQ,OACxC,kBAAEi5C,GAAsB,EAAQ,OAChC,kBAAEE,GAAsB,EAAQ,KAEhC,UACJznG,EAAS,SACTiQ,GACE,IAAI1R,EA+JR5uB,EAAOC,QAAQ83H,gBA7Jf,cAA8BzlG,EAC5B,WAAA/d,CAAYyjH,EAAazL,GACvBz2G,MAAM,CAAEzE,KAAM,oBACd,MAAMk8G,EAAYyK,EACZ33F,EAAM7rB,KACNmY,EAAS,IAAIiC,EACnBjC,EAAOoM,UAAY,YAAyBrQ,GAC1C,MAAO,CAAC,sBAAsB6jG,UAAe7jG,EAC/C,EACAlU,KAAK+a,IAAM5C,EAAO6C,KAAKhb,KAAK+a,IAAK/a,MACjCA,KAAK+4G,UAAYA,EAEjB/4G,KAAKye,SAAQ,WACX,OAAOze,KAAK0e,aACV1e,KAAKyjH,kBACJ3yF,IACuBA,EAAQ5R,kBAAkBze,SAAY,GAElE,IAEAT,KAAK4hB,wBAAuB,SAA0B8hG,GAEpD,OAD4BA,EAAOjjH,UAAsBT,KAAKkhB,kBAAkBzgB,UACzET,IACT,IAEAA,KAAKyjH,iBAAmB,IAAI5lG,EAAM,CAChChhB,KAAeymH,EAAkBj6F,KACjC9K,cAAeve,OAEdqiB,SAAS+gG,EAAkBzpG,SAAS,WACnC,OAAO3Z,KAAK0e,aAAamN,EAAI83F,uBAC/B,IACCthG,SAAS+gG,EAAkB7hB,SAAS,SAAmBmiB,GAEtD,OADA3K,EAAU6K,gBAAgBF,EAAOG,YAAaH,EAAO1gB,UAC9ChjG,KAAK0e,aAAamN,EAAIi4F,uBAC/B,IAEF9jH,KAAK2jH,uBAAyB,IAAI9lG,EAAM,CACtChhB,KAAeymH,EAAkBzkD,WACjCtgD,cAAeve,OAEd0iB,OAAM,KACL,IAEE,GADWq2F,EAAU+G,oBACVl3E,EAAoB1O,GAAI,CACjC,MAAMkmF,EAAYrH,EAAUgL,eACtBL,EAAS,IAAI9lG,EAAS,CAAE/gB,KAAMumH,EAAkB7hB,UAItD,OAHAmiB,EAAOG,YAAczD,EAAYA,EAAU/0G,QAAU,8CACrDq4G,EAAO1gB,SAAWod,EAAYA,EAAU90G,QAAU,KAClDo4G,EAAOM,aAAe5D,EACfpgH,KAAKkd,aAAawmG,EAC3B,CACF,CAAE,MAAO5jG,GACPgM,EAAS,oCAAoChM,EAAEzU,WAC/C,MAAMq4G,EAAS,IAAI9lG,EAAS,CAAE/gB,KAAMumH,EAAkB7hB,UAItD,OAHAmiB,EAAOG,YAAc/jG,EAAEzU,QACvBq4G,EAAO1gB,SAAWljF,EAAExU,QAAUwU,EAAExU,QAAU1c,EAAa0b,iBACvDo5G,EAAOM,aAAelkG,EACf9f,KAAKkd,aAAawmG,EAC3B,CACgB,IAMjBrhG,SAAS+gG,EAAkB5nD,YAAakoD,IACvC3K,EAAUkL,YAAYP,EAAOQ,iBACtBr4F,EAAIs4F,iBAAiBT,EAAOQ,oBAEpC7hG,SAAS+gG,EAAkBxoD,iBAAiB96C,GAAK+L,EAAIs4F,iBAAiBrkG,EAAEokG,mBACxE7hG,SAAS+gG,EAAkB/4C,kBAAmBq5C,IAC7C3K,EAAUkL,YAAYP,EAAOQ,iBACtBlkH,KAAK0e,aAAamN,EAAI43F,qBAE9BphG,SAAS+gG,EAAkBppD,WAAW,SAAoB0pD,GAEzD,OADA3K,EAAUkL,YAAYP,EAAOQ,iBACtBlkH,KAAK0e,aAAamN,EAAIu4F,eAC/B,IACC/hG,SAAS+gG,EAAkB7hB,SAAS,SAAmBmiB,GAEtD,OADA3K,EAAU6K,gBAAgBF,EAAOG,YAAaH,EAAO1gB,UAC9ChjG,KAAK0e,aAAamN,EAAIi4F,uBAC/B,IACF9jH,KAAKqkH,wBAA0B,IAAIxmG,EAAM,CACvChhB,KAAeymH,EAAkBgB,YACjC/lG,cAAeve,OAEdqiB,SAAS+gG,EAAkB/4C,kBAAkB,SAAqBq5C,GAEjE,OADA53F,EAAS,oCACJitF,EAAUK,oBAMRp5G,KAAK0e,aAAamN,EAAI83F,yBAL3B73F,EAAS,iDACTitF,EAAUkL,YAAYP,EAAOQ,iBAC7Br4F,EAAI04F,wBACGvkH,KAAK0e,aAAamN,EAAI43F,kBAGjC,IACCphG,SAAS+gG,EAAkB7hB,SAAS,SAAmBmiB,GAEtD,OADA3K,EAAU6K,gBAAgBF,EAAOG,YAAaH,EAAO1gB,UAC9ChjG,KAAK0e,aAAamN,EAAIi4F,uBAC/B,IACF9jH,KAAKokH,eAAiB,IAAIvmG,EAAM,CAC9BhhB,KAAeymH,EAAkBr6F,GACjC1K,cAAeve,OAEdqiB,SAAS+gG,EAAkBC,WAAWK,GACrC73F,EAAIs4F,iBAAiB,IAAI/Q,EAAsBsQ,EAAOc,cAAed,EAAO1gB,aAC7E3gF,SAAS+gG,EAAkB/4C,kBAAkB,SAAqBq5C,GAEjE,OADA3K,EAAUkL,YAAYP,EAAOQ,iBACtBlkH,KAAK0e,aAAamN,EAAI43F,iBAC/B,IACCphG,SAAS+gG,EAAkB7hB,SAAS,SAAmBmiB,GAEtD,OADA3K,EAAU6K,gBAAgBF,EAAOG,YAAaH,EAAO1gB,UAC9ChjG,KAAK0e,aAAamN,EAAIi4F,uBAC/B,IACCzhG,SAAS+gG,EAAkB5nD,YAAY,SAAoBkoD,GAG1D,OAFA3K,EAAUkL,YAAYP,EAAOQ,iBAC7BnL,EAAU6K,gBAAgBF,EAAOG,YAAaH,EAAO1gB,UAC9ChjG,KAAK0e,aAAamN,EAAIi4F,uBAC/B,IACF9jH,KAAK8jH,uBAAyB,IAAIjmG,EAAM,CACtChhB,KAAeymH,EAAkBmB,WACjClmG,cAAeve,OAEdqiB,SAAS+gG,EAAkB/4C,kBAAkB,SAAqBq5C,GAEjE,OADA3K,EAAUkL,YAAYP,EAAOQ,iBACtBlkH,KAAK0e,aAAamN,EAAI43F,iBAC/B,GACJ,CAUA,gBAAAU,CAAiBO,GACf,MAAM,QAAEv4G,EAAO,aAAEF,GAAiBy4G,EAClC,OAAK1kH,KAAK+4G,UAAUxB,eAAeprG,EAASF,GAOrCjM,KAAK0e,aAAa1e,KAAKqkH,0BAL5BrkH,KAAK+4G,UAAU6K,gBAAgBz3G,EAASF,GACxCjM,KAAK+4G,UAAUkL,YAAYS,GACpB1kH,KAAK0e,aAAa1e,KAAK8jH,wBAIlC,CAEA,qBAAAS,GAEEvkH,KAAK+4G,UAAUkL,YAAY,IAAI7Q,EAAsBjpC,EAA0BqvC,iBACjD,oBAChC,mBCzKF,MAAM,UACJpgG,EAAS,UACTyC,GACE,EAAQ,OACN,cAAEs3F,GAAkB,EAAQ,OAC5B,qBAAE0C,GAAyB,EAAQ,OACnC,oBAAEjtE,GAAwB,EAAQ,OAClC,sBAAEyqE,GAA0B,EAAQ,MAyL1C7nH,EAAOC,QAAQ2yH,wBAhLf,cAAsCjL,EAQpC,WAAApzG,CAAYk2D,EAAKu8C,EAASc,EAAQr6F,GAEhC3X,MAAM20D,EAAKu8C,EAASc,EAAQr6F,GAK5BjZ,KAAKo4E,gBAAkBn/D,EAAMy0D,iCAK7B1tE,KAAK+kE,cAAgB,KAKrB/kE,KAAKuzG,aAAe,IAAIsC,EAMxB71G,KAAKk6E,mBAAqBjhE,EAAMghE,kBAMhCj6E,KAAKy+G,iBAAmBxlG,EAAMmhE,cAO9Bp6E,KAAK0gH,YAAc,GAMnB1gH,KAAKihH,gBAAkB,EAMvBjhH,KAAK81G,gBAAiB,EAKtB91G,KAAK6zG,OAASR,EAAsBhqF,KAMpCrpB,KAAK+/G,WAAa,IACpB,CAGA,cAAAv0C,GACE,OAAOxrE,KAAKuzG,YACd,CAEA,oBAAA4M,GACMngH,KAAKo4E,gBAAkB,IACzBp4E,KAAK+kE,cAAgBluD,YAAW,KAC9B7W,KAAK0/G,oBAAoB,GACxB1/G,KAAKo4E,iBAEZ,CAEA,oBAAAioC,GACMrgH,KAAK+kE,gBACPjuD,aAAa9W,KAAK+kE,eAClB/kE,KAAK+kE,cAAgB,KAEzB,CAGA,kBAAA26C,GAEA,CAEA,YAAAmB,CAAapxD,GAKX,OAAiC,IAAzBzvD,KAAKihH,iBACHxxD,EAAUzvD,KAAKihH,iBAAoBjhH,KAAKk6E,kBACpD,CAEA,kBAAA4mC,GAEE,OADA9gH,KAAK81G,gBAAiB,EACfltE,EAAoB6E,QAC7B,CAGA,KAAAo5B,CAAMt+C,GACJA,GACF,CAEA,mBAAA64F,GAEE,IAAI9xH,EAAO,GAGPq1H,EAAe3kH,KAAKy+G,iBAExB,GAD+Ez+G,KAAK4kH,mBAAoB5kH,KAAK4kH,oBACzG5kH,KAAK4kH,kBAAmB,CAE1B,GADAD,EAAe3kH,KAAKy+G,iBAAmBz+G,KAAK4kH,oBACxCD,GAAgB,EASlB,OAR8D3kH,KAAKy+G,iBACrCz+G,KAAK4kH,oBAO5Bt1H,EAEL,CAGN,CAEA,GAAI0Q,KAAKihH,gBAAkB0D,EAAc,CACvC,IAAIx3E,EAAcw3E,EAElB,KAAOx3E,GAAentC,KAAKihH,iBAAiB,CAE1C,MAAMrvG,EAAO5R,KAAK0gH,YAAY,GACxBmE,EAAajzG,EAAK1kB,OACpB23H,EAAa13E,GAEf79C,GAAQsiB,EAAK1f,OAAO,EAAGi7C,GACvBntC,KAAK0gH,YAAY,GAAK9uG,EAAK1f,OAAOi7C,GAGlCntC,KAAKihH,iBAAmB9zE,EACxBA,EAAc,IAEd79C,GAAQ0Q,KAAK0gH,YAAYnyH,QACzB4+C,GAAe03E,EACf7kH,KAAKihH,iBAAmB4D,EACxB7kH,KAAKuzG,aAAa7nC,aAEtB,CACF,MAGEp8E,EAAO0Q,KAAK0gH,YAAYzsH,KAAK,IAC7B+L,KAAKuzG,aAAa7nC,YAAc1rE,KAAK0gH,YAAYxzH,OAEjD8S,KAAK0gH,YAAc,GACnB1gH,KAAKihH,gBAAkB,EAIzB,OADqB3xH,EAAKpC,OACnBoC,CACT,iBC7LF,MAAM,KAAEiO,GAAS,EAAQ,MAWzB/R,EAAOC,QAAQ63H,kBAAoB/lH,EAAKE,IARd,CACxB4rB,KAAa,mBACbw1C,WAAa,yBACbylD,YAAa,0BACbG,WAAa,yBACbx7F,GAAa,mCCRf,MAAM,aACJr6B,EAAY,eACZC,GACE,EAAQ,OACN,qBACJgsH,GACE,EAAQ,OACN,UACJh/F,EAAS,SACTiQ,EAAQ,UACR5wB,GACE,EAAQ,OACN,SAAE0iB,GAAa,EAAQ,OACvB,cAAEu1F,GAAkB,EAAQ,OAC5B,kBAAE75G,GAAsB,EAAQ,OAChC,yBAAEu/G,GAA6B,EAAQ,OACvC,oBAAEjwE,GAAwB,EAAQ,OAClC,0BAAEuhC,GAA8B,EAAQ,OACxC,0BAAE+4C,GAA8B,EAAQ,OACxC,kBAAEE,GAAsB,EAAQ,OAChC,gBAAEG,GAAoB,EAAQ,MAyPpC/3H,EAAOC,QAAQqsH,aA3Of,cAA2B3E,EAUzB,WAAApzG,CAAYk2D,EAAKu8C,EAASc,EAAQr6F,EAAO8+F,GACvCz2G,MAAM20D,EAAKu8C,EAASc,EAAQr6F,GACUA,EAAMq6D,yBAC5CtzE,KAAK8kH,kBAAoB,IAAIjM,EAAyB5iD,EAAKh9C,EAAMq6D,0BACjEtzE,KAAK+kH,iBAAmB,IAAIxB,EAAgBvjH,KAAM+3G,GAClD/3G,KAAK+kH,iBAAiBp1G,OACxB,CAEA,WAAAs0G,CAAY1uG,GACVvV,KAAK00G,SAASn/F,EAChB,CAEA,eAAAyvG,GACEhlH,KAAK+zG,kBAAoB,IAC3B,CAEA,oBAAA/pC,CAAqBC,GAEnB,IAAIy5C,EACJ,OAFA53F,EAAS,0CAA0Cm+C,KAE3CA,EAAeC,yBACrB,KAAKC,EAA0BnQ,UAC7B0pD,EAAS,IAAI9lG,EAAS,CAAE/gB,KAAMumH,EAAkBppD,YAChD0pD,EAAOQ,gBAAkBj6C,EACzBjqE,KAAK+kH,iBAAiB7nG,aAAawmG,GACnC,MAEF,KAAKv5C,EAA0BE,iBAC7BrqE,KAAKglH,kBACLtB,EAAS,IAAI9lG,EAAS,CAAE/gB,KAAMumH,EAAkB/4C,mBAChDq5C,EAAOQ,gBAAkBj6C,EACzBjqE,KAAK+kH,iBAAiB7nG,aAAawmG,GACnC,MAEF,KAAKv5C,EAA0B3O,WAC7BkoD,EAAS,IAAI9lG,EAAS,CAAE/gB,KAAMumH,EAAkB5nD,aAChDkoD,EAAOQ,gBAAkBj6C,EACzBjqE,KAAK+kH,iBAAiB7nG,aAAawmG,GACnC,MAEF,KAAKv5C,EAA0BvP,gBAC7B8oD,EAAS,IAAI9lG,EAAS,CAAE/gB,KAAMumH,EAAkBxoD,kBAChD8oD,EAAOQ,gBAAkBj6C,EACzBjqE,KAAK+kH,iBAAiB7nG,aAAawmG,GACnC,MAEF,KAAKv5C,EAA0BqvC,iBAC7Bx5G,KAAKilH,yBAA0B,EAC/B,MAEF,KAAK96C,EAA0BsvC,oBAC7Bz5G,KAAKilH,yBAA0B,EAC/B,MAEF,QAEEjlH,KAAK00G,SAASzqC,GAEpB,CAKA,OAAAjuD,GACE,MAAM0nG,EAAS,IAAI9lG,EAAS,CAAE/gB,KAAMumH,EAAkBzpG,UAEtD,OADA3Z,KAAK+kH,iBAAiB7nG,aAAawmG,GAC5B96E,EAAoB1O,EAC7B,CAEA,eAAA4lF,GACE9/G,KAAK+zG,kBAAoB,KACzB,MAAMiG,EAAah6G,KAAK8kH,kBAAkBxmC,uBAE1C,OADAt+E,KAAK2wG,OAAOl+B,kBAAoBunC,EACxBA,GACN,KAAK1gH,EAAkBu5E,YACvB,KAAKv5E,EAAkBs5E,YACvB,KAAKt5E,EAAkBq5E,sBACrB3yE,KAAK+zG,kBAAoB,IAAI8G,EAC3B76G,KAAKw3E,MACLp2D,GAAOphB,KAAKgqE,qBAAqB5oD,IACjCphB,KAAKw0G,QACLx0G,KAAK2wG,QAEP,MAEF,KAAKr3G,EAAkBs6E,UACrB5zE,KAAK+zG,kBAAoB,IAAImP,EAC3BljH,KAAKw3E,MACLp2D,GAAOphB,KAAKgqE,qBAAqB5oD,IACjCphB,KAAKw0G,QACLx0G,KAAK2wG,QAEP,MAEF,QAEE,MADAz1G,EAAU,iDAAiD8+G,KACrD,IAAInrH,EAAe,6CAA6CmrH,IAC7CprH,EAAa0b,iBACb0vG,GAI7B,OADAluF,EAAS,qBAAqBkuF,KACvBh6G,KAAK+zG,kBAAkB/3F,SAChC,CAKA,OAAA+pD,CAAQ11C,EAAK/kB,GACX,MAAMo4G,EAAS,IAAI9lG,EAAS,CAAE/gB,KAAMumH,EAAkB7hB,UAItD,OAHAmiB,EAAOG,YAAcxzF,EACrBqzF,EAAO1gB,SAAW13F,EAClBtL,KAAK+kH,iBAAiB7nG,aAAawmG,GAC5B96E,EAAoB1O,EAC7B,CASA,YAAA44E,CAAaziF,GACX,MAAMomF,EAAW,MAACpmF,EAAqCA,EAAM,GAK7D,OAHIrwB,KAAK+zG,mBACP/zG,KAAK+zG,kBAAkBmR,QAAQC,QAAQD,QAAQn/C,QAAQ,IAAI75E,MAAMuqH,IAE5D7tE,EAAoB1O,EAC7B,CAQA,cAAAq9E,CAAelnF,EAAK/kB,GAClB,QAAItL,KAAK8kH,kBAAkBzL,yBAKzBr5G,KAAK4jH,gBAAgBvzF,EAAK/kB,IACnB,EAIX,CAEA,iBAAA8tG,GACE,QAAKp5G,KAAK8kH,kBAAkBzL,wBAGrBr5G,KAAK8kH,kBAAkB1L,mBAChC,CAEA,eAAAwK,CAAgBvzF,EAAK/kB,GACftL,KAAK+zG,mBACP/zG,KAAK+zG,kBAAkBhuC,QAAQ11C,EAAK/kB,EAExC,CAKA,KAAAu7D,CAAMt+C,GACJ,OAAOvoB,KAAK+zG,kBAAkBltC,MAAMt+C,EACtC,CAEA,YAAAw7F,GACE,OAAI/jH,KAAK+zG,kBACA/zG,KAAK+zG,kBAAkBgM,WAEzB,IACT,CAKA,UAAAv4C,GACE,OAAIxnE,KAAK+zG,kBACA/zG,KAAK+zG,kBAAkBvsC,aAEzB,gBACT,CAKA,oBAAA8W,GACE,OAAOt+E,KAAK8kH,kBAAkBxmC,sBAChC,CAKA,cAAA9S,GACE,OAAIxrE,KAAK+zG,kBACA/zG,KAAK+zG,kBAAkBvoC,iBAEzB,IACT,CAKA,gBAAAjK,CAAiBlxC,EAAK/kB,GAEpBtL,KAAKilH,6BAA0Br0H,EAC/B,MAAM8yH,EAAS,IAAI9lG,EAAS,CAAE/gB,KAAMumH,EAAkBC,YAItD,OAHAK,EAAOc,cAAgBn0F,EACvBqzF,EAAO1gB,SAAW13F,EAClBtL,KAAK+kH,iBAAiB7nG,aAAawmG,GAC5B1jH,KAAKilH,uBACd,CAKA,IAAA5mD,CAAKhzD,EAASohE,GACZ,OAAOzsE,KAAK+zG,kBAAkB11C,KAAKhzD,EAASohE,EAC9C,aC1QFjhF,EAAOC,QAAQ25H,oBAAsB,CACnC,EAAG,CACDvoH,KAAa,eACb85B,YAAa,gDAEf,IAAM,CACJ95B,KAAa,iBACb85B,YAAa,kCAEf,KAAM,CACJ95B,KAAa,aACb85B,YAAa,2EAEf,KAAM,CACJ95B,KAAa,iBACb85B,YAAa,uCAEf,KAAM,CACJ95B,KAAa,mBACb85B,YAAa,sDAEf,KAAM,CACJ95B,KAAa,WACb85B,YAAa,IAEf,KAAM,CACJ95B,KAAa,kBACb85B,YAAa,gDAEf,KAAM,CACJ95B,KAAa,mBACb85B,YAAa,oDAEf,KAAM,CACJ95B,KAAa,6BACb85B,YAAa,2DAEf,KAAM,CACJ95B,KAAa,mBACb85B,YAAa,sCAEf,KAAM,CACJ95B,KAAa,kBACb85B,YAAa,8BAEf,KAAM,CACJ95B,KAAa,oBACb85B,YAAa,wDAEf,KAAM,CACJ95B,KAAa,iBACb85B,YAAa,gGAEf,KAAM,CACJ95B,KAAa,kBACb85B,YAAa,4BAEf,KAAM,CACJ95B,KAAa,kBACb85B,YAAa,yEAEf,KAAM,CACJ95B,KAAa,cACb85B,YAAa,4EAEf,KAAM,CACJ95B,KAAa,gBACb85B,YAAa,0FCnEjB,MAAM,UACJ9a,EAAS,UACTzC,EAAS,SACT0S,EAAQ,SACR7wB,EAAQ,UACRC,GAAc,EAAQ,OAElB,WAAEwX,GAAe,EAAQ,MACzB,QAAE9mB,EAAO,IACPC,GAAQ,EAAQ,OAClB,aAAE+C,GAAiB,EAAQ,OAC3B,MAAEie,GAAU,EAAQ,OACpB,eAAExT,GAAmB,EAAQ,OAC7B,oBAAEuvC,GAAwB,EAAQ,OAClC,sBAAEwqE,GAA0B,EAAQ,OACpC,0BAAEjpC,GAA8B,EAAQ,OACxC,sBAAEkpC,GAA0B,EAAQ,OACpC,oBAAE+R,GAAwB,EAAQ,OAClC,wBAAEhH,GAA4B,EAAQ,MAEtCiH,EAAO,EAAQ,MACfC,EAAQ,EAAQ,OAEhB,oBACJ90H,GACE5E,GACE,gBACJkI,GACEjI,GACE,SACJ+mB,GACEF,EAKJ,IAAI6yG,GADqC,oBAAXh4H,OAAyB+4B,OAAS/4B,QAChCi4H,UAI9BD,EAAwC,EAAQ,MA2b3C,CAGL,MAAM,iBAAE/U,GAAqB,EAAQ,MACrC3jG,EAAMuxG,EAAyB5N,GAE/B3jG,EAAMuxG,EAAyB,MAQ7B,sBAAAqH,CAAuBC,GACrB,IAAIt1G,EAAU,CAAC,EACXpQ,KAAKs2G,MACPlmG,EAAUpQ,KAAK8wG,mBAGf1gG,EAAe,MAAI,IAAIk1G,EAAMK,MAAM,CACjCC,WAAW,KAIbx1G,EAAe,MAAI,IAAIi1G,EAAKM,MAG9B,MAAME,EAAUz1G,EAAe,MACzB01G,EAAuBD,EAAQE,iBAOrC,OANAF,EAAQE,iBAAmB,SAA6BC,EAAMz9F,GAC5D,MAAMwuF,EAAS+O,EAAqBnzH,KAAKqN,KAAMgmH,EAAMz9F,GAErD,OADAwuF,EAAO1iG,GAAG,QAASqxG,GACZ3O,CACT,EAEO3mG,CACT,GAEJ,CAEA5kB,EAAOC,QAAQy3H,0BAndf,cAAwC9E,EAStC,WAAAr+G,CAAYk2D,EAAKu8C,EAASc,EAAQr6F,GAChC3X,MAAM20D,EAAKu8C,EAASc,EAAQr6F,GAI5BjZ,KAAKw3E,KAzBT,SAAkBvhB,GAEhB,MAAO,KADGA,EAAI6W,MAAM,wBACN,IAChB,CAsBgBm5C,CAAShwD,GAKrBj2D,KAAKklH,QAAU,KAKfllH,KAAKqwG,YAAa,IAAItrF,MAAOkzB,SAgB/B,CAMA,MAAA88D,GACE/0G,KAAKqgH,uBACLrgH,KAAK6zG,OAASR,EAAsB1pF,WAEpC3pB,KAAK00G,SACC,IAAItB,EACAjpC,EAA0BnQ,UAC1B,YACA,EACA,KACAh6D,KAAKqwG,YACjB,CAQA,OAAAsC,CAAQ4D,EAAgBhhG,GACtB,GAAIghG,IAAmBv2G,KAAKklH,QAE1B,OAEF,GAAIllH,KAAK6zG,SAAWR,EAAsBgB,oBAExC,OAEF,MAAM6R,EAAS,GACT1vD,EAAO4uD,EAAoB7vG,EAAMihD,OAAS4uD,EAAoB,GACpEc,EAAOptG,KAAK,GAAGvD,EAAMihD,QAAQA,EAAK35D,SAAS25D,EAAK7/B,qBACzB/lC,IAAnB2kB,EAAM4wG,UACRD,EAAOptG,KAAK,kBAAkBvD,EAAM4wG,YAElC5wG,EAAMhK,QACR26G,EAAOptG,KAAK,WAAWvD,EAAMhK,UAE/B,MAAM8kB,EAAM61F,EAAOjyH,KAAK,MAEGshB,EAAMrY,KAAkBqY,EAAM4wG,SAAkB5wG,EAAMihD,KAAgBjhD,EAAMhK,OACvGvL,KAAK6zG,OAASR,EAAsBwB,kBACpC70G,KAAK+lE,QAAQ,sBAAsB11C,IAAOzhC,EAAamb,oBACzD,CAEA,OAAA6oG,GAEE5yG,KAAKomH,mBACLpmH,KAAKqmH,gBACP,CAEA,oBAAAC,GACmC,IAA7BtmH,KAAK4kH,oBACP5kH,KAAK4yG,UACI5yG,KAAKumH,eACdvmH,KAAKumH,eAET,CAOA,OAAA7T,CAAQ6D,EAAgBhhG,GAEtB,GADAuW,EAAS,kDAAkDyqF,qBAAkCv2G,KAAKklH,WAC9F3O,IAAmBv2G,KAAKklH,QAE1B,YADAp5F,EAAS,4EAGX,GAAI9rB,KAAK6zG,SAAWR,EAAsBgB,oBAExC,YADAvoF,EAAS,wDAGX,MAAMuE,EAAO9a,EAAa,QAAI,KAAMA,EAAMlK,UAAa,GACvDygB,EAAS,wCAAwCuE,oBAAsBrwB,KAAK6zG,UAExE7zG,KAAK6zG,SAAWR,EAAsBmT,qBACxCxmH,KAAKqgH,uBACLrgH,KAAK6zG,OAASR,EAAsBwB,kBACpC70G,KAAK+lE,QAAQ,sBAAsB11C,IAAOzhC,EAAa0b,mBAEvDtK,KAAK00G,SACC,IAAItB,EACAjpC,EAA0B3O,WAC1B,mBAAmBnrC,IACnB,KACAzhC,EAAa0b,iBAAkB,MAE7C,CAMA,SAAAm8G,CAAUlxG,GACJvV,KAAKw0G,SACPx0G,KAAKw0G,QAAQxE,kBAAkBz6F,EAAMjmB,KAEzC,CAMA,kBAAAowH,GACE5zF,EAAS,uCACT9rB,KAAKse,MAAQ+0F,EAAsBwB,kBACnC70G,KAAK00G,SAAS,IAAItB,EAChBjpC,EAA0BvP,gBAC1B,uBACA,KACAhsE,EAAa6a,SAEjB,CAMA,OAAAuS,GACE,GAAIhc,KAAK6zG,SAAWR,EAAsBhqF,KAExC,OADAnuB,EAAU,gCAAgCm4G,EAAsBlkG,OAAOnP,KAAK6zG,WACrEjrE,EAAoBwpE,4BAE7B,IAAKpyG,KAAKw3E,KAER,OADAv8E,EAAS,8BACF2tC,EAAoBt+B,iBAEzBtK,KAAKklH,SACPllH,KAAK0yG,QAAQ,4BAGf5mF,EAAS,4CACT,IACE9rB,KAAKmgH,uBACLngH,KAAK6zG,OAASR,EAAsB2B,mBACNh1G,KAAK0mH,iBAEjC1mH,KAAK0mH,eAAiB1mH,KAAKylH,uBAAuBzlH,KAAK4yG,QAAQp0G,KAAKwB,QAEtE8rB,EAAS,uBAOP9rB,KAAKklH,QAAU,IAAIK,EAAYvlH,KAAKw3E,KAAM,wBAAyBx3E,KAAK0mH,gBACxE1mH,KAAKklH,QAAQyB,QAAU3mH,KAAK4yG,QAAQp0G,KAAKwB,MAK3CA,KAAKklH,QAAQ0B,WAAa,cAC1B5mH,KAAKklH,QAAQ2B,OAAS7mH,KAAK+0G,OAAOv2G,KAAKwB,MACvCA,KAAKklH,QAAQ4B,UAAY9mH,KAAKymH,UAAUjoH,KAAKwB,MAC7CA,KAAKklH,QAAQ6B,QAAU/mH,KAAK2yG,QAAQn0G,KAAKwB,KAAMA,KAAKklH,SACpDllH,KAAKklH,QAAQ8B,QAAUhnH,KAAK0yG,QAAQl0G,KAAKwB,KAAMA,KAAKklH,QAEtD,CAAE,MAAOzmH,GAKP,GAJAqtB,EAAS,qBAAqBrtB,EAAM4M,WACT5M,EAAM4N,MACjCrM,KAAK6zG,OAASR,EAAsBwB,kBACpC70G,KAAKqgH,yBACD5hH,aAAiBpF,GAGnB,MAAM,IAAIA,EAAe,+BAA+BoF,EAAM4M,UACrC5M,EAAM6M,SAAW1c,EAAa0b,kBAEzD,OALEtK,KAAK+/G,WAAathH,EAKbmqC,EAAoBt+B,gBAC7B,CAGA,OADAwhB,EAAS,2BACF8c,EAAoB1O,EAC7B,CAOA,IAAAmkC,CAAK/uE,EAAM23H,GAAQ,GACjB,GAAIjnH,KAAK6zG,SAAWR,EAAsB1pF,WACxC,OAAOif,EAAoBwpE,4BAG7B,MAAM33G,EAAUnL,EAAKpC,OACfg6H,EAAelnH,KAAKk6E,mBAAqBl6E,KAAK4kH,qBAAwB,EAE5E,IAAMqC,IAASC,EAGb,OAFAlnH,KAAK81G,gBAAiB,EAClB91G,KAAKumH,eAAevmH,KAAKumH,gBACtB39E,EAAoB6E,SAK7B,MAAM05E,EAAkBnnH,KAAKy+G,iBACvBzuH,EAAKQ,EAAoBlB,GAC/B,GAAImL,EAAU0sH,EACZ,IAAK,IAAI56H,EAAI,EAAGA,EAAIkO,EAASlO,GAAK46H,EAChCnnH,KAAKklH,QAAQ7mD,KAAKruE,EAAGqC,MAAM9F,EAAGA,EAAI46H,SAGpCnnH,KAAKklH,QAAQ7mD,KAAKruE,GAKpB,OAFAgQ,KAAKuzG,aAAa3nC,cAAgBnxE,IAChCuF,KAAKuzG,aAAa7nC,WACb9iC,EAAoB1O,EAC7B,CAMA,iBAAA0qF,GAGE,OAAO5kH,KAAKklH,QAAUllH,KAAKklH,QAAwB,eAAI,CACzD,CAKA,KAAAr+C,CAAMt+C,GACJvoB,KAAK0zG,eAAiBnrF,EACtBvoB,KAAKqmH,gBACP,CAEA,gBAAAD,GACMpmH,KAAK81G,gBAAkB91G,KAAK4kH,oBAAsB5kH,KAAKk6E,qBAEzDl6E,KAAK81G,gBAAiB,EACtB91G,KAAK00G,SACH,IAAItB,EAAsBjpC,EAA0B/P,gBAC1B,GAAI,KAAM,EAAGp6D,KAAKqwG,aAElD,CAEA,cAAAgW,GACE,IAAKrmH,KAAK0zG,eAAgB,OAW1B,MAAM98C,EAAK52D,KAAK0zG,eAChB1zG,KAAK0zG,eAAiB,KACtB98C,GACF,CAKA,OAAAmP,CAAQ16D,EAASC,GAgDf,OA7CItL,KAAK6zG,SAAWR,EAAsBhqF,OACxCyC,EAAS,gCAAgCzgB,KAGzCrL,KAAK6zG,OAASR,EAAsBgB,oBAEhCr0G,KAAKklH,UACPllH,KAAKklH,QAAQzP,QACbz1G,KAAKklH,QAAQ2B,OAAS,KACtB7mH,KAAKklH,QAAQ4B,UAAY,KACzB9mH,KAAKklH,QAAQ6B,QAAU,KACvB/mH,KAAKklH,QAAQ8B,QAAU,WAAyB,EAChDhnH,KAAKklH,QAAU,MAGbllH,KAAK+kE,gBACPjuD,aAAa9W,KAAK+kE,eAClB/kE,KAAK+kE,mBAAgBn0E,GAQvBoP,KAAK81G,gBAAiB,EAEtB91G,KAAK6zG,OAASR,EAAsBhqF,KAEpCrpB,KAAKw0G,QAAU,MAIbx0G,KAAK00G,WAGP10G,KAAK00G,SAAS,IAAItB,EAAsBjpC,EAA0BE,iBAC1Bh/D,GAAW,uBACX,KACAC,GAAW,EACXtL,KAAKqwG,aAE7CrwG,KAAK00G,SAAW,MAGX9rE,EAAoB1O,EAC7B,CAMA,UAAAstC,GAEE,MADY,kCAAkC1zE,EAAgBkM,KAAKqwG,aAErE,CAEA,sCAAO8S,GAIL,MAAM97F,EAAS,CAAC,WAAY,UAC5B,OAAKzU,EAASyU,SAAek+F,IACxB3yG,EAASyU,SAAe53B,cACxBmjB,EAASyU,SAAe13B,YAMzB,eAAgB41H,EAAY9yH,WAC9Bq5B,EAAS,8EACF,IAGTA,EAAS,uFACF,IAXLA,EAAS,qFACF,EAWX,kBC5bF,MAAM,cAAEhU,GAAkB,EAAQ,OAC5B,wBAAEgnB,GAA4B,EAAQ,OACtC,WAAEpsB,GAAe,EAAQ,OACzB,SAAEmjD,GAAa,EAAQ,OACvB,QAAEhB,GAAY,EAAQ,KACtB,aAAE56D,GAAiB,EAAQ,OAC3B,YAAEC,GAAgB,EAAQ,MAC1B,aAAE8gH,GAAiB,EAAQ,OAC3B,KAAEn9G,GAAS,EAAQ,KACnB,QAAEtE,GAAY,EAAQ,MACtBqjB,EAAQ,EAAQ,MAEtBpxB,EAAOC,QAAU,CACfmxB,QACAi5C,WAEA/9C,gBACAgnB,0BACApsB,aACAmiD,UACA56D,eACAC,cACA8gH,eACAn9G,OACAtE,2BCxBF,MAAM,MAAEwe,GAAU,EAAQ,MACpB,aAAEnpB,EAAY,eAAEC,GAAmB,EAAQ,MAE3CiwC,EAA0B,CAC9B,gBAAAC,CAAiBQ,EAAUpxB,EAAUtR,KAASqX,GAC5CA,EAAKpG,SAASowG,IACMA,EAAM3vH,OAExB64H,IADsB,CAAC7nF,EAAUpxB,EAAUtR,KAASqhH,GACzB,GAE/B,EAEA,WAAAj/E,CAAYM,EAAUpxB,EAAUtR,EAAMwqH,EAAcC,GAClD,IAAKvvG,EAAM+5C,WAAW3jD,EAAStR,GAAOwqH,GACpC,MAAM,IAAIx4H,EAAe,GAAG0wC,2BAAkC1iC,0BACZyqH,IAEtD,EAEA,WAAAr2C,CAAY1xC,EAAUpxB,EAAUtR,GAC9B,GAAIkb,EAAMioE,KAAK7xE,EAAStR,KAA6B,KAAnBsR,EAAStR,GACzC,MAAM,IAAIhO,EAAe,GAAG0wC,2BAAkC1iC,sBAEvCjO,EAAa8E,uBAExC,EAEA,SAAAs9E,CAAUzxC,EAAUpxB,EAAUtR,EAAM2Q,GAClC,GAAIuK,EAAMg6D,OAAO5jE,EAAStR,KAAUsR,EAAStR,GAAM3P,OAASsgB,EAC1D,MAAM,IAAI3e,EAAe,GAAG0wC,2BAAkC1iC,0BACd2Q,IACzB5e,EAAa8E,uBAExC,EAEA,QAAA0rC,CAASG,EAAUpxB,EAAUtR,EAAM0Q,EAAKC,GACtC,GAAIuK,EAAMO,OAAOnK,EAAStR,MAAWsR,EAAStR,GAAQ0Q,GAAOY,EAAStR,GAAQ2Q,GAC5E,MAAM,IAAI3e,EAAe,GAAG0wC,2BAAkC1iC,oBACnB0Q,MAAQC,MAC3B5e,EAAa8E,uBAEzC,EAEA,SAAAw9E,CAAU3xC,EAAUpxB,EAAUtR,GAC5B,IAAKkb,EAAMg6D,OAAO5jE,EAAStR,IACzB,MAAM,IAAIhO,EAAe,GAAG0wC,2BAAkC1iC,sCACFsR,EAAStR,KAC9CjO,EAAa+a,uBAExC,EAEA,SAAAw1B,CAAUI,EAAUpxB,EAAUtR,GAC5B,IAAKkb,EAAMO,OAAOnK,EAAStR,IACzB,MAAM,IAAIhO,EAAe,GAAG0wC,2BAAkC1iC,sCACFsR,EAAStR,KAC9CjO,EAAa+a,uBAExC,EAEA,UAAAq1B,CAAWO,EAAUpxB,EAAUtR,GAC7B,MAAMvO,EAAM6f,EAAStR,GACrB,IAAKkb,EAAMwvG,QAAQj5H,GACjB,MAAM,IAAIO,EAAe,GAAG0wC,2BAAkC1iC,uCACDvO,IACtCM,EAAa+a,uBAExC,EAEA,WAAAu1B,CAAYK,EAAUpxB,EAAUF,EAAKsjE,EAAcrjE,EAAUsjE,GAAY,GACvE,MAAMljF,EAAM6f,EAASF,GACrB,KAAIujE,GAAa,MAACljF,GACdijF,EAAajjE,OAAOpM,QAAQ5T,IAAQ,GACxC,MAAM,IAAIO,EAAe,GAAG0wC,2BAAkCtxB,MAChC3f,yBAA2B4f,IAChCtf,EAAa+a,uBACxC,EAEA,gBAAAwnE,CAAiB5xC,EAAUpxB,EAAUtR,GACnC,MAAMvO,EAAM6f,EAAStR,GACrB,GAAmB,iBAARvO,IAAqBkE,MAAMwB,QAAQ1F,GAC5C,MAAM,IAAIO,EAAe,GAAG0wC,2BAAkC1iC,+BAEpCjO,EAAa+a,uBAE3C,EAEA,gBAAAmnE,CAAiBvxC,EAAUpxB,EAAUtR,EAAM00E,EAAcrjE,EACxCs5G,EAAgBC,EAAYC,GAC3C,MAAMp5H,EAAM6f,EAAStR,GACrB,GAAI,MAACvO,EAAoC,CACvC,GAAIk5H,EACF,OAEF,MAAM,IAAI34H,EAAe,GAAG0wC,2BAAkC1iC,wBAEtCjO,EAAa+a,uBACvC,CAEA,IAAKnX,MAAMwB,QAAQma,EAAStR,IAC1B,MAAM,IAAIhO,EAAe,GAAG0wC,2BAAkC1iC,wBAEtCjO,EAAa+a,wBAEvC,IAAK89G,GAAwC,IAA1Bt5G,EAAStR,GAAM3P,OAChC,MAAM,IAAI2B,EAAe,GAAG0wC,2BAAkC1iC,qBAEtCjO,EAAa+a,wBAGvCwE,EAAStR,GAAMiR,SAAQ,CAAC65G,EAAKhmH,KAC3B,IAAK4vE,EAAajjE,OAAOsE,SAAS+0G,GAChC,MAAM,IAAI94H,EAAe,GAAG0wC,2BAAkC1iC,0BACbqR,IACzBtf,EAAa+a,wBAEvC,IAAK+9G,GACCv5G,EAAStR,GAAMqF,QAAQylH,EAAKhmH,EAAQ,IAAM,EAC5C,MAAM,IAAI9S,EAAe,GAAG0wC,2BAAkC1iC,yCAE9CjO,EAAa8E,uBAEjC,GAEJ,EAEA,gBAAAq9E,CAAiBxxC,EAAUpxB,EAAUtR,GACnC,MAAMvO,EAAM6f,EAAStR,GACrB,GAAIkb,EAAM8nB,UAAUvxC,GAAM,CACxB,IAAKkE,MAAMwB,QAAQ1F,GACjB,MAAM,IAAIO,EAAe,GAAG0wC,2BAAkC1iC,wBAEvCjO,EAAa+a,wBAEtCrb,EAAIwf,SAAS65G,IACX,GAAmB,iBAARA,EACT,MAAM,IAAI94H,EAAe,GAAG0wC,2BAAkC1iC,gCAEvCjO,EAAa+a,uBACtC,GAEJ,CACF,EAEA,cAAA+9C,CAAekgE,EAAUz5G,EAAUtR,GAGjC,MAAM,gBAAEnB,EAAe,gBAAElG,GAAoB,EAAQ,MACrDhK,EAAOC,QAAQqzC,wBAAwBoyC,UAAU02C,EAAUz5G,EAAUtR,GACrE,MAAMvO,EAAM6f,EAAStR,GACf/L,EAAS4K,EAAgB2D,kBAAkB7J,EAAgBgI,MAAOlP,GACxE,GAAIwC,EAAO2N,MACT,MAAM,IAAI5P,EAAe,GAAG+4H,2BAAkC/qH,oCACZ/L,EAAO2N,QACjC7P,EAAa8E,uBAEzC,EAEA,qBAAA2rC,CAAsBuoF,EAAUz5G,EAAUtR,GACxC,MAAMvO,EAAM6f,EAAStR,GACjBvO,GAAOA,EAAIpB,QACb1B,EAAOC,QAAQqzC,wBAAwB4oB,eAAekgE,EAAUz5G,EAAUtR,EAE9E,GAGFrR,EAAOC,QAAQqzC,wBAA0BA,wCCrKzC,MAAM+oF,EAAW,EAAQ,MA4CzBr8H,EAAOC,QAAQqsB,cAnCf,MAgBE,WAAA/X,IAAeqQ,GACb1W,OAAOC,OAAOqG,QAASoQ,EACzB,CAQA,QAAAriB,GACE,OAAOiT,EAAahB,KACtB,CAEA,KAAA4c,GACE,OAAOirG,EAAS7nH,KAtCG,MACH,EAsClB,aCjCFxU,EAAOC,QAAQinB,WAAa,CAC1BC,QATF,SAASA,EAAQxF,GACf,OAAOA,EAAMoE,QAAO,CAACu2G,EAAKj0G,IAAOi0G,EAAI12G,OAAO5e,MAAMwB,QAAQ6f,GAAMlB,EAAQkB,GAAMA,IAAK,GACrF,EAQEjB,SANF,SAAkBzF,EAAO0G,GACvB,OAAO1G,EAAM1N,MAAKge,GAAKA,IAAM5J,GAC/B,0BCmCA,MAAM+I,EAAQ,WAEd,SAASmrG,EAAYh0H,EAAKmJ,GACxB,OAAe,MAARA,GAAgBnJ,aAAemJ,CACxC,CAEA,IAAI8qH,EASAC,EAOAC,EAfJ,IACEF,EAAYp6G,GACd,CAAE,MAAM1Z,GAGN8zH,EAAY,WAAY,CAC1B,CAGA,IACEC,EAAY54G,GACd,CAAE,MAAMnb,GACN+zH,EAAY,WAAY,CAC1B,CAGA,IACEC,EAAgBhyD,OAClB,CAAE,MAAMhiE,GACNg0H,EAAgB,WAAY,CAC9B,CAuBA,SAAStrG,EAAM6tF,EAAQlsD,EAAU4pE,EAAO11H,EAAW+rD,GACzB,iBAAbD,IACT4pE,EAAQ5pE,EAAS4pE,MACjB11H,EAAY8rD,EAAS9rD,UACrB+rD,EAAuBD,EAASC,qBAChCD,EAAWA,EAASA,UAItB,MAAM6pE,EAAa,GACbC,EAAc,GAEdC,EAA6B,oBAAV76H,OA4IzB,YA1IuB,IAAZ8wD,IACTA,GAAW,QAEO,IAAT4pE,IACTA,EAAQr7D,KAGV,SAASy7D,EAAO9d,EAAQ0d,GAEtB,GAAe,OAAX1d,EACF,OAAO,KAET,GAAc,IAAV0d,EACF,OAAO1d,EAET,IAAI/D,EACA8hB,EACJ,GAAqB,iBAAV/d,EACT,OAAOA,EAGT,GAAIsd,EAAYtd,EAAQud,GACtBthB,EAAQ,IAAIshB,OACP,GAAID,EAAYtd,EAAQwd,GAC7BvhB,EAAQ,IAAIuhB,OACP,GAAIF,EAAYtd,EAAQyd,GAC7BxhB,EAAQ,IAAIwhB,GAAc,SAAUp7G,EAAS27G,GAC3Che,EAAO1zC,MAAK,SAASxjE,GACnBuZ,EAAQy7G,EAAOh1H,EAAO40H,EAAQ,GAChC,IAAG,SAAS1yG,GACVgzG,EAAOF,EAAO9yG,EAAK0yG,EAAQ,GAC7B,GACF,SACK,GAAIvrG,EAAM8rG,UAAUje,GACzB/D,EAAQ,QACH,GAAI9pF,EAAM+rG,WAAWle,GAC1B/D,EAAQ,IAAIkiB,OAAOne,EAAO35F,OAAQ+3G,EAAiBpe,IAC/CA,EAAOniF,YAAWo+E,EAAMp+E,UAAYmiF,EAAOniF,gBAC1C,GAAI1L,EAAMksG,SAASre,GACxB/D,EAAQ,IAAI3hF,KAAK0lF,EAAOxyD,eACnB,IAAIqwE,GAAa76H,OAAO+F,SAASi3G,GAStC,OANE/D,EAFEj5G,OAAO8gH,YAED9gH,OAAO8gH,YAAY9D,EAAOv9G,QAG1B,IAAIO,OAAOg9G,EAAOv9G,QAE5Bu9G,EAAOgE,KAAK/H,GACLA,EACEqhB,EAAYtd,EAAQv+G,OAC7Bw6G,EAAQhtG,OAAOs0D,OAAOy8C,QAEE,IAAbh4G,GACT+1H,EAAQ9uH,OAAOqvH,eAAete,GAC9B/D,EAAQhtG,OAAOs0D,OAAOw6D,KAGtB9hB,EAAQhtG,OAAOs0D,OAAOv7D,GACtB+1H,EAAQ/1H,EAEZ,CAEA,GAAI8rD,EAAU,CACZ,MAAM58C,EAAQymH,EAAWlmH,QAAQuoG,GAEjC,IAAc,GAAV9oG,EACF,OAAO0mH,EAAY1mH,GAErBymH,EAAWtvG,KAAK2xF,GAChB4d,EAAYvvG,KAAK4tF,EACnB,CAEA,GAAIqhB,EAAYtd,EAAQud,GAAY,CAClC,IAAIgB,EAAUC,EACdxe,EAAO38F,SAAQ,SAASva,EAAO0a,GAC7B+6G,EAAWT,EAAOt6G,EAAKk6G,EAAQ,GAC/Bc,EAAaV,EAAOh1H,EAAO40H,EAAQ,GACnCzhB,EAAMj4G,IAAIu6H,EAAUC,EACtB,GACF,CACA,GAAIlB,EAAYtd,EAAQwd,GAAY,CAClC,IAAIiB,EACJze,EAAO38F,SAAQ,SAASva,GACtB21H,EAAaX,EAAOh1H,EAAO40H,EAAQ,GACnCzhB,EAAMh2F,IAAIw4G,EACZ,GACF,CAEA,IAAK,IAAI38H,KAAKk+G,EAAQ,CACpB,IAAIt3E,EACAq1F,IACFr1F,EAAQz5B,OAAOoV,yBAAyB05G,EAAOj8H,IAG7C4mC,GAAsB,MAAbA,EAAM1kC,MAGnBi4G,EAAMn6G,GAAKg8H,EAAO9d,EAAOl+G,GAAI47H,EAAQ,GACvC,CAEA,GAAIzuH,OAAOyvH,sBAAuB,CAChC,MAAMC,EAAU1vH,OAAOyvH,sBAAsB1e,GAC7C,IAAK,IAAIl+G,EAAI,EAAGA,EAAI68H,EAAQl8H,OAAQX,IAAK,CAGvC,IAAI88H,EAASD,EAAQ78H,GACjBsiB,EAAanV,OAAOoV,yBAAyB27F,EAAQ4e,KACrDx6G,GAAeA,EAAWJ,YAAe+vC,KAG7CkoD,EAAM2iB,GAAUd,EAAO9d,EAAO4e,GAASlB,EAAQ,GAC1Ct5G,EAAWJ,YACd/U,OAAOqV,eAAe23F,EAAO2iB,EAAQ,CACnC56G,YAAY,IAGlB,CACF,CAEA,GAAI+vC,EAAsB,CACxB,MAAM8qE,EAAmB5vH,OAAOmX,oBAAoB45F,GACpD,IAAK,IAAIl+G,EAAI,EAAGA,EAAI+8H,EAAiBp8H,OAAQX,IAAK,CAChD,IAAIg9H,EAAeD,EAAiB/8H,GAChCsiB,EAAanV,OAAOoV,yBAAyB27F,EAAQ8e,GACrD16G,GAAcA,EAAWJ,aAG7Bi4F,EAAM6iB,GAAgBhB,EAAO9d,EAAO8e,GAAepB,EAAQ,GAC3DzuH,OAAOqV,eAAe23F,EAAO6iB,EAAc,CACzC96G,YAAY,IAEhB,CACF,CAEA,OAAOi4F,CACT,CAEO6hB,CAAO9d,EAAQ0d,EACxB,CAoBA,SAASqB,EAAWz1H,GAClB,OAAO2F,OAAOjH,UAAU1E,SAAS4E,KAAKoB,EACxC,CAkBA,SAAS80H,EAAiBY,GACxB,IAAI5vE,EAAQ,GAIZ,OAHI4vE,EAAcnjG,SAAQuzB,GAAS,KAC/B4vE,EAAcC,aAAY7vE,GAAS,KACnC4vE,EAAcE,YAAW9vE,GAAS,KAC/BA,CACT,CAGA,OAxCAj9B,EAAMgtG,eAAiB,SAAwBnf,GAC7C,GAAe,OAAXA,EACF,OAAO,KAET,IAAIof,EAAiB,WAAa,EAElC,OADAA,EAAep3H,UAAYg4G,EACpB,IAAIof,CACb,EAOAjtG,EAAM4sG,WAAaA,EAKnB5sG,EAAMksG,SAHN,SAAkB/0H,GAChB,MAAsB,iBAARA,GAAwC,kBAApBy1H,EAAWz1H,EAC/C,EAMA6oB,EAAM8rG,UAHN,SAAmB30H,GACjB,MAAsB,iBAARA,GAAwC,mBAApBy1H,EAAWz1H,EAC/C,EAMA6oB,EAAM+rG,WAHN,SAAoB50H,GAClB,MAAsB,iBAARA,GAAwC,oBAApBy1H,EAAWz1H,EAC/C,EAUA6oB,EAAMisG,iBAAmBA,EAElBjsG,CAEN,CA9Pa,GAgQdpxB,EAAOC,QAAUmxB,gBCxSjB,MAaMktG,EAAgB,CACpBC,OAAY,MACZC,WAAY,WAGRl5F,EAA4B,oBAAXvjC,OAAyBA,OAAS+4B,OAKnD2jG,EAAe,CACnBx0D,QAAU,cACVC,SAAU,OACV6pD,MAAU,OACVx+F,QAAU+P,EAAQ/P,SAwGpB,IAkBE,GAA6B+P,EAAQ/P,QAAS,CAE5C,MAAMmpG,EAAK,EAAQ,KACbC,EAASD,EAAGhtH,OACZktH,EAASN,EAAcK,IAAWA,GAAU,UAC5CE,EAAiB,QAAQtpG,QAAQ8vB,QAAQ3+C,OAAO,KACtDwH,OAAOC,OAAOswH,EAAc,CAC1Bv0D,SAAa,GAAG20D,KAAkBD,KAAUF,EAAGI,aAAaJ,EAAGK,SAC/DhL,MAAa8K,EACb1zF,YAAa0zF,GAEjB,CACF,CAAE,MAAOz0G,GAET,CAEA,MAAMi/C,EAAUn7D,OAAOC,OAAO,CAAC,EAjJf,CAChB,EAiJ2E,CAAC,EACtBswH,GAEtDz+H,EAAOC,QAAQopE,QAAUA,YC3HzBrpE,EAAOC,QAAQwO,aA3Cf,MAME,WAAA8F,IAAemU,GACblU,KAAKpF,QACLoF,KAAKrF,UAAUuZ,EACjB,CASA,MAAAvZ,IAAUuZ,GAIR,MAHA,IAAIA,GAAMpG,SAASklG,IACjBhzG,KAAKvP,OAAOuP,KAAK2B,SAAWvU,OAAO4lH,EAAI,IAElChzG,IACT,CAKA,KAAApF,GACEoF,KAAKvP,OAAS,GACduP,KAAK2B,MAAQ,CACf,CAOA,QAAA5T,GACE,OAAOiS,KAAKvP,OAAOwD,KAAK,GAC1B,kBC5CF,MAAM,aAAEgG,GAAiB,EAAQ,MAK3BuwH,EAAgB,MACpB,MAAM3wH,EAAM,GACZ,IAAK,IAAIhH,EAAI,EAAGA,EAAI,MAAOA,EACzBgH,EAAIhH,GAAMA,EAAI,IAAMA,EAAI,IAAO,IAAMzF,OAAOC,aAAawF,GAE3D,OAAOgH,CACR,EANqB,GAQtB,SAAS4wH,EAAa58H,EAAK68H,EAAQC,EAASC,EAAU,KACpD,GAAmB,iBAAR/8H,EACT,OAAOA,EAET,GAAIA,EAAIX,QAAUw9H,EAChB,OAAO78H,EAGT,MAAMu8D,EAAM,IAAInwD,EAChB,IAAK,IAAI1N,EAAI,EAAGA,EAAKm+H,EAAS78H,EAAIX,OAASX,IACzC69D,EAAIzvD,OAAOiwH,EAAQ39H,OAAO,IAE5B,OAAQ09H,GACN,KAxBa,EAyBX,MAAO,GAAGvgE,IAAMv8D,IAClB,KAzBc,EA0BZ,MAAO,GAAGA,IAAMu8D,IAClB,QACE,OAAOv8D,EAEb,CAEA,SAASg9H,EAAY39H,EAAQqN,GAC3B,IAAKA,EAAKrN,OAAQ,OAAOA,EACzB,MAAM49H,EAASvwH,EAAKuyE,MAAM,QAAQ,GAAG5/E,OACrC,OAAO49H,EAAS59H,EAAS49H,EAAS59H,CACpC,CAEA,SAAS69H,EAAel9H,GACtB,MAAO,GAAGA,EAAIZ,OAAO,GAAG22B,gBAAgB/1B,EAAIqE,OAAO,IACrD,CAEA,SAAS84H,EAAWn9H,GAClB,OACEA,SAEe,IAAfA,EAAIX,MAER,CAMA,MAAMgN,EAAc,CAEpBA,WAAyB,SAAoBrM,GAC3C,OAAMA,GAAOA,EAAIX,OAIVW,EAAI+E,MAAM,KAAKF,IAAIq4H,GAAgB92H,KAAK,KAHtCpG,CAIX,GAEAqM,EAAYC,QAAU6wH,EAEtB9wH,EAAYqgD,SAAW,SAAkB1sD,GACvC,OAASm9H,EAAWn9H,EACtB,EAEAqM,EAAY6D,YAAc,SAAqBlQ,GAC7C,OAAOA,EAAIi7E,QAAQ,mBAAoB,GACzC,EAEA5uE,EAAYE,QAAU,SAAiBvM,EAAK68H,EAAQE,GAClD,OAAOH,EAAa58H,EAAK68H,EA5EV,EA4E4BE,EAC7C,EAEA1wH,EAAYG,SAAW,SAAkBxM,EAAK68H,EAAQE,GACpD,OAAOH,EAAa58H,EAAK68H,EA/ET,EA+E4BE,EAC9C,EAEA1wH,EAAYswD,cAAgB,SAAuB38D,GACjD,GAAIA,QACF,MAAM,IAAI3B,MAAM,4BAGlB,OAAiB,IADA2B,EAAIpB,WAAWoB,EAAIX,OAAS,GAEpCW,EAEFA,EAAMT,OAAOC,aAAa,EACnC,EAEA6M,EAAY8D,mBAAqB,SAA4BnQ,GAC3D,GAAIA,QACF,MAAM,IAAI3B,MAAM,kCAGlB,OAAiB,IADA2B,EAAIpB,WAAWoB,EAAIX,OAAS,GAEpCW,EAAIqE,OAAO,EAAGrE,EAAIX,OAAS,GAE7BW,CACT,EAEAqM,EAAY+wH,QAAU,SAAiBp3H,GACrC,MAAMvH,EAAS,IAAI2N,EACbixH,EAAY,IAAIjxH,EAChBkxH,EAAShwH,GAAgB,IAARA,GAAqB,KAARA,EAAa,KAAO,IACxD,IAAIiwH,EAAU,EACd,IAAK,IAAI7+H,EAAI,EAAG8+H,EAAUx3H,EAAE3G,OAAQX,EAAI8+H,EAAS9+H,IAAK,CACpD,MAAMmO,EAAQ7G,EAAEpH,WAAWF,GAK3B,GAJAD,EAAOqO,OAAO8vH,EAAa/vH,EAAM3M,SAAS,IAAK,EAhHlC,IAiHbm9H,EAAUvwH,OAAO6vH,EAAc9vH,IAAU,KACzCpO,EAAOqO,OAAOwwH,IAASC,IAEnB7+H,IAAMsH,EAAE3G,OAAS,EAEnB,KAAOk+H,EAAU,IACf9+H,EAAOqO,OAAO,KAAKwwH,IAASC,MAIhB,KAAZA,IACF9+H,EAAOqO,OAAOuwH,EAAUj3H,KAAK,KAC7B3H,EAAOqO,OAAO,MACdywH,EAAU,EACVF,EAAUtwH,QAEd,CACA,OAAOtO,EAAOyB,UAChB,EASAmM,EAAYoxH,QAAU,SAAiBC,KAAaC,GAClD,MAAMC,EAAQ,IAAID,EAAe,IAC3B7uE,EAAQ4uE,EAAS74H,KAAIrC,GAAKA,EAAIo7H,EAAMl9H,UACvC0F,KAAK,IACLrB,MAAM,SACHk4H,EAA0B,IAAjBnuE,EAAMzvD,OAAe,EAAIyvD,EAAMprC,OAAOs5G,EAAa/9D,KAClE,KAAoB,KAAbnQ,EAAM,IACXA,EAAMpuD,QAER,OAAOouD,EAAMjqD,KAAI6H,GAAQA,EAAK4H,UAAU2oH,KAAS72H,KAAK,KACxD,EAGAzI,EAAOC,QAAQyO,YAAcA,YC1H7B1O,EAAOC,QAAQuvH,aAjCf,MACE,WAAAj7G,CAAYlD,EAAMwZ,GAChBrW,KAAKnD,KAAOA,EACZmD,KAAKqW,SAAWA,EAChBrW,KAAK0rH,QAAU,EACjB,CAEA,eAAIlQ,GACF,IAAI3oH,EAAI,EACR,IAAK,IAAItG,EAAI,EAAGqH,EAAIoM,KAAK0rH,QAAQx+H,OAAQX,EAAIqH,IAAKrH,EAChDsG,GAAKmN,KAAK0rH,QAAQn/H,IAAM,EAE1B,OAAOsG,CACT,CAEA,GAAAkoB,CAAI0C,GACF,QAAU7sB,IAAN6sB,GAAmBzwB,MAAMywB,GAC3B,OAEF,MAAMkuG,EAAa9tF,KAAKgsB,MAAMpsC,EAAIzd,KAAKqW,UAAYrW,KAAKqW,SACxDrW,KAAK0rH,QAAQC,GAAc3rH,KAAK0rH,QAAQC,IAAe,EACvD3rH,KAAK0rH,QAAQC,IACf,CAEA,QAAA59H,GACE,MAAM69H,EAAO,GAIb,OAHA5rH,KAAK0rH,QAAQ59G,SAASvhB,IACpBq/H,EAAK9yG,KAAK,GAAGvsB,MAAMyT,KAAK0rH,QAAQn/H,KAAK,IAEhC,IAAIq/H,EAAK33H,KAAK,QACvB,mBC7BF,IAAI4hE,EAGFA,EAAW,cAUbrqE,EAAOC,QAAQoqE,SAAWA,UCA1BrqE,EAAOC,QAAQoS,KAAO,CACpBsB,aAfF,WACE,IAAI64C,GAAI,IAAIjzB,MAAOkzB,UAMnB,MAAO,uCAAuC6wB,QAAQ,SAAUj2E,IAC9D,MAAMvC,GAAK0nD,EAAoB,GAAhBna,KAAKu3B,UAAiB,GAAK,EAE1C,OADApd,EAAIna,KAAKgsB,MAAM7R,EAAI,KACL,MAANnlD,EAAYvC,EAAS,EAAJA,EAAU,GAAMvC,SAAS,GAAG,GAEzD,aCPA,MAEM46D,EACF,IAAI5jC,KAAKA,KAAKziB,MAAM,8DAElBupH,EAAO,UASPC,EAAiB,MACrB,MAAMC,EAAMn4H,GAAMA,EAAI,GAAK,IAAIA,IAAMA,EAC/BokD,EAAI2Q,EAMV,MAAO,GALM3Q,EAAE9yB,iBACJ6mG,EAAI/zE,EAAE5yB,WAAa,MACnB2mG,EAAI/zE,EAAE1yB,cACNymG,EAAI/zE,EAAExyB,eACNumG,EAAI/zE,EAAEtyB,eAElB,EATsB,GAUjBsmG,EAAU,CAAC,cAAe,UAAmBH,EAAMC,GAAgB73H,KAAK,MAUxEsF,EAAU,CAKd,QAvCc,UA4Cd,KAAiBovD,EAcjB,cAAiBmjE,EAMjB,OAxDa,CACb,KAAW,OACX,MAAW,EACX,SAAW,GA2DX,KAAiBD,EAKjB,OAAiB,EAMjB,SAAiB,EAKjB,QAAiBG,EAEjBj+H,SAAQ,IACCi+H,GAGXxgI,EAAOC,QAAQ8N,QAAUA,iBCjGzB,MAAM,MAAEwe,GAAU,EAAQ,OACpB,UAAEpc,GAAc,EAAQ,MAE9BnQ,EAAOC,QAAQssB,MAAQA,EACvBvsB,EAAOC,QAAQkQ,UAAYA,YCG3B,SAASgX,EAAQjD,GACf,OAAOA,EAAI6B,QAAO,CAACrjB,EAAGD,IAAMC,EAAEkjB,OAAO5e,MAAMwB,QAAQ/F,GAAK0kB,EAAQ1kB,GAAKA,IAAI,GAC3E,CAKA,MAAMg+H,EAAa,MACjB,MAAMn7H,EAAS,CAUb4rD,QAAQnpD,GACC,MAACA,EAYV4rF,SAAS5rF,IACC04H,EAAWvvE,QAAQnpD,GAc7B3C,UAAU2C,QACgB,IAAVA,EAYhBwzC,QAAQxzC,IACE04H,EAAWr7H,UAAU2C,GAY/B4Z,MAAM5Z,GACG04H,EAAW9sC,SAAS5rF,IAAUf,MAAMwB,QAAQT,GAarD2tF,OAAO3tF,IACI04H,EAAW9+G,MAAM5Z,IACR,OAAVA,IACkB,iBAAVA,GAAsBA,aAAiBmG,QAazDo4D,WAAU,CAACxjE,EAAK4O,IACP+uH,EAAW/qC,OAAO5yF,IAAQA,aAAe4O,EAalDA,KAAI,CAAC5O,EAAK4O,WACM5O,IAAQ4O,EAaxBgvH,cAAa,CAAC59H,KAAQ69H,IACZF,EAAW9+G,MAAMg/G,IACjBx5G,EAAQw5G,GAAO1sH,MAAKvC,GAAQ+uH,EAAWn6D,WAAWxjE,EAAK4O,KAqBjE80E,MAAM1jF,KACA29H,EAAWvvE,QAAQpuD,QACnB29H,EAAW/qC,OAAO5yF,IACY,IAA5BoL,OAAO8F,KAAKlR,GAAKpB,SAIJ,IAAfoB,EAAIpB,QAgBVk/H,OAAM,CAAC99H,EAAK+9H,MACDA,EAAG/9H,GAGdg+H,QAAO,CAACh+H,EAAKi+H,IACJj+H,GAAOi+H,EAGhBC,QAAO,CAACl+H,EAAKm+H,IACJn+H,EAAMm+H,EAGfC,QAAO,CAACp+H,EAAKq+H,IACJr+H,GAAOq+H,EAGhBC,QAAO,CAACt+H,EAAKu+H,IACJv+H,EAAMu+H,EAGf,YAAAC,CAAax+H,EAAKy+H,EAAUC,KAAY94G,GACtC,OAAQ64G,GACN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OAAOz+H,IAAQ0+H,EACjB,IAAK,KACL,IAAK,KACH,CACE,MAAMC,EAAU/4G,EAAK,IApNjB,IAqNJ,OAAO2pB,KAAKkvB,IAAIz+D,EAAM0+H,GAAWC,CACnC,CACF,IAAK,IACH,OAAO3+H,EAAM0+H,EACf,IAAK,KACH,OAAO1+H,GAAO0+H,EAChB,IAAK,IACH,OAAO1+H,EAAM0+H,EACf,IAAK,KACH,OAAO1+H,GAAO0+H,EAChB,QACE,MAAM,IAAI9gI,MAAM,sCAAsC6gI,KAE5D,EAEAz/D,IAAIh/D,GACKwvC,OAAO9wC,MAAMsB,GAatB,QAAAikF,CAASjkF,EAAKyF,GACZ,GAAIk4H,EAAWvvE,QAAQ3oD,GACrB,OAAO,EAET,GAAIA,EAAI6e,SACN,OAAO7e,EAAI6e,SAAStkB,GAEtB,GAAIkE,MAAMwB,QAAQD,GAEhB,OAAOA,EAAImO,QAAQ5T,IAAQ,EAE7B,GAAI29H,EAAW/qC,OAAOntF,GAAM,CAC1B,MAAMyL,EAAO9F,OAAO8F,KAAKzL,GACzB,OAAOk4H,EAAW15C,SAASjkF,EAAKkR,EAClC,CACA,OAAO,CACT,EASAi0E,MAAK,CAACnlF,EAAK4+H,IACF5+H,IAAQ4+H,EAajBC,OAAM,CAAC7+H,EAAKyF,IACFk4H,EAAW9sC,SAASprF,KACnBk4H,EAAW9+G,MAAMpZ,GACdk4H,EAAW15C,SAASjkF,EAAKyF,GACzB2F,OAAO8F,KAAKzL,GAAK0L,MAAKpP,GAAK0D,EAAI1D,KAAO/B,KAIpDi5H,QAAQ9pG,GACCwuG,EAAW/uH,KAAKugB,EAAG,WAG5BnF,OAAOmF,GACEwuG,EAAW/uH,KAAKugB,EAAG,UAG5Bs0D,OAAOt0D,GACEwuG,EAAW/uH,KAAKugB,EAAG,UAG5B2vG,SAAS3vG,GACAwuG,EAAW/uH,KAAKugB,EAAG,aA0D9B,OAlDA3sB,EAAOkvF,KAAOlvF,EAAO4rD,QAKrB5rD,EAAO+uC,UAAY/uC,EAAOquF,SAI1BzlF,OAAO8F,KAAK1O,GAAQgd,SAASG,IAU3Bnd,EAAOmd,GAAKo/G,OAAS,SAAgB/+H,KAAQ4lB,GAC3C,OAAe,OAAR5lB,GAAgBwC,EAAOmd,GAAK3f,KAAQ4lB,EAC7C,EAWApjB,EAAOmd,GAAKq/G,YAAc,SAAqBh/H,KAAQ4lB,GACrD,YAAetjB,IAARtC,GAAqBwC,EAAOmd,GAAK3f,KAAQ4lB,EAClD,EAWApjB,EAAOmd,GAAKs/G,UAAY,SAAmBj/H,KAAQ4lB,GACjD,OAAOpjB,EAAO4rD,QAAQpuD,IAAQwC,EAAOmd,GAAK3f,KAAQ4lB,EACpD,CAAC,IAGIpjB,CACR,EA3VkB,GA6VnBtF,EAAOC,QAAQwgI,WAAaA,kBC3W5B,MAAM,WAAEA,GAAe,EAAQ,MAW/B,SAASuB,EAAQC,GACf,MAAO,CACL12D,KAAM02D,EAAO9nE,GAAKA,IAAM,CAACzxD,EAAGw5H,IAAWA,IAE3C,CAWA,MAAM31G,EAAQ,MACZ,MAAMjnB,EAAS4I,OAAOC,OAAO,CAAC,EAAGsyH,GAGjC,OAFAn7H,EAAO68H,KAAOC,GAAaJ,EAAQI,GACnC98H,EAAO+8H,OAASD,GAAaJ,GAASI,GAC/B98H,CACR,EALa,GAOdtF,EAAOC,QAAQssB,MAAQA,kBCjCvB,MAAM,MAAEA,GAAU,EAAQ,OACpB,aAAEnpB,EAAY,eAAEC,GAAmB,EAAQ,MAE3Ci/H,EAAS,CAAC,EAMhB,SAASC,EAAeziH,EAAS4hH,EAAW,KAAMc,EAAMF,GACtD,MAAMG,EAAcf,EAAW,eAAeA,IAAa,GACrDgB,EAASF,IAAQF,EAAS,UAAUE,IAAQ,GAClD,OAAQ1iH,IACD1c,EAAa+a,uBACT,6BAA6BskH,IAAcC,IAE3Ct/H,EAAaugB,OAAO7D,GAASva,cAAc+3E,QAAQ,IAAK,KAAOmlD,CAE5E,CAMA,SAASptH,EAAShE,EAAMyO,EAASD,EAAS6yG,EAAO3qH,KAAU46H,GACzD,OAAKjQ,EAAM3qH,KAAU46H,GAGd56H,EART,SAAuBsJ,EAAMyO,EAASD,GACpC,MAAM,IAAIxc,EAAe,aAAagO,sBAA0ByO,EAASD,EAC3E,CAIW+iH,CAAcvxH,EAAMyO,EAASD,EAGxC,CAEA,MAAMgjH,EAAW76F,GAAKA,GAAKA,EAAEzzB,aAAeyzB,EAAEzzB,YAAYlD,aAAe22B,EAanE73B,EAAY,CAElBA,QAAoB,SAAiBkB,EAAMtJ,EAAO+X,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,QAAS/X,IAC1I,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAM/jB,QAAST,EACzD,EAEAoI,UACA,SAAmBkB,EAAMtJ,EAAO+X,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,UAAW/X,IAC1H,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMwvG,QAASh0H,EACzD,EAEAoI,mBACA,SAA4BkB,EAAMtJ,EAAO+X,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,qBAAsB/X,IAC9I,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMwvG,QAAQgG,UAAWh6H,EACnE,EAEAoI,aACA,SAAsBkB,EAAMtJ,EAAO+6H,EAAchjH,EAAU1c,EAAa8E,uBAAwB2X,EAAU0iH,EAAeziH,EAAS,WAAWgjH,EAAal/G,MAAMnb,KAAK,SAAUV,IAC7K,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMo1G,OAAQ55H,EAAO+6H,EAC/D,EAEA3yH,sBACA,SAA+BkB,EAAMtJ,EAAO+6H,EAAchjH,EAAU1c,EAAa8E,uBAAwB2X,EAAU0iH,EAAeziH,EAAS,WAAWgjH,EAAal/G,MAAMnb,KAAK,SAAUV,IACtL,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMo1G,OAAOI,UAAWh6H,EAAO+6H,EACzE,EAEA3yH,WACA,SAAoBkB,EAAMtJ,EAAO+X,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,WAAY/X,IAC5H,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMq1G,SAAU75H,EAC1D,EAEAoI,oBACA,SAA6BkB,EAAMtJ,EAAO+X,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,sBAAuB/X,IAChJ,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMq1G,SAASG,UAAWh6H,EACpE,EAEAoI,aACA,SAAsBkB,EAAMtJ,EAAOu+D,EAAYxmD,EAAU1c,EAAa+a,uBAChD0B,EAAU0iH,EAAeziH,EAASwmD,EAAWj1D,KAAMwxH,EAAS96H,KAChF,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAM+5C,WAAYv+D,EAAOu+D,EACnE,EAEAn2D,sBACA,SAA+BkB,EAAMtJ,EAAOu+D,EAAYxmD,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,GAAGwmD,EAAWj1D,kBAAmBwxH,EAAS96H,KACjL,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAM+5C,WAAWy7D,UAAWh6H,EAAOu+D,EAC7E,EAEAn2D,mBACA,SAA4BkB,EAAMtJ,EAAOu+D,EAAYxmD,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,GAAGwmD,EAAWj1D,eAAgBwxH,EAAS96H,KAC3K,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAM+5C,WAAWu7D,OAAQ95H,EAAOu+D,EAC1E,EAEAn2D,wBACA,SAAiCkB,EAAMtJ,EAAOu+D,EAAYxmD,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,GAAGwmD,EAAWj1D,oBAAqBwxH,EAAS96H,KACrL,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAM+5C,WAAWw7D,YAAa/5H,EAAOu+D,EAC/E,GAEAn2D,EAAU4yH,SACV,SAAkB1xH,EAAMtJ,EAAOi7H,EAAUljH,EAAU1c,EAAa8E,uBAAwB2X,EAAU0iH,EAAeziH,EAAS,UAAUkjH,EAAS3xH,SAjG7I,SAAsBqkF,GACpB,OAAOxnF,OAAO8F,KAAK0hF,GAAQxuF,KAAIrC,GAAK6wF,EAAO7wF,IAC7C,CA+FsJo+H,CAAaD,GAAUv6H,KAAK,SAAUV,IAC1L,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMo1G,OAAQ55H,EAAOi7H,EAC/D,EAEA7yH,EAAUm0C,SACV,SAAkBjzC,EAAMtJ,EAAO+X,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,SAAU/X,IACxH,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMO,OAAQ/kB,EACxD,EAEAoI,EAAU0iD,kBACV,SAA2BxhD,EAAMtJ,EAAO+X,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,oBAAqB/X,IAC5I,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMO,OAAOi1G,UAAWh6H,EAClE,EAEAoI,EAAU+yH,eACV,SAAwB7xH,EAAMtJ,EAAO+X,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,iBAAkB/X,IACtI,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMO,OAAO+0G,OAAQ95H,EAC/D,EAEAoI,EAAUgzH,eACV,SAAwB9xH,EAAMtJ,EAAOw5H,EAAUC,EAAS1hH,EAAU1c,EAAa8E,uBAAwB2X,EAAU0iH,EAAeziH,EAAS,GAAGyhH,KAAYC,IAAWz5H,IACjK,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAM+0G,aAAcv5H,EAAOw5H,EAAUC,EAC/E,EAEArxH,EAAU2gF,wBAA0B,SAAiCz/E,EAAMtJ,EAAOw5H,EAAUC,EAAS1hH,EAAU1c,EAAa8E,uBAAwB2X,EAAU0iH,EAAeziH,EAAS,GAAGyhH,KAAYC,eAAsBz5H,IACzN,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAM+0G,aAAaS,UAAWh6H,EAAOw5H,EAAUC,EACzF,EAEArxH,EAAUizH,eACV,SAAwB/xH,EAAMtJ,EAAO+X,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,iBAAkB/X,IACtI,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMg6D,OAAOs7C,OAAQ95H,EAC/D,EAGAoI,EAAUK,SACV,SAAkBa,EAAMtJ,EAAO+X,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,SAAU/X,IACxH,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMg6D,OAAQx+E,EACxD,EAEAoI,EAAU8zC,kBACV,SAA2B5yC,EAAMtJ,EAAO+X,EAAU1c,EAAa+a,uBAAwB0B,EAAU0iH,EAAeziH,EAAS,oBAAqB/X,IAC5I,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAMg6D,OAAOw7C,UAAWh6H,EAClE,EAEAoI,EAAUsqD,QACV,SAAiBppD,EAAMtJ,EAAO25H,EAAU5hH,EAAU1c,EAAa8E,uBAAwB2X,EAAU0iH,EAAeziH,EAAS,WAAW/X,MAClI,OAAOsN,EAAShE,EAAMyO,EAASD,EAAS0M,EAAM07D,MAAOlgF,EAAO25H,EAC9D,EAGA1hI,EAAOC,QAAQkQ,UAAYA,+BCtJ3B,MAAM6pH,EAAY,EAAQ,MAE1BA,EAAUqJ,sBAAwB,EAAQ,MAC1CrJ,EAAUsJ,OAAS,EAAQ,MAC3BtJ,EAAUuJ,SAAW,EAAQ,MAC7BvJ,EAAUwJ,OAAS,EAAQ,KAE3BxJ,EAAUA,UAAYA,EACtBA,EAAUyJ,gBAAkBzJ,EAAUsJ,OAEtCtjI,EAAOC,QAAU+5H,+BCVjB,MAAM,aAAE0J,GAAiB,EAAQ,MAE3BC,EAAa1hI,OAAO2hI,OAAOC,SAwCjC,SAASC,EAAMx+G,EAAQy+G,EAAMjjI,EAAQ2Q,EAAQ/P,GAC3C,IAAK,IAAIX,EAAI,EAAGA,EAAIW,EAAQX,IAC1BD,EAAO2Q,EAAS1Q,GAAKukB,EAAOvkB,GAAKgjI,EAAS,EAAJhjI,EAE1C,CASA,SAASijI,EAAQ/+H,EAAQ8+H,GACvB,IAAK,IAAIhjI,EAAI,EAAGA,EAAIkE,EAAOvD,OAAQX,IACjCkE,EAAOlE,IAAMgjI,EAAS,EAAJhjI,EAEtB,CAqDA,GATAf,EAAOC,QAAU,CACf2lB,OA5FF,SAAgBk9B,EAAMmhF,GACpB,GAAoB,IAAhBnhF,EAAKphD,OAAc,OAAOgiI,EAC9B,GAAoB,IAAhB5gF,EAAKphD,OAAc,OAAOohD,EAAK,GAEnC,MAAMnrC,EAAS1V,OAAO8gH,YAAYkhB,GAClC,IAAIxyH,EAAS,EAEb,IAAK,IAAI1Q,EAAI,EAAGA,EAAI+hD,EAAKphD,OAAQX,IAAK,CACpC,MAAM69D,EAAM9b,EAAK/hD,GACjB4W,EAAO1U,IAAI27D,EAAKntD,GAChBA,GAAUmtD,EAAIl9D,MAChB,CAEA,OAAI+P,EAASwyH,EACJ,IAAIN,EAAWhsH,EAAO1S,OAAQ0S,EAAO1P,WAAYwJ,GAGnDkG,CACT,EA2EEosH,KAAMD,EACNI,cAtCF,SAAuBtlE,GACrB,OAAIA,EAAIl9D,SAAWk9D,EAAI35D,OAAOP,WACrBk6D,EAAI35D,OAGN25D,EAAI35D,OAAO4B,MAAM+3D,EAAI32D,WAAY22D,EAAI32D,WAAa22D,EAAIl9D,OAC/D,EAiCEyiI,SAvBF,SAASA,EAASrgI,GAGhB,GAFAqgI,EAASC,UAAW,EAEhBniI,OAAO+F,SAASlE,GAAO,OAAOA,EAElC,IAAI86D,EAWJ,OATI96D,aAAgBG,YAClB26D,EAAM,IAAI+kE,EAAW7/H,GACZG,YAAYogI,OAAOvgI,GAC5B86D,EAAM,IAAI+kE,EAAW7/H,EAAKmB,OAAQnB,EAAKmE,WAAYnE,EAAKY,aAExDk6D,EAAM38D,OAAOK,KAAKwB,GAClBqgI,EAASC,UAAW,GAGfxlE,CACT,EAOE0lE,OAAQN,IAILzuG,QAAQ20D,IAAIq6C,kBACf,IACE,MAAMC,EAAa,EAAQ,MAE3BxkI,EAAOC,QAAQ8jI,KAAO,SAAUz+G,EAAQy+G,EAAMjjI,EAAQ2Q,EAAQ/P,GACxDA,EAAS,GAAIoiI,EAAMx+G,EAAQy+G,EAAMjjI,EAAQ2Q,EAAQ/P,GAChD8iI,EAAWT,KAAKz+G,EAAQy+G,EAAMjjI,EAAQ2Q,EAAQ/P,EACrD,EAEA1B,EAAOC,QAAQqkI,OAAS,SAAUr/H,EAAQ8+H,GACpC9+H,EAAOvD,OAAS,GAAIsiI,EAAQ/+H,EAAQ8+H,GACnCS,EAAWF,OAAOr/H,EAAQ8+H,EACjC,CACF,CAAE,MAAOzvG,GAET,yBC/HFt0B,EAAOC,QAAU,CACfwkI,aAAc,CAAC,aAAc,cAAe,aAC5Cf,aAAczhI,OAAOyiI,MAAM,GAC3BC,KAAM,uCACNC,qBAAsBhB,OAAO,0BAC7BiB,UAAWjB,OAAO,aAClBkB,YAAalB,OAAO,eACpBmB,WAAYnB,OAAO,aACnBoB,KAAM,oCCRR,MAAM,qBAAEJ,EAAoB,UAAEC,GAAc,EAAQ,MAE9CI,EAAQrB,OAAO,SACfsB,EAAQtB,OAAO,SACfuB,EAASvB,OAAO,UAChBwB,EAAWxB,OAAO,YAClByB,EAAUzB,OAAO,WACjB0B,EAAU1B,OAAO,WACjB2B,EAAQ3B,OAAO,SACf4B,EAAY5B,OAAO,aAKzB,MAAM6B,EAOJ,WAAAlxH,CAAY7C,GACV8C,KAAK8wH,GAAW,KAChB9wH,KAAK+wH,GAAS7zH,CAChB,CAKA,UAAIiG,GACF,OAAOnD,KAAK8wH,EACd,CAKA,QAAI5zH,GACF,OAAO8C,KAAK+wH,EACd,EAGFr3H,OAAOqV,eAAekiH,EAAMx+H,UAAW,SAAU,CAAEgc,YAAY,IAC/D/U,OAAOqV,eAAekiH,EAAMx+H,UAAW,OAAQ,CAAEgc,YAAY,IAO7D,MAAMyiH,UAAmBD,EAcvB,WAAAlxH,CAAY7C,EAAMkT,EAAU,CAAC,GAC3B9O,MAAMpE,GAEN8C,KAAKywH,QAA0B7/H,IAAjBwf,EAAQomD,KAAqB,EAAIpmD,EAAQomD,KACvDx2D,KAAK6wH,QAA8BjgI,IAAnBwf,EAAQ7E,OAAuB,GAAK6E,EAAQ7E,OAC5DvL,KAAKgxH,QAAkCpgI,IAArBwf,EAAQ+1G,UAAiC/1G,EAAQ+1G,QACrE,CAKA,QAAI3vD,GACF,OAAOx2D,KAAKywH,EACd,CAKA,UAAIllH,GACF,OAAOvL,KAAK6wH,EACd,CAKA,YAAI1K,GACF,OAAOnmH,KAAKgxH,EACd,EAGFt3H,OAAOqV,eAAemiH,EAAWz+H,UAAW,OAAQ,CAAEgc,YAAY,IAClE/U,OAAOqV,eAAemiH,EAAWz+H,UAAW,SAAU,CAAEgc,YAAY,IACpE/U,OAAOqV,eAAemiH,EAAWz+H,UAAW,WAAY,CAAEgc,YAAY,IAOtE,MAAM0iH,UAAmBF,EAUvB,WAAAlxH,CAAY7C,EAAMkT,EAAU,CAAC,GAC3B9O,MAAMpE,GAEN8C,KAAK2wH,QAA4B//H,IAAlBwf,EAAQ3R,MAAsB,KAAO2R,EAAQ3R,MAC5DuB,KAAK4wH,QAAgChgI,IAApBwf,EAAQ/E,QAAwB,GAAK+E,EAAQ/E,OAChE,CAKA,SAAI5M,GACF,OAAOuB,KAAK2wH,EACd,CAKA,WAAItlH,GACF,OAAOrL,KAAK4wH,EACd,EAGFl3H,OAAOqV,eAAeoiH,EAAW1+H,UAAW,QAAS,CAAEgc,YAAY,IACnE/U,OAAOqV,eAAeoiH,EAAW1+H,UAAW,UAAW,CAAEgc,YAAY,IAOrE,MAAM2iH,UAAqBH,EASzB,WAAAlxH,CAAY7C,EAAMkT,EAAU,CAAC,GAC3B9O,MAAMpE,GAEN8C,KAAK0wH,QAA0B9/H,IAAjBwf,EAAQ9gB,KAAqB,KAAO8gB,EAAQ9gB,IAC5D,CAKA,QAAIA,GACF,OAAO0Q,KAAK0wH,EACd,EAGFh3H,OAAOqV,eAAeqiH,EAAa3+H,UAAW,OAAQ,CAAEgc,YAAY,IAQpE,MAAM4iH,EAAc,CAalB,gBAAAC,CAAiBp0H,EAAMq0H,EAASnhH,EAAU,CAAC,GACzC,IAAK,MAAMmE,KAAYvU,KAAKwxH,UAAUt0H,GACpC,IACGkT,EAAQggH,IACT77G,EAAS87G,KAAekB,IACvBh9G,EAAS67G,GAEV,OAIJ,IAAIqB,EAEJ,GAAa,YAATv0H,EACFu0H,EAAU,SAAmBniI,EAAMoiI,GACjC,MAAMn8G,EAAQ,IAAI67G,EAAa,UAAW,CACxC9hI,KAAMoiI,EAAWpiI,EAAOA,EAAKvB,aAG/BwnB,EAAMu7G,GAAW9wH,KACjB2xH,EAAaJ,EAASvxH,KAAMuV,EAC9B,OACK,GAAa,UAATrY,EACTu0H,EAAU,SAAiBj7D,EAAMnrD,GAC/B,MAAMkK,EAAQ,IAAI27G,EAAW,QAAS,CACpC16D,OACAjrD,OAAQF,EAAQtd,WAChBo4H,SAAUnmH,KAAK4xH,qBAAuB5xH,KAAK6xH,kBAG7Ct8G,EAAMu7G,GAAW9wH,KACjB2xH,EAAaJ,EAASvxH,KAAMuV,EAC9B,OACK,GAAa,UAATrY,EACTu0H,EAAU,SAAiBhzH,GACzB,MAAM8W,EAAQ,IAAI47G,EAAW,QAAS,CACpC1yH,QACA4M,QAAS5M,EAAM4M,UAGjBkK,EAAMu7G,GAAW9wH,KACjB2xH,EAAaJ,EAASvxH,KAAMuV,EAC9B,MACK,IAAa,SAATrY,EAQT,OAPAu0H,EAAU,WACR,MAAMl8G,EAAQ,IAAI07G,EAAM,QAExB17G,EAAMu7G,GAAW9wH,KACjB2xH,EAAaJ,EAASvxH,KAAMuV,EAC9B,CAGF,CAEAk8G,EAAQrB,KAA0BhgH,EAAQggH,GAC1CqB,EAAQpB,GAAakB,EAEjBnhH,EAAQwE,KACV5U,KAAK4U,KAAK1X,EAAMu0H,GAEhBzxH,KAAKqU,GAAGnX,EAAMu0H,EAElB,EASA,mBAAAK,CAAoB50H,EAAMq0H,GACxB,IAAK,MAAMh9G,KAAYvU,KAAKwxH,UAAUt0H,GACpC,GAAIqX,EAAS87G,KAAekB,IAAYh9G,EAAS67G,GAAuB,CACtEpwH,KAAKgV,eAAe9X,EAAMqX,GAC1B,KACF,CAEJ,GAmBF,SAASo9G,EAAap9G,EAAUw9G,EAASx8G,GACf,iBAAbhB,GAAyBA,EAAS8M,YAC3C9M,EAAS8M,YAAY1uB,KAAK4hB,EAAUgB,GAEpChB,EAAS5hB,KAAKo/H,EAASx8G,EAE3B,CAtBA/pB,EAAOC,QAAU,CACfylI,aACAC,aACAF,QACAI,cACAD,6CChRF,MAAM,WAAEY,GAAe,EAAQ,MAY/B,SAASl5G,EAAK88B,EAAM/4C,EAAM+U,QACLhhB,IAAfglD,EAAK/4C,GAAqB+4C,EAAK/4C,GAAQ,CAAC+U,GACvCgkC,EAAK/4C,GAAMic,KAAKlH,EACvB,CAyLApmB,EAAOC,QAAU,CAAEkF,OAxBnB,SAAgBoxB,GACd,OAAOroB,OAAO8F,KAAKuiB,GAChBrvB,KAAKyvB,IACJ,IAAI8vG,EAAiBlwG,EAAWI,GAEhC,OADK3vB,MAAMwB,QAAQi+H,KAAiBA,EAAiB,CAACA,IAC/CA,EACJv/H,KAAKo8F,GACG,CAAC3sE,GACL/Q,OACC1X,OAAO8F,KAAKsvF,GAAQp8F,KAAKrC,IACvB,IAAIie,EAASwgF,EAAOz+F,GAEpB,OADKmC,MAAMwB,QAAQsa,KAASA,EAAS,CAACA,IAC/BA,EACJ5b,KAAK+qB,IAAa,IAANA,EAAaptB,EAAI,GAAGA,KAAKotB,MACrCxpB,KAAK,KAAK,KAGhBA,KAAK,QAETA,KAAK,KAAK,IAEdA,KAAK,KACV,EAE2BqO,MAhL3B,SAAei0B,GACb,MAAM27F,EAASx4H,OAAOs0D,OAAO,MAC7B,IAIImkE,EACAC,EALAtjC,EAASp1F,OAAOs0D,OAAO,MACvBqkE,GAAe,EACfC,GAAa,EACbC,GAAW,EAGX5iH,GAAS,EACT6mD,GAAQ,EACR5mD,GAAO,EACPrjB,EAAI,EAER,KAAOA,EAAIgqC,EAAOrpC,OAAQX,IAGxB,GAFAiqE,EAAOjgC,EAAO9pC,WAAWF,QAEHqE,IAAlBuhI,EACF,IAAa,IAATviH,GAAmC,IAArBoiH,EAAWx7D,IACZ,IAAX7mD,IAAcA,EAAQpjB,QACrB,GACC,IAANA,GACU,KAATiqE,GAAoC,IAATA,EAGvB,IAAa,KAATA,GAAoC,KAATA,EAgBpC,MAAM,IAAIg8D,YAAY,iCAAiCjmI,KAhBM,CAC7D,IAAe,IAAXojB,EACF,MAAM,IAAI6iH,YAAY,iCAAiCjmI,MAG5C,IAATqjB,IAAYA,EAAMrjB,GACtB,MAAMsQ,EAAO05B,EAAOlkC,MAAMsd,EAAOC,GACpB,KAAT4mD,GACF19C,EAAKo5G,EAAQr1H,EAAMiyF,GACnBA,EAASp1F,OAAOs0D,OAAO,OAEvBmkE,EAAgBt1H,EAGlB8S,EAAQC,GAAO,CACjB,CAEA,MAlBe,IAATA,IAAyB,IAAXD,IAAcC,EAAMrjB,QAmBnC,QAAkBqE,IAAdwhI,EACT,IAAa,IAATxiH,GAAmC,IAArBoiH,EAAWx7D,IACZ,IAAX7mD,IAAcA,EAAQpjB,QACrB,GAAa,KAATiqE,GAA0B,IAATA,GACb,IAAT5mD,IAAyB,IAAXD,IAAcC,EAAMrjB,QACjC,GAAa,KAATiqE,GAA0B,KAATA,EAAe,CACzC,IAAe,IAAX7mD,EACF,MAAM,IAAI6iH,YAAY,iCAAiCjmI,MAG5C,IAATqjB,IAAYA,EAAMrjB,GACtBusB,EAAKg2E,EAAQv4D,EAAOlkC,MAAMsd,EAAOC,IAAM,GAC1B,KAAT4mD,IACF19C,EAAKo5G,EAAQC,EAAerjC,GAC5BA,EAASp1F,OAAOs0D,OAAO,MACvBmkE,OAAgBvhI,GAGlB+e,EAAQC,GAAO,CACjB,KAAO,IAAa,KAAT4mD,IAAsC,IAAX7mD,IAAyB,IAATC,EAIpD,MAAM,IAAI4iH,YAAY,iCAAiCjmI,KAHvD6lI,EAAY77F,EAAOlkC,MAAMsd,EAAOpjB,GAChCojB,EAAQC,GAAO,CAGjB,MAOA,GAAI0iH,EAAY,CACd,GAAyB,IAArBN,EAAWx7D,GACb,MAAM,IAAIg8D,YAAY,iCAAiCjmI,MAE1C,IAAXojB,EAAcA,EAAQpjB,EAChB8lI,IAAcA,GAAe,GACvCC,GAAa,CACf,MAAO,GAAIC,EACT,GAAyB,IAArBP,EAAWx7D,IACE,IAAX7mD,IAAcA,EAAQpjB,QACrB,GAAa,KAATiqE,IAAsC,IAAX7mD,EACpC4iH,GAAW,EACX3iH,EAAMrjB,MACD,IAAa,KAATiqE,EAGT,MAAM,IAAIg8D,YAAY,iCAAiCjmI,KAFvD+lI,GAAa,CAGf,MACK,GAAa,KAAT97D,GAA8C,KAA7BjgC,EAAO9pC,WAAWF,EAAI,GAChDgmI,GAAW,OACN,IAAa,IAAT3iH,GAAmC,IAArBoiH,EAAWx7D,IACnB,IAAX7mD,IAAcA,EAAQpjB,QACrB,IAAe,IAAXojB,GAA0B,KAAT6mD,GAA0B,IAATA,EAEtC,IAAa,KAATA,GAA0B,KAATA,EAqB1B,MAAM,IAAIg8D,YAAY,iCAAiCjmI,KArBd,CACzC,IAAe,IAAXojB,EACF,MAAM,IAAI6iH,YAAY,iCAAiCjmI,MAG5C,IAATqjB,IAAYA,EAAMrjB,GACtB,IAAIgH,EAAQgjC,EAAOlkC,MAAMsd,EAAOC,GAC5ByiH,IACF9+H,EAAQA,EAAMu1E,QAAQ,MAAO,IAC7BupD,GAAe,GAEjBv5G,EAAKg2E,EAAQsjC,EAAW7+H,GACX,KAATijE,IACF19C,EAAKo5G,EAAQC,EAAerjC,GAC5BA,EAASp1F,OAAOs0D,OAAO,MACvBmkE,OAAgBvhI,GAGlBwhI,OAAYxhI,EACZ+e,EAAQC,GAAO,CACjB,CAEA,MAvBe,IAATA,IAAYA,EAAMrjB,GA2B5B,IAAe,IAAXojB,GAAgB4iH,GAAqB,KAAT/7D,GAA0B,IAATA,EAC/C,MAAM,IAAIg8D,YAAY,4BAGX,IAAT5iH,IAAYA,EAAMrjB,GACtB,MAAMkmI,EAAQl8F,EAAOlkC,MAAMsd,EAAOC,GAclC,YAbsBhf,IAAlBuhI,EACFr5G,EAAKo5G,EAAQO,EAAO3jC,SAEFl+F,IAAdwhI,EACFt5G,EAAKg2E,EAAQ2jC,GAAO,GAEpB35G,EAAKg2E,EAAQsjC,EADJC,EACeI,EAAM3pD,QAAQ,MAAO,IAErB2pD,GAE1B35G,EAAKo5G,EAAQC,EAAerjC,IAGvBojC,CACT,0BCvKA,MAAMQ,EAAQtD,OAAO,SACfuD,EAAOvD,OAAO,QAmDpB5jI,EAAOC,QA7CP,MAOE,WAAAsU,CAAY6yH,GACV5yH,KAAK0yH,GAAS,KACZ1yH,KAAK+jE,UACL/jE,KAAK2yH,IAAO,EAEd3yH,KAAK4yH,YAAcA,GAAe9lE,IAClC9sD,KAAK6yH,KAAO,GACZ7yH,KAAK+jE,QAAU,CACjB,CAQA,GAAArzD,CAAIoiH,GACF9yH,KAAK6yH,KAAK/5G,KAAKg6G,GACf9yH,KAAK2yH,IACP,CAOA,CAACA,KACC,GAAI3yH,KAAK+jE,UAAY/jE,KAAK4yH,aAEtB5yH,KAAK6yH,KAAK3lI,OAAQ,CACpB,MAAM4lI,EAAM9yH,KAAK6yH,KAAKtkI,QAEtByR,KAAK+jE,UACL+uD,EAAI9yH,KAAK0yH,GACX,CACF,gCCjDF,MAAMxf,EAAO,EAAQ,MAEf8c,EAAa,EAAQ,MACrB+C,EAAU,EAAQ,OAClB,YAAEzC,GAAgB,EAAQ,MAE1BnB,EAAa1hI,OAAO2hI,OAAOC,SAC3B2D,EAAUvlI,OAAOK,KAAK,CAAC,EAAM,EAAM,IAAM,MACzCmlI,EAAqB7D,OAAO,sBAC5B8D,EAAe9D,OAAO,gBACtB+D,EAAY/D,OAAO,YACnBgE,EAAWhE,OAAO,WAClBuB,EAASvB,OAAO,SAStB,IAAIiE,EA+bJ,SAASC,EAAc5jB,GACrB1vG,KAAKozH,GAAUt6G,KAAK42F,GACpB1vG,KAAKkzH,IAAiBxjB,EAAMxiH,MAC9B,CAQA,SAASqmI,EAAc7jB,GACrB1vG,KAAKkzH,IAAiBxjB,EAAMxiH,OAG1B8S,KAAKizH,GAAoBO,YAAc,GACvCxzH,KAAKkzH,IAAiBlzH,KAAKizH,GAAoBO,YAE/CxzH,KAAKozH,GAAUt6G,KAAK42F,IAItB1vG,KAAK2wH,GAAU,IAAI8C,WAAW,6BAC9BzzH,KAAK2wH,GAAQn6D,KAAO,oCACpBx2D,KAAK2wH,GAAQL,GAAe,KAC5BtwH,KAAKgV,eAAe,OAAQu+G,GAC5BvzH,KAAKqZ,QACP,CAQA,SAASq6G,EAAej+G,GAKtBzV,KAAKizH,GAAoBU,SAAW,KACpCl+G,EAAI66G,GAAe,KACnBtwH,KAAKmzH,GAAW19G,EAClB,CAnDAjqB,EAAOC,QAlbP,MAyBE,WAAAsU,CAAYqQ,EAASwjH,EAAUC,GAW7B,GAVA7zH,KAAKwzH,YAA2B,EAAbK,EACnB7zH,KAAK8zH,SAAW1jH,GAAW,CAAC,EAC5BpQ,KAAK+zH,gBACyBnjI,IAA5BoP,KAAK8zH,SAASE,UAA0Bh0H,KAAK8zH,SAASE,UAAY,KACpEh0H,KAAKi0H,YAAcL,EACnB5zH,KAAKk0H,SAAW,KAChBl0H,KAAK2zH,SAAW,KAEhB3zH,KAAK8uF,OAAS,MAETukC,EAAa,CAChB,MAAMT,OAC+BhiI,IAAnCoP,KAAK8zH,SAASK,iBACVn0H,KAAK8zH,SAASK,iBACd,GACNd,EAAc,IAAIN,EAAQH,EAC5B,CACF,CAKA,wBAAWT,GACT,MAAO,oBACT,CAQA,KAAAiC,GACE,MAAMtlC,EAAS,CAAC,EAiBhB,OAfI9uF,KAAK8zH,SAASO,0BAChBvlC,EAAOwlC,4BAA6B,GAElCt0H,KAAK8zH,SAASS,0BAChBzlC,EAAO0lC,4BAA6B,GAElCx0H,KAAK8zH,SAASW,sBAChB3lC,EAAO4lC,uBAAyB10H,KAAK8zH,SAASW,qBAE5Cz0H,KAAK8zH,SAASa,oBAChB7lC,EAAO8lC,uBAAyB50H,KAAK8zH,SAASa,oBACA,MAArC30H,KAAK8zH,SAASa,sBACvB7lC,EAAO8lC,wBAAyB,GAG3B9lC,CACT,CASA,MAAA+lC,CAAO5C,GAOL,OANAA,EAAiBjyH,KAAK80H,gBAAgB7C,GAEtCjyH,KAAK8uF,OAAS9uF,KAAKi0H,UACfj0H,KAAK+0H,eAAe9C,GACpBjyH,KAAKg1H,eAAe/C,GAEjBjyH,KAAK8uF,MACd,CAOA,OAAAmmC,GAME,GALIj1H,KAAK2zH,WACP3zH,KAAK2zH,SAASle,QACdz1G,KAAK2zH,SAAW,MAGd3zH,KAAKk0H,SAAU,CACjB,MAAM3rG,EAAWvoB,KAAKk0H,SAASf,GAE/BnzH,KAAKk0H,SAASze,QACdz1G,KAAKk0H,SAAW,KAEZ3rG,GACFA,EACE,IAAIr8B,MACF,gEAIR,CACF,CASA,cAAA6oI,CAAe7C,GACb,MAAMlM,EAAOhmH,KAAK8zH,SACZoB,EAAWhD,EAAOnpH,MAAM+lF,MAEQ,IAAjCk3B,EAAKqO,yBACJvlC,EAAOwlC,4BACRxlC,EAAO4lC,0BACwB,IAA7B1O,EAAKyO,qBACiC,iBAA7BzO,EAAKyO,qBACXzO,EAAKyO,oBAAsB3lC,EAAO4lC,yBACH,iBAA7B1O,EAAK2O,sBACV7lC,EAAO8lC,0BAQd,IAAKM,EACH,MAAM,IAAIhpI,MAAM,gDAqBlB,OAlBI85H,EAAKqO,0BACPa,EAASZ,4BAA6B,GAEpCtO,EAAKuO,0BACPW,EAASV,4BAA6B,GAEA,iBAA7BxO,EAAKyO,sBACdS,EAASR,uBAAyB1O,EAAKyO,qBAED,iBAA7BzO,EAAK2O,oBACdO,EAASN,uBAAyB5O,EAAK2O,qBAEH,IAApCO,EAASN,yBACoB,IAA7B5O,EAAK2O,4BAEEO,EAASN,uBAGXM,CACT,CASA,cAAAF,CAAez8F,GACb,MAAMu2D,EAASv2D,EAAS,GAExB,IAC4C,IAA1Cv4B,KAAK8zH,SAASS,yBACdzlC,EAAO0lC,2BAEP,MAAM,IAAItoI,MAAM,qDAGlB,GAAK4iG,EAAO8lC,wBAIL,IACiC,IAAtC50H,KAAK8zH,SAASa,qBACgC,iBAAtC30H,KAAK8zH,SAASa,qBACpB7lC,EAAO8lC,uBAAyB50H,KAAK8zH,SAASa,oBAEhD,MAAM,IAAIzoI,MACR,gEAT+C,iBAAtC8T,KAAK8zH,SAASa,sBACvB7lC,EAAO8lC,uBAAyB50H,KAAK8zH,SAASa,qBAYlD,OAAO7lC,CACT,CASA,eAAAgmC,CAAgB7C,GAkDd,OAjDAA,EAAenkH,SAASghF,IACtBp1F,OAAO8F,KAAKsvF,GAAQhhF,SAASG,IAC3B,IAAI1a,EAAQu7F,EAAO7gF,GAEnB,GAAI1a,EAAMrG,OAAS,EACjB,MAAM,IAAIhB,MAAM,cAAc+hB,oCAKhC,GAFA1a,EAAQA,EAAM,GAEF,2BAAR0a,GACF,IAAc,IAAV1a,EAAgB,CAClB,MAAM4hI,GAAO5hI,EACb,IAAKuqC,OAAOs3F,UAAUD,IAAQA,EAAM,GAAKA,EAAM,GAC7C,MAAM,IAAIE,UACR,gCAAgCpnH,OAAS1a,KAG7CA,EAAQ4hI,CACV,MAAO,IAAKn1H,KAAKi0H,UACf,MAAM,IAAIoB,UACR,gCAAgCpnH,OAAS1a,UAGxC,GAAY,2BAAR0a,EAAkC,CAC3C,MAAMknH,GAAO5hI,EACb,IAAKuqC,OAAOs3F,UAAUD,IAAQA,EAAM,GAAKA,EAAM,GAC7C,MAAM,IAAIE,UACR,gCAAgCpnH,OAAS1a,KAG7CA,EAAQ4hI,CACV,KAAO,IACG,+BAARlnH,GACQ,+BAARA,EAQA,MAAM,IAAI/hB,MAAM,sBAAsB+hB,MANtC,IAAc,IAAV1a,EACF,MAAM,IAAI8hI,UACR,gCAAgCpnH,OAAS1a,IAK/C,CAEAu7F,EAAO7gF,GAAO1a,CAAK,GACnB,IAGG0+H,CACT,CAUA,UAAAqD,CAAWhmI,EAAMimI,EAAKhtG,GACpB8qG,EAAY3iH,KAAK++F,IACfzvG,KAAKw1H,YAAYlmI,EAAMimI,GAAK,CAAC9/G,EAAK3kB,KAChC2+G,IACAlnF,EAAS9S,EAAK3kB,EAAO,GACrB,GAEN,CAUA,QAAAunH,CAAS/oH,EAAMimI,EAAKhtG,GAClB8qG,EAAY3iH,KAAK++F,IACfzvG,KAAKy1H,UAAUnmI,EAAMimI,GAAK,CAAC9/G,EAAK3kB,KAC9B2+G,IACAlnF,EAAS9S,EAAK3kB,EAAO,GACrB,GAEN,CAUA,WAAA0kI,CAAYlmI,EAAMimI,EAAKhtG,GACrB,MAAMwJ,EAAW/xB,KAAKi0H,UAAY,SAAW,SAE7C,IAAKj0H,KAAK2zH,SAAU,CAClB,MAAM1lH,EAAM,GAAG8jB,oBACT2jG,EACwB,iBAArB11H,KAAK8uF,OAAO7gF,GACfilG,EAAKyiB,qBACL31H,KAAK8uF,OAAO7gF,GAElBjO,KAAK2zH,SAAWzgB,EAAKiC,iBAAiB,IACjCn1G,KAAK8zH,SAAS8B,mBACjBF,eAEF11H,KAAK2zH,SAASV,GAAsBjzH,KACpCA,KAAK2zH,SAAST,GAAgB,EAC9BlzH,KAAK2zH,SAASP,GAAY,GAC1BpzH,KAAK2zH,SAASt/G,GAAG,QAASq/G,GAC1B1zH,KAAK2zH,SAASt/G,GAAG,OAAQk/G,EAC3B,CAEAvzH,KAAK2zH,SAASR,GAAa5qG,EAE3BvoB,KAAK2zH,SAASrf,MAAMhlH,GAChBimI,GAAKv1H,KAAK2zH,SAASrf,MAAM0e,GAE7BhzH,KAAK2zH,SAAS9sD,OAAM,KAClB,MAAMpxD,EAAMzV,KAAK2zH,SAAShD,GAE1B,GAAIl7G,EAIF,OAHAzV,KAAK2zH,SAASle,QACdz1G,KAAK2zH,SAAW,UAChBprG,EAAS9S,GAIX,MAAMnmB,EAAO0gI,EAAW5+G,OACtBpR,KAAK2zH,SAASP,GACdpzH,KAAK2zH,SAAST,IAGZlzH,KAAK2zH,SAASkC,eAAeC,YAC/B91H,KAAK2zH,SAASle,QACdz1G,KAAK2zH,SAAW,OAEhB3zH,KAAK2zH,SAAST,GAAgB,EAC9BlzH,KAAK2zH,SAASP,GAAY,GAEtBmC,GAAOv1H,KAAK8uF,OAAO,GAAG/8D,0BACxB/xB,KAAK2zH,SAASt6G,SAIlBkP,EAAS,KAAMj5B,EAAK,GAExB,CAUA,SAAAmmI,CAAUnmI,EAAMimI,EAAKhtG,GACnB,MAAMwJ,EAAW/xB,KAAKi0H,UAAY,SAAW,SAE7C,IAAKj0H,KAAKk0H,SAAU,CAClB,MAAMjmH,EAAM,GAAG8jB,oBACT2jG,EACwB,iBAArB11H,KAAK8uF,OAAO7gF,GACfilG,EAAKyiB,qBACL31H,KAAK8uF,OAAO7gF,GAElBjO,KAAKk0H,SAAWhhB,EAAKgC,iBAAiB,IACjCl1G,KAAK8zH,SAASiC,mBACjBL,eAGF11H,KAAKk0H,SAAShB,GAAgB,EAC9BlzH,KAAKk0H,SAASd,GAAY,GAE1BpzH,KAAKk0H,SAAS7/G,GAAG,OAAQi/G,EAC3B,CAEAtzH,KAAKk0H,SAASf,GAAa5qG,EAE3BvoB,KAAKk0H,SAAS5f,MAAMhlH,GACpB0Q,KAAKk0H,SAASrtD,MAAMqsC,EAAKuB,cAAc,KACrC,IAAKz0G,KAAKk0H,SAIR,OAGF,IAAI5kI,EAAO0gI,EAAW5+G,OACpBpR,KAAKk0H,SAASd,GACdpzH,KAAKk0H,SAAShB,IAGZqC,IACFjmI,EAAO,IAAI6/H,EAAW7/H,EAAKmB,OAAQnB,EAAKmE,WAAYnE,EAAKpC,OAAS,IAOpE8S,KAAKk0H,SAASf,GAAa,KAE3BnzH,KAAKk0H,SAAShB,GAAgB,EAC9BlzH,KAAKk0H,SAASd,GAAY,GAEtBmC,GAAOv1H,KAAK8uF,OAAO,GAAG/8D,0BACxB/xB,KAAKk0H,SAAS76G,QAGhBkP,EAAS,KAAMj5B,EAAK,GAExB,gCCzcF,MAAM,SAAE0mI,GAAa,EAAQ,MAEvBC,EAAoB,EAAQ,OAC5B,aACJhG,EAAY,aACZf,EAAY,YACZoB,EAAW,WACXC,GACE,EAAQ,OACN,OAAEn/G,EAAM,cAAEs+G,EAAa,OAAEI,GAAW,EAAQ,OAC5C,kBAAEoG,EAAiB,YAAEC,GAAgB,EAAQ,MAE7ChH,EAAa1hI,OAAO2hI,OAAOC,SAC3B+G,EAAUlgE,QAAQppD,UAKlBupH,EACsB,mBAAnBC,eAAgCA,eA0rBzC,SAA4B1/D,GAC1Bw/D,EAAQr/D,KAAKH,GAAII,MAAMu/D,EACzB,EAQA,SAASC,EAAW/gH,GAClB,MAAMA,CACR,CAQA,SAAS8gH,EAAmB9gH,GAC1BsL,QAAQ01G,SAASD,EAAY/gH,EAC/B,CA7BAjqB,EAAOC,QApqBP,cAAuBuqI,EAiBrB,WAAAj2H,CAAYqQ,EAAU,CAAC,GACrB9O,QAEAtB,KAAK02H,0BAA4BtmH,EAAQumH,uBACzC32H,KAAK42H,YAAcxmH,EAAQw2G,YAAcqJ,EAAa,GACtDjwH,KAAK62H,YAAczmH,EAAQ2R,YAAc,CAAC,EAC1C/hB,KAAKi0H,YAAc7jH,EAAQwjH,SAC3B5zH,KAAKwzH,YAAmC,EAArBpjH,EAAQyjH,WAC3B7zH,KAAK82H,sBAAwB1mH,EAAQ2mH,mBACrC/2H,KAAKuwH,QAAc3/H,EAEnBoP,KAAKg3H,eAAiB,EACtBh3H,KAAKi3H,SAAW,GAEhBj3H,KAAKk3H,aAAc,EACnBl3H,KAAKm3H,eAAiB,EACtBn3H,KAAKsvH,WAAQ1+H,EACboP,KAAKo3H,YAAc,EACnBp3H,KAAKq3H,SAAU,EACfr3H,KAAKs3H,MAAO,EACZt3H,KAAKu3H,QAAU,EAEfv3H,KAAKw3H,oBAAsB,EAC3Bx3H,KAAKy3H,eAAiB,EACtBz3H,KAAK03H,WAAa,GAElB13H,KAAK23H,UAAW,EAChB33H,KAAK43H,OAAQ,EACb53H,KAAK6zG,OA1DQ,CA2Df,CAUA,MAAA1B,CAAOzC,EAAOnuG,EAAUq1D,GACtB,GAAqB,IAAjB52D,KAAKu3H,SAtEI,GAsEgBv3H,KAAK6zG,OAAoB,OAAOj9C,IAE7D52D,KAAKg3H,gBAAkBtnB,EAAMxiH,OAC7B8S,KAAKi3H,SAASn+G,KAAK42F,GACnB1vG,KAAK63H,UAAUjhE,EACjB,CASA,OAAAkhE,CAAQlkI,GAGN,GAFAoM,KAAKg3H,gBAAkBpjI,EAEnBA,IAAMoM,KAAKi3H,SAAS,GAAG/pI,OAAQ,OAAO8S,KAAKi3H,SAAS1oI,QAExD,GAAIqF,EAAIoM,KAAKi3H,SAAS,GAAG/pI,OAAQ,CAC/B,MAAMk9D,EAAMpqD,KAAKi3H,SAAS,GAO1B,OANAj3H,KAAKi3H,SAAS,GAAK,IAAI9H,EACrB/kE,EAAI35D,OACJ25D,EAAI32D,WAAaG,EACjBw2D,EAAIl9D,OAAS0G,GAGR,IAAIu7H,EAAW/kE,EAAI35D,OAAQ25D,EAAI32D,WAAYG,EACpD,CAEA,MAAMmkI,EAAMtqI,OAAO8gH,YAAY36G,GAE/B,EAAG,CACD,MAAMw2D,EAAMpqD,KAAKi3H,SAAS,GACpBh6H,EAAS86H,EAAI7qI,OAAS0G,EAExBA,GAAKw2D,EAAIl9D,OACX6qI,EAAItpI,IAAIuR,KAAKi3H,SAAS1oI,QAAS0O,IAE/B86H,EAAItpI,IAAI,IAAIkB,WAAWy6D,EAAI35D,OAAQ25D,EAAI32D,WAAYG,GAAIqJ,GACvD+C,KAAKi3H,SAAS,GAAK,IAAI9H,EACrB/kE,EAAI35D,OACJ25D,EAAI32D,WAAaG,EACjBw2D,EAAIl9D,OAAS0G,IAIjBA,GAAKw2D,EAAIl9D,MACX,OAAS0G,EAAI,GAEb,OAAOmkI,CACT,CAQA,SAAAF,CAAUjhE,GACR52D,KAAK43H,OAAQ,EAEb,GACE,OAAQ53H,KAAK6zG,QACX,KAtIS,EAuIP7zG,KAAKg4H,QAAQphE,GACb,MACF,KAxIsB,EAyIpB52D,KAAKi4H,mBAAmBrhE,GACxB,MACF,KA1IsB,EA2IpB52D,KAAKk4H,mBAAmBthE,GACxB,MACF,KA5IS,EA6IP52D,KAAKm4H,UACL,MACF,KA9IS,EA+IPn4H,KAAKo4H,QAAQxhE,GACb,MACF,KAhJU,EAiJV,KAhJY,EAkJV,YADA52D,KAAK43H,OAAQ,UAGV53H,KAAK43H,OAET53H,KAAK23H,UAAU/gE,GACtB,CAQA,OAAAohE,CAAQphE,GACN,GAAI52D,KAAKg3H,eAAiB,EAExB,YADAh3H,KAAK43H,OAAQ,GAIf,MAAMxtE,EAAMpqD,KAAK83H,QAAQ,GAEzB,GAAc,GAAT1tE,EAAI,GAAqB,CAU5B,YADAwM,EARc52D,KAAKq4H,YACjB5E,WACA,+BACA,EACA,KACA,6BAKJ,CAEA,MAAM6E,IAAiC,IAAnBluE,EAAI,IAExB,IAAIkuE,GAAet4H,KAAK62H,YAAYZ,EAAkB9D,eAAtD,CAiBA,GAJAnyH,KAAKs3H,OAA2B,KAAnBltE,EAAI,IACjBpqD,KAAKu3H,QAAmB,GAATntE,EAAI,GACnBpqD,KAAKm3H,eAA0B,IAAT/sE,EAAI,GAEL,IAAjBpqD,KAAKu3H,QAAkB,CACzB,GAAIe,EAAY,CAUd,YADA1hE,EARc52D,KAAKq4H,YACjB5E,WACA,sBACA,EACA,KACA,2BAKJ,CAEA,IAAKzzH,KAAKo3H,YAAa,CAUrB,YADAxgE,EARc52D,KAAKq4H,YACjB5E,WACA,oBACA,EACA,KACA,yBAKJ,CAEAzzH,KAAKu3H,QAAUv3H,KAAKo3H,WACtB,MAAO,GAAqB,IAAjBp3H,KAAKu3H,SAAqC,IAAjBv3H,KAAKu3H,QAAkB,CACzD,GAAIv3H,KAAKo3H,YAAa,CAUpB,YADAxgE,EARc52D,KAAKq4H,YACjB5E,WACA,kBAAkBzzH,KAAKu3H,WACvB,EACA,KACA,yBAKJ,CAEAv3H,KAAKk3H,YAAcoB,CACrB,KAAO,MAAIt4H,KAAKu3H,QAAU,GAAQv3H,KAAKu3H,QAAU,IA0C1C,CAUL,YADA3gE,EARc52D,KAAKq4H,YACjB5E,WACA,kBAAkBzzH,KAAKu3H,WACvB,EACA,KACA,yBAKJ,CApDE,IAAKv3H,KAAKs3H,KAAM,CAUd,YADA1gE,EARc52D,KAAKq4H,YACjB5E,WACA,mBACA,EACA,KACA,uBAKJ,CAEA,GAAI6E,EAAY,CAUd,YADA1hE,EARc52D,KAAKq4H,YACjB5E,WACA,sBACA,EACA,KACA,2BAKJ,CAEA,GACEzzH,KAAKm3H,eAAiB,KACJ,IAAjBn3H,KAAKu3H,SAA4C,IAAxBv3H,KAAKm3H,eAC/B,CAUA,YADAvgE,EARc52D,KAAKq4H,YACjB5E,WACA,0BAA0BzzH,KAAKm3H,kBAC/B,EACA,KACA,yCAKJ,CAYF,CAKA,GAHKn3H,KAAKs3H,MAASt3H,KAAKo3H,cAAap3H,KAAKo3H,YAAcp3H,KAAKu3H,SAC7Dv3H,KAAKq3H,UAA8B,KAAnBjtE,EAAI,IAEhBpqD,KAAKi0H,WACP,IAAKj0H,KAAKq3H,QAAS,CAUjB,YADAzgE,EARc52D,KAAKq4H,YACjB5E,WACA,oBACA,EACA,KACA,wBAKJ,OACK,GAAIzzH,KAAKq3H,QAAS,CAUvB,YADAzgE,EARc52D,KAAKq4H,YACjB5E,WACA,sBACA,EACA,KACA,0BAKJ,CAE4B,MAAxBzzH,KAAKm3H,eAAwBn3H,KAAK6zG,OA3UZ,EA4UO,MAAxB7zG,KAAKm3H,eAAwBn3H,KAAK6zG,OA3UjB,EA4UrB7zG,KAAKu4H,WAAW3hE,EAvIrB,KAXA,CASEA,EARc52D,KAAKq4H,YACjB5E,WACA,sBACA,EACA,KACA,2BAKJ,CAwIF,CAQA,kBAAAwE,CAAmBrhE,GACb52D,KAAKg3H,eAAiB,EACxBh3H,KAAK43H,OAAQ,GAIf53H,KAAKm3H,eAAiBn3H,KAAK83H,QAAQ,GAAG9oE,aAAa,GACnDhvD,KAAKu4H,WAAW3hE,GAClB,CAQA,kBAAAshE,CAAmBthE,GACjB,GAAI52D,KAAKg3H,eAAiB,EAExB,YADAh3H,KAAK43H,OAAQ,GAIf,MAAMxtE,EAAMpqD,KAAK83H,QAAQ,GACnB3C,EAAM/qE,EAAIjD,aAAa,GAM7B,GAAIguE,EAAMt3F,KAAKktB,IAAI,EAAG,IAAW,EAAjC,CASE6L,EARc52D,KAAKq4H,YACjB5E,WACA,0DACA,EACA,KACA,0CAKJ,MAEAzzH,KAAKm3H,eAAiBhC,EAAMt3F,KAAKktB,IAAI,EAAG,IAAMX,EAAIjD,aAAa,GAC/DnnD,KAAKu4H,WAAW3hE,EAClB,CAQA,UAAA2hE,CAAW3hE,GACT,GAAI52D,KAAKm3H,gBAAkBn3H,KAAKu3H,QAAU,IACxCv3H,KAAKw3H,qBAAuBx3H,KAAKm3H,eAC7Bn3H,KAAKw3H,oBAAsBx3H,KAAKwzH,aAAexzH,KAAKwzH,YAAc,GAFxE,CAWI58D,EARc52D,KAAKq4H,YACjB5E,WACA,6BACA,EACA,KACA,qCAMN,MAEIzzH,KAAKq3H,QAASr3H,KAAK6zG,OAzZV,EA0ZR7zG,KAAK6zG,OAzZG,CA0Zf,CAOA,OAAAskB,GACMn4H,KAAKg3H,eAAiB,EACxBh3H,KAAK43H,OAAQ,GAIf53H,KAAKsvH,MAAQtvH,KAAK83H,QAAQ,GAC1B93H,KAAK6zG,OAxaQ,EAyaf,CAQA,OAAAukB,CAAQxhE,GACN,IAAItnE,EAAO4/H,EAEX,GAAIlvH,KAAKm3H,eAAgB,CACvB,GAAIn3H,KAAKg3H,eAAiBh3H,KAAKm3H,eAE7B,YADAn3H,KAAK43H,OAAQ,GAIftoI,EAAO0Q,KAAK83H,QAAQ93H,KAAKm3H,gBAGvBn3H,KAAKq3H,SACJr3H,KAAKsvH,MAAM,GAAKtvH,KAAKsvH,MAAM,GAAKtvH,KAAKsvH,MAAM,GAAKtvH,KAAKsvH,MAAM,IAE5DQ,EAAOxgI,EAAM0Q,KAAKsvH,MAEtB,CAEA,GAAItvH,KAAKu3H,QAAU,EACjBv3H,KAAKw4H,eAAelpI,EAAMsnE,OAD5B,CAKA,GAAI52D,KAAKk3H,YAGP,OAFAl3H,KAAK6zG,OAzcO,OA0cZ7zG,KAAKs1H,WAAWhmI,EAAMsnE,GAIpBtnE,EAAKpC,SAKP8S,KAAKy3H,eAAiBz3H,KAAKw3H,oBAC3Bx3H,KAAK03H,WAAW5+G,KAAKxpB,IAGvB0Q,KAAKsgF,YAAY1pB,EAjBjB,CAkBF,CASA,UAAA0+D,CAAWhmI,EAAMsnE,GACW52D,KAAK62H,YAAYZ,EAAkB9D,eAE3CmD,WAAWhmI,EAAM0Q,KAAKs3H,MAAM,CAAC7hH,EAAK20C,KAClD,GAAI30C,EAAK,OAAOmhD,EAAGnhD,GAEnB,GAAI20C,EAAIl9D,OAAQ,CAEd,GADA8S,KAAKy3H,gBAAkBrtE,EAAIl9D,OACvB8S,KAAKy3H,eAAiBz3H,KAAKwzH,aAAexzH,KAAKwzH,YAAc,EAAG,CAClE,MAAM/0H,EAAQuB,KAAKq4H,YACjB5E,WACA,6BACA,EACA,KACA,qCAIF,YADA78D,EAAGn4D,EAEL,CAEAuB,KAAK03H,WAAW5+G,KAAKsxC,EACvB,CAEApqD,KAAKsgF,YAAY1pB,GA9fN,IA+fP52D,KAAK6zG,QAAqB7zG,KAAK63H,UAAUjhE,EAAG,GAEpD,CAQA,WAAA0pB,CAAY1pB,GACV,IAAK52D,KAAKs3H,KAER,YADAt3H,KAAK6zG,OA3gBM,GA+gBb,MAAMr4G,EAAgBwE,KAAKy3H,eACrBgB,EAAYz4H,KAAK03H,WAOvB,GALA13H,KAAKw3H,oBAAsB,EAC3Bx3H,KAAKy3H,eAAiB,EACtBz3H,KAAKo3H,YAAc,EACnBp3H,KAAK03H,WAAa,GAEG,IAAjB13H,KAAKu3H,QAAe,CACtB,IAAIjoI,EAGFA,EADuB,eAArB0Q,KAAK42H,YACAxlH,EAAOqnH,EAAWj9H,GACK,gBAArBwE,KAAK42H,YACPlH,EAAct+G,EAAOqnH,EAAWj9H,IAEhCi9H,EA1hBG,IAkiBRz4H,KAAK6zG,QAAwB7zG,KAAK02H,yBACpC12H,KAAKuT,KAAK,UAAWjkB,GAAM,GAC3B0Q,KAAK6zG,OAziBI,IA2iBT7zG,KAAK6zG,OAriBO,EAsiBZwiB,GAAU,KACRr2H,KAAKuT,KAAK,UAAWjkB,GAAM,GAC3B0Q,KAAK6zG,OA9iBE,EA+iBP7zG,KAAK63H,UAAUjhE,EAAG,IAGxB,KAAO,CACL,MAAMxM,EAAMh5C,EAAOqnH,EAAWj9H,GAE9B,IAAKwE,KAAK82H,sBAAwBX,EAAY/rE,GAAM,CAClD,MAAM3rD,EAAQuB,KAAKq4H,YACjBnsI,MACA,0BACA,EACA,KACA,uBAIF,YADA0qE,EAAGn4D,EAEL,CA3jBY,IA6jBRuB,KAAK6zG,QAAwB7zG,KAAK02H,yBACpC12H,KAAKuT,KAAK,UAAW62C,GAAK,GAC1BpqD,KAAK6zG,OApkBI,IAskBT7zG,KAAK6zG,OAhkBO,EAikBZwiB,GAAU,KACRr2H,KAAKuT,KAAK,UAAW62C,GAAK,GAC1BpqD,KAAK6zG,OAzkBE,EA0kBP7zG,KAAK63H,UAAUjhE,EAAG,IAGxB,CACF,CASA,cAAA4hE,CAAelpI,EAAMsnE,GACnB,GAAqB,IAAjB52D,KAAKu3H,QAiDLv3H,KAAK02H,yBACP12H,KAAKuT,KAAsB,IAAjBvT,KAAKu3H,QAAmB,OAAS,OAAQjoI,GACnD0Q,KAAK6zG,OA3oBM,IA6oBX7zG,KAAK6zG,OAvoBS,EAwoBdwiB,GAAU,KACRr2H,KAAKuT,KAAsB,IAAjBvT,KAAKu3H,QAAmB,OAAS,OAAQjoI,GACnD0Q,KAAK6zG,OAhpBI,EAipBT7zG,KAAK63H,UAAUjhE,EAAG,SAzDtB,CACE,GAAoB,IAAhBtnE,EAAKpC,OACP8S,KAAK43H,OAAQ,EACb53H,KAAKuT,KAAK,WAAY,KAAM27G,GAC5BlvH,KAAK4P,UACA,CACL,MAAM4mD,EAAOlnE,EAAK0/D,aAAa,GAE/B,IAAKknE,EAAkB1/D,GAAO,CAC5B,MAAM/3D,EAAQuB,KAAKq4H,YACjB5E,WACA,uBAAuBj9D,KACvB,EACA,KACA,6BAIF,YADAI,EAAGn4D,EAEL,CAEA,MAAM2rD,EAAM,IAAI+kE,EACd7/H,EAAKmB,OACLnB,EAAKmE,WAAa,EAClBnE,EAAKpC,OAAS,GAGhB,IAAK8S,KAAK82H,sBAAwBX,EAAY/rE,GAAM,CAClD,MAAM3rD,EAAQuB,KAAKq4H,YACjBnsI,MACA,0BACA,EACA,KACA,uBAIF,YADA0qE,EAAGn4D,EAEL,CAEAuB,KAAK43H,OAAQ,EACb53H,KAAKuT,KAAK,WAAYijD,EAAMpM,GAC5BpqD,KAAK4P,KACP,CAEA5P,KAAK6zG,OAroBM,CAuoBb,CAaF,CAcA,WAAAwkB,CAAYK,EAAWrtH,EAASvM,EAAQ65H,EAAYC,GAClD54H,KAAK43H,OAAQ,EACb53H,KAAK23H,UAAW,EAEhB,MAAMliH,EAAM,IAAIijH,EACd55H,EAAS,4BAA4BuM,IAAYA,GAMnD,OAHAnf,MAAMkgB,kBAAkBqJ,EAAKzV,KAAKq4H,aAClC5iH,EAAI+gD,KAAOoiE,EACXnjH,EAAI66G,GAAeqI,EACZljH,CACT,+BCjsBF,MAAM,OAAE+7F,GAAW,EAAQ,OACrB,eAAEqnB,GAAmB,EAAQ,MAE7B5C,EAAoB,EAAQ,OAC5B,aAAE/G,GAAiB,EAAQ,OAC3B,kBAAEgH,GAAsB,EAAQ,OAC9B3G,KAAMuJ,EAAS,SAAEnJ,GAAa,EAAQ,MAExCoJ,EAAc3J,OAAO,eACrB4J,EAAavrI,OAAOyiI,MAAM,GAKhC,MAAMlB,EASJ,WAAAjvH,CAAYg3G,EAAQh1F,EAAYk3G,GAC9Bj5H,KAAK62H,YAAc90G,GAAc,CAAC,EAE9Bk3G,IACFj5H,KAAKk5H,cAAgBD,EACrBj5H,KAAKm5H,YAAc1rI,OAAOyiI,MAAM,IAGlClwH,KAAKklH,QAAUnO,EAEf/2G,KAAKo5H,gBAAiB,EACtBp5H,KAAKy1H,WAAY,EAEjBz1H,KAAKg3H,eAAiB,EACtBh3H,KAAKq5H,YAAa,EAClBr5H,KAAKkvG,OAAS,EAChB,CAuBA,YAAOoqB,CAAMhqI,EAAM8gB,GACjB,IAAIm/G,EAkBAhgI,EAjBAgqI,GAAQ,EACRt8H,EAAS,EACTu8H,GAAc,EAEdppH,EAAQm/G,OACVA,EAAOn/G,EAAQ4oH,YAAcA,EAEzB5oH,EAAQ6oH,aACV7oH,EAAQ6oH,aAAa1J,GAErBsJ,EAAetJ,EAAM,EAAG,GAG1BiK,IAAejK,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,IAClDtyH,EAAS,GAKS,iBAAT3N,EAQPC,EANE6gB,EAAQm/G,OAAQiK,QACO5oI,IAAzBwf,EAAQ2oH,IAIRzpI,EAAO7B,OAAOK,KAAKwB,IACDpC,OAHLkjB,EAAQ2oH,IAMvBxpI,EAAaD,EAAKpC,OAClBqsI,EAAQnpH,EAAQm/G,MAAQn/G,EAAQw/G,WAAa4J,GAG/C,IAAI5vC,EAAgBr6F,EAEhBA,GAAc,OAChB0N,GAAU,EACV2sF,EAAgB,KACPr6F,EAAa,MACtB0N,GAAU,EACV2sF,EAAgB,KAGlB,MAAMzmF,EAAS1V,OAAO8gH,YAAYgrB,EAAQhqI,EAAa0N,EAASA,GAchE,OAZAkG,EAAO,GAAKiN,EAAQmlH,IAAuB,IAAjBnlH,EAAQqpH,OAAgBrpH,EAAQqpH,OACtDrpH,EAAQspH,OAAMv2H,EAAO,IAAM,IAE/BA,EAAO,GAAKymF,EAEU,MAAlBA,EACFzmF,EAAOw2H,cAAcpqI,EAAY,GACN,MAAlBq6F,IACTzmF,EAAO,GAAKA,EAAO,GAAK,EACxBA,EAAOy2H,YAAYrqI,EAAY,EAAG,IAG/B6gB,EAAQm/G,MAEbpsH,EAAO,IAAM,IACbA,EAAOlG,EAAS,GAAKsyH,EAAK,GAC1BpsH,EAAOlG,EAAS,GAAKsyH,EAAK,GAC1BpsH,EAAOlG,EAAS,GAAKsyH,EAAK,GAC1BpsH,EAAOlG,EAAS,GAAKsyH,EAAK,GAEtBiK,EAAoB,CAACr2H,EAAQ7T,GAE7BiqI,GACFT,EAAUxpI,EAAMigI,EAAMpsH,EAAQlG,EAAQ1N,GAC/B,CAAC4T,KAGV21H,EAAUxpI,EAAMigI,EAAMjgI,EAAM,EAAGC,GACxB,CAAC4T,EAAQ7T,KAhBU,CAAC6T,EAAQ7T,EAiBrC,CAWA,KAAAmmH,CAAMj/C,EAAMlnE,EAAMigI,EAAM34D,GACtB,IAAIxM,EAEJ,QAAax5D,IAAT4lE,EACFpM,EAAM8kE,MACD,IAAoB,iBAAT14D,IAAsB0/D,EAAkB1/D,GACxD,MAAM,IAAI6+D,UAAU,oDACf,QAAazkI,IAATtB,GAAuBA,EAAKpC,OAGhC,CACL,MAAMA,EAASO,OAAOyC,WAAWZ,GAEjC,GAAIpC,EAAS,IACX,MAAM,IAAIumI,WAAW,kDAGvBrpE,EAAM38D,OAAO8gH,YAAY,EAAIrhH,GAC7Bk9D,EAAIuvE,cAAcnjE,EAAM,GAEJ,iBAATlnE,EACT86D,EAAIkqD,MAAMhlH,EAAM,GAEhB86D,EAAI37D,IAAIa,EAAM,EAElB,MAjBE86D,EAAM38D,OAAO8gH,YAAY,GACzBnkD,EAAIuvE,cAAcnjE,EAAM,EAgB1B,CAEA,MAAMpmD,EAAU,CACd,CAAC2oH,GAAc3uE,EAAIl9D,OACnBqoI,KAAK,EACL0D,aAAcj5H,KAAKk5H,cACnB3J,OACAyJ,WAAYh5H,KAAKm5H,YACjBM,OAAQ,EACR7J,UAAU,EACV8J,MAAM,GAGJ15H,KAAKq5H,WACPr5H,KAAK65H,QAAQ,CAAC75H,KAAKgjC,SAAUonB,GAAK,EAAOh6C,EAASwmD,IAElD52D,KAAK85H,UAAU9K,EAAOsK,MAAMlvE,EAAKh6C,GAAUwmD,EAE/C,CAUA,IAAAmjE,CAAKzqI,EAAMigI,EAAM34D,GACf,IAAI1mE,EACA0/H,EAWJ,GAToB,iBAATtgI,GACTY,EAAazC,OAAOyC,WAAWZ,GAC/BsgI,GAAW,IAGX1/H,GADAZ,EAAOqgI,EAASrgI,IACEpC,OAClB0iI,EAAWD,EAASC,UAGlB1/H,EAAa,IACf,MAAM,IAAIujI,WAAW,oDAGvB,MAAMrjH,EAAU,CACd,CAAC2oH,GAAc7oI,EACfqlI,KAAK,EACL0D,aAAcj5H,KAAKk5H,cACnB3J,OACAyJ,WAAYh5H,KAAKm5H,YACjBM,OAAQ,EACR7J,WACA8J,MAAM,GAGJ15H,KAAKq5H,WACPr5H,KAAK65H,QAAQ,CAAC75H,KAAKgjC,SAAU1zC,GAAM,EAAO8gB,EAASwmD,IAEnD52D,KAAK85H,UAAU9K,EAAOsK,MAAMhqI,EAAM8gB,GAAUwmD,EAEhD,CAUA,IAAAojE,CAAK1qI,EAAMigI,EAAM34D,GACf,IAAI1mE,EACA0/H,EAWJ,GAToB,iBAATtgI,GACTY,EAAazC,OAAOyC,WAAWZ,GAC/BsgI,GAAW,IAGX1/H,GADAZ,EAAOqgI,EAASrgI,IACEpC,OAClB0iI,EAAWD,EAASC,UAGlB1/H,EAAa,IACf,MAAM,IAAIujI,WAAW,oDAGvB,MAAMrjH,EAAU,CACd,CAAC2oH,GAAc7oI,EACfqlI,KAAK,EACL0D,aAAcj5H,KAAKk5H,cACnB3J,OACAyJ,WAAYh5H,KAAKm5H,YACjBM,OAAQ,GACR7J,WACA8J,MAAM,GAGJ15H,KAAKq5H,WACPr5H,KAAK65H,QAAQ,CAAC75H,KAAKgjC,SAAU1zC,GAAM,EAAO8gB,EAASwmD,IAEnD52D,KAAK85H,UAAU9K,EAAOsK,MAAMhqI,EAAM8gB,GAAUwmD,EAEhD,CAkBA,IAAAyH,CAAK/uE,EAAM8gB,EAASwmD,GAClB,MAAMqjE,EAAoBj6H,KAAK62H,YAAYZ,EAAkB9D,eAC7D,IAGIjiI,EACA0/H,EAJA6J,EAASrpH,EAAQ8pH,OAAS,EAAI,EAC9BR,EAAOtpH,EAAQioG,SAmCnB,GA9BoB,iBAAT/oH,GACTY,EAAazC,OAAOyC,WAAWZ,GAC/BsgI,GAAW,IAGX1/H,GADAZ,EAAOqgI,EAASrgI,IACEpC,OAClB0iI,EAAWD,EAASC,UAGlB5vH,KAAKo5H,gBACPp5H,KAAKo5H,gBAAiB,EAEpBM,GACAO,GACAA,EAAkBnrC,OAChBmrC,EAAkBhG,UACd,6BACA,gCAGNyF,EAAOxpI,GAAc+pI,EAAkBlG,YAEzC/zH,KAAKy1H,UAAYiE,IAEjBA,GAAO,EACPD,EAAS,GAGPrpH,EAAQmlH,MAAKv1H,KAAKo5H,gBAAiB,GAEnCa,EAAmB,CACrB,MAAMjU,EAAO,CACX,CAAC+S,GAAc7oI,EACfqlI,IAAKnlH,EAAQmlH,IACb0D,aAAcj5H,KAAKk5H,cACnB3J,KAAMn/G,EAAQm/G,KACdyJ,WAAYh5H,KAAKm5H,YACjBM,SACA7J,WACA8J,QAGE15H,KAAKq5H,WACPr5H,KAAK65H,QAAQ,CAAC75H,KAAKgjC,SAAU1zC,EAAM0Q,KAAKy1H,UAAWzP,EAAMpvD,IAEzD52D,KAAKgjC,SAAS1zC,EAAM0Q,KAAKy1H,UAAWzP,EAAMpvD,EAE9C,MACE52D,KAAK85H,UACH9K,EAAOsK,MAAMhqI,EAAM,CACjB,CAACypI,GAAc7oI,EACfqlI,IAAKnlH,EAAQmlH,IACb0D,aAAcj5H,KAAKk5H,cACnB3J,KAAMn/G,EAAQm/G,KACdyJ,WAAYh5H,KAAKm5H,YACjBM,SACA7J,WACA8J,MAAM,IAER9iE,EAGN,CAyBA,QAAA5zB,CAAS1zC,EAAM+oH,EAAUjoG,EAASwmD,GAChC,IAAKyhD,EAEH,YADAr4G,KAAK85H,UAAU9K,EAAOsK,MAAMhqI,EAAM8gB,GAAUwmD,GAI9C,MAAMqjE,EAAoBj6H,KAAK62H,YAAYZ,EAAkB9D,eAE7DnyH,KAAKg3H,gBAAkB5mH,EAAQ2oH,GAC/B/4H,KAAKq5H,YAAa,EAClBY,EAAkB5hB,SAAS/oH,EAAM8gB,EAAQmlH,KAAK,CAACrhI,EAAGk2D,KAChD,GAAIpqD,KAAKklH,QAAQiV,UAAjB,CACE,MAAM1kH,EAAM,IAAIvpB,MACd,yDAGgB,mBAAP0qE,GAAmBA,EAAGnhD,GAEjC,IAAK,IAAIlpB,EAAI,EAAGA,EAAIyT,KAAKkvG,OAAOhiH,OAAQX,IAAK,CAC3C,MAAMuiG,EAAS9uF,KAAKkvG,OAAO3iH,GACrBg8B,EAAWumE,EAAOA,EAAO5hG,OAAS,GAEhB,mBAAbq7B,GAAyBA,EAAS9S,EAC/C,CAGF,MAEAzV,KAAKg3H,gBAAkB5mH,EAAQ2oH,GAC/B/4H,KAAKq5H,YAAa,EAClBjpH,EAAQw/G,UAAW,EACnB5vH,KAAK85H,UAAU9K,EAAOsK,MAAMlvE,EAAKh6C,GAAUwmD,GAC3C52D,KAAKo6H,SAAS,GAElB,CAOA,OAAAA,GACE,MAAQp6H,KAAKq5H,YAAcr5H,KAAKkvG,OAAOhiH,QAAQ,CAC7C,MAAM4hG,EAAS9uF,KAAKkvG,OAAO3gH,QAE3ByR,KAAKg3H,gBAAkBloC,EAAO,GAAGiqC,GACjCsB,QAAQjqI,MAAM0+F,EAAO,GAAI9uF,KAAM8uF,EAAOz8F,MAAM,GAC9C,CACF,CAQA,OAAAwnI,CAAQ/qC,GACN9uF,KAAKg3H,gBAAkBloC,EAAO,GAAGiqC,GACjC/4H,KAAKkvG,OAAOp2F,KAAKg2E,EACnB,CASA,SAAAgrC,CAAUxrF,EAAMsoB,GACM,IAAhBtoB,EAAKphD,QACP8S,KAAKklH,QAAQoV,OACbt6H,KAAKklH,QAAQ5Q,MAAMhmE,EAAK,IACxBtuC,KAAKklH,QAAQ5Q,MAAMhmE,EAAK,GAAIsoB,GAC5B52D,KAAKklH,QAAQqV,UAEbv6H,KAAKklH,QAAQ5Q,MAAMhmE,EAAK,GAAIsoB,EAEhC,EAGFprE,EAAOC,QAAUujI,+BC1djB,MAAM,OAAExd,GAAW,EAAQ,MAQ3B,SAASgpB,EAAU3wC,GACjBA,EAAOt2E,KAAK,QACd,CAOA,SAASknH,KACFz6H,KAAKm6H,WAAan6H,KAAK06H,eAAeC,UACzC36H,KAAK+lE,SAET,CAQA,SAAS60D,EAAcnlH,GACrBzV,KAAKgV,eAAe,QAAS4lH,GAC7B56H,KAAK+lE,UAC+B,IAAhC/lE,KAAKiV,cAAc,UAErBjV,KAAKuT,KAAK,QAASkC,EAEvB,CAwHAjqB,EAAOC,QA9GP,SAA+BovI,EAAIzqH,GACjC,IAAI0qH,GAAqB,EAEzB,MAAMC,EAAS,IAAIvpB,EAAO,IACrBphG,EACH4qH,aAAa,EACbR,WAAW,EACXS,YAAY,EACZC,oBAAoB,IAmGtB,OAhGAL,EAAGxmH,GAAG,WAAW,SAAiBgc,EAAKqhG,GACrC,MAAMpiI,GACHoiI,GAAYqJ,EAAOlF,eAAeoF,WAAa5qG,EAAItiC,WAAasiC,EAE9D0qG,EAAOjiH,KAAKxpB,IAAOurI,EAAGtoB,OAC7B,IAEAsoB,EAAGjmH,KAAK,SAAS,SAAea,GAC1BslH,EAAOZ,YAWXW,GAAqB,EACrBC,EAAOh1D,QAAQtwD,GACjB,IAEAolH,EAAGjmH,KAAK,SAAS,WACXmmH,EAAOZ,WAEXY,EAAOjiH,KAAK,KACd,IAEAiiH,EAAOnmB,SAAW,SAAUn/F,EAAK8S,GAC/B,GAAIsyG,EAAG5d,aAAe4d,EAAGM,OAGvB,OAFA5yG,EAAS9S,QACTsL,QAAQ01G,SAAS+D,EAAWO,GAI9B,IAAIK,GAAS,EAEbP,EAAGjmH,KAAK,SAAS,SAAea,GAC9B2lH,GAAS,EACT7yG,EAAS9S,EACX,IAEAolH,EAAGjmH,KAAK,SAAS,WACVwmH,GAAQ7yG,EAAS9S,GACtBsL,QAAQ01G,SAAS+D,EAAWO,EAC9B,IAEID,GAAoBD,EAAG1+G,WAC7B,EAEA4+G,EAAOM,OAAS,SAAU9yG,GACpBsyG,EAAG5d,aAAe4d,EAAGh8D,WAWN,OAAfg8D,EAAG3V,UAEH2V,EAAG3V,QAAQwV,eAAeC,UAC5BpyG,IACIwyG,EAAOlF,eAAeC,YAAYiF,EAAOh1D,YAE7C80D,EAAG3V,QAAQtwG,KAAK,UAAU,WAIxB2T,GACF,IACAsyG,EAAGplB,UAtBHolB,EAAGjmH,KAAK,QAAQ,WACdmmH,EAAOM,OAAO9yG,EAChB,GAsBJ,EAEAwyG,EAAO1oB,MAAQ,WACTwoB,EAAGS,UAAUT,EAAGnlB,QACtB,EAEAqlB,EAAO5oB,OAAS,SAAUzC,EAAOnuG,EAAUgnB,GACrCsyG,EAAG5d,aAAe4d,EAAGh8D,WAOzBg8D,EAAGx8D,KAAKqxC,EAAOnnF,GANbsyG,EAAGjmH,KAAK,QAAQ,WACdmmH,EAAO5oB,OAAOzC,EAAOnuG,EAAUgnB,EACjC,GAKJ,EAEAwyG,EAAO1mH,GAAG,MAAOomH,GACjBM,EAAO1mH,GAAG,QAASumH,GACZG,CACT,+BC1JA,MAAM,WAAE/I,GAAe,EAAQ,MA2D/BxmI,EAAOC,QAAU,CAAE6W,MAlDnB,SAAei0B,GACb,MAAMglG,EAAY,IAAIlsH,IACtB,IAAIM,GAAS,EACTC,GAAO,EACPrjB,EAAI,EAER,KAAQA,EAAIgqC,EAAOrpC,OAAQX,IAAK,CAC9B,MAAMiqE,EAAOjgC,EAAO9pC,WAAWF,GAE/B,IAAa,IAATqjB,GAAmC,IAArBoiH,EAAWx7D,IACZ,IAAX7mD,IAAcA,EAAQpjB,QACrB,GACC,IAANA,GACU,KAATiqE,GAAoC,IAATA,EAGvB,IAAa,KAATA,EAgBT,MAAM,IAAIg8D,YAAY,iCAAiCjmI,KAhBrB,CAClC,IAAe,IAAXojB,EACF,MAAM,IAAI6iH,YAAY,iCAAiCjmI,MAG5C,IAATqjB,IAAYA,EAAMrjB,GAEtB,MAAMqlF,EAAWr7C,EAAOlkC,MAAMsd,EAAOC,GAErC,GAAI2rH,EAAUvpH,IAAI4/D,GAChB,MAAM,IAAI4gD,YAAY,QAAQ5gD,gCAGhC2pD,EAAU7qH,IAAIkhE,GACdjiE,EAAQC,GAAO,CACjB,CAEA,MAlBe,IAATA,IAAyB,IAAXD,IAAcC,EAAMrjB,EAmB1C,CAEA,IAAe,IAAXojB,IAAyB,IAATC,EAClB,MAAM,IAAI4iH,YAAY,2BAGxB,MAAM5gD,EAAWr7C,EAAOlkC,MAAMsd,EAAOpjB,GAErC,GAAIgvI,EAAUvpH,IAAI4/D,GAChB,MAAM,IAAI4gD,YAAY,QAAQ5gD,gCAIhC,OADA2pD,EAAU7qH,IAAIkhE,GACP2pD,CACT,gCCzDA,MAAM,OAAEC,GAAW,EAAQ,KAoD3B,SAASC,EAAarxE,GACpB,MAAMn6D,EAAMm6D,EAAIl9D,OAChB,IAAIX,EAAI,EAER,KAAOA,EAAI0D,GACT,GAAc,IAATm6D,EAAI79D,GAGF,GAAwB,MAAV,IAAT69D,EAAI79D,IAAqB,CAEnC,GACEA,EAAI,IAAM0D,GACc,MAAV,IAAbm6D,EAAI79D,EAAI,KACW,MAAV,IAAT69D,EAAI79D,IAEL,OAAO,EAGTA,GAAK,CACP,MAAO,GAAwB,MAAV,IAAT69D,EAAI79D,IAAqB,CAEnC,GACEA,EAAI,GAAK0D,GACe,MAAV,IAAbm6D,EAAI79D,EAAI,KACe,MAAV,IAAb69D,EAAI79D,EAAI,KACG,MAAX69D,EAAI79D,IAAuC,MAAV,IAAb69D,EAAI79D,EAAI,KACjB,MAAX69D,EAAI79D,IAAuC,MAAV,IAAb69D,EAAI79D,EAAI,IAE7B,OAAO,EAGTA,GAAK,CACP,KAAO,IAAwB,MAAV,IAAT69D,EAAI79D,IAgBd,OAAO,EAdP,GACEA,EAAI,GAAK0D,GACe,MAAV,IAAbm6D,EAAI79D,EAAI,KACe,MAAV,IAAb69D,EAAI79D,EAAI,KACe,MAAV,IAAb69D,EAAI79D,EAAI,KACG,MAAX69D,EAAI79D,IAAuC,MAAV,IAAb69D,EAAI79D,EAAI,KACjB,MAAX69D,EAAI79D,IAAe69D,EAAI79D,EAAI,GAAK,KACjC69D,EAAI79D,GAAK,IAET,OAAO,EAGTA,GAAK,CAGP,MA1CEA,IA6CJ,OAAO,CACT,CAQA,GANAf,EAAOC,QAAU,CACfyqI,kBA5EF,SAA2B1/D,GACzB,OACGA,GAAQ,KACPA,GAAQ,MACC,OAATA,GACS,OAATA,GACS,OAATA,GACDA,GAAQ,KAAQA,GAAQ,IAE7B,EAoEE2/D,YAAasF,EACbzJ,WAhGiB,CACjwJ,EACFhwI,EAAOC,QAAQ0qI,YAAc,SAAU/rE,GACrC,OAAOA,EAAIl9D,OAAS,GAAKuuI,EAAarxE,GAAOoxE,EAAOpxE,EACtD,OACiC,IAAKrpC,QAAQ20D,IAAIgmD,qBAClD,IACE,MAAMvF,EAAc,EAAQ,MAE5B3qI,EAAOC,QAAQ0qI,YAAc,SAAU/rE,GACrC,OAAOA,EAAIl9D,OAAS,GAAKuuI,EAAarxE,GAAO+rE,EAAY/rE,EAC3D,CACF,CAAE,MAAOtqC,GAET,+BC5HF,MAAMvN,EAAe,EAAQ,MACvB8yG,EAAO,EAAQ,OACf,OAAE7T,GAAW,EAAQ,OACrB,WAAEmqB,GAAe,EAAQ,MAEzBx5G,EAAY,EAAQ,MACpB8zG,EAAoB,EAAQ,MAC5B2F,EAAc,EAAQ,MACtBpW,EAAY,EAAQ,OACpB,KAAE2K,EAAI,WAAEI,GAAe,EAAQ,MAE/BsL,EAAW,wBAmcjB,SAASrB,EAAUsB,GACjBA,EAAOjoB,OAhcM,EAicbioB,EAAOvoH,KAAK,QACd,CAOA,SAASwoH,IACP/7H,KAAK+lE,SACP,CAWA,SAASi2D,EAAejlB,EAAQvgD,EAAMnrD,EAAS4wH,GAS7C5wH,EAAUA,GAAWg6G,EAAK6W,aAAa1lE,GACvCylE,EAAU,CACRE,WAAY,QACZ,eAAgB,YAChB,iBAAkB1uI,OAAOyC,WAAWmb,MACjC4wH,GAGLllB,EAAOniG,KAAK,SAAUmiG,EAAOhxC,SAE7BgxC,EAAOnnG,IACL,YAAY4mD,KAAQ6uD,EAAK6W,aAAa1lE,SACpC98D,OAAO8F,KAAKy8H,GACTvpI,KAAKo2F,GAAM,GAAGA,MAAMmzC,EAAQnzC,OAC5B70F,KAAK,QACR,WACAoX,EAEN,CAaA,SAAS+wH,EAAkCN,EAAQj3D,EAAKkyC,EAAQvgD,EAAMnrD,GACpE,GAAIywH,EAAO7mH,cAAc,iBAAkB,CACzC,MAAMQ,EAAM,IAAIvpB,MAAMmf,GACtBnf,MAAMkgB,kBAAkBqJ,EAAK2mH,GAE7BN,EAAOvoH,KAAK,gBAAiBkC,EAAKshG,EAAQlyC,EAC5C,MACEm3D,EAAejlB,EAAQvgD,EAAMnrD,EAEjC,CApGA7f,EAAOC,QA5ZP,cAA8B8mB,EAgC5B,WAAAxS,CAAYqQ,EAASmY,GAsBnB,GArBAjnB,QAsBmB,OApBnB8O,EAAU,CACRumH,wBAAwB,EACxB0F,UAAU,EACVxI,WAAY,UACZkD,oBAAoB,EACpBkD,mBAAmB,EACnBqC,gBAAiB,KACjBC,gBAAgB,EAChBC,aAAc,KACdC,UAAU,EACVC,QAAS,KACTZ,OAAQ,KACR3lE,KAAM,KACNjlD,KAAM,KACNklG,KAAM,KACNoP,eACGp1G,IAIMgmG,OAAiBhmG,EAAQ0rH,SAAW1rH,EAAQqsH,UACpC,MAAhBrsH,EAAQgmG,OAAiBhmG,EAAQ0rH,QAAU1rH,EAAQqsH,WACnDrsH,EAAQ0rH,QAAU1rH,EAAQqsH,SAE3B,MAAM,IAAIpH,UACR,qFAyBJ,GApBoB,MAAhBjlH,EAAQgmG,MACVp2G,KAAK28H,QAAUtX,EAAKuX,cAAa,CAAC/3D,EAAKg4D,KACrC,MAAMC,EAAOzX,EAAK6W,aAAa,KAE/BW,EAAIE,UAAU,IAAK,CACjB,iBAAkBD,EAAK5vI,OACvB,eAAgB,eAElB2vI,EAAIjtH,IAAIktH,EAAK,IAEf98H,KAAK28H,QAAQK,OACX5sH,EAAQgmG,KACRhmG,EAAQ+lD,KACR/lD,EAAQssH,QACRn0G,IAEOnY,EAAQ0rH,SACjB97H,KAAK28H,QAAUvsH,EAAQ0rH,QAGrB97H,KAAK28H,QAAS,CAChB,MAAMM,EAAiBj9H,KAAKuT,KAAK/U,KAAKwB,KAAM,cAE5CA,KAAKk9H,iBAgVX,SAAsBpB,EAAQppI,GAC5B,IAAK,MAAM6iB,KAAS7b,OAAO8F,KAAK9M,GAAMopI,EAAOznH,GAAGkB,EAAO7iB,EAAI6iB,IAE3D,OAAO,WACL,IAAK,MAAMA,KAAS7b,OAAO8F,KAAK9M,GAC9BopI,EAAO9mH,eAAeO,EAAO7iB,EAAI6iB,GAErC,CACF,CAxV8B4nH,CAAan9H,KAAK28H,QAAS,CACjDS,UAAWp9H,KAAKuT,KAAK/U,KAAKwB,KAAM,aAChCvB,MAAOuB,KAAKuT,KAAK/U,KAAKwB,KAAM,SAC5Bq9H,QAAS,CAACx4D,EAAKkyC,EAAQumB,KACrBt9H,KAAKu9H,cAAc14D,EAAKkyC,EAAQumB,EAAML,EAAe,GAG3D,EAEkC,IAA9B7sH,EAAQ6pH,oBAA4B7pH,EAAQ6pH,kBAAoB,CAAC,GACjE7pH,EAAQmsH,iBACVv8H,KAAKw9H,QAAU,IAAInuH,IACnBrP,KAAKy9H,kBAAmB,GAG1Bz9H,KAAKoQ,QAAUA,EACfpQ,KAAK6zG,OAjHO,CAkHd,CAWA,OAAAv9C,GACE,GAAIt2D,KAAKoQ,QAAQqsH,SACf,MAAM,IAAIvwI,MAAM,8CAGlB,OAAK8T,KAAK28H,QACH38H,KAAK28H,QAAQrmE,UADM,IAE5B,CASA,KAAAm/C,CAAM7+C,GACJ,GA5IW,IA4IP52D,KAAK6zG,OAQP,OAPIj9C,GACF52D,KAAK4U,KAAK,SAAS,KACjBgiD,EAAG,IAAI1qE,MAAM,6BAA6B,SAI9C60B,QAAQ01G,SAAS+D,EAAWx6H,MAM9B,GAFI42D,GAAI52D,KAAK4U,KAAK,QAASgiD,GAxJf,IA0JR52D,KAAK6zG,OAGT,GAFA7zG,KAAK6zG,OA3JO,EA6JR7zG,KAAKoQ,QAAQqsH,UAAYz8H,KAAKoQ,QAAQ0rH,OACpC97H,KAAK28H,UACP38H,KAAKk9H,mBACLl9H,KAAKk9H,iBAAmBl9H,KAAK28H,QAAU,MAGrC38H,KAAKw9H,SACFx9H,KAAKw9H,QAAQh2G,KAGhBxnB,KAAKy9H,kBAAmB,EAG1B18G,QAAQ01G,SAAS+D,EAAWx6H,UAEzB,CACL,MAAM87H,EAAS97H,KAAK28H,QAEpB38H,KAAKk9H,mBACLl9H,KAAKk9H,iBAAmBl9H,KAAK28H,QAAU,KAMvCb,EAAOrmB,OAAM,KACX+kB,EAAUx6H,KAAK,GAEnB,CACF,CASA,YAAA09H,CAAa74D,GACX,GAAI7kE,KAAKoQ,QAAQc,KAAM,CACrB,MAAMvP,EAAQkjE,EAAI5O,IAAI/zD,QAAQ,KAG9B,KAF4B,IAAXP,EAAekjE,EAAI5O,IAAI5jE,MAAM,EAAGsP,GAASkjE,EAAI5O,OAE7Cj2D,KAAKoQ,QAAQc,KAAM,OAAO,CAC7C,CAEA,OAAO,CACT,CAWA,aAAAqsH,CAAc14D,EAAKkyC,EAAQumB,EAAM1mE,GAC/BmgD,EAAO1iG,GAAG,QAAS0nH,GAEnB,MAAM9tH,EAAM42D,EAAIo3D,QAAQ,qBAClBprF,GAAWg0B,EAAIo3D,QAAQ,yBAE7B,GAAmB,QAAfp3D,EAAI84D,OAAkB,CAGxB,YADAvB,EAAkCp8H,KAAM6kE,EAAKkyC,EAAQ,IADrC,sBAGlB,CAEA,GAA0C,cAAtClyC,EAAIo3D,QAAQoB,QAAQtsI,cAA+B,CAGrD,YADAqrI,EAAkCp8H,KAAM6kE,EAAKkyC,EAAQ,IADrC,yBAGlB,CAEA,IAAK9oG,IAAQ4tH,EAAS70E,KAAK/4C,GAAM,CAG/B,YADAmuH,EAAkCp8H,KAAM6kE,EAAKkyC,EAAQ,IADrC,8CAGlB,CAEA,GAAgB,IAAZlmE,GAA6B,KAAZA,EAAgB,CAGnC,YADAurF,EAAkCp8H,KAAM6kE,EAAKkyC,EAAQ,IADrC,kDAGlB,CAEA,IAAK/2G,KAAK09H,aAAa74D,GAErB,YADAm3D,EAAejlB,EAAQ,KAIzB,MAAM6mB,EAAuB/4D,EAAIo3D,QAAQ,0BACzC,IAAIV,EAAY,IAAIlsH,IAEpB,QAA6Bze,IAAzBgtI,EACF,IACErC,EAAYK,EAAYt5H,MAAMs7H,EAChC,CAAE,MAAOnoH,GAGP,YADA2mH,EAAkCp8H,KAAM6kE,EAAKkyC,EAAQ,IADrC,wCAGlB,CAGF,MAAM8mB,EAAyBh5D,EAAIo3D,QAAQ,4BACrCl6G,EAAa,CAAC,EAEpB,GACE/hB,KAAKoQ,QAAQ6pH,wBACcrpI,IAA3BitI,EACA,CACA,MAAM5D,EAAoB,IAAIhE,EAC5Bj2H,KAAKoQ,QAAQ6pH,mBACb,EACAj6H,KAAKoQ,QAAQyjH,YAGf,IACE,MAAM3B,EAAS/vG,EAAU7f,MAAMu7H,GAE3B3L,EAAO+D,EAAkB9D,iBAC3B8H,EAAkBpF,OAAO3C,EAAO+D,EAAkB9D,gBAClDpwG,EAAWk0G,EAAkB9D,eAAiB8H,EAElD,CAAE,MAAOxkH,GAIP,YADA2mH,EAAkCp8H,KAAM6kE,EAAKkyC,EAAQ,IADnD,0DAGJ,CACF,CAKA,GAAI/2G,KAAKoQ,QAAQosH,aAAc,CAC7B,MAAM1mH,EAAO,CACXslG,OACEv2C,EAAIo3D,QAAQ,IAAe,IAAZprF,EAAgB,uBAAyB,WAC1DitF,UAAWj5D,EAAIkyC,OAAOgnB,aAAcl5D,EAAIkyC,OAAOinB,WAC/Cn5D,OAGF,GAAyC,IAArC7kE,KAAKoQ,QAAQosH,aAAatvI,OAgB5B,YAfA8S,KAAKoQ,QAAQosH,aAAa1mH,GAAM,CAACmoH,EAAUznE,EAAMnrD,EAAS4wH,KACxD,IAAKgC,EACH,OAAOjC,EAAejlB,EAAQvgD,GAAQ,IAAKnrD,EAAS4wH,GAGtDj8H,KAAKk+H,gBACHn8G,EACA9T,EACAstH,EACA12D,EACAkyC,EACAumB,EACA1mE,EACD,IAKL,IAAK52D,KAAKoQ,QAAQosH,aAAa1mH,GAAO,OAAOkmH,EAAejlB,EAAQ,IACtE,CAEA/2G,KAAKk+H,gBAAgBn8G,EAAY9T,EAAKstH,EAAW12D,EAAKkyC,EAAQumB,EAAM1mE,EACtE,CAeA,eAAAsnE,CAAgBn8G,EAAY9T,EAAKstH,EAAW12D,EAAKkyC,EAAQumB,EAAM1mE,GAI7D,IAAKmgD,EAAOonB,WAAapnB,EAAOroG,SAAU,OAAOqoG,EAAOhxC,UAExD,GAAIgxC,EAAOwZ,GACT,MAAM,IAAIrkI,MACR,6GAKJ,GAAI8T,KAAK6zG,OAlWG,EAkWe,OAAOmoB,EAAejlB,EAAQ,KAEzD,MAIMklB,EAAU,CACd,mCACA,qBACA,sBACA,yBARaN,EAAW,QACvByC,OAAOnwH,EAAMkiH,GACbkO,OAAO,aASJxD,EAAK,IAAI76H,KAAKoQ,QAAQo1G,UAAU,UAAM50H,EAAWoP,KAAKoQ,SAE5D,GAAImrH,EAAU/zG,KAAM,CAIlB,MAAMoqD,EAAW5xE,KAAKoQ,QAAQksH,gBAC1Bt8H,KAAKoQ,QAAQksH,gBAAgBf,EAAW12D,GACxC02D,EAAUjtH,SAASs3B,OAAOryC,MAE1Bq+E,IACFqqD,EAAQnjH,KAAK,2BAA2B84D,KACxCipD,EAAGyD,UAAY1sD,EAEnB,CAEA,GAAI7vD,EAAWk0G,EAAkB9D,eAAgB,CAC/C,MAAMrjC,EAAS/sE,EAAWk0G,EAAkB9D,eAAerjC,OACrDv7F,EAAQ4uB,EAAUxxB,OAAO,CAC7B,CAACslI,EAAkB9D,eAAgB,CAACrjC,KAEtCmtC,EAAQnjH,KAAK,6BAA6BvlB,KAC1CsnI,EAAGhE,YAAc90G,CACnB,CAKA/hB,KAAKuT,KAAK,UAAW0oH,EAASp3D,GAE9BkyC,EAAOzC,MAAM2nB,EAAQ7qH,OAAO,QAAQnd,KAAK,SACzC8iH,EAAO/hG,eAAe,QAAS+mH,GAE/BlB,EAAG0D,UAAUxnB,EAAQumB,EAAM,CACzB3G,uBAAwB32H,KAAKoQ,QAAQumH,uBACrC9C,WAAY7zH,KAAKoQ,QAAQyjH,WACzBkD,mBAAoB/2H,KAAKoQ,QAAQ2mH,qBAG/B/2H,KAAKw9H,UACPx9H,KAAKw9H,QAAQ9sH,IAAImqH,GACjBA,EAAGxmH,GAAG,SAAS,KACbrU,KAAKw9H,QAAQ1rH,OAAO+oH,GAEhB76H,KAAKy9H,mBAAqBz9H,KAAKw9H,QAAQh2G,MACzCzG,QAAQ01G,SAAS+D,EAAWx6H,KAC9B,KAIJ42D,EAAGikE,EAAIh2D,EACT,gCC/aF,MAAMtyD,EAAe,EAAQ,MACvB+yG,EAAQ,EAAQ,MAChBD,EAAO,EAAQ,MACfzP,EAAM,EAAQ,MACdgB,EAAM,EAAQ,OACd,YAAE4nB,EAAW,WAAE7C,GAAe,EAAQ,OACtC,OAAEnqB,EAAM,SAAEitB,GAAa,EAAQ,OAC/B,IAAEC,GAAQ,EAAQ,MAElBzI,EAAoB,EAAQ,MAC5BlH,EAAW,EAAQ,MACnBC,EAAS,EAAQ,MACjB,aACJiB,EAAY,aACZf,EAAY,KACZiB,EAAI,qBACJC,EAAoB,UACpBC,EAAS,YACTC,EAAW,WACXC,EAAU,KACVC,GACE,EAAQ,OAEVa,aAAa,iBAAEC,EAAgB,oBAAEQ,IAC/B,EAAQ,MACN,OAAEnhI,EAAM,MAAE2R,GAAU,EAAQ,OAC5B,SAAEqtH,GAAa,EAAQ,MAGvBgP,EAAWvP,OAAO,YAClBwP,EAAmB,CAAC,EAAG,IACvBC,EAAc,CAAC,aAAc,OAAQ,UAAW,UAChDC,EAAmB,iCAOzB,MAAMtZ,UAAkBjzG,EAQtB,WAAAxS,CAAYu2D,EAASilE,EAAWnrH,GAC9B9O,QAEAtB,KAAK42H,YAAc3G,EAAa,GAChCjwH,KAAK++H,WAAa,KAClB/+H,KAAK4xH,qBAAsB,EAC3B5xH,KAAK6xH,iBAAkB,EACvB7xH,KAAKg/H,cAAgB9P,EACrBlvH,KAAKi/H,YAAc,KACnBj/H,KAAK62H,YAAc,CAAC,EACpB72H,KAAKk/H,SAAU,EACfl/H,KAAKs+H,UAAY,GACjBt+H,KAAKm/H,YAAc3Z,EAAU3mD,WAC7B7+D,KAAKo/H,UAAY,KACjBp/H,KAAKmlH,QAAU,KACfnlH,KAAKklH,QAAU,KAEC,OAAZ5uD,GACFt2D,KAAKq/H,gBAAkB,EACvBr/H,KAAKi0H,WAAY,EACjBj0H,KAAKs/H,WAAa,OAEA1uI,IAAd2qI,EACFA,EAAY,GACF/oI,MAAMwB,QAAQunI,KACC,iBAAdA,GAAwC,OAAdA,GACnCnrH,EAAUmrH,EACVA,EAAY,IAEZA,EAAY,CAACA,IAIjBgE,EAAav/H,KAAMs2D,EAASilE,EAAWnrH,KAEvCpQ,KAAKw/H,UAAYpvH,EAAQisH,SACzBr8H,KAAKi0H,WAAY,EAErB,CASA,cAAIrN,GACF,OAAO5mH,KAAK42H,WACd,CAEA,cAAIhQ,CAAW1pH,GACR+yH,EAAar9G,SAAS1V,KAE3B8C,KAAK42H,YAAc15H,EAKf8C,KAAKo/H,YAAWp/H,KAAKo/H,UAAUxI,YAAc15H,GACnD,CAKA,kBAAIuiI,GACF,OAAKz/H,KAAKklH,QAEHllH,KAAKklH,QAAQwV,eAAextI,OAAS8S,KAAKmlH,QAAQ6R,eAF/Bh3H,KAAKq/H,eAGjC,CAKA,cAAIt9G,GACF,OAAOroB,OAAO8F,KAAKQ,KAAK62H,aAAa5iI,MACvC,CAKA,YAAIqnI,GACF,OAAOt7H,KAAKk/H,OACd,CAMA,WAAInY,GACF,OAAO,IACT,CAMA,WAAIC,GACF,OAAO,IACT,CAMA,UAAIH,GACF,OAAO,IACT,CAMA,aAAIC,GACF,OAAO,IACT,CAKA,YAAIl1C,GACF,OAAO5xE,KAAKs+H,SACd,CAKA,cAAIrhB,GACF,OAAOj9G,KAAKm/H,WACd,CAKA,OAAIlpE,GACF,OAAOj2D,KAAKw3E,IACd,CAkBA,SAAA+mD,CAAUxnB,EAAQumB,EAAMltH,GACtB,MAAMsvH,EAAW,IAAI3Q,EAAS,CAC5B4H,uBAAwBvmH,EAAQumH,uBAChC/P,WAAY5mH,KAAK4mH,WACjB7kG,WAAY/hB,KAAK62H,YACjBjD,SAAU5zH,KAAKi0H,UACfJ,WAAYzjH,EAAQyjH,WACpBkD,mBAAoB3mH,EAAQ2mH,qBAG9B/2H,KAAKmlH,QAAU,IAAI6J,EAAOjY,EAAQ/2G,KAAK62H,YAAazmH,EAAQ6oH,cAC5Dj5H,KAAKo/H,UAAYM,EACjB1/H,KAAKklH,QAAUnO,EAEf2oB,EAASnP,GAAcvwH,KACvB+2G,EAAOwZ,GAAcvwH,KAErB0/H,EAASrrH,GAAG,WAAYsrH,GACxBD,EAASrrH,GAAG,QAASurH,GACrBF,EAASrrH,GAAG,QAASwrH,GACrBH,EAASrrH,GAAG,UAAWyrH,GACvBJ,EAASrrH,GAAG,OAAQ0rH,GACpBL,EAASrrH,GAAG,OAAQ2rH,GAKhBjpB,EAAOlgG,YAAYkgG,EAAOlgG,WAAW,GACrCkgG,EAAOhE,YAAYgE,EAAOhE,aAE1BuqB,EAAKpwI,OAAS,GAAG6pH,EAAOkpB,QAAQ3C,GAEpCvmB,EAAO1iG,GAAG,QAAS6rH,GACnBnpB,EAAO1iG,GAAG,OAAQ8rH,GAClBppB,EAAO1iG,GAAG,MAAO+rH,GACjBrpB,EAAO1iG,GAAG,QAAS0nH,GAEnB/7H,KAAKm/H,YAAc3Z,EAAU6a,KAC7BrgI,KAAKuT,KAAK,OACZ,CAOA,SAAAinH,GACE,IAAKx6H,KAAKklH,QAGR,OAFAllH,KAAKm/H,YAAc3Z,EAAU2V,YAC7Bn7H,KAAKuT,KAAK,QAASvT,KAAK++H,WAAY/+H,KAAKg/H,eAIvCh/H,KAAK62H,YAAYZ,EAAkB9D,gBACrCnyH,KAAK62H,YAAYZ,EAAkB9D,eAAe8C,UAGpDj1H,KAAKo/H,UAAUrqH,qBACf/U,KAAKm/H,YAAc3Z,EAAU2V,OAC7Bn7H,KAAKuT,KAAK,QAASvT,KAAK++H,WAAY/+H,KAAKg/H,cAC3C,CAsBA,KAAAvpB,CAAMj/C,EAAMlnE,GACV,GAAI0Q,KAAKi9G,aAAeuI,EAAU2V,OAClC,GAAIn7H,KAAKi9G,aAAeuI,EAAU3mD,WAM9B7+D,KAAKi9G,aAAeuI,EAAU8a,SAWlCtgI,KAAKm/H,YAAc3Z,EAAU8a,QAC7BtgI,KAAKmlH,QAAQ1P,MAAMj/C,EAAMlnE,GAAO0Q,KAAKi0H,WAAYx+G,IAK3CA,IAEJzV,KAAK6xH,iBAAkB,GAGrB7xH,KAAK4xH,qBACL5xH,KAAKo/H,UAAU1E,eAAe6F,eAE9BvgI,KAAKklH,QAAQt1G,MACf,IAMF5P,KAAKi/H,YAAcpoH,WACjB7W,KAAKklH,QAAQn/C,QAAQvnE,KAAKwB,KAAKklH,SAxShB,MAyQbllH,KAAK6xH,kBACJ7xH,KAAK4xH,qBAAuB5xH,KAAKo/H,UAAU1E,eAAe6F,eAE3DvgI,KAAKklH,QAAQt1G,UAXjB,CACE,MAAMygB,EAAM,6DACZ2rG,EAAeh8H,KAAMA,KAAKwgI,KAAMnwG,EAElC,CAsCF,CAOA,KAAAkiF,GAEIvyG,KAAKi9G,aAAeuI,EAAU3mD,YAC9B7+D,KAAKi9G,aAAeuI,EAAU2V,SAKhCn7H,KAAKk/H,SAAU,EACfl/H,KAAKklH,QAAQ3S,QACf,CAUA,IAAAwnB,CAAKzqI,EAAMigI,EAAM34D,GACf,GAAI52D,KAAKi9G,aAAeuI,EAAU3mD,WAChC,MAAM,IAAI3yE,MAAM,oDAGE,mBAAToD,GACTsnE,EAAKtnE,EACLA,EAAOigI,OAAO3+H,GACW,mBAAT2+H,IAChB34D,EAAK24D,EACLA,OAAO3+H,GAGW,iBAATtB,IAAmBA,EAAOA,EAAKvB,YAEtCiS,KAAKi9G,aAAeuI,EAAU6a,WAKrBzvI,IAAT2+H,IAAoBA,GAAQvvH,KAAKi0H,WACrCj0H,KAAKmlH,QAAQ4U,KAAKzqI,GAAQ4/H,EAAcK,EAAM34D,IAL5C6pE,EAAezgI,KAAM1Q,EAAMsnE,EAM/B,CAUA,IAAAojE,CAAK1qI,EAAMigI,EAAM34D,GACf,GAAI52D,KAAKi9G,aAAeuI,EAAU3mD,WAChC,MAAM,IAAI3yE,MAAM,oDAGE,mBAAToD,GACTsnE,EAAKtnE,EACLA,EAAOigI,OAAO3+H,GACW,mBAAT2+H,IAChB34D,EAAK24D,EACLA,OAAO3+H,GAGW,iBAATtB,IAAmBA,EAAOA,EAAKvB,YAEtCiS,KAAKi9G,aAAeuI,EAAU6a,WAKrBzvI,IAAT2+H,IAAoBA,GAAQvvH,KAAKi0H,WACrCj0H,KAAKmlH,QAAQ6U,KAAK1qI,GAAQ4/H,EAAcK,EAAM34D,IAL5C6pE,EAAezgI,KAAM1Q,EAAMsnE,EAM/B,CAOA,MAAA8+C,GAEI11G,KAAKi9G,aAAeuI,EAAU3mD,YAC9B7+D,KAAKi9G,aAAeuI,EAAU2V,SAKhCn7H,KAAKk/H,SAAU,EACVl/H,KAAKo/H,UAAU1E,eAAegG,WAAW1gI,KAAKklH,QAAQxP,SAC7D,CAiBA,IAAAr3C,CAAK/uE,EAAM8gB,EAASwmD,GAClB,GAAI52D,KAAKi9G,aAAeuI,EAAU3mD,WAChC,MAAM,IAAI3yE,MAAM,oDAUlB,GAPuB,mBAAZkkB,IACTwmD,EAAKxmD,EACLA,EAAU,CAAC,GAGO,iBAAT9gB,IAAmBA,EAAOA,EAAKvB,YAEtCiS,KAAKi9G,aAAeuI,EAAU6a,KAEhC,YADAI,EAAezgI,KAAM1Q,EAAMsnE,GAI7B,MAAMovD,EAAO,CACXkU,OAAwB,iBAAT5qI,EACfigI,MAAOvvH,KAAKi0H,UACZ5b,UAAU,EACVkd,KAAK,KACFnlH,GAGApQ,KAAK62H,YAAYZ,EAAkB9D,iBACtCnM,EAAK3N,UAAW,GAGlBr4G,KAAKmlH,QAAQ9mD,KAAK/uE,GAAQ4/H,EAAclJ,EAAMpvD,EAChD,CAOA,SAAAz6C,GACE,GAAInc,KAAKi9G,aAAeuI,EAAU2V,OAClC,GAAIn7H,KAAKi9G,aAAeuI,EAAU3mD,WAM9B7+D,KAAKklH,UACPllH,KAAKm/H,YAAc3Z,EAAU8a,QAC7BtgI,KAAKklH,QAAQn/C,eARf,CACE,MAAM11C,EAAM,6DACZ2rG,EAAeh8H,KAAMA,KAAKwgI,KAAMnwG,EAElC,CAMF,EA6JF,SAASkvG,EAAaoB,EAAWrqE,EAASilE,EAAWnrH,GACnD,MAAM41G,EAAO,CACX2Q,wBAAwB,EACxB0F,UAAU,EACVuE,gBAAiBhC,EAAiB,GAClC/K,WAAY,UACZkD,oBAAoB,EACpBkD,mBAAmB,EACnB4G,iBAAiB,EACjBC,aAAc,MACX1wH,EACH21G,sBAAkBn1H,EAClBmwI,gBAAYnwI,EACZwlE,cAAUxlE,EACVghF,cAAUhhF,EACV+lB,aAAS/lB,EACT+sI,OAAQ,MACRxnE,UAAMvlE,EACNsgB,UAAMtgB,EACNwlH,UAAMxlH,GAKR,GAFA+vI,EAAUnB,UAAYxZ,EAAKqW,UAEtBuC,EAAiBhsH,SAASozG,EAAK4a,iBAClC,MAAM,IAAInN,WACR,iCAAiCzN,EAAK4a,wCACZhC,EAAiB3qI,KAAK,UAIpD,IAAI+sI,EAEJ,GAAI1qE,aAAmBooE,EACrBsC,EAAY1qE,OAEZ,IACE0qE,EAAY,IAAItC,EAAIpoE,EACtB,CAAE,MAAOx2C,GACP,MAAM,IAAI0yG,YAAY,gBAAgBl8D,IACxC,CAGyB,UAAvB0qE,EAAUpvD,SACZovD,EAAUpvD,SAAW,MACW,WAAvBovD,EAAUpvD,WACnBovD,EAAUpvD,SAAW,QAGvB+uD,EAAUnpD,KAAOwpD,EAAUppE,KAE3B,MAAMqpE,EAAkC,SAAvBD,EAAUpvD,SACrBsvD,EAAkC,aAAvBF,EAAUpvD,SAC3B,IAAIuvD,EAYJ,GAV2B,QAAvBH,EAAUpvD,UAAuBqvD,GAAaC,EAIvCA,IAAaF,EAAUI,SAChCD,EAAoB,8BACXH,EAAUK,OACnBF,EAAoB,0CANpBA,EACE,oFAQAA,EAAmB,CACrB,MAAM1rH,EAAM,IAAI+8G,YAAY2O,GAE5B,GAA6B,IAAzBR,EAAUrB,WACZ,MAAM7pH,EAGN,YADA6rH,EAAkBX,EAAWlrH,EAGjC,CAEA,MAAM8rH,EAAcN,EAAW,IAAM,GAC/BhzH,EAAMuwH,EAAY,IAAIzwI,SAAS,UAC/B87E,EAAUo3D,EAAW3b,EAAMz7C,QAAUw7C,EAAKx7C,QAC1C23D,EAAc,IAAInyH,IACxB,IAAI4qH,EA+DAp1D,EAnCJ,GA1BAmhD,EAAKD,iBAAmBkb,EAAWQ,EAAaC,EAChD1b,EAAKub,YAAcvb,EAAKub,aAAeA,EACvCvb,EAAK5P,KAAO4qB,EAAU5qB,MAAQmrB,EAC9Bvb,EAAK7vD,KAAO6qE,EAAU5qE,SAASp5D,WAAW,KACtCgkI,EAAU5qE,SAAS/jE,MAAM,GAAI,GAC7B2uI,EAAU5qE,SACd4vD,EAAKiW,QAAU,IACVjW,EAAKiW,QACR,wBAAyBjW,EAAK4a,gBAC9B,oBAAqB3yH,EACrBkuH,WAAY,UACZwF,QAAS,aAEX3b,EAAK90G,KAAO8vH,EAAUI,SAAWJ,EAAUY,OAC3C5b,EAAKrvG,QAAUqvG,EAAK6b,iBAEhB7b,EAAKiU,oBACPA,EAAoB,IAAIhE,GACK,IAA3BjQ,EAAKiU,kBAA6BjU,EAAKiU,kBAAoB,CAAC,GAC5D,EACAjU,EAAK6N,YAEP7N,EAAKiW,QAAQ,4BAA8BtrI,EAAO,CAChD,CAACslI,EAAkB9D,eAAgB8H,EAAkB7F,WAGrDmH,EAAUruI,OAAQ,CACpB,IAAK,MAAM0kF,KAAY2pD,EAAW,CAChC,GACsB,iBAAb3pD,IACNktD,EAAiB93E,KAAK4qB,IACvB4vD,EAAYxvH,IAAI4/D,GAEhB,MAAM,IAAI4gD,YACR,sDAIJgP,EAAY9wH,IAAIkhE,EAClB,CAEAo0C,EAAKiW,QAAQ,0BAA4BV,EAAUtnI,KAAK,IAC1D,CAYA,GAXI+xH,EAAK5K,SACH4K,EAAK4a,gBAAkB,GACzB5a,EAAKiW,QAAQ,wBAA0BjW,EAAK5K,OAE5C4K,EAAKiW,QAAQ6F,OAAS9b,EAAK5K,SAG3B4lB,EAAUe,UAAYf,EAAUvpD,YAClCuuC,EAAKgc,KAAO,GAAGhB,EAAUe,YAAYf,EAAUvpD,YAG7CypD,EAAU,CACZ,MAAMe,EAAQjc,EAAK90G,KAAKte,MAAM,KAE9BozH,EAAK+a,WAAakB,EAAM,GACxBjc,EAAK90G,KAAO+wH,EAAM,EACpB,CAIA,GAAIjc,EAAK6a,gBAAiB,CACxB,GAA6B,IAAzBF,EAAUrB,WAAkB,CAC9BqB,EAAUuB,aAAehB,EACzBP,EAAUwB,gBAAkBlB,EAC5BN,EAAUyB,0BAA4BlB,EAClClb,EAAK+a,WACLC,EAAU7qE,KAEd,MAAM8lE,EAAU7rH,GAAWA,EAAQ6rH,QAQnC,GAFA7rH,EAAU,IAAKA,EAAS6rH,QAAS,CAAC,GAE9BA,EACF,IAAK,MAAOhuH,EAAK1a,KAAUmG,OAAO2oI,QAAQpG,GACxC7rH,EAAQ6rH,QAAQhuH,EAAIld,eAAiBwC,CAG3C,MAAO,GAA4C,IAAxCotI,EAAU1rH,cAAc,YAAmB,CACpD,MAAMqtH,EAAapB,IACfP,EAAUuB,cACRlc,EAAK+a,aAAeJ,EAAUyB,2BAEhCzB,EAAUuB,cAERlB,EAAU7qE,OAASwqE,EAAUyB,4BAE9BE,GAAe3B,EAAUwB,kBAAoBlB,YAKzCjb,EAAKiW,QAAQsG,qBACbvc,EAAKiW,QAAQuG,OAEfF,UAAmBtc,EAAKiW,QAAQ9lE,KAErC6vD,EAAKgc,UAAOpxI,EAEhB,CAOIo1H,EAAKgc,OAAS5xH,EAAQ6rH,QAAQsG,gBAChCnyH,EAAQ6rH,QAAQsG,cACd,SAAW90I,OAAOK,KAAKk4H,EAAKgc,MAAMj0I,SAAS,WAG/C82E,EAAM87D,EAAUH,KAAO32D,EAAQm8C,GAE3B2a,EAAUrB,YAUZqB,EAAUptH,KAAK,WAAYotH,EAAU1qE,IAAK4O,EAE9C,MACEA,EAAM87D,EAAUH,KAAO32D,EAAQm8C,GAG7BA,EAAKrvG,SACPkuD,EAAIxwD,GAAG,WAAW,KAChB2nH,EAAe2E,EAAW97D,EAAK,kCAAkC,IAIrEA,EAAIxwD,GAAG,SAAUoB,IACH,OAARovD,GAAgBA,EAAI85D,KAExB95D,EAAM87D,EAAUH,KAAO,KACvBc,EAAkBX,EAAWlrH,GAAI,IAGnCovD,EAAIxwD,GAAG,YAAawoH,IAClB,MAAM1hB,EAAW0hB,EAAIZ,QAAQ9gB,SACvBwd,EAAakE,EAAIlE,WAEvB,GACExd,GACA6K,EAAK6a,iBACLlI,GAAc,KACdA,EAAa,IACb,CACA,KAAMgI,EAAUrB,WAAatZ,EAAK8a,aAEhC,YADA9E,EAAe2E,EAAW97D,EAAK,8BAMjC,IAAI49D,EAFJ59D,EAAI+3C,QAIJ,IACE6lB,EAAO,IAAI/D,EAAIvjB,EAAU7kD,EAC3B,CAAE,MAAOx2C,GACP,MAAMrK,EAAM,IAAI+8G,YAAY,gBAAgBrX,KAE5C,YADAmmB,EAAkBX,EAAWlrH,EAE/B,CAEA8pH,EAAaoB,EAAW8B,EAAMlH,EAAWnrH,EAC3C,MAAYuwH,EAAUptH,KAAK,sBAAuBsxD,EAAKg4D,IACrDb,EACE2E,EACA97D,EACA,+BAA+Bg4D,EAAIlE,aAEvC,IAGF9zD,EAAIxwD,GAAG,WAAW,CAACwoH,EAAK9lB,EAAQumB,KAO9B,GANAqD,EAAUptH,KAAK,UAAWspH,GAMtB8D,EAAU1jB,aAAeuI,EAAU3mD,WAAY,OAInD,GAFAgG,EAAM87D,EAAUH,KAAO,KAEmB,cAAtC3D,EAAIZ,QAAQoB,QAAQtsI,cAEtB,YADAirI,EAAe2E,EAAW5pB,EAAQ,0BAIpC,MAAMsnB,EAAS1C,EAAW,QACvByC,OAAOnwH,EAAMkiH,GACbkO,OAAO,UAEV,GAAIxB,EAAIZ,QAAQ,0BAA4BoC,EAE1C,YADArC,EAAe2E,EAAW5pB,EAAQ,uCAIpC,MAAM2rB,EAAa7F,EAAIZ,QAAQ,0BAC/B,IAAI0G,EAYJ,QAVmB/xI,IAAf8xI,EACGlB,EAAYh6G,KAELg6G,EAAYxvH,IAAI0wH,KAC1BC,EAAY,sCAFZA,EAAY,mDAILnB,EAAYh6G,OACrBm7G,EAAY,8BAGVA,EAEF,YADA3G,EAAe2E,EAAW5pB,EAAQ4rB,GAIhCD,IAAY/B,EAAUrC,UAAYoE,GAEtC,MAAM7E,EAAyBhB,EAAIZ,QAAQ,4BAE3C,QAA+BrrI,IAA3BitI,EAAsC,CACxC,IAAK5D,EAAmB,CAKtB,YADA+B,EAAe2E,EAAW5pB,EAFxB,+EAIJ,CAEA,IAAIh1F,EAEJ,IACEA,EAAazf,EAAMu7H,EACrB,CAAE,MAAOpoH,GAGP,YADAumH,EAAe2E,EAAW5pB,EADV,0CAGlB,CAEA,MAAM6rB,EAAiBlpI,OAAO8F,KAAKuiB,GAEnC,GAC4B,IAA1B6gH,EAAe11I,QACf01I,EAAe,KAAO3M,EAAkB9D,cACxC,CAGA,YADA6J,EAAe2E,EAAW5pB,EADV,uDAGlB,CAEA,IACEkjB,EAAkBpF,OAAO9yG,EAAWk0G,EAAkB9D,eACxD,CAAE,MAAO18G,GAGP,YADAumH,EAAe2E,EAAW5pB,EADV,0CAGlB,CAEA4pB,EAAU9J,YAAYZ,EAAkB9D,eACtC8H,CACJ,CAEA0G,EAAUpC,UAAUxnB,EAAQumB,EAAM,CAChC3G,uBAAwB3Q,EAAK2Q,uBAC7BsC,aAAcjT,EAAKiT,aACnBpF,WAAY7N,EAAK6N,WACjBkD,mBAAoB/Q,EAAK+Q,oBACzB,IAGA/Q,EAAK6c,cACP7c,EAAK6c,cAAch+D,EAAK87D,GAExB97D,EAAIj1D,KAER,CASA,SAAS0xH,EAAkBX,EAAWlrH,GACpCkrH,EAAUxB,YAAc3Z,EAAU8a,QAClCK,EAAUptH,KAAK,QAASkC,GACxBkrH,EAAUnG,WACZ,CASA,SAASkH,EAAWtxH,GAElB,OADAA,EAAQc,KAAOd,EAAQ2wH,WAChBnrB,EAAI55F,QAAQ5L,EACrB,CASA,SAASqxH,EAAWrxH,GAOlB,OANAA,EAAQc,UAAOtgB,EAEVwf,EAAQ0yH,YAAqC,KAAvB1yH,EAAQ0yH,aACjC1yH,EAAQ0yH,WAAaltB,EAAImtB,KAAK3yH,EAAQ+lD,MAAQ,GAAK/lD,EAAQ+lD,MAGtDygD,EAAI56F,QAAQ5L,EACrB,CAWA,SAAS4rH,EAAe2E,EAAW92C,EAAQx+E,GACzCs1H,EAAUxB,YAAc3Z,EAAU8a,QAElC,MAAM7qH,EAAM,IAAIvpB,MAAMmf,GACtBnf,MAAMkgB,kBAAkBqJ,EAAKumH,GAEzBnyC,EAAOm5C,WACTn5C,EAAO80C,IAAY,EACnB90C,EAAO+yB,QAEH/yB,EAAOktB,SAAWltB,EAAOktB,OAAOojB,WAMlCtwC,EAAOktB,OAAOhxC,UAGhBhlD,QAAQ01G,SAAS6K,EAAmBX,EAAWlrH,KAE/Co0E,EAAO9jB,QAAQtwD,GACfo0E,EAAOj1E,KAAK,QAAS+rH,EAAUptH,KAAK/U,KAAKmiI,EAAW,UACpD92C,EAAOj1E,KAAK,QAAS+rH,EAAUnG,UAAUh8H,KAAKmiI,IAElD,CAWA,SAASF,EAAeE,EAAWrxI,EAAMsnE,GACvC,GAAItnE,EAAM,CACR,MAAMpC,EAASyiI,EAASrgI,GAAMpC,OAQ1ByzI,EAAUzb,QAASyb,EAAUxb,QAAQ6R,gBAAkB9pI,EACtDyzI,EAAUtB,iBAAmBnyI,CACpC,CAEA,GAAI0pE,EAAI,CACN,MAAMnhD,EAAM,IAAIvpB,MACd,qCAAqCy0I,EAAU1jB,eACzC4hB,EAAY8B,EAAU1jB,gBAE9Bl8F,QAAQ01G,SAAS7/D,EAAInhD,EACvB,CACF,CASA,SAASkqH,EAAmBnpE,EAAMjrD,GAChC,MAAMo1H,EAAY3gI,KAAKuwH,GAEvBoQ,EAAU/O,qBAAsB,EAChC+O,EAAU3B,cAAgBzzH,EAC1Bo1H,EAAU5B,WAAavoE,OAEe5lE,IAAlC+vI,EAAUzb,QAAQqL,KAEtBoQ,EAAUzb,QAAQlwG,eAAe,OAAQmrH,GACzCp/G,QAAQ01G,SAAS/gB,EAAQirB,EAAUzb,SAEtB,OAAT1uD,EAAemqE,EAAUlrB,QACxBkrB,EAAUlrB,MAAMj/C,EAAMjrD,GAC7B,CAOA,SAASq0H,IACP,MAAMe,EAAY3gI,KAAKuwH,GAElBoQ,EAAUrF,UAAUqF,EAAUzb,QAAQxP,QAC7C,CAQA,SAASmqB,EAAgBpqH,GACvB,MAAMkrH,EAAY3gI,KAAKuwH,QAEe3/H,IAAlC+vI,EAAUzb,QAAQqL,KACpBoQ,EAAUzb,QAAQlwG,eAAe,OAAQmrH,GAMzCp/G,QAAQ01G,SAAS/gB,EAAQirB,EAAUzb,SAEnCyb,EAAUlrB,MAAMhgG,EAAI66G,KAGtBqQ,EAAUptH,KAAK,QAASkC,EAC1B,CAOA,SAASwtH,IACPjjI,KAAKuwH,GAAYiK,WACnB,CASA,SAASsF,EAAkBxwI,EAAMoiI,GAC/B1xH,KAAKuwH,GAAYh9G,KAAK,UAAWjkB,EAAMoiI,EACzC,CAQA,SAASqO,EAAezwI,GACtB,MAAMqxI,EAAY3gI,KAAKuwH,GAEnBoQ,EAAUnB,WAAWmB,EAAU3G,KAAK1qI,GAAO0Q,KAAKi0H,UAAWzD,GAC/DmQ,EAAUptH,KAAK,OAAQjkB,EACzB,CAQA,SAAS0wI,EAAe1wI,GACtB0Q,KAAKuwH,GAAYh9G,KAAK,OAAQjkB,EAChC,CAQA,SAASomH,EAAO7rB,GACdA,EAAO6rB,QACT,CAOA,SAASwqB,IACP,MAAMS,EAAY3gI,KAAKuwH,GAQvB,IAAI7gB,EANJ1vG,KAAKgV,eAAe,QAASkrH,GAC7BlgI,KAAKgV,eAAe,OAAQmrH,GAC5BngI,KAAKgV,eAAe,MAAOorH,GAE3BO,EAAUxB,YAAc3Z,EAAU8a,QAc/BtgI,KAAK61H,eAAeC,YACpB6K,EAAU/O,qBACV+O,EAAUvB,UAAU1E,eAAe6F,cACG,QAAtC7wB,EAAQixB,EAAUzb,QAAQge,SAE3BvC,EAAUvB,UAAU9qB,MAAM5E,GAG5BixB,EAAUvB,UAAUxvH,MAEpB5P,KAAKuwH,QAAc3/H,EAEnBkmB,aAAa6pH,EAAU1B,aAGrB0B,EAAUvB,UAAU1E,eAAeC,UACnCgG,EAAUvB,UAAU1E,eAAe6F,aAEnCI,EAAUnG,aAEVmG,EAAUvB,UAAU/qH,GAAG,QAAS4uH,GAChCtC,EAAUvB,UAAU/qH,GAAG,SAAU4uH,GAErC,CAQA,SAAS9C,EAAazwB,GACf1vG,KAAKuwH,GAAY6O,UAAU9qB,MAAM5E,IACpC1vG,KAAKuyG,OAET,CAOA,SAAS6tB,IACP,MAAMO,EAAY3gI,KAAKuwH,GAEvBoQ,EAAUxB,YAAc3Z,EAAU8a,QAClCK,EAAUvB,UAAUxvH,MACpB5P,KAAK4P,KACP,CAOA,SAASmsH,IACP,MAAM4E,EAAY3gI,KAAKuwH,GAEvBvwH,KAAKgV,eAAe,QAAS+mH,GAC7B/7H,KAAKqU,GAAG,QAASm8G,GAEbmQ,IACFA,EAAUxB,YAAc3Z,EAAU8a,QAClCtgI,KAAK+lE,UAET,CAj0BArsE,OAAOqV,eAAey2G,EAAW,aAAc,CAC7C/2G,YAAY,EACZlb,MAAOsrI,EAAY38H,QAAQ,gBAO7BxI,OAAOqV,eAAey2G,EAAU/yH,UAAW,aAAc,CACvDgc,YAAY,EACZlb,MAAOsrI,EAAY38H,QAAQ,gBAO7BxI,OAAOqV,eAAey2G,EAAW,OAAQ,CACvC/2G,YAAY,EACZlb,MAAOsrI,EAAY38H,QAAQ,UAO7BxI,OAAOqV,eAAey2G,EAAU/yH,UAAW,OAAQ,CACjDgc,YAAY,EACZlb,MAAOsrI,EAAY38H,QAAQ,UAO7BxI,OAAOqV,eAAey2G,EAAW,UAAW,CAC1C/2G,YAAY,EACZlb,MAAOsrI,EAAY38H,QAAQ,aAO7BxI,OAAOqV,eAAey2G,EAAU/yH,UAAW,UAAW,CACpDgc,YAAY,EACZlb,MAAOsrI,EAAY38H,QAAQ,aAO7BxI,OAAOqV,eAAey2G,EAAW,SAAU,CACzC/2G,YAAY,EACZlb,MAAOsrI,EAAY38H,QAAQ,YAO7BxI,OAAOqV,eAAey2G,EAAU/yH,UAAW,SAAU,CACnDgc,YAAY,EACZlb,MAAOsrI,EAAY38H,QAAQ,YAG7B,CACE,aACA,iBACA,aACA,WACA,WACA,aACA,OACA4L,SAASq1H,IACTzpI,OAAOqV,eAAey2G,EAAU/yH,UAAW0wI,EAAU,CAAE10H,YAAY,GAAO,IAO5E,CAAC,OAAQ,QAAS,QAAS,WAAWX,SAAS6vH,IAC7CjkI,OAAOqV,eAAey2G,EAAU/yH,UAAW,KAAKkrI,IAAU,CACxDlvH,YAAY,EACZ,GAAApgB,GACE,IAAK,MAAMkmB,KAAYvU,KAAKwxH,UAAUmM,GACpC,GAAIppH,EAAS67G,GAAuB,OAAO77G,EAAS87G,GAGtD,OAAO,IACT,EACA,GAAA5hI,CAAI8iI,GACF,IAAK,MAAMh9G,KAAYvU,KAAKwxH,UAAUmM,GACpC,GAAIppH,EAAS67G,GAAuB,CAClCpwH,KAAKgV,eAAe2oH,EAAQppH,GAC5B,KACF,CAGqB,mBAAZg9G,GAEXvxH,KAAKsxH,iBAAiBqM,EAAQpM,EAAS,CACrC,CAACnB,IAAuB,GAE5B,GACA,IAGJ5K,EAAU/yH,UAAU6+H,iBAAmBA,EACvC9L,EAAU/yH,UAAUq/H,oBAAsBA,EAE1CtmI,EAAOC,QAAU+5H,yBCxmBjBh6H,EAAOC,QAAU23I,QAAQ,qCCAzB53I,EAAOC,QAAU23I,QAAQ,wCCAzB53I,EAAOC,QAAU23I,QAAQ,iCCAzB53I,EAAOC,QAAU23I,QAAQ,oCCAzB53I,EAAOC,QAAU23I,QAAQ,iCCAzB53I,EAAOC,QAAU23I,QAAQ,8BCAzB53I,EAAOC,QAAU23I,QAAQ,iCCAzB53I,EAAOC,QAAU23I,QAAQ,6BCAzB53I,EAAOC,QAAU23I,QAAQ,+BCAzB53I,EAAOC,QAAU23I,QAAQ,gCCAzB53I,EAAOC,QAAU23I,QAAQ,6BCAzB53I,EAAOC,QAAU23I,QAAQ,6BCAzB53I,EAAOC,QAAU23I,QAAQ,iCCAzB53I,EAAOC,QAAU23I,QAAQ,8BCAzB53I,EAAOC,QAAU23I,QAAQ,8BCAzB53I,EAAOC,QAAU23I,QAAQ,+BCAzB53I,EAAOC,QAAU23I,QAAQ,sBCAzB,MACIt3I,EAAO,SAAUL,GACnB,aAEAiO,OAAOqV,eAAetjB,EAAS,aAAc,CAC3C8H,OAAO,IAET9H,EAAQqiF,aAAU,EAsBlB,IAAIu1D,EAAO,KAEX,IACEA,EAAO,IAAIC,YAAYC,SAAS,IAAID,YAAYE,OAAO,IAAI7zI,WAAW,CAAC,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,MAAO,CAAC,GAAGlE,OAC9sC,CAAE,MAAOq0B,GACT,CAaA,SAASh0B,EAAKiG,EAAKD,EAAM2xI,GAKvBzjI,KAAKjO,IAAY,EAANA,EAMXiO,KAAKlO,KAAc,EAAPA,EAMZkO,KAAKyjI,WAAaA,CACpB,CAoCA,SAAShtF,EAAO1iD,GACd,OAAsC,KAA9BA,GAAOA,EAAgB,WACjC,CASA,SAAS2vI,EAAMnwI,GACb,IAAIV,EAAIgrC,KAAK8lG,MAAMpwI,GAASA,GAC5B,OAAOA,EAAQ,GAAKV,EAAIA,CAC1B,CAzBA/G,EAAK2G,UAAUmxI,WACflqI,OAAOqV,eAAejjB,EAAK2G,UAAW,aAAc,CAClDc,OAAO,IAgCTzH,EAAK2qD,OAASA,EAOd,IAAIotF,EAAY,CAAC,EAObC,EAAa,CAAC,EAQlB,SAASC,EAAQxwI,EAAOkwI,GACtB,IAAI1vI,EAAKiwI,EAAWC,EAEpB,OAAIR,GAGEQ,EAAQ,IAFZ1wI,KAAW,IAEeA,EAAQ,OAChCywI,EAAYF,EAAWvwI,IACDywI,GAGxBjwI,EAAM9B,EAASsB,EAAO,GAAG,GACrB0wI,IAAOH,EAAWvwI,GAASQ,GACxBA,IAIHkwI,GAAS,MAFb1wI,GAAS,IAEoBA,EAAQ,OACnCywI,EAAYH,EAAUtwI,IACAywI,GAGxBjwI,EAAM9B,EAASsB,EAAOA,EAAQ,GAAK,EAAI,GAAG,GACtC0wI,IAAOJ,EAAUtwI,GAASQ,GACvBA,EAEX,CAkBA,SAASywC,EAAWjxC,EAAOkwI,GACzB,GAAIz2I,MAAMuG,GAAQ,OAAOkwI,EAAWh4G,EAAQkZ,EAE5C,GAAI8+F,EAAU,CACZ,GAAIlwI,EAAQ,EAAG,OAAOk4B,EACtB,GAAIl4B,GAAS2wI,EAAgB,OAAOC,CACtC,KAAO,CACL,GAAI5wI,IAAU6wI,EAAgB,OAAOC,EACrC,GAAI9wI,EAAQ,GAAK6wI,EAAgB,OAAOtkG,CAC1C,CAEA,OAAIvsC,EAAQ,EAAUixC,GAAYjxC,EAAOkwI,GAAUa,MAC5CryI,EAASsB,EAAQgxI,EAAiB,EAAGhxI,EAAQgxI,EAAiB,EAAGd,EAC1E,CAmBA,SAASxxI,EAASuyI,EAASC,EAAUhB,GACnC,OAAO,IAAI33I,EAAK04I,EAASC,EAAUhB,EACrC,CA1CA33I,EAAKi4I,QAAUA,EA+Bfj4I,EAAK04C,WAAaA,EAuBlB14C,EAAKmG,SAAWA,EAShB,IAAIyyI,EAAU7mG,KAAKktB,IAUnB,SAAS/V,EAAWnnD,EAAK41I,EAAUkB,GACjC,GAAmB,IAAf92I,EAAIX,OAAc,MAAMhB,MAAM,gBAUlC,GARwB,iBAAbu3I,GAETkB,EAAQlB,EACRA,GAAW,GAEXA,IAAaA,EAGH,QAAR51I,GAAyB,aAARA,GAA8B,cAARA,GAA+B,cAARA,EAAqB,OAAO41I,EAAWh4G,EAAQkZ,EAEjH,IADAggG,EAAQA,GAAS,IACL,GAAK,GAAKA,EAAO,MAAMlR,WAAW,SAC9C,IAAI1lH,EACJ,IAAKA,EAAIlgB,EAAIqU,QAAQ,MAAQ,EAAG,MAAMhW,MAAM,mBAAwB,GAAU,IAAN6hB,EACtE,OAAOinC,EAAWnnD,EAAIsU,UAAU,GAAIshI,EAAUkB,GAAOL,MAOvD,IAHA,IAAIM,EAAepgG,EAAWkgG,EAAQC,EAAO,IACzC7zI,EAAS6zC,EAEJp4C,EAAI,EAAGA,EAAIsB,EAAIX,OAAQX,GAAK,EAAG,CACtC,IAAIi7B,EAAOqW,KAAKtwB,IAAI,EAAG1f,EAAIX,OAASX,GAChCgH,EAAQ45D,SAASt/D,EAAIsU,UAAU5V,EAAGA,EAAIi7B,GAAOm9G,GAEjD,GAAIn9G,EAAO,EAAG,CACZ,IAAIq9G,EAAQrgG,EAAWkgG,EAAQC,EAAOn9G,IACtC12B,EAASA,EAAOg0I,IAAID,GAAOn0H,IAAI8zB,EAAWjxC,GAC5C,MAEEzC,GADAA,EAASA,EAAOg0I,IAAIF,IACJl0H,IAAI8zB,EAAWjxC,GAEnC,CAGA,OADAzC,EAAO2yI,SAAWA,EACX3yI,CACT,CAoBA,SAAS2zC,EAAUn2C,EAAKm1I,GACtB,MAAmB,iBAARn1I,EAAyBk2C,EAAWl2C,EAAKm1I,GACjC,iBAARn1I,EAAyB0mD,EAAW1mD,EAAKm1I,GAE7CxxI,EAAS3D,EAAIyD,IAAKzD,EAAIwD,KAA0B,kBAAb2xI,EAAyBA,EAAWn1I,EAAIm1I,SACpF,CAdA33I,EAAKkpD,WAAaA,EAwBlBlpD,EAAK24C,UAAYA,EASjB,IAcI8/F,EAAiBQ,WAOjBb,EAAiBK,EAAiBA,EAOlCH,EAAiBF,EAAiB,EAOlCc,EAAajB,EA5BI,GAAK,IAkCtBp/F,EAAOo/F,EAAQ,GAMnBj4I,EAAK64C,KAAOA,EAMZ,IAAIlZ,EAAQs4G,EAAQ,GAAG,GAMvBj4I,EAAK2/B,MAAQA,EAMb,IAAIw5G,EAAMlB,EAAQ,GAMlBj4I,EAAKm5I,IAAMA,EAMX,IAAIC,EAAOnB,EAAQ,GAAG,GAMtBj4I,EAAKo5I,KAAOA,EAMZ,IAAIC,EAAUpB,GAAS,GAMvBj4I,EAAKq5I,QAAUA,EAMf,IAAIrlG,EAAY7tC,GAAS,EAAgB,YAAgB,GAMzDnG,EAAKg0C,UAAYA,EAMjB,IAAIqkG,EAAqBlyI,GAAS,GAAgB,GAAgB,GAMlEnG,EAAKq4I,mBAAqBA,EAM1B,IAAIE,EAAYpyI,EAAS,GAAG,YAAgB,GAM5CnG,EAAKu4I,UAAYA,EAMjB,IAAIe,EAAgBt5I,EAAK2G,UAOzB2yI,EAAcC,MAAQ,WACpB,OAAOrlI,KAAKyjI,SAAWzjI,KAAKjO,MAAQ,EAAIiO,KAAKjO,GAC/C,EAQAqzI,EAAch2E,SAAW,WACvB,OAAIpvD,KAAKyjI,UAAkBzjI,KAAKlO,OAAS,GAAKyyI,GAAkBvkI,KAAKjO,MAAQ,GACtEiO,KAAKlO,KAAOyyI,GAAkBvkI,KAAKjO,MAAQ,EACpD,EAWAqzI,EAAcr3I,SAAW,SAAkB42I,GAEzC,IADAA,EAAQA,GAAS,IACL,GAAK,GAAKA,EAAO,MAAMlR,WAAW,SAC9C,GAAIzzH,KAAKslI,SAAU,MAAO,IAE1B,GAAItlI,KAAKulI,aAAc,CAErB,GAAIvlI,KAAKk2B,GAAGmuG,GAAY,CAGtB,IAAImB,EAAYhhG,EAAWmgG,GACvBc,EAAMzlI,KAAKylI,IAAID,GACfE,EAAOD,EAAIX,IAAIU,GAAWl5D,IAAItsE,MAClC,OAAOylI,EAAI13I,SAAS42I,GAASe,EAAKL,QAAQt3I,SAAS42I,EACrD,CAAO,MAAO,IAAM3kI,KAAKskI,MAAMv2I,SAAS42I,EAC1C,CAQA,IAJA,IAAIC,EAAepgG,EAAWkgG,EAAQC,EAAO,GAAI3kI,KAAKyjI,UAClDkC,EAAM3lI,KACNlP,EAAS,KAEA,CACX,IAAI80I,EAASD,EAAIF,IAAIb,GAEjBiB,GADSF,EAAIr5D,IAAIs5D,EAAOd,IAAIF,IAAeS,UAAY,GACvCt3I,SAAS42I,GAE7B,IADAgB,EAAMC,GACEN,SAAU,OAAOO,EAAS/0I,EAChC,KAAO+0I,EAAO34I,OAAS,GAAG24I,EAAS,IAAMA,EAEzC/0I,EAAS,GAAK+0I,EAAS/0I,CAE3B,CACF,EAQAs0I,EAAcU,YAAc,WAC1B,OAAO9lI,KAAKlO,IACd,EAQAszI,EAAcW,oBAAsB,WAClC,OAAO/lI,KAAKlO,OAAS,CACvB,EAQAszI,EAAcY,WAAa,WACzB,OAAOhmI,KAAKjO,GACd,EAQAqzI,EAAca,mBAAqB,WACjC,OAAOjmI,KAAKjO,MAAQ,CACtB,EAQAqzI,EAAcj2E,cAAgB,WAC5B,GAAInvD,KAAKulI,aACP,OAAOvlI,KAAKk2B,GAAGmuG,GAAa,GAAKrkI,KAAKskI,MAAMn1E,gBAG9C,IAFA,IAAI7gE,EAAmB,GAAb0R,KAAKlO,KAAYkO,KAAKlO,KAAOkO,KAAKjO,IAEnCm0I,EAAM,GAAIA,EAAM,KAAe53I,EAAM,GAAK43I,GAAvBA,KAE5B,OAAoB,GAAblmI,KAAKlO,KAAYo0I,EAAM,GAAKA,EAAM,CAC3C,EAQAd,EAAcE,OAAS,WACrB,OAAqB,IAAdtlI,KAAKlO,MAA2B,IAAbkO,KAAKjO,GACjC,EAOAqzI,EAAce,IAAMf,EAAcE,OAOlCF,EAAcG,WAAa,WACzB,OAAQvlI,KAAKyjI,UAAYzjI,KAAKlO,KAAO,CACvC,EAQAszI,EAAcgB,WAAa,WACzB,OAAOpmI,KAAKyjI,UAAYzjI,KAAKlO,MAAQ,CACvC,EAQAszI,EAAciB,MAAQ,WACpB,QAA0B,GAAlBrmI,KAAKjO,IACf,EAQAqzI,EAAckB,OAAS,WACrB,QAAmB,EAAXtmI,KAAKjO,IACf,EASAqzI,EAAcnkI,OAAS,SAAgBC,GAErC,OADKu1C,EAAOv1C,KAAQA,EAAQujC,EAAUvjC,KAClClB,KAAKyjI,WAAaviI,EAAMuiI,UAAYzjI,KAAKlO,OAAS,IAAO,GAAKoP,EAAMpP,OAAS,IAAO,KACjFkO,KAAKlO,OAASoP,EAAMpP,MAAQkO,KAAKjO,MAAQmP,EAAMnP,IACxD,EASAqzI,EAAclvG,GAAKkvG,EAAcnkI,OAQjCmkI,EAAcmB,UAAY,SAAmBrlI,GAC3C,OAAQlB,KAAKk2B,GAEbh1B,EACF,EASAkkI,EAAcoB,IAAMpB,EAAcmB,UAQlCnB,EAAcqB,GAAKrB,EAAcmB,UAQjCnB,EAAcsB,SAAW,SAAkBxlI,GACzC,OAAOlB,KAAK2mI,KAEZzlI,GAAS,CACX,EASAkkI,EAActgG,GAAKsgG,EAAcsB,SAQjCtB,EAAcwB,gBAAkB,SAAyB1lI,GACvD,OAAOlB,KAAK2mI,KAEZzlI,IAAU,CACZ,EASAkkI,EAAcyB,IAAMzB,EAAcwB,gBAQlCxB,EAAc0B,GAAK1B,EAAcwB,gBAQjCxB,EAAc2B,YAAc,SAAqB7lI,GAC/C,OAAOlB,KAAK2mI,KAEZzlI,GAAS,CACX,EASAkkI,EAAc1+E,GAAK0+E,EAAc2B,YAQjC3B,EAAc4B,mBAAqB,SAA4B9lI,GAC7D,OAAOlB,KAAK2mI,KAEZzlI,IAAU,CACZ,EASAkkI,EAAcrgG,IAAMqgG,EAAc4B,mBAQlC5B,EAAc6B,GAAK7B,EAAc4B,mBASjC5B,EAAc7+E,QAAU,SAAiBrlD,GAEvC,GADKu1C,EAAOv1C,KAAQA,EAAQujC,EAAUvjC,IAClClB,KAAKk2B,GAAGh1B,GAAQ,OAAO,EAC3B,IAAIgmI,EAAUlnI,KAAKulI,aACf4B,EAAWjmI,EAAMqkI,aACrB,OAAI2B,IAAYC,GAAkB,GAC7BD,GAAWC,EAAiB,EAE5BnnI,KAAKyjI,SAEHviI,EAAMpP,OAAS,EAAIkO,KAAKlO,OAAS,GAAKoP,EAAMpP,OAASkO,KAAKlO,MAAQoP,EAAMnP,MAAQ,EAAIiO,KAAKjO,MAAQ,GAAK,EAAI,EAFtFiO,KAAKssE,IAAIprE,GAAOqkI,cAAgB,EAAI,CAGjE,EAUAH,EAAcuB,KAAOvB,EAAc7+E,QAOnC6+E,EAAcgC,OAAS,WACrB,OAAKpnI,KAAKyjI,UAAYzjI,KAAKk2B,GAAGmuG,GAAmBA,EAC1CrkI,KAAKqnI,MAAM32H,IAAIu0H,EACxB,EAQAG,EAAcd,IAAMc,EAAcgC,OAQlChC,EAAc10H,IAAM,SAAa42H,GAC1B7wF,EAAO6wF,KAASA,EAAS7iG,EAAU6iG,IAExC,IAAIC,EAAMvnI,KAAKlO,OAAS,GACpB01I,EAAkB,MAAZxnI,KAAKlO,KACX21I,EAAMznI,KAAKjO,MAAQ,GACnB21I,EAAiB,MAAX1nI,KAAKjO,IACX41I,EAAML,EAAOx1I,OAAS,GACtB81I,EAAoB,MAAdN,EAAOx1I,KACb+1I,EAAMP,EAAOv1I,MAAQ,GAErB+1I,EAAM,EACNC,EAAM,EACNC,EAAM,EACNC,EAAM,EAYV,OAVAD,IADAC,GAAOP,GALgB,MAAbJ,EAAOv1I,QAMF,GAGfg2I,IADAC,GAAOP,EAAMI,KACE,GAGfC,IADAC,GAAOP,EAAMI,KACE,GAEfE,GAAOP,EAAMI,EAEN11I,GANP+1I,GAAO,QAMgB,IATvBC,GAAO,QAQPH,GAAO,QACiC,IAHxCC,GAAO,OAG2C/nI,KAAKyjI,SACzD,EASA2B,EAAc8C,SAAW,SAAkBC,GAEzC,OADK1xF,EAAO0xF,KAAaA,EAAa1jG,EAAU0jG,IACzCnoI,KAAK0Q,IAAIy3H,EAAW7D,MAC7B,EASAc,EAAc94D,IAAM84D,EAAc8C,SAQlC9C,EAAcxrC,SAAW,SAAkBwuC,GACzC,GAAIpoI,KAAKslI,SAAU,OAAOtlI,KAG1B,GAFKy2C,EAAO2xF,KAAaA,EAAa3jG,EAAU2jG,IAE5C/E,EAEF,OAAOpxI,EADGoxI,EAAU,IAAErjI,KAAKjO,IAAKiO,KAAKlO,KAAMs2I,EAAWr2I,IAAKq2I,EAAWt2I,MACjDuxI,EAAe,WAAKrjI,KAAKyjI,UAGhD,GAAI2E,EAAW9C,SAAU,OAAOtlI,KAAKyjI,SAAWh4G,EAAQkZ,EACxD,GAAI3kC,KAAKk2B,GAAGmuG,GAAY,OAAO+D,EAAW/B,QAAUhC,EAAY1/F,EAChE,GAAIyjG,EAAWlyG,GAAGmuG,GAAY,OAAOrkI,KAAKqmI,QAAUhC,EAAY1/F,EAEhE,GAAI3kC,KAAKulI,aACP,OAAI6C,EAAW7C,aAAqBvlI,KAAKskI,MAAMQ,IAAIsD,EAAW9D,OAAmBtkI,KAAKskI,MAAMQ,IAAIsD,GAAY9D,MACvG,GAAI8D,EAAW7C,aAAc,OAAOvlI,KAAK8kI,IAAIsD,EAAW9D,OAAOA,MAGtE,GAAItkI,KAAK8kC,GAAGkgG,IAAeoD,EAAWtjG,GAAGkgG,GAAa,OAAOxgG,EAAWxkC,KAAKovD,WAAag5E,EAAWh5E,WAAYpvD,KAAKyjI,UAGtH,IAAI8D,EAAMvnI,KAAKlO,OAAS,GACpB01I,EAAkB,MAAZxnI,KAAKlO,KACX21I,EAAMznI,KAAKjO,MAAQ,GACnB21I,EAAiB,MAAX1nI,KAAKjO,IACX41I,EAAMS,EAAWt2I,OAAS,GAC1B81I,EAAwB,MAAlBQ,EAAWt2I,KACjB+1I,EAAMO,EAAWr2I,MAAQ,GACzBs2I,EAAuB,MAAjBD,EAAWr2I,IACjB+1I,EAAM,EACNC,EAAM,EACNC,EAAM,EACNC,EAAM,EAqBV,OAnBAD,IADAC,GAAOP,EAAMW,KACE,GAGfN,IADAC,GAAOP,EAAMY,KACE,GACfL,GAAO,MAEPD,IADAC,GAAON,EAAMG,KACE,GAGfC,IADAC,GAAOP,EAAMa,KACE,GACfN,GAAO,MAEPD,IADAC,GAAON,EAAMI,KACE,GACfE,GAAO,MAEPD,IADAC,GAAOL,EAAME,KACE,GAEfE,GAAOP,EAAMc,EAAMb,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE1C11I,GAZP+1I,GAAO,QAYgB,IAlBvBC,GAAO,QAiBPH,GAAO,QACiC,IAHxCC,GAAO,OAG2C/nI,KAAKyjI,SACzD,EASA2B,EAAcN,IAAMM,EAAcxrC,SASlCwrC,EAAckD,OAAS,SAAgBC,GAErC,GADK9xF,EAAO8xF,KAAUA,EAAU9jG,EAAU8jG,IACtCA,EAAQjD,SAAU,MAAMp5I,MAAM,oBAWhC,IAKEs8I,EAAQ7C,EAAK9I,EAdjB,GAAIwG,EAIF,OAAKrjI,KAAKyjI,WAA2B,aAAfzjI,KAAKlO,OAAyC,IAAjBy2I,EAAQx2I,MAAgC,IAAlBw2I,EAAQz2I,KAM1EG,GADI+N,KAAKyjI,SAAWJ,EAAY,MAAIA,EAAY,OAAGrjI,KAAKjO,IAAKiO,KAAKlO,KAAMy2I,EAAQx2I,IAAKw2I,EAAQz2I,MAC/EuxI,EAAe,WAAKrjI,KAAKyjI,UAJrCzjI,KAOX,GAAIA,KAAKslI,SAAU,OAAOtlI,KAAKyjI,SAAWh4G,EAAQkZ,EAGlD,GAAK3kC,KAAKyjI,SA0BH,CAIL,GADK8E,EAAQ9E,WAAU8E,EAAUA,EAAQE,cACrCF,EAAQ7hF,GAAG1mD,MAAO,OAAOyrB,EAC7B,GAAI88G,EAAQ7hF,GAAG1mD,KAAK0oI,KAAK,IACvB,OAAOxD,EACTrI,EAAMpxG,CACR,KAlCoB,CAGlB,GAAIzrB,KAAKk2B,GAAGmuG,GACV,OAAIkE,EAAQryG,GAAG+uG,IAAQsD,EAAQryG,GAAGivG,GAAiBd,EAC1CkE,EAAQryG,GAAGmuG,GAAmBY,GAGrCuD,EADexoI,KAAK2oI,IAAI,GACNlD,IAAI8C,GAASK,IAAI,IAExB1yG,GAAGyO,GACL4jG,EAAQhD,aAAeN,EAAME,GAEpCQ,EAAM3lI,KAAKssE,IAAIi8D,EAAQzD,IAAI0D,IAC3B3L,EAAM2L,EAAO93H,IAAIi1H,EAAIF,IAAI8C,KAIxB,GAAIA,EAAQryG,GAAGmuG,GAAY,OAAOrkI,KAAKyjI,SAAWh4G,EAAQkZ,EAEjE,GAAI3kC,KAAKulI,aACP,OAAIgD,EAAQhD,aAAqBvlI,KAAKskI,MAAMmB,IAAI8C,EAAQjE,OACjDtkI,KAAKskI,MAAMmB,IAAI8C,GAASjE,MAC1B,GAAIiE,EAAQhD,aAAc,OAAOvlI,KAAKylI,IAAI8C,EAAQjE,OAAOA,MAEhEzH,EAAMl4F,CACR,CAiBA,IAFAghG,EAAM3lI,KAEC2lI,EAAI5gG,IAAIwjG,IAAU,CAGvBC,EAAS3qG,KAAKrwB,IAAI,EAAGqwB,KAAKgsB,MAAM87E,EAAIv2E,WAAam5E,EAAQn5E,aAUzD,IAPA,IAAIy5E,EAAOhrG,KAAKirG,KAAKjrG,KAAK9iB,IAAIytH,GAAU3qG,KAAKovB,KACzC87E,EAAQF,GAAQ,GAAK,EAAInE,EAAQ,EAAGmE,EAAO,IAG/CG,EAAYxkG,EAAWgkG,GACnBS,EAAYD,EAAUlE,IAAIyD,GAEvBU,EAAU1D,cAAgB0D,EAAUviF,GAAGi/E,IAG5CsD,GADAD,EAAYxkG,EADZgkG,GAAUO,EACqB/oI,KAAKyjI,WACdqB,IAAIyD,GAKxBS,EAAU1D,WAAU0D,EAAY/D,GACpCpI,EAAMA,EAAInsH,IAAIs4H,GACdrD,EAAMA,EAAIr5D,IAAI28D,EAChB,CAEA,OAAOpM,CACT,EASAuI,EAAcK,IAAML,EAAckD,OAQlClD,EAAc8D,OAAS,SAAgBX,GAGrC,OAFK9xF,EAAO8xF,KAAUA,EAAU9jG,EAAU8jG,IAEtClF,EAEKpxI,GADI+N,KAAKyjI,SAAWJ,EAAY,MAAIA,EAAY,OAAGrjI,KAAKjO,IAAKiO,KAAKlO,KAAMy2I,EAAQx2I,IAAKw2I,EAAQz2I,MAC/EuxI,EAAe,WAAKrjI,KAAKyjI,UAGzCzjI,KAAKssE,IAAItsE,KAAKylI,IAAI8C,GAASzD,IAAIyD,GACxC,EASAnD,EAAc+D,IAAM/D,EAAc8D,OAQlC9D,EAAcO,IAAMP,EAAc8D,OAOlC9D,EAAciC,IAAM,WAClB,OAAOp1I,GAAU+N,KAAKjO,KAAMiO,KAAKlO,KAAMkO,KAAKyjI,SAC9C,EAQA2B,EAAcgE,kBAAoB,WAChC,OAAOppI,KAAKlO,KAAO+rC,KAAK8lG,MAAM3jI,KAAKlO,MAAQ+rC,KAAK8lG,MAAM3jI,KAAKjO,KAAO,EACpE,EASAqzI,EAAciE,IAAMjE,EAAcgE,kBAOlChE,EAAckE,mBAAqB,WACjC,OAAOtpI,KAAKjO,IAAM2xI,EAAM1jI,KAAKjO,KAAO2xI,EAAM1jI,KAAKlO,MAAQ,EACzD,EASAszI,EAAcmE,IAAMnE,EAAckE,mBAQlClE,EAAcoE,IAAM,SAAatoI,GAE/B,OADKu1C,EAAOv1C,KAAQA,EAAQujC,EAAUvjC,IAC/BjP,EAAS+N,KAAKjO,IAAMmP,EAAMnP,IAAKiO,KAAKlO,KAAOoP,EAAMpP,KAAMkO,KAAKyjI,SACrE,EASA2B,EAAcqE,GAAK,SAAYvoI,GAE7B,OADKu1C,EAAOv1C,KAAQA,EAAQujC,EAAUvjC,IAC/BjP,EAAS+N,KAAKjO,IAAMmP,EAAMnP,IAAKiO,KAAKlO,KAAOoP,EAAMpP,KAAMkO,KAAKyjI,SACrE,EASA2B,EAAcsE,IAAM,SAAaxoI,GAE/B,OADKu1C,EAAOv1C,KAAQA,EAAQujC,EAAUvjC,IAC/BjP,EAAS+N,KAAKjO,IAAMmP,EAAMnP,IAAKiO,KAAKlO,KAAOoP,EAAMpP,KAAMkO,KAAKyjI,SACrE,EASA2B,EAAcuE,UAAY,SAAmBn7I,GAE3C,OADIioD,EAAOjoD,KAAUA,EAAUA,EAAQ62I,SACf,IAAnB72I,GAAW,IAAkBwR,KAAcxR,EAAU,GAAWyD,EAAS+N,KAAKjO,KAAOvD,EAASwR,KAAKlO,MAAQtD,EAAUwR,KAAKjO,MAAQ,GAAKvD,EAASwR,KAAKyjI,UAAsBxxI,EAAS,EAAG+N,KAAKjO,KAAOvD,EAAU,GAAIwR,KAAKyjI,SAC7N,EASA2B,EAAcwD,IAAMxD,EAAcuE,UAQlCvE,EAAcwE,WAAa,SAAoBp7I,GAE7C,OADIioD,EAAOjoD,KAAUA,EAAUA,EAAQ62I,SACf,IAAnB72I,GAAW,IAAkBwR,KAAcxR,EAAU,GAAWyD,EAAS+N,KAAKjO,MAAQvD,EAAUwR,KAAKlO,MAAQ,GAAKtD,EAASwR,KAAKlO,MAAQtD,EAASwR,KAAKyjI,UAAsBxxI,EAAS+N,KAAKlO,MAAQtD,EAAU,GAAIwR,KAAKlO,MAAQ,EAAI,GAAK,EAAGkO,KAAKyjI,SACrP,EASA2B,EAAcuD,IAAMvD,EAAcwE,WAQlCxE,EAAcyE,mBAAqB,SAA4Br7I,GAE7D,OADIioD,EAAOjoD,KAAUA,EAAUA,EAAQ62I,SACf,IAAnB72I,GAAW,IAAkBwR,KAC9BxR,EAAU,GAAWyD,EAAS+N,KAAKjO,MAAQvD,EAAUwR,KAAKlO,MAAQ,GAAKtD,EAASwR,KAAKlO,OAAStD,EAASwR,KAAKyjI,UACrFxxI,EAAX,KAAZzD,EAAgCwR,KAAKlO,KACzBkO,KAAKlO,OAAStD,EAAU,GADO,EAAGwR,KAAKyjI,SAEzD,EASA2B,EAAcsD,KAAOtD,EAAcyE,mBAQnCzE,EAAc0E,MAAQ1E,EAAcyE,mBAQpCzE,EAAc2E,WAAa,SAAoBv7I,GAC7C,IAAIP,EAEJ,OADIwoD,EAAOjoD,KAAUA,EAAUA,EAAQ62I,SACf,IAAnB72I,GAAW,IAAkBwR,KAClB,KAAZxR,EAAuByD,EAAS+N,KAAKlO,KAAMkO,KAAKjO,IAAKiO,KAAKyjI,UAE1Dj1I,EAAU,IACZP,EAAI,GAAKO,EACFyD,EAAS+N,KAAKjO,KAAOvD,EAAUwR,KAAKlO,OAAS7D,EAAG+R,KAAKlO,MAAQtD,EAAUwR,KAAKjO,MAAQ9D,EAAG+R,KAAKyjI,YAIrGx1I,EAAI,IADJO,GAAW,IAEJyD,EAAS+N,KAAKlO,MAAQtD,EAAUwR,KAAKjO,MAAQ9D,EAAG+R,KAAKjO,KAAOvD,EAAUwR,KAAKlO,OAAS7D,EAAG+R,KAAKyjI,UACrG,EASA2B,EAAc4E,KAAO5E,EAAc2E,WAQnC3E,EAAc6E,YAAc,SAAqBz7I,GAC/C,IAAIP,EAEJ,OADIwoD,EAAOjoD,KAAUA,EAAUA,EAAQ62I,SACf,IAAnB72I,GAAW,IAAkBwR,KAClB,KAAZxR,EAAuByD,EAAS+N,KAAKlO,KAAMkO,KAAKjO,IAAKiO,KAAKyjI,UAE1Dj1I,EAAU,IACZP,EAAI,GAAKO,EACFyD,EAAS+N,KAAKlO,MAAQ7D,EAAI+R,KAAKjO,MAAQvD,EAASwR,KAAKjO,KAAO9D,EAAI+R,KAAKlO,OAAStD,EAASwR,KAAKyjI,YAIrGx1I,EAAI,IADJO,GAAW,IAEJyD,EAAS+N,KAAKjO,KAAO9D,EAAI+R,KAAKlO,OAAStD,EAASwR,KAAKlO,MAAQ7D,EAAI+R,KAAKjO,MAAQvD,EAASwR,KAAKyjI,UACrG,EASA2B,EAAc8E,KAAO9E,EAAc6E,YAOnC7E,EAAc+E,SAAW,WACvB,OAAKnqI,KAAKyjI,SACHxxI,EAAS+N,KAAKjO,IAAKiO,KAAKlO,MAAM,GADVkO,IAE7B,EAQAolI,EAAcqD,WAAa,WACzB,OAAIzoI,KAAKyjI,SAAiBzjI,KACnB/N,EAAS+N,KAAKjO,IAAKiO,KAAKlO,MAAM,EACvC,EASAszI,EAAcgF,QAAU,SAAiBtD,GACvC,OAAOA,EAAK9mI,KAAKqqI,YAAcrqI,KAAK4mD,WACtC,EAQAw+E,EAAciF,UAAY,WACxB,IAAIC,EAAKtqI,KAAKlO,KACVy4I,EAAKvqI,KAAKjO,IACd,MAAO,CAAM,IAALw4I,EAAWA,IAAO,EAAI,IAAMA,IAAO,GAAK,IAAMA,IAAO,GAAS,IAALD,EAAWA,IAAO,EAAI,IAAMA,IAAO,GAAK,IAAMA,IAAO,GACxH,EAQAlF,EAAcx+E,UAAY,WACxB,IAAI0jF,EAAKtqI,KAAKlO,KACVy4I,EAAKvqI,KAAKjO,IACd,MAAO,CAACu4I,IAAO,GAAIA,IAAO,GAAK,IAAMA,IAAO,EAAI,IAAW,IAALA,EAAWC,IAAO,GAAIA,IAAO,GAAK,IAAMA,IAAO,EAAI,IAAW,IAALA,EACjH,EAUAz+I,EAAK0+I,UAAY,SAAmB1tI,EAAO2mI,EAAUqD,GACnD,OAAOA,EAAKh7I,EAAK2+I,YAAY3tI,EAAO2mI,GAAY33I,EAAK4+I,YAAY5tI,EAAO2mI,EAC1E,EASA33I,EAAK2+I,YAAc,SAAqB3tI,EAAO2mI,GAC7C,OAAO,IAAI33I,EAAKgR,EAAM,GAAKA,EAAM,IAAM,EAAIA,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAIA,EAAM,GAAKA,EAAM,IAAM,EAAIA,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAI2mI,EAC1I,EASA33I,EAAK4+I,YAAc,SAAqB5tI,EAAO2mI,GAC7C,OAAO,IAAI33I,EAAKgR,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAKA,EAAM,IAAM,EAAIA,EAAM,GAAIA,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAKA,EAAM,IAAM,EAAIA,EAAM,GAAI2mI,EAC1I,EAEA,IAAI/rH,EAAW5rB,EAEf,OADAL,EAAQqiF,QAAUp2D,EACX,YAAajsB,EAAUA,EAAQqiF,QAAUriF,CACjD,CAp5CU,CAo5CR,CAAC,QACkF,KAA3B,EAAF,WAAe,OAAOK,CAAO,UAA/B,OAA+B,eCr5ClF6+I,EAA2B,CAAC,ECEhC,IAAIC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBl6I,IAAjBm6I,EACH,OAAOA,EAAat/I,QAGrB,IAAID,EAASm/I,EAAyBG,GAAY,CAGjDr/I,QAAS,CAAC,GAOX,OAHAu/I,EAAoBF,GAAUt/I,EAAQA,EAAOC,QAASo/I,GAG/Cr/I,EAAOC,OACf,CCnB0Bo/I,CAAoB","sources":["webpack://solclientjs/./index.js","webpack://solclientjs/./modules/solclient-convert/api.js","webpack://solclientjs/./modules/solclient-convert/lib/base64.js","webpack://solclientjs/./modules/solclient-convert/lib/bits.js","webpack://solclientjs/./modules/solclient-convert/lib/convert.js","webpack://solclientjs/./modules/solclient-convert/lib/hex.js","webpack://solclientjs/./modules/solclient-convert/lib/long.js","webpack://solclientjs/./modules/solclient-core/api-internal.js","webpack://solclientjs/./modules/solclient-core/api.js","webpack://solclientjs/./modules/solclient-debug/api.js","webpack://solclientjs/./modules/solclient-debug/lib/debug.js","webpack://solclientjs/./modules/solclient-destination/api.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-from-network.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-type.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-util.js","webpack://solclientjs/./modules/solclient-destination/lib/destination.js","webpack://solclientjs/./modules/solclient-destination/lib/queue.js","webpack://solclientjs/./modules/solclient-destination/lib/subscription-info.js","webpack://solclientjs/./modules/solclient-destination/lib/topic.js","webpack://solclientjs/./modules/solclient-env/api.js","webpack://solclientjs/./modules/solclient-error/api.js","webpack://solclientjs/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solclientjs/./modules/solclient-error/lib/error-subcodes.js","webpack://solclientjs/./modules/solclient-error/lib/not-implemented-error.js","webpack://solclientjs/./modules/solclient-error/lib/operation-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-event-codes.js","webpack://solclientjs/./modules/solclient-error/lib/solace-error.js","webpack://solclientjs/./modules/solclient-eskit/api.js","webpack://solclientjs/./modules/solclient-eskit/lib/array-operations.js","webpack://solclientjs/./modules/solclient-eskit/lib/assert.js","webpack://solclientjs/./modules/solclient-eskit/lib/bidi-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/enum.js","webpack://solclientjs/./modules/solclient-eskit/lib/iterator.js","webpack://solclientjs/./modules/solclient-eskit/lib/lazy.js","webpack://solclientjs/./modules/solclient-eskit/lib/make-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/mixin.js","webpack://solclientjs/./modules/solclient-eskit/lib/resolver.js","webpack://solclientjs/./modules/solclient-eskit/lib/set-operations.js","webpack://solclientjs/./modules/solclient-events/api.js","webpack://solclientjs/./modules/solclient-events/lib/event-emitter.js","webpack://solclientjs/./modules/solclient-events/lib/timer.js","webpack://solclientjs/./modules/solclient-factory/api.js","webpack://solclientjs/./modules/solclient-factory/lib/profile-binding.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory.js","webpack://solclientjs/./modules/solclient-flow/api.js","webpack://solclientjs/./modules/solclient-flow/lib/flow-operation.js","webpack://solclientjs/./modules/solclient-flow/lib/flow.js","webpack://solclientjs/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solclientjs/./modules/solclient-fsm/api.js","webpack://solclientjs/./modules/solclient-fsm/lib/entry-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/event.js","webpack://solclientjs/./modules/solclient-fsm/lib/exit-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/object.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-context.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-machine.js","webpack://solclientjs/./modules/solclient-fsm/lib/state.js","webpack://solclientjs/./modules/solclient-log/api.js","webpack://solclientjs/./modules/solclient-log/lib/console-log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/global-binding.js","webpack://solclientjs/./modules/solclient-log/lib/log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/log-levels.js","webpack://solclientjs/./modules/solclient-message-consumer/api.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solclientjs/./modules/solclient-message-publisher/api.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solclientjs/./modules/solclient-message-tracing/api.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/baggage.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-trace-context-setter.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-trace-context.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-tracing-support.js","webpack://solclientjs/./modules/solclient-message/api.js","webpack://solclientjs/./modules/solclient-message/lib/message-cache-status.js","webpack://solclientjs/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-flags.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-util.js","webpack://solclientjs/./modules/solclient-message/lib/message-outcomes.js","webpack://solclientjs/./modules/solclient-message/lib/message-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solclientjs/./modules/solclient-message/lib/message.js","webpack://solclientjs/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solclientjs/./modules/solclient-queue/api.js","webpack://solclientjs/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-access-types.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-permissions.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-types.js","webpack://solclientjs/./modules/solclient-replaystart/api.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solclientjs/./modules/solclient-sdt/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solclientjs/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solclientjs/./modules/solclient-session/api.js","webpack://solclientjs/./modules/solclient-session/lib/authentication-schemes.js","webpack://solclientjs/./modules/solclient-session/lib/capability-types.js","webpack://solclientjs/./modules/solclient-session/lib/correlated-request.js","webpack://solclientjs/./modules/solclient-session/lib/default-capabilities.js","webpack://solclientjs/./modules/solclient-session/lib/global-context.js","webpack://solclientjs/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solclientjs/./modules/solclient-session/lib/host-list.js","webpack://solclientjs/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solclientjs/./modules/solclient-session/lib/p2p-util.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-codes.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm.js","webpack://solclientjs/./modules/solclient-session/lib/session-operations.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties-validator.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/session-request-types.js","webpack://solclientjs/./modules/solclient-session/lib/session-state-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-states.js","webpack://solclientjs/./modules/solclient-session/lib/session.js","webpack://solclientjs/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solclientjs/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solclientjs/./modules/solclient-smf/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/decode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/encode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/smp.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/transport.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/api.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-protocols.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solclientjs/./modules/solclient-solcache-session/api.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solclientjs/./modules/solclient-stats/api.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-bymode.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-types.js","webpack://solclientjs/./modules/solclient-stats/lib/stats.js","webpack://solclientjs/./modules/solclient-transport/api.js","webpack://solclientjs/./modules/solclient-transport/lib/base-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-queue.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/node-tls-opts-mixin.js","webpack://solclientjs/./modules/solclient-transport/lib/smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/api.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/shuntable-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-compression.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-plaintext.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-base.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-error.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocols.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-states.js","webpack://solclientjs/./modules/solclient-transport/lib/tsh-state.js","webpack://solclientjs/./modules/solclient-transport/lib/web/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-base64.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solclientjs/./modules/solclient-util/api.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties-validators.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties.js","webpack://solclientjs/./modules/solclient-util/lib/array-utils.js","webpack://solclientjs/./modules/solclient-util/lib/clone.js","webpack://solclientjs/./modules/solclient-util/lib/process.js","webpack://solclientjs/./modules/solclient-util/lib/string-buffer.js","webpack://solclientjs/./modules/solclient-util/lib/string-utils.js","webpack://solclientjs/./modules/solclient-util/lib/timing-bucket.js","webpack://solclientjs/./modules/solclient-util/lib/url.js","webpack://solclientjs/./modules/solclient-util/lib/uuid.js","webpack://solclientjs/./modules/solclient-util/lib/version.js","webpack://solclientjs/./modules/solclient-validate/api.js","webpack://solclientjs/./modules/solclient-validate/lib/base-checks.js","webpack://solclientjs/./modules/solclient-validate/lib/check.js","webpack://solclientjs/./modules/solclient-validate/lib/parameter.js","webpack://solclientjs/./node_modules/ws/index.js","webpack://solclientjs/./node_modules/ws/lib/buffer-util.js","webpack://solclientjs/./node_modules/ws/lib/constants.js","webpack://solclientjs/./node_modules/ws/lib/event-target.js","webpack://solclientjs/./node_modules/ws/lib/extension.js","webpack://solclientjs/./node_modules/ws/lib/limiter.js","webpack://solclientjs/./node_modules/ws/lib/permessage-deflate.js","webpack://solclientjs/./node_modules/ws/lib/receiver.js","webpack://solclientjs/./node_modules/ws/lib/sender.js","webpack://solclientjs/./node_modules/ws/lib/stream.js","webpack://solclientjs/./node_modules/ws/lib/subprotocol.js","webpack://solclientjs/./node_modules/ws/lib/validation.js","webpack://solclientjs/./node_modules/ws/lib/websocket-server.js","webpack://solclientjs/./node_modules/ws/lib/websocket.js","webpack://solclientjs/external commonjs2 \"bufferutil\"","webpack://solclientjs/external commonjs2 \"utf-8-validate\"","webpack://solclientjs/external node-commonjs \"buffer\"","webpack://solclientjs/external node-commonjs \"constants\"","webpack://solclientjs/external node-commonjs \"crypto\"","webpack://solclientjs/external node-commonjs \"dns\"","webpack://solclientjs/external node-commonjs \"events\"","webpack://solclientjs/external node-commonjs \"fs\"","webpack://solclientjs/external node-commonjs \"http\"","webpack://solclientjs/external node-commonjs \"https\"","webpack://solclientjs/external node-commonjs \"net\"","webpack://solclientjs/external node-commonjs \"os\"","webpack://solclientjs/external node-commonjs \"stream\"","webpack://solclientjs/external node-commonjs \"tls\"","webpack://solclientjs/external node-commonjs \"url\"","webpack://solclientjs/external node-commonjs \"util\"","webpack://solclientjs/external node-commonjs \"zlib\"","webpack://solclientjs/./node_modules/long/umd/index.js","webpack://solclientjs/webpack/bootstrap","webpack://solclientjs/webpack/startup"],"sourcesContent":["// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\n\nfunction uint8ArrayToString(data, format = undefined) {\n  const dataLength = data.byteLength;\n  const uint8DataArray = new Uint8Array(BufferImpl.from(data));\n  let result = '';\n  for (let i = 0; i < dataLength; i++) {\n    if(format && format.toLowerCase() === 'hex') {\n      result += (uint8DataArray[i]).toString(16).padStart(2, '0');\n    } else {\n      result += String.fromCharCode(uint8DataArray[i] & 0xff);\n    }\n  }\n  return result;\n}\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction hexStringToUint8Array(data) {\n  // if null data, return empty Uint8Array\n  if(data == null) {\n    return new Uint8Array();\n  }\n  return Uint8Array.from(BufferImpl.from(data, 'hex'));\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  \n  uint8ArrayToString,\n  stringToUint8Array,\n\n  hexStringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst MessageTracing = require('solclient-message-tracing');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  MessageTracing,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  Baggage,\n  TraceContext,\n  TraceContextSetter,\n} = require('solclient-message-tracing');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  Baggage,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TraceContext,\n  TraceContextSetter,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'invalid queue or topic endpoint durability', SC.INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'sync replication ineligible', SC.SYNC_REPLICATION_INELIGIBLE\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to a non-durable Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated since 10.3.1 - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   * Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                         169,\n  /**\n   * Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:                     170,\n  /**\n   * Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:                    171,\n  /**\n   * Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n  /**\n   * The message was rejected because the appliance has been configured\n   * to reject messages when sync replication mode is ineligible.\n   * - 503 Sync Replication Ineligible (Reject Messages when Synchronous Replication Mode is Ineligible)\n   * \n   * * The transaction was started as a synchronous replicated transaction,\n   * but replication became ineligible during the transaction.\n   * - 503 Sync Replication Ineligible (Replication Ineligible during Synchronous Replicated Transaction)\n   */\n  SYNC_REPLICATION_INELIGIBLE:                                  173,\n  /**\n   * An attempt was made to bind to a durable TE or Queue \n   * with a flow property of ‘non-durable’.\n   *\n   * Causes:\n   *  * 400 Invalid Queue or Topic Endpoint Durability\n   */\n  INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY:                   174,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { MessageOutcome } = require('solclient-message');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state, settlementOutcome) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n      this.settlementOutcome = settlementOutcome || MessageOutcome.ACCEPTED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state, settlementOutcome = undefined) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n    this.settlementOutcome = (settlementOutcome !== undefined) ? settlementOutcome : null; // outcome not yet set at point of insertion\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n    this.settlementOutcome = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @param {?MessageOutcome} settlementOutcome where available, update the settlement outcome for the ID\n   * @private\n   */\n  updateAckState(id, state, settlementOutcome = undefined) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n    // where available, update the settlement outcome too\n    if(settlementOutcome != undefined) {\n      existing.settlementOutcome = settlementOutcome;\n    } else if(state === ApplicationAckState.ACKED_NOT_SENT) {\n      // set default settlement outcome to ACCEPTED for ACKed messages if no outcome available\n      existing.settlementOutcome = MessageOutcome.ACCEPTED;\n    }\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { MessageOutcome, RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\n// assumption is that this first message (messageId = 0) settlement outcome is ACCEPTED (ACKed)\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT, MessageOutcome.ACCEPTED);\n\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n    this._hasAutoAckSupport = autoAck;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n\n    function verifyNackSettlementOutcomesSupport(requiredSettlementOutcomes) {\n      let error = null;\n      // check for whether the broker session supports the NACK capability\n      const settlementOutcomes = requiredSettlementOutcomes;\n      if (settlementOutcomes && settlementOutcomes.length > 0) {\n        // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n        const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n        if(isNackRequired && !fsm._sessionInterface.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n          const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n            settlementOutcomes.map(v => MessageOutcome.nameOf(v)).join(', ')\n          } ]`;\n          // log the operation error as a Warning\n          LOG_WARN(outcomeNotSupportedError);\n          // then create the actual OperationError object here\n          error = new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION);\n        }      \n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n      else if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n\n    /**\n     * Check Capabilities on Re-Bind\n     * \n     * @param {*} curState - current state\n     * @param {*} externalTransition - is an external transition?\n     * @returns {State} retrurns the new state for the state machine\n     * @private\n     */\n    function checkCapabilitiesChoicePointOnRebind(curState, externalTransition = false) {\n      let error = null;\n      if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to re-bind\n      if (externalTransition) {\n        return curState.externalTransitionTo(fsm.Reconnecting.RBindSent);\n      }\n      return curState.transitionTo(fsm.Reconnecting.RBindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          (properties.requiredSettlementOutcomes && properties.requiredSettlementOutcomes.length > 0));\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          properties.requiredSettlementOutcomes]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return checkCapabilitiesChoicePointOnRebind(this, false);\n          // return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return checkCapabilitiesChoicePointOnRebind(this, false);\n        // return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return checkCapabilitiesChoicePointOnRebind(this, true);\n          // return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return checkCapabilitiesChoicePointOnRebind(this, false);\n      // return this.transitionTo(fsm.Reconnecting.RBindSent);\n    });\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          const dupAckRanges = new Map();\n          dupAckRanges.set(MessageOutcome.ACCEPTED, [[messageID, messageID]]);\n          this._sendAck(dupAckRanges); // send ack for duplicates as ACCEPTED outcome (broker would use previous settlement outcome for message)\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId, isAutoAcked = false) {\n    // internally call the applicationSettle(messageId, MessageOutcome.ACCEPTED); \n    // since the implementations are the same\n    this.applicationSettle(messageId, MessageOutcome.ACCEPTED, isAutoAcked);\n  }\n\n  applicationSettle(messageId, messageOutcome = MessageOutcome.ACCEPTED, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n\n    // increment the correct stat for the outcome\n    switch(messageOutcome) {\n      case MessageOutcome.FAILED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.FAILED');\n        // count persistent and non-persistent settled failed msgs\n        this._consumer.incStat(StatType.RX_SETTLE_FAILED);\n        break;\n      // case MessageOutcome.RELEASED:\n      //   // no current support for RELEASED settlement Outcome\n      //   break;\n      case MessageOutcome.REJECTED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.REJECTED');\n        // count persistent and non-persistent settled rejected msgs\n        this._consumer.incStat(StatType.RX_SETTLE_REJECTED);\n        break;\n\n      case MessageOutcome.ACCEPTED:\n         // count persistent and non-persistent settled accepted msgs\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.ACCEPTED');\n        // count for manual calls on Message.acknowledge(); or Message.settle(outcome); methods\n        // so that we don't count for auto-Acks\n        if(!isAutoAcked) {\n          this._consumer.incStat(StatType.RX_SETTLE_ACCEPTED); // count persistent and non-persistent settled accepted msgs\n        }\n        // increment the Acked stat for calls to accept() and auto-acks\n        this._consumer.incStat(StatType.RX_ACKED); // count it as normal acknowledgement\n        break;\n    }\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      const oldAckRanges = new Map();\n      oldAckRanges.set(messageOutcome, [[messageId, messageId]]);\n      this._sendAck(oldAckRanges); // send settlement outcome for message\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT, messageOutcome);\n    // if the message outcome is not ACCEPTED, then flush the buffer immediately\n    if(messageOutcome !== MessageOutcome.ACCEPTED) {\n      this._sendAcks(true); // send the accumulated Ack(s) and Nacks immediately\n    } else {\n      this._setTransportAckTimer();\n    }\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Map.<Array.<ackpair>>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    // they will hold an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    const currentRangeLength = currentRange.length;\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      // check for the type of settlement outcome and push if same as aggregation group\n      if(\n        currentRangeLength === 0 ||\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome === applicationAck.settlementOutcome)\n      ) {\n        currentRange.push(applicationAck);\n        return; // Wait for end of range or flush\n      }\n      // if settlement outcomes were flushed and applicationAck still remaining, start another aggregation group\n      else if(\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome !== applicationAck.settlementOutcome)\n      ) {\n        const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n        ackRanges[rangeOutcome].push(currentRange); // flush the range since we detect a change in outcomes\n\n        acksPendingState.currentRange = []; // Clear the accumulators for this range.\n        acksPendingState.currentRange.push(applicationAck); // push the detected change\n        return; // Wait for end of range or flush\n      }\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range for each of the settlement outcomes.\n    if (currentRangeLength) {\n      const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n      ackRanges[rangeOutcome].push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n\n    // aggregate the total length of the ack/nack ranges\n    let totalRangeLen  = 0;\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      totalRangeLen += ackRanges[allMessageOutcomes[i]].length;\n    }\n\n    if (applicationAck === null || (totalRangeLen === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES)) {\n      // Reduce each range for each of the settlement outcomes to a first and last ID.\n      const bareRanges = new Map(); // ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n      let hasAnyBareRanges = false;\n\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        // check for value and only put real values into map\n        if(ackRanges[allMessageOutcomes[i]].length > 0) {\n          bareRanges.set(allMessageOutcomes[i], ackRanges[allMessageOutcomes[i]].map(\n            range => [range[0].id, range[range.length - 1].id]\n          ));\n          // we have written at least one outcome ack/nack range into the map\n          hasAnyBareRanges = true;\n        }\n      }\n\n      if (hasAnyBareRanges || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n\n        this._sendAck(bareRanges); // now contains a Map of Arrays to pass settlement outcomes to Broker\n\n        // expectation is only ONE NACK before we flush the (N)acks in the RingBuffer to the broker\n        const failedBareRanges = bareRanges.get(MessageOutcome.FAILED);\n        const rejectedBareRanges = bareRanges.get(MessageOutcome.REJECTED);\n\n        // Warning: this log statement reduces debug performance by about 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks(ACCEPTED): ${bareRanges.has(MessageOutcome.ACCEPTED)\n            ? bareRanges.get(MessageOutcome.ACCEPTED).map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}\\n`,\n          `Application Nacks(FAILED): ${bareRanges.has(MessageOutcome.FAILED)\n            ? `[${failedBareRanges[0][0]}..${failedBareRanges[0][1]}]`\n            : '[]'}\\n`,\n          `Application Nacks(REJECTED): ${bareRanges.has(MessageOutcome.REJECTED)\n            ? `[${rejectedBareRanges[0][0]}..${rejectedBareRanges[0][1]}]`\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        ackRanges[allMessageOutcomes[i]].forEach((ackRange) => {\n          ackRange.forEach((ack) => {\n            if (ack.state !== ApplicationAckState.ACKED_SENT) {\n              try {\n                this._applicationAcks.updateAckState(ack.id,\n                                                     ApplicationAckState.ACKED_SENT);\n              } catch (e) {\n                const { LOG_ERROR } = this.logger;\n                LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n              }\n            }\n          });\n        });\n      }\n\n      // Clear the main accumulators since it has hit the wire.\n      acksPendingState.ackRanges = [];\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n      }\n    }\n    // Clear the accumulators for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [], // holds an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n      currentRange:      [], // holds an Array for each supported settlement outcomes per aggregation (i.e. indexes -> 0,1,2,3)\n    };\n\n    // initialize the ackRanges with Array of Arrays\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n    }\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      assert(acksPendingState.ackRanges[allMessageOutcomes[i]].length === 0);\n    }\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n  get hasAutoAckSupport() {\n    return this._hasAutoAckSupport;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  requiredSettlementOutcomes:              [], // MessageOutcome.ACCEPTED is not required to be set and always supported\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The required settlement outcomes for the Message Consumer.\n   *\n   * A session is created with SUPPORTED_MESSAGE_ACK_CLIENT by setting\n   * the requiredSettlementOutcomes property to support negative acknowledgment outcomes.\n   *\n   * The {@link solace.MessageOutcome.ACCEPTED} outcome is not required to be set and is always\n   * supported as a settlement outcome.\n   *\n   * When the requiredSettlementOutcomes include either {@link solace.MessageOutcome.FAILED}\n   * or {@link solace.MessageOutcome.REJECTED}, a message can be settled with any of these outcomes.\n   *\n   * The {@link solace.Message#acknowledge} method internally calls the {@link solace.Message#settle}\n   * with the {@link solace.MessageOutcome.ACCEPTED} passed as the settlement outcome for that message.\n   *\n   * When received messages are Application Acknowledged/Settled with\n   * a {@link solace.MessageOutcome.ACCEPTED} outcome, they are removed from the Guaranteed\n   * Message storage on the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {Array.<solace.MessageOutcome>}\n   * @default []\n   */\n  get requiredSettlementOutcomes() {\n    return Check.something(this._requiredSettlementOutcomes)\n      && Check.array(this._requiredSettlementOutcomes)\n      ? this._requiredSettlementOutcomes\n      : DEFAULTS.requiredSettlementOutcomes;\n  }\n  set requiredSettlementOutcomes(value) {\n    this._requiredSettlementOutcomes = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageOutcome } = require('solclient-message');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {any} isAutoAcked whether this is an auto-acked message\n   * @internal\n   */\n  applicationAck(messageId, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId, isAutoAcked);\n  }\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {solace.MessageOutcome} settlementOutcome The message settlement outcome\n   * @internal\n   */\n  applicationSettle(messageId, settlementOutcome) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application settlement for ${\n      messageId\n    } with outcome: solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)}`);\n    this._fsm.applicationSettle(messageId, settlementOutcome);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message._autoAcknowledge(); // No, so auto ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const { Baggage } = require('./lib/baggage');\nconst { TraceContext } = require('./lib/message-trace-context');\nconst { TraceContextSetter } = require('./lib/message-trace-context-setter');\nconst { MessageTracingSupport } = require('./lib/message-tracing-support');\n\nmodule.exports.Baggage = Baggage;\nmodule.exports.TraceContext = TraceContext;\nmodule.exports.TraceContextSetter = TraceContextSetter;\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const { Parameter: { isStringOrNothing } } = require('solclient-validate');\n\n/**\n * @classdesc\n * <b>This class abstracts baggage metadata used for distributed\n * message tracing with Solace messaging APIs types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class Baggage {\n \n    /**\n     * Get the value of the baggage associated with the message.\n     * This method is for internal use only.\n     *\n     * @returns {?String} value of baggage associated with the message\n     * @internal\n     */\n    getBaggage() {\n        return this._baggage || null;\n    }\n \n    /**\n     * Sets the value of the baggage associated with this message\n     * This method is for internal use only.\n     *\n     * @param {?String} value The valid value of baggage associated with this  message\n     * @see {@link https://www.w3.org/TR/2022/WD-baggage-20220928|w3c baggage format specification}  \n     * @internal\n     */\n    setBaggage(value) {\n        this._setBaggage(isStringOrNothing('baggage', value));\n    }\n    _setBaggage(value) {\n        this._baggage = value;\n    }\n \n}\n\nmodule.exports.Baggage = Baggage;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n    isNumber,\n    isBoolean,\n    isString,\n    isStringOrNothing,\n} = Parameter;\n\nconst { uint8ArrayToString } = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts settable metadata used for \n * distributed message tracing with Solace messaging APIs \n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class TraceContextSetter {\n\n    /**\n     * Abstract constructor for metadata used \n     * for distributed message tracing.\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor() {\n        this._traceId = null;\n        this._spanId = null;\n        this._isSampled = false;\n        this._traceState = null;\n        this._version = 0x01; // version=0001 (4 bits, version=1);\n    }\n\n    /**\n     * Clone this TraceContextSetter object.\n     * \n     * @returns {TraceContextSetter} the cloned TraceContextSetter instance\n     */\n    clone() {\n        const _clonedContextSetter = new TraceContextSetter();\n        _clonedContextSetter._setSpanId(this._spanId);\n        _clonedContextSetter._setTraceId(this._traceId);\n        _clonedContextSetter._setSampled(this._isSampled);\n        _clonedContextSetter._setTraceState(this._traceState);\n        _clonedContextSetter._setVersion(this._version);\n        return _clonedContextSetter;\n    }\n\n    /**\n     * The length of the traceId bytes in the binary message\n    */\n    static get TRACE_ID_BYTES_LENGTH() {\n        return 16;\n    }\n\n    /**\n     * The length of the spanId bytes in the binary message\n    */\n    static get SPAN_ID_BYTES_LENGTH() {\n        return 8;\n    }\n\n    /**\n     * The version which for now is 1. -> 0001\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);;\n    }\n    /**\n     * Sets the version\n     * \n     * @param {Number} value The version encoded as Hex value\n     */\n    setVersion(value) {\n        this._setVersion(isNumber('version', value));\n    }\n    _setVersion(value) {\n        this._version = value;\n    }\n\n    /**\n     * @private\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Sets the value of the trace identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 16-length Hex string\n     */\n    setTraceId(value) {\n        this._setTraceId(isString('traceId', value));\n    }\n    _setTraceId(value) {\n        this._traceId = value;\n    }\n \n    /**\n     * @private\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Sets the value of the span identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 8-length Hex string\n     */\n    setSpanId(value) {\n        this._setSpanId(isString('spanId', value));\n    }\n    _setSpanId(value) {\n        this._spanId = value;\n    }\n \n    /**\n     * @private\n    */\n    get isSampled() {\n        return this._isSampled || false;\n    }\n    /**\n     * Turns on or off sampling for the associated message.\n     * \n     * @param {Boolean} value if true sampling is on, off otherwise\n     */\n    setSampled(value) {\n        this._setSampled(isBoolean('isSampled', value));\n    }\n    _setSampled(value) {\n        this._isSampled = value;\n    }\n \n    /**\n     * @private\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Sets the value of the trace state associated with the message.\n     * \n     * @param {?String} value The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    setTraceState(value) {\n        this._setTraceState(isStringOrNothing('traceState', value));\n    }\n    _setTraceState(value) {\n        this._traceState = value;\n    }\n\n    /**\n     * Gets a new instance of the Message Trace Context Setter \n     * from the values in the SMF header associated with the message.\n     * \n     * @param {Buffer | Uint8Array | String | null} traceContextValue The value of trace context associated with the message\n     * @returns {solace.TraceContextSetter | null} Context setter object\n     */\n    static fromTraceContext(traceContextValue) {\n        // implementation here\n        if (traceContextValue == null) {\n            return null;\n        }\n\n        let traceContextBuffer = null;\n        if (BufferImpl.isBuffer(traceContextValue)) {\n            traceContextBuffer = traceContextValue; // do nothing since it is already a buffer\n        } else if (typeof traceContextValue === 'string') {\n            traceContextBuffer = BufferImpl.from(traceContextValue, 'latin1');\n        }\n\n        // the trace context value is at least 32 bytes (without trace state)\n        if (!traceContextBuffer || traceContextBuffer.length < 32) {\n            return null;\n        }\n\n        try {\n            const traceContextBytes = (new Uint8Array(traceContextBuffer)).buffer;\n            let bytesRead = 0; // to track the byte read offsets\n\n            const traceContextSetter = new TraceContextSetter();\n\n            const firstByte = traceContextBytes.slice(bytesRead, bytesRead + (1));\n            const byte1DataView = new DataView(firstByte, 0, 1);\n            let byte1 = byte1DataView.getUint8(bytesRead);// get the first byte\n\n            const version = byte1 >> 4; // get the version from the four MSB\n            traceContextSetter.setVersion(version); // set the version\n\n            const isSampled = ((byte1 & 0x0F) == 0x04);\n            traceContextSetter.setSampled(isSampled); // set the sampled status\n            bytesRead++;\n\n            const traceId16Bytes = traceContextBytes.slice(bytesRead, bytesRead + (16));\n            const traceId = uint8ArrayToString(traceId16Bytes, 'hex'); // set the traceId\n            traceContextSetter.setTraceId(traceId);\n            bytesRead += TraceContextSetter.TRACE_ID_BYTES_LENGTH;\n\n            const spanId8Bytes = traceContextBytes.slice(bytesRead, bytesRead + (8));\n            const spanId = uint8ArrayToString(spanId8Bytes, 'hex'); // set the spanId\n            traceContextSetter.setSpanId(spanId);\n            bytesRead += TraceContextSetter.SPAN_ID_BYTES_LENGTH;\n\n            bytesRead ++; // Skip InjectionStandard byte\n            bytesRead += 4; // Skip the 4 RFU bytes\n\n            const traceStateLengthBytes = traceContextBytes.slice(bytesRead, bytesRead + (2));\n            const traceStateLengthDataView = new DataView(traceStateLengthBytes, 0, traceStateLengthBytes.byteLength);\n            const traceStateLength = traceStateLengthDataView.getUint16(0, false);// get the trace length\n            bytesRead += 2; // move pointer past length bytes\n\n            // if there is a trace state value, read it\n            if (traceStateLength > 0) {\n                const traceStateBytes = traceContextBytes.slice(bytesRead, bytesRead + (traceStateLength));\n                const traceState = uint8ArrayToString(traceStateBytes); // set the trace state\n                traceContextSetter.setTraceState(traceState);\n            }\n            return traceContextSetter;\n        } catch (ex) {\n            return null;\n        }\n    }\n}\n\nmodule.exports.TraceContextSetter = TraceContextSetter;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\nconst {\n    isBoolean,\n    isStringOrNothing,\n} = Parameter;\n\nconst {\n    stringToUint8Array,\n    hexStringToUint8Array,\n} = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts readonly view on a metadata used for \n * distributed message tracing with Solace messaging APIs\n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\nclass TraceContext {\n\n    /**\n     * Abstract constructor for readonly view on metadata used \n     * for distributed message tracing.\n     * \n     * @param {TraceContextSetter} traceContextSetter {TraceContextSetter}\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor(traceContextSetter) {\n        this._traceId = isStringOrNothing('traceId', traceContextSetter.traceId);\n        this._spanId = isStringOrNothing('spanId', traceContextSetter.spanId);\n        this._isSampled = isBoolean('isSampled', traceContextSetter.isSampled);\n        this._traceState = traceContextSetter.traceState;\n        this._version = traceContextSetter.version;\n    }\n\n    /**\n     * Clone the a TraceContext object used \n     * for distributed message tracing.\n     * \n     * @param {TraceContext} toClone {TraceContext}\n     * @returns {TraceContext} the newly cloned TraceContext instance\n     */\n    static clone(toClone) {\n        const newContextSetter = new TraceContextSetter();\n        newContextSetter._setSpanId(toClone.getSpanId());\n        newContextSetter._setTraceId(toClone.getTraceId());\n        newContextSetter._setSampled(toClone.getIsSampled());\n        newContextSetter._setTraceState(toClone.getTraceState());\n        newContextSetter._setVersion(toClone.getVersion());\n        return new TraceContext(newContextSetter);\n    }\n\n    /**\n     * The version which for now is 1.\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);\n    }\n    /**\n     * Gets the version associated with the message trace.\n     * \n     * @returns {Number} The version encoded as Hex value\n     */\n    getVersion() {\n        return this.version;\n    }\n\n    /**\n     * The maximum allowed string size of trace state to propagate.\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n    */\n    get MAX_TRACE_STATE_LENGTH() {\n        return 512;\n    }\n \n    /**\n     * The tranceId property as a 16-length string\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Gets the value of the trace identifier associated with the message.\n     * \n     * @returns {String} value of trace identifier associated with the message as\n     * 16-length string.\n     */\n    getTraceId() {\n        return this._traceId;\n    }\n \n    /**\n     * The spanId property a 8-length string\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Gets the value of the span identifier associated with the message.\n     * \n     * @returns {String} value of span identifier associated with the message as\n     * 8-length string.\n     */\n    getSpanId() {\n        return this._spanId;\n    }\n\n    /**\n     * The isSampled boolean property\n    */\n    get isSampled() {\n        return this._isSampled;\n    }\n    /**\n     * Returns true if the sampling for the associated message is on,\n     * otherwise false.\n     * \n     * @returns {Boolean} indicates whether the sampling is on or off\n     */\n    getIsSampled() {\n        return this._isSampled || false;\n    }\n\n    /**\n     * The traceState property\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTraceState() {\n        return this._traceState || null;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTruncatedTraceState() {\n        return this._standardTraceStateTruncation(this.MAX_TRACE_STATE_LENGTH);\n    }\n\n\n    /**\n     * It returns the encoded bytes that is \n     * passed to the SMF header to be encoded in \n     * SMF for the message.\n     * \n     * @returns {?Uint8Array} The value of encoded trace span context\n     */\n    getEncodedTraceContext() {\n        // format the string payload \n        // and return the correct format as a byte array or null\n        if (this.traceId == null || this.spanId == null) {\n            return null;\n        }\n\n        const traceStateLength = this.traceState == null ? 0 : this.traceState.length;\n\n        // the fixed part of the encoded data is at least 32 bytes\n        const contentBuffer = new ArrayBuffer(32 + traceStateLength);\n        let offsetPos = 0; // start from the beginning of the buffer\n        const contentBufferDataView = new DataView(contentBuffer);\n\n        let byte1 = 0; // headerByte: version 4 bits, sampled 2 bits and RFU=0 2 bits\n        // set the version to the four MSB\n        byte1 |= (this.version << 4); // version=0001 (4 bits, version=1)\n        byte1 |= this.isSampled ? 0x04 : 0x00; //sampled=0100 (2 bits, sampled=1 and 2 bits RFU=0)\n\n        // write the 1 byte header\n        contentBufferDataView.setUint8(offsetPos, byte1, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write the first 16 bytes traceId\n        const traceId16byte = hexStringToUint8Array(this.traceId); // get the 8 byte array\n        for(let i = 0; i < 16; i ++) { // write the first 16 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, traceId16byte[i], false); // write the bytes\n        }\n        offsetPos += 16; // move pointer to next free position (plus 16 bytes)\n\n        // write the first 8 bytes spanId\n        const spanId8byte = hexStringToUint8Array(this.spanId) // get the 8 byte array\n        for(let i = 0; i < 8; i ++) { // write the first 8 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, spanId8byte[i], false); // write the bytes\n        }\n        offsetPos += 8; // move pointer to next free position (plus 8 bytes)\n\n        // write 1 byte InjectionStandard=1 (W3C)\n        contentBufferDataView.setUint8(offsetPos, 0x01, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write 4 bytes RFU=0\n        // use BigEndian; litteEndian = false\n        contentBufferDataView.setUint16(offsetPos, 0, false); // write first two RFU bytes of zeros\n        contentBufferDataView.setUint16(offsetPos + 2, 0, false); // write last two RFU bytes of zeros\n        offsetPos += 4; // move pointer to next free position\n\n\t    if (this.traceState == null) {\n            // write 2 bytes TraceState length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, 0, false); // write two bytes of zeros\n            offsetPos += 2; // move pointer to next free position\n\t    } else {\n\t      // If required, apply truncation logic on traceState\n\t      const truncatedTraceState = this.getTruncatedTraceState();\n\t      if (truncatedTraceState != null) {\n            // write 2 bytes TraceState length\n            const traceStateLength = truncatedTraceState.length;\n            // convert to two bytes\n            const traceStateLengthBytes = new Uint16Array([traceStateLength]); // get 2 bytes of length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, traceStateLengthBytes, false);\n            offsetPos += 2; // move pointer to next free position\n\n            // set the remaining trace state bytes\n            const traceStateBytes = stringToUint8Array(truncatedTraceState);\n            for(let i = 0; i < traceStateBytes.length; i ++) {\n                // use BigEndian; litteEndian = false\n                contentBufferDataView.setUint8(offsetPos + i, traceStateBytes[i], false); // write the bytes\n            }\n            offsetPos += traceStateBytes.length;\n\t      }\n\t    }\n\n        // get the 8-byte array\n\t    return new Uint8Array(contentBuffer);\n    }\n\n    /**\n     * Truncate long trace states properly\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n     * @private\n     * @param {Number} maxTraceStateLength the maximum length for the trace state\n     * @returns {?String} The truncated trace state\n     */\n    _standardTraceStateTruncation(maxTraceStateLength) {\n        // cover corner cases\n\t    if (!this._traceState || this._traceState == null) {\n\t      return null;\n\t    } else if (this._traceState.length < maxTraceStateLength) {\n\t      return this._traceState; // no need to truncate\n\t    }\n\t\n        const ignoredMembers = new Array();\n\t    const traceStateBuilderArray = new Array();\n        let traceStateBuilderArrayLength = 0;\n\t    const listMembers = this._traceState.split(',');\n\n\t    for (let i = 0; i < listMembers.length; i++) {\n            let listMember = listMembers[i]; // current iteration object\n            if (listMember !== '' && listMember != null) {\n                let currentMemberLength = listMember.length;\n                if (currentMemberLength > 128) {\n                    // first of all, let's ignore members with length > 128 char\n                    ignoredMembers.push(listMember);\n                } else {\n                    let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                        traceStateBuilderArrayLength > 0 ? 1 : 0));\n\n                    if (newExpectedLength <= maxTraceStateLength) {\n                        // the comma seperator is added at the end when building the string\n                        traceStateBuilderArray.push(listMember);\n                        // increment by length of added member + 1 (for the comma)\n                        traceStateBuilderArrayLength += (currentMemberLength + (\n                            traceStateBuilderArrayLength > 0 ? 1 : 0));\n                    } else {\n                        ignoredMembers.push(listMember);\n                    }\n                }\n            }\n\t    }\n\t\n\t    // See if we can add the ignored members now\n\t    for (let i = 0; i < ignoredMembers.length; i++) {\n            let currentMember = ignoredMembers[i];\n            let currentMemberLength = currentMember.length;\n\n            let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                traceStateBuilderArrayLength > 0 ? 1 : 0));\n            if (newExpectedLength <= maxTraceStateLength) {\n                // the comma seperator is added at the end when building the string\n                traceStateBuilderArray.push(currentMember);\n                // increment by length of added member + 1 (for the comma)\n                traceStateBuilderArrayLength += (currentMemberLength + (\n                    traceStateBuilderArrayLength > 0 ? 1 : 0));\n            }\n\t    }\n\t\n        // build the string with comma seperating the members\n\t    return traceStateBuilderArray.join(',');\n\t}\n\n    /**\n     * Returns the string representation of this object\n     * \n     * @override\n     */\n    toString() {\n        return \"{traceId=\" + this.getTraceId()\n            + \", spanId=\" + this.getSpanId()\n            + \", sampled=\" + this.isSampled\n            + \", traceState=\" + ((this.traceState == null) ? \"}\" : \"'\" + this.traceState + \"'}\");\n    }\n}\n\nmodule.exports.TraceContext = TraceContext;\n","\nconst { LogFormatter } = require('solclient-log');\nconst { Baggage } = require('./baggage');\nconst { TraceContext } = require('./message-trace-context');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\n/**\n * @classdesc\n * <b>This class is used to enable the distributed tracing \n * support for variety of Solace message types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @internal\n */\nclass MessageTracingSupport {\n\n  /**\n   * Represents OpenTelementry Support for Solace Messages.\n   * The solace.Message class will extend this class.\n   * \n   * @constructor\n   * @hideconstructor\n   * @private\n   **/\n  constructor() {\n    // empty constructor\n  }\n\n  /**\n   * Retrieves a {@link TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    if(this._traceContextSetter == null || this._traceContextSetter == undefined) {\n      // create a new context setter object\n      this._traceContextSetter = new TraceContextSetter();\n    }\n    return this._traceContextSetter;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {?solace.TraceContext} Transport context object associated with this message\n   */\n  getTransportContext() {\n    return this._transportContext;\n  }\n  /**\n   * The transport context setter\n   * \n   * @param {TraceContextSetter} contextSetter \n   */\n  _setTransportContext(contextSetter) {\n    if(contextSetter != null) {\n      this._transportContext = new TraceContext(contextSetter);\n    }\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {?solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // if there is no creation context, use the context setter to create it\n    return this._creationContext;\n  }\n  /**\n   * It is created only once by the producer/publisher and cannot be\n   * changed by intermediaries\n   * @param {TraceContextSetter} contextSetter \n   */\n  _setCreationContext(contextSetter) {\n    // set the creation context only once\n    if(contextSetter != null) {\n      this._creationContext = new TraceContext(contextSetter);\n    }\n  }\n \n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {?solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    return this._baggage;\n  }\n  /**\n   * The internal setter for the baggage prop.\n   * \n   * @param {Baggage} value \n   */\n  _setBaggage(value) {\n    this._baggage = value;\n  }\n}\n\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageOutcome } = require('./lib/message-outcomes');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageOutcome = MessageOutcome;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicSequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(/*message*/ /*, flags*/) {\n    return ['HTTP Content Type', false, undefined, null];\n  },\n\n  fpHttpContentEncoding(/*message*/ /*, flags*/) {\n    return ['HTTP Content Encoding', false, undefined, null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (typeof cacheRequestId === 'number') {\n      return ['Cache Request Id', true, cacheRequestId, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n\n  fpTracingCreationContext(message, flags) {\n    const _creationContext = message.getCreationContext();\n\n    const isPresent = (_creationContext != null\n      && _creationContext.getTraceId() != null\n      && _creationContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_creationContext != null) ? _creationContext.toString() : null;\n    }\n    return ['Tracing CreationContext', isPresent, detailValue, null];\n  },\n\n  fpTracingTransportContext(message, flags) {\n    const _transportContext = message.getTransportContext();\n\n    const isPresent = (_transportContext != null\n      && _transportContext.getTraceId() != null\n      && _transportContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_transportContext != null) ? _transportContext.toString() : null;\n    }\n    return ['Trace Context SMF Parameter', isPresent, detailValue, null];\n  },\n\n  fpTracingBaggage(message, flags) {\n    const isPresent = (message.getBaggage() != null\n      && message.getBaggage().getBaggage() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      const _baggage = message.getBaggage();\n      detailValue = (_baggage != null) ? _baggage.getBaggage() : null;\n    }\n    return ['Tracing Baggage', isPresent, detailValue, null];\n  },\n\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of supported message settlement outcomes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageOutcome = {\n  /**\n   * Represents a successful message processing acknowledgement outcome.\n   *\n   * (see {@link solace.Message#acknowledge}) for more details\n   */\n  ACCEPTED:         0,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n   * the message.\n   * \n   * Delivery count for the message is incremented. Redelivery will be attempted. Message may\n   * be moved to DMQ once max-redelivered is reached. Message may be delayed if the endpoint has\n   * delayed redelivery configured.\n   */\n  FAILED:           1,\n  // /**\n  //  * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n  //  * the message.\n  //  * \n  //  * Delivery count for the message is NOT incremented. Redelivery will be attempted. Message may\n  //  * be moved to DMQ once max-redelivered is reached. \n  //  * A released message will always be eligible for redelivery, even if redeliveries are disabled. \n  //  * Message is immediately eligible for redelivery, even if endpoint is configured for delayed redelivery.\n  //  */\n  // RELEASED:           2,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application has rejected the\n   * message such as when application determines the message is invalid.\n   * \n   * Message will NOT be redelivered. Message will be moved to DMQ. If DMQ is not configured,\n   * message is deleted.\n   */\n  REJECTED:         3,\n};\n\nmodule.exports.MessageOutcome = Enum.new(MessageOutcome);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const { clone } = require('solclient-util'); // using the modified local clone version\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageOutcome } = require('./message-outcomes');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\nconst { Baggage, MessageTracingSupport, TraceContext, TraceContextSetter } = require('solclient-message-tracing');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; // Makes the accessor throw, never returned to user.\n\n  // for tracing support\n  message._traceContextSetter = null;\n  message._creationContext = null;\n  message._transportContext = null;\n  message._baggage = new Baggage();\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * Function called to clear extended var-len message properties\n * @param {Message} message The message to update\n * @internal\n */\nfunction clearExtendedVarLenParameters(message) {\n  // clear the tracing support params since\n  // they use extended var-len encoding\n  message._transportContext = null;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n * @extends solace.MessageTracingSupport\n */\nclass Message extends MessageTracingSupport {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    super(); // call the tracing support constructor\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n\n  /**\n   * Settles this message in a requested way.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {solace.MessageOutcome} messageSettlementOutcome type of the settlement outcome, not expected to be {@code null}\n   * @throws {@link solace.OperationError}\n   *  * if broker does not support the specified outcome option;\n   *  * if the flow was created without specifying required {@link MessageOutcome}\n   *    Options within the consumer properties;\n   *  * if the associated {@link solace.Session} is configured\n   *    to use SUPPORTED_MESSAGE_ACK_AUTO (the default behaviour),\n   *    the use of {@link MessageOutcome#REJECTED}\n   *    and {@link MessageOutcome#FAILED} are not supported;\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connected\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   *    @see {@link solace.MessageOutcome}for detailed explanation of available options\n   */\n  settle(messageSettlementOutcome) {\n    // implementation here\n    // validation checks here\n    if (this._acked) {\n      throw new OperationError('Message can only be settled once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot settle a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot settle a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot settle using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot settle using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application settled`);\n      return;\n    }\n\n    // validate the settlement outcome and send correct Enum value\n    const settlementOutcome = messageSettlementOutcome;\n    if (MessageOutcome.values.indexOf(settlementOutcome) === -1) {\n      throw new OperationError(`Settlement outcome for message must be valid`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // check that the broker consumer session has support for the outcome and \n    const doesConsumerSupportOutcome = this._consumer.getProperties().requiredSettlementOutcomes.some(v => v === settlementOutcome);\n    // that the session was created with support for the outcome\n    if (settlementOutcome != MessageOutcome.ACCEPTED && !doesConsumerSupportOutcome) {\n      throw new OperationError(`solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)} not supported for this Message Consumer`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // actual settlement logic\n    this._consumer.applicationSettle(this._guaranteedMsgId, settlementOutcome);\n    this._acked = true; // also set as ACKed/settled\n  }\n\n  /**\n   * Returns whether settle(solace.MessageOutcome) has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isSettled() {\n    return this._acked || false;\n  }\n\n  /**\n   * Internal validation checks before we attempt to acknowledge this message.\n   * @private\n   */\n  _validateBeforeAcknowledge() {\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n  }\n\n  /**\n   * Acknowledges this message.\n   * This is the same as calling {@link solace.Message#settle(solace.MessageOutcome.ACCEPTED)}.\n   * Internally uses Message.settle() with the ACCEPTED MessageOutcome.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application acknowledge`);\n      return;\n    }\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, false);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Used by the message-dispatcher to auto-acknowledge this message.\n   * @internal\n   */\n  _autoAcknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, true);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  // Message Tracing Section\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    // return the parent method\n    return super.getTraceContextSetter();\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getCreationContext();\n  }\n \n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {solace.TraceContext} Transport context object associated with this message;\n   */\n  getTransportContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getTransportContext();\n  }\n\n  /**\n   * Set the transport context.\n   * Called when the message is received from broker\n   * \n   * @param {solace.TraceContextSetter} contextSetter \n   */\n  setTransportContext(contextSetter) {\n    // call the parent method.\n    super._setTransportContext(contextSetter);\n  }\n\n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    // returns the parent method baggage instance\n    // used for setting and retriving the baggage value \n    return super.getBaggage();\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n\n  /**\n   * Clears all extended var-len message properties on this message.\n   * The message no longer has any extended variable length\n   * properties set.\n   * \n   * @internal\n   */\n  clearExtendedVarLenParams() {\n    clearExtendedVarLenParameters(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object.  Upon creation of a queue, undefined queue\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : 'undefined',\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n * @private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n  /**\n   * Support for ApplicationAck optional outcomes \"failed\" and \"rejected\".\n   */\n  AD_APP_ACK_FAILED:            30,\n  /**\n   * Broker supports variable-length SMF extended parameters.\n   */\n  VAR_LEN_EXT_PARAM:            31,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    // call this to initialize the _mutableState property\n    this.reset(); \n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      // finished DNS resolution checks\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageOutcome,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this); // this._transport == null at this point \n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n\n    const { LOG_WARN } = this.logger;\n\n    // check for whether the broker session supports the capabilities\n    const settlementOutcomes = consumerProperties.requiredSettlementOutcomes;\n    if (settlementOutcomes && settlementOutcomes.length > 0) {\n      // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n      const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n      if(isNackRequired && !this._session.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n        const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n          settlementOutcomes.map(v => `solace.MessageOutcome.${MessageOutcome.nameOf(v)}`).join(', ')\n        } ]`;\n        // log the operation error as a Warning\n        LOG_WARN(outcomeNotSupportedError);\n        // then throw the error here\n        throw new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION, null);\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      let result = false;\n      if(this._correlatedReqs) {\n        result = delete this._correlatedReqs[correlationTag];\n      }\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisited.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      //TODO: act on this.\n      // (throw.)\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor,\n        QueueType } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n\n    // check to see if we can send variable length params to the broker\n    if (!this.isCapable(CapabilityType.VAR_LEN_EXT_PARAM)) {\n      LOG_TRACE('Broker session does not support VAR LEN SMF extended parameters');\n      // clear these message properties since var-len extended\n      // properties not supported on broker\n      message.clearExtendedVarLenParams();\n\n      // throw error if these extended var-length message properties are set\n      if(this._failOnExtendedVariableLengthProperties(message)) {\n        throw new OperationError(\n          'Broker does not support variable length SMF extended parameters',\n          ErrorSubcode.INVALID_OPERATION);\n      }\n    }\n    this.validateAndSendMessage(message);\n  }\n\n  _failOnExtendedVariableLengthProperties(message) {\n    return false; // return false since no properties for now\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   * <br>\n   * <strong>Note:</strong>\n   * The API sets the correlationId and replyTo fields of the message being sent;\n   * this overwrites any existing correlationId and replyTo values on the message.\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max, outcome = undefined) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  const paramLength = (outcome == undefined || outcome === 0) ? 18 : 19;\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(paramLength)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  if(outcome != undefined && outcome > 0) { // skip for MessageOutcome.ACCEPTED\n    data.push(Convert.int8ToStr(outcome)); // write the settlement outcome\n  }\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue(); // this is the Map() of all settlement ACK/NACK ranges\n          const uh = param.getUh();\n          const type = param.getType();\n          // iterate through the Map of ranges per settlement outcome\n          ranges.forEach((settlementRanges, outcome) => {\n            for (let i = 0; i < settlementRanges.length; ++i) {\n              const range = settlementRanges[i];\n              paramspace.push(encAdp64AckPairParam(uh,\n                                                   type,\n                                                   range[0],\n                                                   range[1],\n                                                   outcome));\n            }\n          });\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst { Baggage, TraceContextSetter } = require('solclient-message-tracing');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long, Convert: { stringToUint8Array } } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    const preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n\n      const bag = headerMap.getField('bag'); // get the baggage field\n      const ctx = headerMap.getField('ctx'); // the message creation context field\n\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n      if (bag) {\n        // set the baggage\n        const _baggageObj = new Baggage();\n        _baggageObj.setBaggage(bag.getValue());\n        message._setBaggage(_baggageObj);\n      }\n      if (ctx) {\n        // create a context setter from the bytes or string depending on the active profile\n        const _traceContextSetter = TraceContextSetter.fromTraceContext(ctx.getValue());\n         // use it to set the message creation context, can be null\n        message._setCreationContext(_traceContextSetter);\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // set the trace span transport context for the message if present\n  if (smfHeader.pm_ts_transport_context) {\n    // create a context setter from the bytes\n    const _traceContextSetter = TraceContextSetter.fromTraceContext(smfHeader.pm_ts_transport_context);\n    // use it to create the transport context\n    message._setTransportContext(_traceContextSetter);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n  uint8ArrayToString,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n  FORCED_LENGTH_MODE,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n\n  // the baggage value in the correct format. See - https://www.w3.org/TR/baggage/\n  const _baggage = message.getBaggage();\n  addToMapIfPresent(headerMap, 'bag', SDTFieldType.STRING, (_baggage ? _baggage.getBaggage() : null));\n  // message creation context will never be null\n  // set the encoded bytes into the map\n  const _creationContext = message.getCreationContext();\n  addToMapIfPresent(\n    headerMap, 'ctx', SDTFieldType.BYTEARRAY,\n    (_creationContext ? _creationContext.getEncodedTraceContext() : null)\n  );\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  // get the transport context, if available\n  const _transportContext = message.getTransportContext();\n  if(_transportContext != null) {\n    // set the encoded Uint8 array into the header property\n    smfHeader.pm_ts_transport_context = _transportContext.getEncodedTraceContext();\n  }\n  \n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      message.getCreationContext() ||\n      (message.getBaggage() && message.getBaggage().getBaggage()) ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    addContentElementToArrays(csumm, payload,\n                              message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_ts_transport_context) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.TS_TRANSPORT_CONTEXT,\n                                                     uint8ArrayToString(header.pm_ts_transport_context),\n                                                     FORCED_LENGTH_MODE.SIX);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.FORCED_LENGTH_MODE = {\n  FIVE:  5,\n  SIX:   6\n};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value, forcedLengthMode = -1) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n\n  // prevent unsupported value from breaking default behaviour\n  if(forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) {\n    forcedLengthMode = -1;\n  }\n\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (\n    ((length < 253) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.FIVE)\n  ) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (\n    ((length < 256 * 256 - 4) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.SIX)\n  ) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      case SMFExtendedParameterType.TS_TRANSPORT_CONTEXT:\n        // from specs, trace span context must be at least 36 bytes\n        // use 36 - 4 (account for error in 2-byte variable length value calculation above) = 32\n        if(valueLen >= 32) {\n          // will convert this string to a UInt8Array later\n          smfHeader.pm_ts_transport_context = dataBuf.toString('latin1', pos, pos + valueLen);\n        } else {\n          LOG_TRACE('Skipped due to unexpected size of extended parameter ' +\n                    `type ${type} value length ${valueLen} offset ${pos}`);\n        }\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          smfHeader.pm_ad_publisher_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                       dataBuf.readUInt32BE(pos),\n                                                       true);\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { MessageOutcome } = require('solclient-message');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      queueDescriptor.durable // better be...\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @param {Boolean} [hasNackSupport=false] If true, flow is created with Consumer Redelivery\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined,\n                                hasNackSupport = false) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    /**\n     * A Flow that has Browser support cannot have NACK support \n     */\n    if (hasNackSupport /* is true */) {\n      // [AssuredCtrl FlowType Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x3 // create flow with Consumer Redelivery support\n      ));\n    } else if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2 // create flow with browser support\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Map.<Array.<Array.<Long>>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `Map.set( MessageOutcome.ACCEPTED, [ [singleMessageId, singleMessageId] ] )`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && (applicationAckRanges.size > 0)) {\n      // aggregate the total length of the ack/nack ranges\n      let totalRangeLen  = 0;\n      const allOutcomes = MessageOutcome.values;\n      for(let i = 0; i < allOutcomes.length; i ++) {\n        totalRangeLen += applicationAckRanges.has(allOutcomes[i]) ? applicationAckRanges.get(allOutcomes[i]).length : 0;\n      }\n\n      if (totalRangeLen > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n  CapabilityType.AD_APP_ACK_FAILED,\n  CapabilityType.VAR_LEN_EXT_PARAM,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n    this.pm_ts_transport_context = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n  TS_TRANSPORT_CONTEXT:     0x36,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n  /**\n   * Count of received persistent and non-persistent messages that were rejected.\n   */\n  RX_SETTLE_REJECTED:       44,\n  /**\n   * Count of received persistent and non-persistent messages that were failed.\n   */\n  RX_SETTLE_FAILED:         45,\n  /**\n   * Count of received persistent and non-persistent messages that were accepted manually (no auto-acks).\n   */\n  RX_SETTLE_ACCEPTED:       46,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    // added check to prevent it returning as undefined/null\n    return this._correlationCounter ? this._correlationCounter : 0;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","const fs = require('fs');\nconst SolclientSessionLib = require('solclient-session');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\n/**\n * Node TLS socket option generation factored out from WS transport, shared with Tcp transport.\n * Internal mixin class, not intended to be publicly visible.\n * @private\n */\n\nclass NodeTLSOptsMixin {\n  /**\n   * Overwrite Node.js default hostname check callback by verifying cnNameList against subject CN\n   * in the server certificate. If cnNameList is a empty string, it means all CNs are acceptable.\n   * @param {String} host The hostname for checking\n   * @param {String} cert The server certificate for checking\n   * @name solace.WebTransportSession#checkCertificateCNs\n   * @returns {?Error} Any error generated by the certificate check\n   * @private\n   */\n  checkCertificateCNs(host, cert) {\n    if (this._props.sslTrustedCommonNameList && this._props.sslTrustedCommonNameList.length > 0) {\n      // no Closure Compiler externs for certificates\n      LOG_DEBUG('server cert:', cert);\n      const subject = cert['subject']; // eslint-disable-line dot-notation\n      let valid = false;\n      if (subject) {\n        const cn = subject['CN']; // eslint-disable-line dot-notation\n        valid = this._props.sslTrustedCommonNameList.some(name =>\n          name.toLowerCase() === cn.toLowerCase()\n        );\n      }\n      if (!valid) {\n        const error = new Error('Server certificate not trusted - no common name match');\n        error.reason = 'Server certificate not trusted - no common name match';\n        error.host = host;\n        error.cert = cert;\n        return error;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Create the TLS options object used in wss:// and tcps:// connection establishment.\n   * The same options are needed by the ws and tls socket constructors.\n   * @returns {Object} WebSocket/TLSSocket options object\n   * @private\n   */\n  createTLSOptions() {\n    /* eslint-disable dot-notation */\n    const props = this._props;\n    const options = {};\n    const useClientCert = (\n      props.authenticationScheme === SolclientSessionLib.AuthenticationScheme.CLIENT_CERTIFICATE\n    );\n\n    // available tls options:\n    //  pfx, key, passphrase, cert, ca, ciphers, rejectUnauthorized,\n    //  secureProtocol, secureOptions, checkServerIdentity\n\n    // default to allow all version of SSL during negotiation but exclude SSLv2 and SSLv3\n    options['secureProtocol'] = 'SSLv23_method';\n    const constMap = SolclientSessionLib.SessionProperties.SslProtocolExcludeConstantMap;\n    options['secureOptions'] = constMap['sslv2'] | constMap['sslv3'];\n    (props.sslExcludedProtocols || []).forEach((protocol) => {\n      options['secureOptions'] |= constMap[protocol.toLowerCase()];\n    });\n\n    if (props.sslCipherSuites) {\n      const ciphers = props.sslCipherSuites.split(',');\n      const trimmed = ciphers.map(cipher => cipher.trim());\n      options['ciphers'] = trimmed.join(':');\n    } else {\n      options['ciphers'] = props.sslCipherSuites;\n    }\n\n    options['rejectUnauthorized'] = props.sslValidateCertificate;\n\n    // only set checkServerIdentity callback if rejectUnauthorized\n    if (options['rejectUnauthorized'] && Array.isArray(props.sslTrustedCommonNameList)) {\n      options['checkServerIdentity'] = this.checkCertificateCNs.bind(this);\n    }\n\n    // only set trust stores and and checkServerIdentity callback\n    // if rejectUnauthorized is true or authClientCert\n    if ((options['rejectUnauthorized'] || useClientCert) &&\n      props.sslTrustStores && props.sslTrustStores.length) {\n      const tsContents = [];\n      props.sslTrustStores.forEach((tsFile) => {\n        try {\n          tsContents.push(fs.readFileSync(tsFile));\n        } catch (e) {\n          LOG_WARN(`Failed to load trust store ${tsFile}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load trust store ${tsFile}`,\n            ErrorSubcode.FAILED_LOADING_TRUSTSTORE,\n            e);\n        }\n      });\n      options['ca'] = tsContents;\n    }\n\n\n    if (useClientCert) {\n      if (props.sslPfx) {\n        try {\n          options['pfx'] = fs.readFileSync(props.sslPfx);\n          options['passphrase'] = props.sslPfxPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load pfx file ${props.sslPfx}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load pfx ${props.sslPfx}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslPrivateKey) {\n        try {\n          options['key'] = fs.readFileSync(props.sslPrivateKey);\n          options['passphrase'] = props.sslPrivateKeyPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load private key ${props.sslPrivateKey}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load private key ${props.sslPrivateKey}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslCertificate) {\n        try {\n          options['cert'] = fs.readFileSync(props.sslCertificate);\n        } catch (e) {\n          LOG_WARN(`Failed to load certificate file ${props.sslCertificate}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load certificate ${props.sslCertificate}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n    }\n    //SNI\n    const hostname = parseURL(this._url).hostname;\n    options['servername'] = hostname;\n    return options;\n    /* eslint-enable dot-notation */\n  }\n\n}\n\nmodule.exports.NodeTLSOptsMixin = NodeTLSOptsMixin;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  // Got rid of the inconsequential ifs for old IE versions in 2024 (again?)\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { CompressedTransport } = require('./transport-compression');\nconst { TcpRawTransport } = require('./transport-tcp-plaintext');\nconst { TcpTlsTransport } = require('./transport-tcp-tls');\nconst { TlsOnlyTransport } = require('./transport-tls');\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\nmodule.exports.CompressedTransport = CompressedTransport;\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const { Duplex } = require('stream');\nconst { LOG_WARN, LOG_TRACE } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\n\n/**\n * This is a Duplex Stream encapsulating a Transport.\n * It transparently passes reads, writes, and events until \"shunted\".\n * After that, nothing gets through.\n *\n * The intermediate \"dontEnd\" state allows a TLS shutdown to run its course\n * without closing the underlying transport in the end.\n *\n * Intended lifecycle:\n *\n * 1, create underlying transport\n * 2, create ShuntableTransport with underlying transport\n * 3, pass shuntableTransport to tls.connect\n * 4, connect underlying transport\n *\n * <traffic may flow until TLS shutdown desired>\n *\n * 1, shuntableTransport.dontend();\n * 2, tlsSocket.end();\n * 3, on 'closed' event: take and start using shuntableSocket.socket.\n *\n * For an explanation of _read and _write see\n * https://nodejs.org/api/stream.html#stream_implementing_a_duplex_stream\n *\n * @private\n */\n\nclass ShuntableTransport extends Duplex {\n  constructor(options) {\n    super(options);\n    this._shunted = false;\n    this._dontEnd = false;\n    this._underlyingTransport = options.underlyingTransport;\n    // Buffers data-callback pairs until connected or underlying transport decongests.\n    // Should never have more than 1 item as long as the stream contract is upheld.\n    this._interimBuffer = [];\n    this._transportDrained = true;\n    this._connected = false;\n  }\n\n  shunt() {\n    this._shunted = true;\n  }\n\n  dontEnd() {\n    this._dontEnd = true;\n  }\n\n  _write(chunk, encoding, callback) {\n    if (!this._shunted) {\n      if (!this._transportDrained || !this._connected) {\n        this._interimBuffer.push([chunk, callback]);\n        return;\n      }\n      const rc = this._underlyingTransport.send(chunk);\n      switch (rc) {\n        case TransportReturnCode.OK:\n          this._transportDrained = true;\n          callback();\n          break;\n        case TransportReturnCode.NO_SPACE:\n          this._transportDrained = false;\n          this._interimBuffer.push([chunk, callback]);\n          break;\n        case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n          this.emit('error',\n                    'Underlying transport in invalid state for send.');\n          break;\n        default:\n          LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n      }\n    }\n  }\n\n  //_read(size) {\n  _read() {\n    if (!this._shunted) {\n      this._underlyingTransport.unpause();\n    }\n  }\n\n  rxDataBuffer(data) {\n    if (!this._shunted) {\n      const noPause = this.push(data);\n      if (!noPause) {\n        this._underlyingTransport.pause();\n      }\n    }\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onConnect();\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain();\n        break;\n      default:\n        LOG_WARN(`TLS layer got unkown event code ${transportEvent.getTransportEventCode}`);\n    }\n  }\n  onError(transportEvent) {\n    if (!this._shunted) {\n      this.emit('error', transportEvent.getInfoStr());\n    }\n  }\n\n  onClose(transportEvent) {\n    this._connected = false;\n    if (!this._shunted) {\n      LOG_TRACE(`ShuntableTransport emits close for transport event ${transportEvent}`);\n      this.emit('close');\n    }\n  }\n\n  onDrain() {\n    if (!this._shunted) {\n      this._transportDrained = true;\n      if (this._interimBuffer && this._interimBuffer.length > 0) {\n        const resendBuffer = this._interimBuffer;\n        this._interimBuffer = [];\n        resendBuffer.forEach(([data, callback]) => this._write(data, null, callback));\n      }\n      if (!this._transportDrained) {\n        return;\n      }\n      this.emit('drain');\n    }\n  }\n\n  onConnect() {\n    this._connected = true;\n    if (!this._shunted) {\n      this.onDrain(); // flush interimbuffer.\n      this.emit('connect');\n    }\n  }\n\n  end(chunk, encoding, callback) {\n    if (!this._shunted && !this._dontEnd) {\n      if (typeof chunk === 'function') { // sometimes TLS calls end() wrong...\n        this._underlyingTransport.destroy('End from TLS');\n        chunk();\n      } else {\n        const cb = () => { this._underlyingTransport.destroy('End from TLS'); callback(); };\n        this._write(chunk, encoding, cb);\n      }\n    } else if (!this._shunted) {\n      if (typeof chunk !== 'function') { // sometimes TLS calls end() wrong...\n        this._write(chunk, encoding, callback);\n      } else {\n        chunk();\n      }\n    }\n  }\n\n  destroy(error) {\n    if (!this._shunted && !this._dontEnd) {\n      this._underlyingTransport.destroy(error);\n    }\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (!this._shunted && !this._dontEnd && this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n  }\n\n  setNoDelay(arg) {\n    if (!this.shunted) {\n      LOG_TRACE(`Ignoring setNoDelay(${arg})`);\n    }\n  }\n}\n\nmodule.exports.ShuntableTransport = ShuntableTransport;\n","const zlib = require('zlib');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_INFO, LOG_WARN } = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Modular transport layer performing zlib compression.\n * Requires an underlying transport, can be plaintext or TLS, connected or not.\n * Uses the nodejs zlib module which in turn uses the libuv threadpool in nodejs.\n * The end user may need to increase threadpool size.\n * https://nodejs.org/api/zlib.html#zlib_threadpool_usage\n *\n * @private\n */\nclass CompressedTransport extends TransportBase {\n\n  constructor(eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super('tcp://x', eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._waitForSocketDrain = false;\n    this._waitForCompressorDrain = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._socketDrained = true;\n    this._compressorDrained = true;\n    this._interimBuffer = [];\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n\n    this._compressor = null;\n    this._decompressor = null;\n\n    this._compressionLevel = props.compressionLevel;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  // Underlying transport callback.\n  rxDataBuffer(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportCompressedSession stray rxDataBuffer, ignoring.');\n      return;\n    }\n    this._decompressor.write(data);\n    this._decompressor.flush();\n  }\n\n  /**\n   * Decompressor callback.\n   * @private\n   * @param {Buffer} data the data\n   */\n  onData(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportSession stray onData, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Underlying transport callback for SEND_ERROR\n   * @private\n   * @param {TransportSessionEvent} transportEvent the error\n   */\n  onError(transportEvent) {\n    // Need new state for \"waiting for decompressor flush after error\"?\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    const onErrorStage2 = () => {\n      if (this._eventCB) {\n        LOG_TRACE('Decompressor flush returned, passing error to eventCB.');\n        this._eventCB(transportEvent);\n      } else {\n        LOG_TRACE('Decompressor flush returned, but eventCB already cleared.');\n      }\n    };\n\n    LOG_TRACE('Flushing decompressor on socket error.');\n    this._decompressor.flush(zlib.Z_SYNC_FLUSH, onErrorStage2);\n  }\n\n  /**\n   * Treat any zlib error the same as a socket error,\n   * plus close the socket.\n   * @private\n   * @param {Error} error the error\n   */\n  onZlibError(error) {\n    this._socketError = error;\n    this._underlyingTransport.destroy(`Connection closed by zlib error. Message:${error}`,\n                                      ErrorSubcode.COMMUNICATION_ERROR);\n  }\n  /**\n   * underlying transport callback for DESTROYED_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onClose(transportEvent) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      this._destroy(transportEvent);\n    } else {\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      LOG_TRACE('Flushing decompressor on socket close.');\n      const stage2destroy = () => this._destroy(transportEvent);\n      this._decompressor.flush(zlib.Z_SYNC_FLUSH, stage2destroy);\n    }\n  }\n\n  /**\n   * underlying transport callback for UP_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onOpen(transportEvent) {\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_INFO(`compressor stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(transportEvent);\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    LOG_TRACE('Initializing compressed transport');\n    let rc = TransportReturnCode.OK;\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    if (this._underlyingTransport._state === TransportSessionState.DOWN) {\n      rc = this._underlyingTransport.connect();\n    } else {\n      this._state = TransportSessionState.SESSION_UP;\n    }\n    try {\n      // initialize compressor, decompressor.\n      const options = {\n        highWaterMark: this._sendBufferMaxSize,\n        level:         this._compressionLevel,\n        flush:         zlib.Z_SYNC_FLUSH,\n      };\n      this._compressor =\n        zlib.createDeflateRaw(options);\n      this._decompressor = zlib.createInflateRaw({ flush: zlib.Z_SYNC_FLUSH });\n\n      this._decompressor.on('data', this.onData.bind(this));\n      this._decompressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('data', this.sendCompressed.bind(this));\n      this._compressor.on('drain', this.onCompressorDrain.bind(this));\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp zlib layer: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return rc;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * We'll clean up zlib objects on the DESTROYED_NOTICE.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n    return this._underlyingTransport.destroy(msg, subcode);\n  }\n\n  // second stage of the underlying transport callback for DESTROYED_NOTICE.\n  // We should only ever get here once the underlying transport is destroyed.\n  // See onClose.\n  _destroy(transportEvent) {\n    if (this._state !== TransportSessionState.DOWN) {\n      this._state = TransportSessionState.DOWN;\n      const onerrorStub = function onerrorStub() { };\n      this._waitForSocketDrain = false;\n      this._flushCallback = null;\n      this._socketDrained = true;\n      this._client = null; // Don't accept data.\n      this._compressor.removeAllListeners();\n      this._compressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._decompressor.removeAllListeners();\n      this._decompressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._compressor.unpipe();\n      //https://github.com/nodejs/node/issues/15625\n      this._compressor._hadError = true;\n      this._compressor.close();\n      this._compressor = null;\n      this._decompressor.close();\n      this._decompressor = null;\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      this._eventCB(transportEvent);\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n    return TransportReturnCode.OK;\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onOpen(transportEvent);\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain(transportEvent);\n        break;\n      default:\n        LOG_WARN('Compressing transport layer got unkown event code ' +\n          `${transportEvent.getTransportEventCode}`);\n    }\n  }\n\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    const flushStage2 = () => this._underlyingTransport.flush(callback);\n    this._compressor.flush(flushStage2);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      // On a lower layer socket error this transport is in WAITING_FOR_DESTROY state\n      // until the decompressor flushes.\n      // We could respond with NO_SPACE, but we'd have to send a CAN_SEND on reconnect.\n      LOG_INFO(`Compressing transport can't send in state ${this._state}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Congestion control.\n    // We try to avoid pumping too much data into the compressor until the socket drains.\n    // We pause()/resume() the compressor while the socket is congested, but still.\n    if (forceAllowEnqueue\n      || (this._socketDrained && this._compressorDrained)) {\n      if (this._interimBuffer.length > 0) {\n        LOG_WARN(`Allowing send when interimBuffer is ${this._interimBuffer.length}`);\n      }\n      this._compressorDrained = this._compressor.write(message, 'ascii');\n      this._compressor.flush();\n      this._clientstats.bytesWritten += message.length;\n      ++this._clientstats.msgWritten;\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    if (!this._socketDrained) {\n      this._waitForSocketDrain = true;\n    }\n    if (!this._compressorDrained) {\n      this._waitForCompressorDrain = true;\n    }\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  sendCompressed(data) {\n    if (!this._socketDrained) {\n      this._interimBuffer.push(data);\n      this._compressor.pause();\n      return;\n    }\n    const rc = this._underlyingTransport.send(data);\n    switch (rc) {\n      case TransportReturnCode.OK:\n        this._socketDrained = true;\n        break;\n      case TransportReturnCode.NO_SPACE:\n        this._socketDrained = false;\n        this._interimBuffer.push(data);\n        this._compressor.pause();\n        break;\n      case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n        this.onError(new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            'Underlying transport in invalid state for send.',\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n        break;\n      default:\n        LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n    }\n  }\n\n  /**\n   * Underlying transport callback for CAN_SEND.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   */\n  onDrain() {\n    this._socketDrained = true;\n    if (this._interimBuffer && this._interimBuffer.length > 0) {\n      const resendBuffer = this._interimBuffer;\n      this._interimBuffer = [];\n      resendBuffer.forEach(data => this.sendCompressed(data));\n    }\n    if (!this._socketDrained) {\n      return;\n    }\n    this._compressor.resume();\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._waitForSocketDrain) {\n      this._waitForSocketDrain = false;\n      if (!this._waitForCompressorDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  onCompressorDrain() {\n    this._compressorDrained = true;\n    if (this._waitForCompressorDrain) {\n      this._waitForCompressorDrain = false;\n      if (!this._waitForSocketDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    this._underlyingTransport.pause();\n    this._decompressor.pause();\n  }\n\n  unpause() {\n    this._underlyingTransport.unpause();\n    this._decompressor.resume();\n  }\n\n}\n\nmodule.exports.CompressedTransport = CompressedTransport;\n","const net = require('net');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Tcp (tcps://) transport without TLS (tcps://) support.\n * Only works in node.js.\n * @private\n */\nclass TcpRawTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._rawSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._props._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('Plaintext transport received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('Plaintext transport stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.on('connect', this.onOpen.bind(this, this._rawSocket));\n      // Only connect after the connect listener is registered:\n      this._rawSocket.connect(port, host);\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._rawSocket.on('data', this.onData.bind(this, this._rawSocket));\n      this._rawSocket.on('error', this.onError.bind(this, this._rawSocket));\n      this._rawSocket.on('close', this.onClose.bind(this, this._rawSocket));\n      this._rawSocket.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._rawSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._rawSocket) {\n        this._rawSocket.removeAllListeners();\n        this._rawSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._rawSocket.destroy();\n        this._rawSocket.destroy();\n        this._rawSocket = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket) {\n        this._rawSocket.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      LOG_ERROR('plaintext: INVALID_STATE_FOR_OPERATION');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < (this._sendBufferMaxSize - this._rawSocket.bufferSize)) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._rawSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    if (this._rawSocket) {\n      this._rawSocket.pause();\n    }\n  }\n\n  unpause() {\n    if (this._rawSocket) {\n      this._rawSocket.resume();\n    }\n  }\n\n}\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\n","const net = require('net');\nconst tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Tcp (smf) transport with TLS (tcps://) support.\n * Only works in node.js.\n * Modelled after the WebSocket transport mostly,\n * except there is no downgrade mechanism.\n * There is no separate \"Transport\" class\n * to manage the downgrade FSM:\n * The TransportSession is the Transport.\n\n * @private\n */\nclass TcpTlsTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    //this._socket = null;\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._tlsSocket = null;\n    // Always the socket to write to.\n    // could be _rawsocket, _tlsSocket, or _compressor.\n    this._writable = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(newValue) {\n    this._clientstats = newValue;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TcpTransportSession received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.connect(port, host);\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._rawSocket;\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._rawSocket));\n      this._writable = this._tlsSocket;\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._writable.on('data', this.onData.bind(this, this._rawSocket));\n      this._writable.on('error', this.onError.bind(this, this._rawSocket));\n      this._writable.on('close', this.onClose.bind(this, this._rawSocket));\n      this._writable.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._writable.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._writable) {\n        this._writable.removeAllListeners();\n        this._writable.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._writable.destroy();\n        this._writable.destroy();\n        this._rawSocket = null;\n        this._writable = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket && !this._tlsSocket){\n        this._rawSocket.destroy(new Error(errorMsg));\n      } else if (this._writable) {\n        // destroy the writable which should be the _tlsSocket\n        this._writable.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._writable.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._writable.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n}\n\nmixin(TcpTlsTransport, NodeTLSOptsMixin);\n\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { ShuntableTransport } = require('./shuntable-transport');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Modular transport with TLS (tcps://) support.\n * Only works in node.js.\n * Must be initialized with an underlying transport\n * (currently only the plaintext tcp transport is supported).\n * Wraps the underlying transport in a ShuntableTransport stream\n * which can be passed to tls.connect()\n * Supports  TLS shutdown leaving the socket open.\n * @private\n */\nclass TlsOnlyTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    this._tlsSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  getUnderlyingTransport() {\n    return this._underlyingTransport;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  // eventCB and rxDataBuffer forwarded to _shuntableTransport\n  // Chicken-egg problem in the factory...\n  eventCB(transportEvent) {\n    this._shuntableTransport.eventCB(transportEvent);\n  }\n\n  rxDataBuffer(data) {\n    this._shuntableTransport.rxDataBuffer(data);\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('Tls transport stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tls transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      this._eventCB(\n        new TransportSessionEvent(\n          TransportSessionEventCode.SEND_ERROR,\n          `Connection error${error}`,\n          null,\n          ErrorSubcode.CONNECTION_ERROR, null));\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tls transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._tlsSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TlsTransportSession received socket open event.');\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TlsTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._tlsSocket) {\n      LOG_ERROR('TCP transport can not connect once _tlsSocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    LOG_DEBUG('Establishing TLS transport session');\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    try {\n      const duplexOptions = { underlyingTransport: this._underlyingTransport };\n      this._shuntableTransport = new ShuntableTransport(duplexOptions);\n      this._underlyingTransport.connect();\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._shuntableTransport;\n      // host and port can be set here for certificate validation in the future.\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._tlsSocket));\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._tlsSocket.on('data', this.onData.bind(this, this._tlsSocket));\n      this._tlsSocket.on('error', this.onError.bind(this, this._tlsSocket));\n      this._tlsSocket.on('close', this.onClose.bind(this, this._tlsSocket));\n      this._tlsSocket.on('drain', this.onDrain.bind(this, this._tlsSocket));\n      this._tlsSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create TLS socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('TLS transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    //return this._underlyingTransport.destroy(msg, subcode);\n    return this._destroy(this._tlsSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tls transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._tlsSocket) {\n        this._tlsSocket.removeAllListeners();\n        this._tlsSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._tlsSocket.destroy();\n        this._tlsSocket.destroy();\n        this._tlsSocket = null;\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.destroy(msg, subcode);\n        this._underlyingTransport = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._tlsSocket) {\n        this._tlsSocket.destroy(new Error(errorMsg));\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.forceFailure(errorMsg);\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._tlsSocket.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._tlsSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  tlsShutdown(callback) {\n    this._tlsSocket.removeAllListeners('close');\n    this._tlsSocket.on('close', this.tlsShutdownStage2.bind(this, callback));\n    this._shuntableTransport.dontEnd();\n    this._tlsSocket.end();\n  }\n\n  tlsShutdownStage2(callback) {\n    this._shuntableTransport.shunt();\n    this._tlsSocket.removeAllListeners();\n    this._tlsSocket = null;\n    this._shuntableTransport = null;\n    this._underlyingTransport.rehome(this._eventCB, this._client);\n    this._underlyingTransport.setClientStats(this.getClientStats());\n    this.setClientStats(null);\n    this._eventCB = null;\n    this._client = null;\n    callback(this._underlyingTransport);\n  }\n}\n\nmixin(TlsOnlyTransport, NodeTLSOptsMixin);\n\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\nconst clone = require('./lib/clone');\n\nmodule.exports = {\n  clone,\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('./clone'); // using the modified local clone version\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/**\n * Copyright (c) 2011-2016 Paul Vorbach and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining \n * a copy of this software and associated documentation files \n * (the “Software”), to deal in the Software without restriction, \n * including without limitation the rights to use, copy, modify, \n * merge, publish, distribute, sublicense, and/or sell copies of \n * the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included \n * in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n'use strict';\n\n/**\n * The is a local modified version of the clone npm module (https://www.npmjs.com/package/clone).\n * According to its description, it offers a foolproof deep cloning \n * of objects, arrays, numbers, strings, maps, sets, \n * promises, etc. in JavaScript.\n * \n * I refactored it to be compatible with Webpack.\n * Refator List:\n * - update the use of the 'var' keyword to 'let' and 'const' where appropriate.\n * - Made the variable names more clearer and intuitive (clean code)\n * - I used ES6 contants/definitions where possible.\n * \n * Original can be found Here:\n * - On Npm -> https://www.npmjs.com/package/clone\n * - On GitHub -> https://github.com/pvorb/node-clone\n * \n * Created by oodigie on 26/05/2023.\n */\nconst clone = (function() {\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nlet nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nlet nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nlet nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  const allParents = [];\n  const allChildren = [];\n\n  const useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    let child;\n    let proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      const index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      let keyChild, valueChild;\n      parent.forEach(function(value, key) {\n        keyChild = _clone(key, depth - 1);\n        valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      let entryChild;\n      parent.forEach(function(value) {\n        entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (let i in parent) {\n      let attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      const symbols = Object.getOwnPropertySymbols(parent);\n      for (let i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        let symbol = symbols[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      const allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (let i = 0; i < allPropertyNames.length; i++) {\n        let propertyName = allPropertyNames[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  let emptyCloneFunc = function () {};\n  emptyCloneFunc.prototype = parent;\n  return new emptyCloneFunc();\n};\n\n// private utility functions\n\nfunction __objToStr(obj) {\n  return Object.prototype.toString.call(obj);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(regExpOptions) {\n  let flags = '';\n  if (regExpOptions.global) flags += 'g';\n  if (regExpOptions.ignoreCase) flags += 'i';\n  if (regExpOptions.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n\n})();\n\nmodule.exports = clone;\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","'use strict';\n\nconst WebSocket = require('./lib/websocket');\n\nWebSocket.createWebSocketStream = require('./lib/stream');\nWebSocket.Server = require('./lib/websocket-server');\nWebSocket.Receiver = require('./lib/receiver');\nWebSocket.Sender = require('./lib/sender');\n\nWebSocket.WebSocket = WebSocket;\nWebSocket.WebSocketServer = WebSocket.Server;\n\nmodule.exports = WebSocket;\n","'use strict';\n\nconst { EMPTY_BUFFER } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) {\n    return new FastBuffer(target.buffer, target.byteOffset, offset);\n  }\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.length === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = new FastBuffer(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\nmodule.exports = {\n  concat,\n  mask: _mask,\n  toArrayBuffer,\n  toBuffer,\n  unmask: _unmask\n};\n\n/* istanbul ignore else  */\nif (!process.env.WS_NO_BUFFER_UTIL) {\n  try {\n    const bufferUtil = require('bufferutil');\n\n    module.exports.mask = function (source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    };\n\n    module.exports.unmask = function (buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","'use strict';\n\nmodule.exports = {\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\n  EMPTY_BUFFER: Buffer.alloc(0),\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n  kListener: Symbol('kListener'),\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  NOOP: () => {}\n};\n","'use strict';\n\nconst { kForOnEventAttribute, kListener } = require('./constants');\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {(Function|Object)} handler The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, handler, options = {}) {\n    for (const listener of this.listeners(type)) {\n      if (\n        !options[kForOnEventAttribute] &&\n        listener[kListener] === handler &&\n        !listener[kForOnEventAttribute]\n      ) {\n        return;\n      }\n    }\n\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = handler;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {(Function|Object)} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n\n/**\n * Call an event listener\n *\n * @param {(Function|Object)} listener The listener to call\n * @param {*} thisArg The value to use as `this`` when calling the listener\n * @param {Event} event The event to pass to the listener\n * @private\n */\nfunction callListener(listener, thisArg, event) {\n  if (typeof listener === 'object' && listener.handleEvent) {\n    listener.handleEvent.call(listener, event);\n  } else {\n    listener.call(thisArg, event);\n  }\n}\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let code = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (\n        i !== 0 &&\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n      ) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n","'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n","'use strict';\n\nconst zlib = require('zlib');\n\nconst bufferUtil = require('./buffer-util');\nconst Limiter = require('./limiter');\nconst { kStatusCode } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) {\n        data = new FastBuffer(data.buffer, data.byteOffset, data.length - 4);\n      }\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n","'use strict';\n\nconst { Writable } = require('stream');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = require('./constants');\nconst { concat, toArrayBuffer, unmask } = require('./buffer-util');\nconst { isValidStatusCode, isValidUTF8 } = require('./validation');\n\nconst FastBuffer = Buffer[Symbol.species];\nconst promise = Promise.resolve();\n\n//\n// `queueMicrotask()` is not available in Node.js < 11.\n//\nconst queueTask =\n  typeof queueMicrotask === 'function' ? queueMicrotask : queueMicrotaskShim;\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\nconst DEFER_EVENT = 6;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */\n  constructor(options = {}) {\n    super();\n\n    this._allowSynchronousEvents = !!options.allowSynchronousEvents;\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\n    this._extensions = options.extensions || {};\n    this._isServer = !!options.isServer;\n    this._maxPayload = options.maxPayload | 0;\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\n    this[kWebSocket] = undefined;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._errored = false;\n    this._loop = false;\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = new FastBuffer(\n        buf.buffer,\n        buf.byteOffset + n,\n        buf.length - n\n      );\n\n      return new FastBuffer(buf.buffer, buf.byteOffset, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = new FastBuffer(\n          buf.buffer,\n          buf.byteOffset + n,\n          buf.length - n\n        );\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          this.getInfo(cb);\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          this.getPayloadLength16(cb);\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          this.getPayloadLength64(cb);\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          this.getData(cb);\n          break;\n        case INFLATING:\n        case DEFER_EVENT:\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    if (!this._errored) cb();\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getInfo(cb) {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      const error = this.createError(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n\n      cb(error);\n      return;\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      const error = this.createError(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n\n      cb(error);\n      return;\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        const error = this.createError(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (!this._fragmented) {\n        const error = this.createError(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n\n        cb(error);\n        return;\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        const error = this.createError(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n\n        cb(error);\n        return;\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        const error = this.createError(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (compressed) {\n        const error = this.createError(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (\n        this._payloadLength > 0x7d ||\n        (this._opcode === 0x08 && this._payloadLength === 1)\n      ) {\n        const error = this.createError(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n\n        cb(error);\n        return;\n      }\n    } else {\n      const error = this.createError(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n\n      cb(error);\n      return;\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        const error = this.createError(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n\n        cb(error);\n        return;\n      }\n    } else if (this._masked) {\n      const error = this.createError(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n\n      cb(error);\n      return;\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else this.haveLength(cb);\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getPayloadLength16(cb) {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    this.haveLength(cb);\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getPayloadLength64(cb) {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      const error = this.createError(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n\n      cb(error);\n      return;\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    this.haveLength(cb);\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  haveLength(cb) {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        const error = this.createError(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n\n        cb(error);\n        return;\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n\n      if (\n        this._masked &&\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\n      ) {\n        unmask(data, this._mask);\n      }\n    }\n\n    if (this._opcode > 0x07) {\n      this.controlMessage(data, cb);\n      return;\n    }\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its length is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    this.dataMessage(cb);\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          const error = this.createError(\n            RangeError,\n            'Max payload size exceeded',\n            false,\n            1009,\n            'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n          );\n\n          cb(error);\n          return;\n        }\n\n        this._fragments.push(buf);\n      }\n\n      this.dataMessage(cb);\n      if (this._state === GET_INFO) this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  dataMessage(cb) {\n    if (!this._fin) {\n      this._state = GET_INFO;\n      return;\n    }\n\n    const messageLength = this._messageLength;\n    const fragments = this._fragments;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragmented = 0;\n    this._fragments = [];\n\n    if (this._opcode === 2) {\n      let data;\n\n      if (this._binaryType === 'nodebuffer') {\n        data = concat(fragments, messageLength);\n      } else if (this._binaryType === 'arraybuffer') {\n        data = toArrayBuffer(concat(fragments, messageLength));\n      } else {\n        data = fragments;\n      }\n\n      //\n      // If the state is `INFLATING`, it means that the frame data was\n      // decompressed asynchronously, so there is no need to defer the event\n      // as it will be emitted asynchronously anyway.\n      //\n      if (this._state === INFLATING || this._allowSynchronousEvents) {\n        this.emit('message', data, true);\n        this._state = GET_INFO;\n      } else {\n        this._state = DEFER_EVENT;\n        queueTask(() => {\n          this.emit('message', data, true);\n          this._state = GET_INFO;\n          this.startLoop(cb);\n        });\n      }\n    } else {\n      const buf = concat(fragments, messageLength);\n\n      if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n        const error = this.createError(\n          Error,\n          'invalid UTF-8 sequence',\n          true,\n          1007,\n          'WS_ERR_INVALID_UTF8'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (this._state === INFLATING || this._allowSynchronousEvents) {\n        this.emit('message', buf, false);\n        this._state = GET_INFO;\n      } else {\n        this._state = DEFER_EVENT;\n        queueTask(() => {\n          this.emit('message', buf, false);\n          this._state = GET_INFO;\n          this.startLoop(cb);\n        });\n      }\n    }\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data, cb) {\n    if (this._opcode === 0x08) {\n      if (data.length === 0) {\n        this._loop = false;\n        this.emit('conclude', 1005, EMPTY_BUFFER);\n        this.end();\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          const error = this.createError(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n\n          cb(error);\n          return;\n        }\n\n        const buf = new FastBuffer(\n          data.buffer,\n          data.byteOffset + 2,\n          data.length - 2\n        );\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          const error = this.createError(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n\n          cb(error);\n          return;\n        }\n\n        this._loop = false;\n        this.emit('conclude', code, buf);\n        this.end();\n      }\n\n      this._state = GET_INFO;\n      return;\n    }\n\n    if (this._allowSynchronousEvents) {\n      this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n      this._state = GET_INFO;\n    } else {\n      this._state = DEFER_EVENT;\n      queueTask(() => {\n        this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n        this._state = GET_INFO;\n        this.startLoop(cb);\n      });\n    }\n  }\n\n  /**\n   * Builds an error object.\n   *\n   * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n   * @param {String} message The error message\n   * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n   *     `message`\n   * @param {Number} statusCode The status code\n   * @param {String} errorCode The exposed error code\n   * @return {(Error|RangeError)} The error\n   * @private\n   */\n  createError(ErrorCtor, message, prefix, statusCode, errorCode) {\n    this._loop = false;\n    this._errored = true;\n\n    const err = new ErrorCtor(\n      prefix ? `Invalid WebSocket frame: ${message}` : message\n    );\n\n    Error.captureStackTrace(err, this.createError);\n    err.code = errorCode;\n    err[kStatusCode] = statusCode;\n    return err;\n  }\n}\n\nmodule.exports = Receiver;\n\n/**\n * A shim for `queueMicrotask()`.\n *\n * @param {Function} cb Callback\n */\nfunction queueMicrotaskShim(cb) {\n  promise.then(cb).catch(throwErrorNextTick);\n}\n\n/**\n * Throws an error.\n *\n * @param {Error} err The error to throw\n * @private\n */\nfunction throwError(err) {\n  throw err;\n}\n\n/**\n * Throws an error in the next tick.\n *\n * @param {Error} err The error to throw\n * @private\n */\nfunction throwErrorNextTick(err) {\n  process.nextTick(throwError, err);\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex\" }] */\n\n'use strict';\n\nconst { Duplex } = require('stream');\nconst { randomFillSync } = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst { EMPTY_BUFFER } = require('./constants');\nconst { isValidStatusCode } = require('./validation');\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\n\nconst kByteLength = Symbol('kByteLength');\nconst maskBuffer = Buffer.alloc(4);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {Duplex} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */\n  constructor(socket, extensions, generateMask) {\n    this._extensions = extensions || {};\n\n    if (generateMask) {\n      this._generateMask = generateMask;\n      this._maskBuffer = Buffer.alloc(4);\n    }\n\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {(Buffer|String)} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {(Buffer|String)[]} The framed data\n   * @public\n   */\n  static frame(data, options) {\n    let mask;\n    let merge = false;\n    let offset = 2;\n    let skipMasking = false;\n\n    if (options.mask) {\n      mask = options.maskBuffer || maskBuffer;\n\n      if (options.generateMask) {\n        options.generateMask(mask);\n      } else {\n        randomFillSync(mask, 0, 4);\n      }\n\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n      offset = 6;\n    }\n\n    let dataLength;\n\n    if (typeof data === 'string') {\n      if (\n        (!options.mask || skipMasking) &&\n        options[kByteLength] !== undefined\n      ) {\n        dataLength = options[kByteLength];\n      } else {\n        data = Buffer.from(data);\n        dataLength = data.length;\n      }\n    } else {\n      dataLength = data.length;\n      merge = options.mask && options.readOnly && !skipMasking;\n    }\n\n    let payloadLength = dataLength;\n\n    if (dataLength >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (dataLength > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(dataLength, 2);\n    } else if (payloadLength === 127) {\n      target[2] = target[3] = 0;\n      target.writeUIntBE(dataLength, 4, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (skipMasking) return [target, data];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, dataLength);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, dataLength);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    const options = {\n      [kByteLength]: buf.length,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x08,\n      readOnly: false,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, buf, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(buf, options), cb);\n    }\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x09,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x0a,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = byteLength >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        [kByteLength]: byteLength,\n        fin: options.fin,\n        generateMask: this._generateMask,\n        mask: options.mask,\n        maskBuffer: this._maskBuffer,\n        opcode,\n        readOnly,\n        rsv1\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n      } else {\n        this.dispatch(data, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(\n        Sender.frame(data, {\n          [kByteLength]: byteLength,\n          fin: options.fin,\n          generateMask: this._generateMask,\n          mask: options.mask,\n          maskBuffer: this._maskBuffer,\n          opcode,\n          readOnly,\n          rsv1: false\n        }),\n        cb\n      );\n    }\n  }\n\n  /**\n   * Dispatches a message.\n   *\n   * @param {(Buffer|String)} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += options[kByteLength];\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        if (typeof cb === 'function') cb(err);\n\n        for (let i = 0; i < this._queue.length; i++) {\n          const params = this._queue[i];\n          const callback = params[params.length - 1];\n\n          if (typeof callback === 'function') callback(err);\n        }\n\n        return;\n      }\n\n      this._bufferedBytes -= options[kByteLength];\n      this._deflating = false;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[3][kByteLength];\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[3][kByteLength];\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n","'use strict';\n\nconst { Duplex } = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n","'use strict';\n\nconst { isUtf8 } = require('buffer');\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  isValidStatusCode,\n  isValidUTF8: _isValidUTF8,\n  tokenChars\n};\n\nif (isUtf8) {\n  module.exports.isValidUTF8 = function (buf) {\n    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\n  };\n} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {\n  try {\n    const isValidUTF8 = require('utf-8-validate');\n\n    module.exports.isValidUTF8 = function (buf) {\n      return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst http = require('http');\nconst { Duplex } = require('stream');\nconst { createHash } = require('crypto');\n\nconst extension = require('./extension');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst subprotocol = require('./subprotocol');\nconst WebSocket = require('./websocket');\nconst { GUID, kWebSocket } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n   *     automatically send a pong in response to a ping\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      allowSynchronousEvents: false,\n      autoPong: true,\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      WebSocket,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key = req.headers['sec-websocket-key'];\n    const version = +req.headers['sec-websocket-version'];\n\n    if (req.method !== 'GET') {\n      const message = 'Invalid HTTP method';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\n      return;\n    }\n\n    if (req.headers.upgrade.toLowerCase() !== 'websocket') {\n      const message = 'Invalid Upgrade header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (!key || !keyRegex.test(key)) {\n      const message = 'Missing or invalid Sec-WebSocket-Key header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (version !== 8 && version !== 13) {\n      const message = 'Missing or invalid Sec-WebSocket-Version header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (!this.shouldHandle(req)) {\n      abortHandshake(socket, 400);\n      return;\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Protocol header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        const message =\n          'Invalid or unacceptable Sec-WebSocket-Extensions header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new this.options.WebSocket(null, undefined, this.options);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      allowSynchronousEvents: this.options.allowSynchronousEvents,\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {Duplex} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  //\n  // The socket is writable unless the user destroyed or ended it before calling\n  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\n  // error. Handling this does not make much sense as the worst that can happen\n  // is that some of the data written by the user might be discarded due to the\n  // call to `socket.end()` below, which triggers an `'error'` event that in\n  // turn causes the socket to be destroyed.\n  //\n  message = message || http.STATUS_CODES[code];\n  headers = {\n    Connection: 'close',\n    'Content-Type': 'text/html',\n    'Content-Length': Buffer.byteLength(message),\n    ...headers\n  };\n\n  socket.once('finish', socket.destroy);\n\n  socket.end(\n    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      Object.keys(headers)\n        .map((h) => `${h}: ${headers[h]}`)\n        .join('\\r\\n') +\n      '\\r\\n\\r\\n' +\n      message\n  );\n}\n\n/**\n * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\n * one listener for it, otherwise call `abortHandshake()`.\n *\n * @param {WebSocketServer} server The WebSocket server\n * @param {http.IncomingMessage} req The request object\n * @param {Duplex} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} message The HTTP response body\n * @private\n */\nfunction abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\n  if (server.listenerCount('wsClientError')) {\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\n\n    server.emit('wsClientError', err, socket, req);\n  } else {\n    abortHandshake(socket, code, message);\n  }\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex|Readable$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst { randomBytes, createHash } = require('crypto');\nconst { Duplex, Readable } = require('stream');\nconst { URL } = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = require('./event-target');\nconst { format, parse } = require('./extension');\nconst { toBuffer } = require('./buffer-util');\n\nconst closeTimeout = 30 * 1000;\nconst kAborted = Symbol('kAborted');\nconst protocolVersions = [8, 13];\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._extensions = {};\n    this._paused = false;\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._autoPong = options.autoPong;\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get isPaused() {\n    return this._paused;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      allowSynchronousEvents: options.allowSynchronousEvents,\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    this._sender = new Sender(socket, this._extensions, options.generateMask);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    //\n    // These methods may not be available if `socket` is just a `Duplex`.\n    //\n    if (socket.setTimeout) socket.setTimeout(0);\n    if (socket.setNoDelay) socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Pause the socket.\n   *\n   * @public\n   */\n  pause() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = true;\n    this._socket.pause();\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Resume the socket.\n   *\n   * @public\n   */\n  resume() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = false;\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'isPaused',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether any\n *     of the `'message'`, `'ping'`, and `'pong'` events can be emitted multiple\n *     times in the same tick\n * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n *     automatically send a pong in response to a ping\n * @param {Function} [options.finishRequest] A function which can be used to\n *     customize the headers of each http request before it is sent\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    allowSynchronousEvents: false,\n    autoPong: true,\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: 'GET',\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  websocket._autoPong = opts.autoPong;\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n  }\n\n  if (parsedUrl.protocol === 'http:') {\n    parsedUrl.protocol = 'ws:';\n  } else if (parsedUrl.protocol === 'https:') {\n    parsedUrl.protocol = 'wss:';\n  }\n\n  websocket._url = parsedUrl.href;\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isIpcUrl = parsedUrl.protocol === 'ws+unix:';\n  let invalidUrlMessage;\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {\n    invalidUrlMessage =\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", ' +\n      '\"http:\", \"https\", or \"ws+unix:\"';\n  } else if (isIpcUrl && !parsedUrl.pathname) {\n    invalidUrlMessage = \"The URL's pathname is empty\";\n  } else if (parsedUrl.hash) {\n    invalidUrlMessage = 'The URL contains a fragment identifier';\n  }\n\n  if (invalidUrlMessage) {\n    const err = new SyntaxError(invalidUrlMessage);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const request = isSecure ? https.request : http.request;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket'\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isIpcUrl) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req;\n\n  if (opts.followRedirects) {\n    if (websocket._redirects === 0) {\n      websocket._originalIpc = isIpcUrl;\n      websocket._originalSecure = isSecure;\n      websocket._originalHostOrSocketPath = isIpcUrl\n        ? opts.socketPath\n        : parsedUrl.host;\n\n      const headers = options && options.headers;\n\n      //\n      // Shallow copy the user provided options so that headers can be changed\n      // without mutating the original object.\n      //\n      options = { ...options, headers: {} };\n\n      if (headers) {\n        for (const [key, value] of Object.entries(headers)) {\n          options.headers[key.toLowerCase()] = value;\n        }\n      }\n    } else if (websocket.listenerCount('redirect') === 0) {\n      const isSameHost = isIpcUrl\n        ? websocket._originalIpc\n          ? opts.socketPath === websocket._originalHostOrSocketPath\n          : false\n        : websocket._originalIpc\n          ? false\n          : parsedUrl.host === websocket._originalHostOrSocketPath;\n\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\n        //\n        // Match curl 7.77.0 behavior and drop the following headers. These\n        // headers are also dropped when following a redirect to a subdomain.\n        //\n        delete opts.headers.authorization;\n        delete opts.headers.cookie;\n\n        if (!isSameHost) delete opts.headers.host;\n\n        opts.auth = undefined;\n      }\n    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n\n    req = websocket._req = request(opts);\n\n    if (websocket._redirects) {\n      //\n      // Unlike what is done for the `'upgrade'` event, no early exit is\n      // triggered here if the user calls `websocket.close()` or\n      // `websocket.terminate()` from a listener of the `'redirect'` event. This\n      // is because the user can also call `request.destroy()` with an error\n      // before calling `websocket.close()` or `websocket.terminate()` and this\n      // would result in an error being emitted on the `request` object with no\n      // `'error'` event listeners attached.\n      //\n      websocket.emit('redirect', websocket.url, req);\n    }\n  } else {\n    req = websocket._req = request(opts);\n  }\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req[kAborted]) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (e) {\n        const err = new SyntaxError(`Invalid URL: ${location}`);\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the\n    // `'upgrade'` event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    if (res.headers.upgrade.toLowerCase() !== 'websocket') {\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\n      return;\n    }\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      allowSynchronousEvents: opts.allowSynchronousEvents,\n      generateMask: opts.generateMask,\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n\n  if (opts.finishRequest) {\n    opts.finishRequest(req, websocket);\n  } else {\n    req.end();\n  }\n}\n\n/**\n * Emit the `'error'` and `'close'` events.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream[kAborted] = true;\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    process.nextTick(emitErrorAndClose, websocket, err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    process.nextTick(cb, err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  const websocket = this[kWebSocket];\n\n  if (!websocket.isPaused) websocket._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  websocket.emit('error', err);\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._autoPong) websocket.pong(data, !this._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The listener of the socket `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the socket `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the socket `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the socket `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n","module.exports = require(\"bufferutil\");","module.exports = require(\"utf-8-validate\");","module.exports = require(\"buffer\");","module.exports = require(\"constants\");","module.exports = require(\"crypto\");","module.exports = require(\"dns\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"stream\");","module.exports = require(\"tls\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"zlib\");","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(5237);\n"],"names":["module","exports","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBuffer","Buffer","hasBlob","Blob","BufferEncoder","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","UNSIGNED_LSHIFT_24","ARRAY_BUFFER_CONVERT_CHUNK","stringToUint8Array","data","dataLength","arrayBuf","ArrayBuffer","uint8Array","Uint8Array","int32ToStr","int32","strToUInt32","arrayBufferToString","ab","len","byteLength","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","uint8ArrayToString","format","undefined","uint8DataArray","result","toLowerCase","padStart","hexStringToUint8Array","int8ToStr","int8","strToInt8","int16ToStr","int16","strToInt16","int24ToStr","int24","strToInt24","strToInt32","int64ToStr","int64","high","low","strToUInt64","fromBits","substr","byteArrayToStr","byteArray","slice","strToByteArray","strToHexArray","Array","prototype","map","call","split","c","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","MessageTracing","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageOutcome","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","Baggage","TraceContext","TraceContextSetter","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","solace","_internal","Object","assign","PRINTABLE_LUT","tmp","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","dataLen","ccode","append","clear","parseSMFStream","Codec","Decode","decodeCompoundMessage","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","topicName","isString","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","TEMPORARY_QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","createTemporaryName","vrid","id","generateUUID","describe","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","this","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","encoding","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","NOEXPORT_PREFIX","index","isNoExport","SHARE_PREFIX","shareGroup","groupIndex","isShare","LEVEL_DELIMETER_LEN","indexOf","substring","LEVEL_DELIMETER","dispatchTopicIndex","parse","layers","parseLayers","constOffset","constResult","subscriptionStringParse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","SYNC_REPLICATION_INELIGIBLE","getSubcodeMappingInner","root","respErrorCode","respStr","codeMap","searchKey","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","requestEventCode","_requestEventCode","errorSubcode","superObj","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","p","setValues","key","enumName","instance","matches","filter","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","names","Set","isEnum","ofStrings","strings","ofNumbers","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","source","compoundKey","trim","rawPath","path","pathArr","concat","commonSource","keySource","reduce","traversePath","inplaceUnion","setA","setB","elem","inplaceDifference","delete","inplaceIntersection","has","isSuperset","subset","every","difference","intersection","union","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","DISABLED_ACTIONS","ignore","fail","direct","emits","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","emitSet","el","emitArray","buildFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","firstDirect","_onFirstDirectListener","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","isDirect","disableEmitter","cancel","newInterval","interval","onInterval","timerRef","setInterval","clearInterval","newTimeout","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","legacyInstance","v10Instance","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","profile","_profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","LOG_DEBUG","reset","_getInitializeCount","profiles","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","LOG_TRACE","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","canAck","disposed","flowId","session","_session","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","innerState","entryPointName","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","_onEventCompletion","getCurrentState","currentState","evt","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","addGlobalFuncs","toUpperCase","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","newLevel","Binding","formatter","_formatter","genericFunction","targetSelf","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","global","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","settlementOutcome","exists","ACCEPTED","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evicting","front","firstIndex","rawIndex","lastIndex","callback","updateAckState","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","flows","reconnectingFlows","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_hasAutoAckSupport","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","emitBindFailed","CONNECT_FAILED_ERROR","verifyNackSettlementOutcomesSupport","requiredSettlementOutcomes","settlementOutcomes","FAILED","REJECTED","isCapable","AD_APP_ACK_FAILED","outcomeNotSupportedError","checkCapabilitiesChoicePoint","MESSAGE_REPLAY","topicEndpointSubscription","destination","SHARED_SUBSCRIPTIONS","verifyEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","checkCapabilitiesChoicePointOnRebind","externalTransition","Reconnecting","RBindSent","_addEventToEmit","activeIndicationEnabled","_requestStartDispatch","_requestStopDispatch","requestStopDispatchFSM","transitionToUnbound","_dispose","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","handleAccidentalBind","connectTimeoutInMsecs","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","partitionGroupId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","x","getAccessType","EXCLUSIVE","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","respEvent","BIND_SENT","UnbindSent","FlowUp","reconnectAttempts","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","emitRebindFailed","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","_setTransportAckTimer","dupAckRanges","_sendAck","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","isAutoAcked","applicationSettle","messageOutcome","RX_SETTLE_FAILED","RX_SETTLE_REJECTED","RX_SETTLE_ACCEPTED","RX_ACKED","oldAckRanges","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","allMessageOutcomes","currentRangeLength","totalRangeLen","MAX_CLIENT_ACK_RANGES","bareRanges","hasAnyBareRanges","range","forceTransportAck","failedBareRanges","rejectedBareRanges","g","setAcked","ackRange","maxWindowSize","Math","Number","POSITIVE_INFINITY","hasAutoAckSupport","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_requiredSettlementOutcomes","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","updateQueueSubscription","success","subCode","respCode","respText","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","_autoAcknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","lastSent","setLastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","publisherId","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","ConnectReason","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","MessageTracingSupport","isStringOrNothing","getBaggage","_baggage","setBaggage","_setBaggage","isNumber","isBoolean","_traceId","_spanId","_isSampled","_traceState","_version","_clonedContextSetter","_setSpanId","_setTraceId","_setSampled","_setTraceState","_setVersion","TRACE_ID_BYTES_LENGTH","SPAN_ID_BYTES_LENGTH","version","setVersion","traceId","setTraceId","spanId","setSpanId","isSampled","setSampled","traceState","setTraceState","fromTraceContext","traceContextValue","traceContextBuffer","traceContextBytes","bytesRead","traceContextSetter","firstByte","byte1","DataView","getUint8","traceId16Bytes","spanId8Bytes","traceStateLengthBytes","traceStateLength","getUint16","traceStateBytes","toClone","newContextSetter","getSpanId","getTraceId","getIsSampled","getTraceState","getVersion","MAX_TRACE_STATE_LENGTH","getTruncatedTraceState","_standardTraceStateTruncation","getEncodedTraceContext","contentBuffer","offsetPos","contentBufferDataView","setUint8","traceId16byte","spanId8byte","setUint16","truncatedTraceState","Uint16Array","maxTraceStateLength","ignoredMembers","traceStateBuilderArray","traceStateBuilderArrayLength","listMembers","listMember","currentMemberLength","currentMember","getTraceContextSetter","_traceContextSetter","getTransportContext","_transportContext","_setTransportContext","contextSetter","getCreationContext","_creationContext","_setCreationContext","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","fpHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","getUserCos","fpDeliveryMode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","mdu","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","fpXmlMetadata","xmlMetadata","getXmlMetadata","fpTracingCreationContext","isPresent","fpTracingTransportContext","fpTracingBaggage","MessageDumpStandardProviderLib","MessageDumpState","dumpProviders","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","provider","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isInstanceOfOrNothing","isNumberOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","settle","messageSettlementOutcome","doesConsumerSupportOutcome","isSettled","_validateBeforeAcknowledge","acknowledge","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","binaryMetadataChunk","_binaryMetaChunk","meta","_smfHeader","hasAutoSequenceNumber","hasAutoSenderTimestamp","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","setTransportContext","validFlags","f","clearExtendedVarLenParams","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","ReplayStartType","RMID_VERSION_1_PREFIX","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","hexString","toBytesBE","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","queueSpec","maybeAdaptFromDestination","_durable","NONEXCLUSIVE","valTopicString","createFromSpec","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","encodeHeader","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","int48ToStr","encodeStream","C_2_48","pow","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","onebyte","elemType","lenBytes","elemLen","ParseFloat","readFloatBE","readDoubleBE","createField","readUIntBE","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","datalen","mapObj","keyFieldHeader","parseFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseFloatField","parseIntegerField","parseMapAt","parseStreamAt","parseDestination","fieldHeader","elemValLen","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","VAR_LEN_EXT_PARAM","UNBIND_ACK","BR_ERRORID","PQ","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","GlobalContext","sessionCounter","idCounter","RandId","random","toFixed","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","dns","dnsLookupPromise","url","Promise","host","hostname","lookup","address","resolved","code","errno","syscall","urls","cb","promises","all","then","catch","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","connectWaitTimeInMsecs","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","sessionEventCode","_sessionEventCode","errorSubCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","SessionFSMEvent","fields","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","SessionFSM","stats","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","updateTransportCompression","newTransport","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","sendConsumerSessionUpEvent","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","match","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","SessionPropertiesLib","valArrayIsMember","valArrayOfString","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valSslExcludedProtocols","supported","SUPPORTED_SSL_PROTOCOLS","protocol","prtcl","valSslCipherSuites","string","empty","ciphers","SUPPORTED_CIPHER_SUITES","cipher","valSslTrustedCommonNameList","valUrlList","valArray","included","validatePropsSupportedByTransport","transportProtocol","nonHttpPropsSet","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","isHttpTransport","propNames","useSsl","regex","arrayLength","currententry","matchUrl","SessionPropertiesValidator","webTransportProtocolList","useClientCert","authenticationScheme","equal","idToken","accessToken","WS_BINARY","sslValidateCertificate","sslPfxSet","sslPfx","sslPrivateKeySet","sslPrivateKey","sslCertSet","sslCertificate","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","NodeSslConstants","DEFAULT_CIPHER_SUITES","SessionPropertiesBase","_tpProtocol","_transportProtocolList","_tpDowngradeTimeout","transportProtocolInUse","_tpProtocolInUse","_setTransportProtocolInUse","webTransportProtocolInUse","_setWebTransportProtocolInUse","transportContentType","_tpContentType","sslExcludedProtocols","_sslExcludedProtocols","sslCipherSuites","_sslCipherSuites","_sslValidateCert","env","NODE_TLS_REJECT_UNAUTHORIZED","sslTrustStores","_sslTrustStores","sslTrustedCommonNameList","_sslTrustedCNList","_sslPfx","sslPfxPassword","_sslPfxPasswd","_sslPrivateKey","sslPrivateKeyPassword","_sslPrivateKeyPasswd","_sslCertificate","sslProtocol","_sslProtocol","_compressionLevel","_sslConnectionDowngradeTo","_lendsInspect","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_publisherProperties","makeDefaults","_authScheme","_accessToken","_idToken","issuerIdentifier","_issuerIdentifier","_url","password","_password","userName","_userName","clientName","_clientName","applicationDescription","_appDesc","vpnName","_vpnName","vpnNameInUse","_connectTimeout","transportCount","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","generateSendTimestamps","_genSendTimestamps","generateReceiveTimestamps","_genReceiveTimestamps","includeSenderId","_includeSenderId","generateSequenceNumber","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","p2pInboxInUse","userIdentification","_setUserIdentification","subscriberLocalPriority","_subLocalPriority","subscriberNetworkPriority","_subNetworkPriority","ignoreDuplicateSubscriptionError","_ignoreDupSubError","ignoreSubscriptionNotFoundError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","sendBufferMaxSize","_sendBufferMaxSize","_assumedMaxAdSize","maxWebPayload","_maxWebPayload","SslProtocolExcludeConstantMap","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","transportProtocolDefaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","handleDTEUnsubscribeResponse","updateProperty","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","smpResp","resp","afterRemoveCallback","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","_failOnExtendedVariableLengthProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","getSessionState","getTransportProtocol","capabilityType","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","browserProperties","destinationType","vrn","localName","operationEnum","allow","anything","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","now","sequenceNumber","noSequenceNumber","senderId","noSenderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","encAdp0Param","uh","paramtype","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","outcome","paramLength","encAdpUTF8NTParam","byte2","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramValueLen","paramLen","smfParam","addParameter","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","settlementRanges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","bag","ctx","_baggageObj","payloadPosition","headerLength","payloadLength","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","pm_ts_transport_context","payloadOffset","cs","pm_content_summary","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","adaptSmfToMessage","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","FORCED_LENGTH_MODE","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","encodedSdtPayload","sdtPreamble","sdtStreamContainer","adaptMessageToBinaryMeta","binaryMetaSMF","asEncodedSmf","MAX_24BITS","adaptMessageToSmf","smfHeaderIn","payloadBytes","adaptMessageToSmf_payloadFinalize","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","adaptMessageToSmf_nonPayload","maskValues","bitRange","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","TS_TRANSPORT_CONTEXT","SIX","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeCount","lenMap","idx","lightMap","lenCount","ContentSummaryDecodeMap","FIVE","delmode","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","forcedLengthMode","lengthModeMap","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","isSMFHeaderValid","parseSMFExtendedStream","streamLen","pUH","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","isSMFAvailable","remaining","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parseTopicQueueOffsets","parsedTopicOffsets","pStart","pType","pValueLen","pLen","pm_ad_publisher_id","parsedResponse","parseResponseParam","SUB_ID_LIST","GENERIC_ATTACHMENT","parseDeliveryMode","AD_TOPICSEQUENCE_NUMBER","contentSummary","parseContentSummary","AD_FLOWREDELIVERED_FLAG","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","hasNackSupport","endpointBytes","endpointType","rsValue","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","allOutcomes","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","prmGetDtoPriorityValue","dto","local","network","prmParseDtoPriorityValue","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","capLen","sprop","compressedTLS","plaintextTLS","cc","isClientCert","DELIVERTOONEPRIORITY","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","mode","formattedDate","SSL_DOWNGRADE","clientCaps","clientCapList","highestCap","capBits","cap","clientCapsToStr","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","PARTITION_KEY_HASH","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","logPeekBuffer","bufPair","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","fs","SolclientSessionLib","NodeTLSOptsMixin","checkCertificateCNs","cert","_props","valid","cn","createTLSOptions","constMap","trimmed","tsContents","tsFile","readFileSync","CompressedTransport","TcpRawTransport","TcpTlsTransport","TlsOnlyTransport","Duplex","ShuntableTransport","_shunted","_dontEnd","_underlyingTransport","underlyingTransport","_interimBuffer","_transportDrained","_connected","shunt","dontEnd","_write","INVALID_STATE_FOR_OPERATION","_read","unpause","pause","eventCB","onConnect","onError","onClose","onDrain","resendBuffer","forceFailure","setNoDelay","arg","shunted","zlib","TransportBase","TransportSessionEvent","TransportSessionState","client","_clientstats","_waitForSocketDrain","_waitForCompressorDrain","_flushCallback","_socketDrained","_compressorDrained","_state","_socketError","_transportSession","_compressor","_decompressor","setClientStats","setUnderlyingTransport","newUnderlyingTransoprt","WAITING_FOR_DESTROY","write","onData","_client","Z_SYNC_FLUSH","_eventCB","onZlibError","_destroy","CONNECTION_FAILED","stage2destroy","onOpen","WAITING_FOR_CREATE","highWaterMark","createDeflateRaw","createInflateRaw","sendCompressed","onCompressorDrain","onerrorStub","unpipe","_hadError","close","resume","prevCallback","net","TransportClientStats","_canSendNeeded","_drained","_rawSocket","rehome","parseHostPort","urlString","port","urlParsed","_ssl","originalSocket","hadError","errorMsg","Socket","bufferSize","tls","_tlsSocket","tlsOptions","socket","getUnderlyingTransport","_shuntableTransport","duplexOptions","tlsShutdown","tlsShutdownStage2","transportProps","immediate","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","WebTransportCapabilities","WebTransport","getId","compressingLayer","plaintextTransport","tlsLayer","uncompressedTransport","encryptedTransport","compress","precallback","WebTransportsLib","lutTransportProtocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","useSSL","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","tsEventCode","_transportEventCode","_sid","transportEventCode","getResponseCode","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","prependOrigin","location","origin","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","browserSupportsStreamingResponse","xhr","check","onprogress","WebTransportSessionBase","PacketReadState","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","navigator","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_queuedDataSize","initPreformattedHeaders","sendQueuedData","getQueuedDataToSend","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","setRequestHeader","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","xhrBinary","streaming","WebSocketTransportSession","browserSupportsBinaryWebSockets","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","bytesAllowed","getBufferedAmount","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_lastDowngradeSucceeded","_socket","_sender","WebSocketCloseCodes","http","https","MyWebSocket","WebSocket","createWebSocketOptions","onDrainCallback","Agent","keepAlive","wsAgent","origCreateConnection","createConnection","opts","adaptURL","msgBuf","wasClean","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","WAITING_FOR_CONNECT","onMessage","_socketOptions","ondrain","binaryType","onopen","onmessage","onclose","onerror","force","bufferAllow","maxPayloadBytes","validator","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","typedesc","cloneObj","acc","_instanceof","nativeMap","nativeSet","nativePromise","depth","allParents","allChildren","useBuffer","_clone","proto","reject","__isArray","__isRegExp","RegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","__objToStr","regExpOptions","ignoreCase","multiline","clonePrototype","emptyCloneFunc","NODE_OS_TYPES","Darwin","Windows_NT","NODE_PROCESS","os","ostype","osname","nodeVersionStr","release","arch","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","FORMATTED_DATE","pad","SUMMARY","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","elseFn","when","condition","unless","NO_OBJ","subcodeSummary","got","expectedStr","gotStr","validatorArgs","validateError","typename","memberOfEnum","isMember","memberOf","objectValues","isNumberOrNull","isRangeCompare","isStringOrNull","createWebSocketStream","Server","Receiver","Sender","WebSocketServer","EMPTY_BUFFER","FastBuffer","Symbol","species","_mask","mask","_unmask","totalLength","toArrayBuffer","toBuffer","readOnly","isView","unmask","WS_NO_BUFFER_UTIL","bufferUtil","BINARY_TYPES","alloc","GUID","kForOnEventAttribute","kListener","kStatusCode","kWebSocket","NOOP","kCode","kData","kError","kMessage","kReason","kTarget","kType","kWasClean","Event","CloseEvent","ErrorEvent","MessageEvent","EventTarget","addEventListener","handler","listeners","wrapper","isBinary","callListener","_closeFrameReceived","_closeFrameSent","removeEventListener","thisArg","tokenChars","configurations","offers","extensionName","paramName","mustUnescape","isEscaping","inQuotes","SyntaxError","token","kDone","kRun","concurrency","jobs","job","Limiter","TRAILER","kPerMessageDeflate","kTotalLength","kCallback","kBuffers","zlibLimiter","deflateOnData","inflateOnData","_maxPayload","RangeError","inflateOnError","_inflate","isServer","maxPayload","_options","_threshold","threshold","_isServer","_deflate","concurrencyLimit","offer","serverNoContextTakeover","server_no_context_takeover","clientNoContextTakeover","client_no_context_takeover","serverMaxWindowBits","server_max_window_bits","clientMaxWindowBits","client_max_window_bits","accept","normalizeParams","acceptAsServer","acceptAsClient","cleanup","accepted","num","isInteger","TypeError","decompress","fin","_decompress","_compress","windowBits","Z_DEFAULT_WINDOWBITS","zlibInflateOptions","_readableState","endEmitted","zlibDeflateOptions","Writable","PerMessageDeflate","isValidStatusCode","isValidUTF8","promise","queueTask","queueMicrotask","throwErrorNextTick","throwError","nextTick","_allowSynchronousEvents","allowSynchronousEvents","_binaryType","_extensions","_skipUTF8Validation","skipUTF8Validation","_bufferedBytes","_buffers","_compressed","_payloadLength","_fragmented","_masked","_fin","_opcode","_totalPayloadLength","_messageLength","_fragments","_errored","_loop","startLoop","consume","dst","getInfo","getPayloadLength16","getPayloadLength64","getMask","getData","createError","compressed","haveLength","controlMessage","fragments","ErrorCtor","statusCode","errorCode","randomFillSync","applyMask","kByteLength","maskBuffer","generateMask","_generateMask","_maskBuffer","_firstFragment","_deflating","frame","merge","skipMasking","opcode","rsv1","writeUInt16BE","writeUIntBE","enqueue","sendFrame","ping","pong","perMessageDeflate","binary","destroyed","dequeue","Reflect","cork","uncork","emitClose","duplexOnEnd","_writableState","finished","duplexOnError","ws","terminateOnDestroy","duplex","autoDestroy","objectMode","writableObjectMode","CLOSED","called","_final","isPaused","protocols","isUtf8","_isValidUTF8","WS_NO_UTF_8_VALIDATE","createHash","subprotocol","keyRegex","server","socketOnError","abortHandshake","headers","STATUS_CODES","Connection","abortHandshakeOrEmitwsClientError","autoPong","handleProtocols","clientTracking","verifyClient","noServer","backlog","_server","createServer","res","body","writeHead","listen","emitConnection","_removeListeners","addListeners","listening","upgrade","head","handleUpgrade","clients","_shouldEmitClose","shouldHandle","method","secWebSocketProtocol","secWebSocketExtensions","secure","authorized","encrypted","verified","completeUpgrade","readable","update","digest","_protocol","setSocket","randomBytes","Readable","URL","kAborted","protocolVersions","readyStates","subprotocolRegex","_closeCode","_closeMessage","_closeTimer","_paused","_readyState","_receiver","_bufferedAmount","_redirects","initAsClient","_autoPong","bufferedAmount","receiver","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","unshift","socketOnClose","socketOnData","socketOnEnd","OPEN","CLOSING","errorEmitted","_req","sendAfterClose","needDrain","websocket","protocolVersion","followRedirects","maxRedirects","socketPath","parsedUrl","isSecure","isIpcUrl","invalidUrlMessage","pathname","hash","emitErrorAndClose","defaultPort","protocolSet","tlsConnect","netConnect","Upgrade","search","handshakeTimeout","Origin","username","auth","parts","_originalIpc","_originalSecure","_originalHostOrSocketPath","entries","isSameHost","authorization","cookie","addr","serverProt","protError","extensionNames","finishRequest","servername","isIP","setHeader","receiverOnFinish","read","property","require","wasm","WebAssembly","Instance","Module","unsigned","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","mul","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","ceil","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}